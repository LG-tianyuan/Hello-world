
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 00 15 00       	mov    $0x150000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 00 15 c0       	mov    %eax,0xc0150000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 f0 14 c0       	mov    $0xc014f000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba 24 63 15 c0       	mov    $0xc0156324,%edx
c0100041:	b8 00 20 15 c0       	mov    $0xc0152000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100055:	00 
c0100056:	c7 04 24 00 20 15 c0 	movl   $0xc0152000,(%esp)
c010005d:	e8 05 56 01 00       	call   c0115667 <memset>

    cons_init();                // init the console
c0100062:	e8 98 17 00 00       	call   c01017ff <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100067:	c7 45 f4 00 58 11 c0 	movl   $0xc0115800,-0xc(%ebp)
    cprintf("%s\n\n", message);
c010006e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100071:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100075:	c7 04 24 1c 58 11 c0 	movl   $0xc011581c,(%esp)
c010007c:	e8 f0 02 00 00       	call   c0100371 <cprintf>

    print_kerninfo();
c0100081:	e8 f8 09 00 00       	call   c0100a7e <print_kerninfo>

    grade_backtrace();
c0100086:	e8 a7 00 00 00       	call   c0100132 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010008b:	e8 8e 57 00 00       	call   c010581e <pmm_init>

    pic_init();                 // init interrupt controller
c0100090:	e8 48 21 00 00       	call   c01021dd <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100095:	e8 9a 22 00 00       	call   c0102334 <idt_init>

    vmm_init();                 // init virtual memory management
c010009a:	e8 48 87 00 00       	call   c01087e7 <vmm_init>
    sched_init();               // init scheduler
c010009f:	e8 f5 e5 00 00       	call   c010e699 <sched_init>
    proc_init();                // init process table
c01000a4:	e8 96 de 00 00       	call   c010df3f <proc_init>
    
    ide_init();                 // init ide devices
c01000a9:	e8 82 18 00 00       	call   c0101930 <ide_init>
    swap_init();                // init swap
c01000ae:	e8 0c 6e 00 00       	call   c0106ebf <swap_init>
    fs_init();                  // init fs
c01000b3:	e8 9e b0 00 00       	call   c010b156 <fs_init>
    
    clock_init();               // init clock interrupt
c01000b8:	e8 f8 0e 00 00       	call   c0100fb5 <clock_init>
    intr_enable();              // enable irq interrupt
c01000bd:	e8 89 20 00 00       	call   c010214b <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000c2:	e8 86 e0 00 00       	call   c010e14d <cpu_idle>

c01000c7 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c7:	55                   	push   %ebp
c01000c8:	89 e5                	mov    %esp,%ebp
c01000ca:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000cd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000d4:	00 
c01000d5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000dc:	00 
c01000dd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000e4:	e8 e3 0d 00 00       	call   c0100ecc <mon_backtrace>
}
c01000e9:	c9                   	leave  
c01000ea:	c3                   	ret    

c01000eb <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000eb:	55                   	push   %ebp
c01000ec:	89 e5                	mov    %esp,%ebp
c01000ee:	53                   	push   %ebx
c01000ef:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000f2:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000f5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000f8:	8d 55 08             	lea    0x8(%ebp),%edx
c01000fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01000fe:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0100102:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100106:	89 54 24 04          	mov    %edx,0x4(%esp)
c010010a:	89 04 24             	mov    %eax,(%esp)
c010010d:	e8 b5 ff ff ff       	call   c01000c7 <grade_backtrace2>
}
c0100112:	83 c4 14             	add    $0x14,%esp
c0100115:	5b                   	pop    %ebx
c0100116:	5d                   	pop    %ebp
c0100117:	c3                   	ret    

c0100118 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100118:	55                   	push   %ebp
c0100119:	89 e5                	mov    %esp,%ebp
c010011b:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010011e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100121:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100125:	8b 45 08             	mov    0x8(%ebp),%eax
c0100128:	89 04 24             	mov    %eax,(%esp)
c010012b:	e8 bb ff ff ff       	call   c01000eb <grade_backtrace1>
}
c0100130:	c9                   	leave  
c0100131:	c3                   	ret    

c0100132 <grade_backtrace>:

void
grade_backtrace(void) {
c0100132:	55                   	push   %ebp
c0100133:	89 e5                	mov    %esp,%ebp
c0100135:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100138:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c010013d:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100144:	ff 
c0100145:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100149:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100150:	e8 c3 ff ff ff       	call   c0100118 <grade_backtrace0>
}
c0100155:	c9                   	leave  
c0100156:	c3                   	ret    

c0100157 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100157:	55                   	push   %ebp
c0100158:	89 e5                	mov    %esp,%ebp
c010015a:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010015d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100160:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100163:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100166:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100169:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010016d:	0f b7 c0             	movzwl %ax,%eax
c0100170:	83 e0 03             	and    $0x3,%eax
c0100173:	89 c2                	mov    %eax,%edx
c0100175:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c010017a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010017e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100182:	c7 04 24 21 58 11 c0 	movl   $0xc0115821,(%esp)
c0100189:	e8 e3 01 00 00       	call   c0100371 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010018e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100192:	0f b7 d0             	movzwl %ax,%edx
c0100195:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c010019a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010019e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001a2:	c7 04 24 2f 58 11 c0 	movl   $0xc011582f,(%esp)
c01001a9:	e8 c3 01 00 00       	call   c0100371 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001ae:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001b2:	0f b7 d0             	movzwl %ax,%edx
c01001b5:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c01001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001c2:	c7 04 24 3d 58 11 c0 	movl   $0xc011583d,(%esp)
c01001c9:	e8 a3 01 00 00       	call   c0100371 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001ce:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001d2:	0f b7 d0             	movzwl %ax,%edx
c01001d5:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c01001da:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001e2:	c7 04 24 4b 58 11 c0 	movl   $0xc011584b,(%esp)
c01001e9:	e8 83 01 00 00       	call   c0100371 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001ee:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001f2:	0f b7 d0             	movzwl %ax,%edx
c01001f5:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c01001fa:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100202:	c7 04 24 59 58 11 c0 	movl   $0xc0115859,(%esp)
c0100209:	e8 63 01 00 00       	call   c0100371 <cprintf>
    round ++;
c010020e:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c0100213:	83 c0 01             	add    $0x1,%eax
c0100216:	a3 00 20 15 c0       	mov    %eax,0xc0152000
}
c010021b:	c9                   	leave  
c010021c:	c3                   	ret    

c010021d <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010021d:	55                   	push   %ebp
c010021e:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100220:	5d                   	pop    %ebp
c0100221:	c3                   	ret    

c0100222 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100222:	55                   	push   %ebp
c0100223:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100225:	5d                   	pop    %ebp
c0100226:	c3                   	ret    

c0100227 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100227:	55                   	push   %ebp
c0100228:	89 e5                	mov    %esp,%ebp
c010022a:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010022d:	e8 25 ff ff ff       	call   c0100157 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100232:	c7 04 24 68 58 11 c0 	movl   $0xc0115868,(%esp)
c0100239:	e8 33 01 00 00       	call   c0100371 <cprintf>
    lab1_switch_to_user();
c010023e:	e8 da ff ff ff       	call   c010021d <lab1_switch_to_user>
    lab1_print_cur_status();
c0100243:	e8 0f ff ff ff       	call   c0100157 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100248:	c7 04 24 88 58 11 c0 	movl   $0xc0115888,(%esp)
c010024f:	e8 1d 01 00 00       	call   c0100371 <cprintf>
    lab1_switch_to_kernel();
c0100254:	e8 c9 ff ff ff       	call   c0100222 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100259:	e8 f9 fe ff ff       	call   c0100157 <lab1_print_cur_status>
}
c010025e:	c9                   	leave  
c010025f:	c3                   	ret    

c0100260 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100260:	55                   	push   %ebp
c0100261:	89 e5                	mov    %esp,%ebp
c0100263:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100266:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010026a:	74 13                	je     c010027f <readline+0x1f>
        cprintf("%s", prompt);
c010026c:	8b 45 08             	mov    0x8(%ebp),%eax
c010026f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100273:	c7 04 24 a7 58 11 c0 	movl   $0xc01158a7,(%esp)
c010027a:	e8 f2 00 00 00       	call   c0100371 <cprintf>
    }
    int i = 0, c;
c010027f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100286:	e8 6e 01 00 00       	call   c01003f9 <getchar>
c010028b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010028e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100292:	79 07                	jns    c010029b <readline+0x3b>
            return NULL;
c0100294:	b8 00 00 00 00       	mov    $0x0,%eax
c0100299:	eb 79                	jmp    c0100314 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010029b:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010029f:	7e 28                	jle    c01002c9 <readline+0x69>
c01002a1:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01002a8:	7f 1f                	jg     c01002c9 <readline+0x69>
            cputchar(c);
c01002aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002ad:	89 04 24             	mov    %eax,(%esp)
c01002b0:	e8 e2 00 00 00       	call   c0100397 <cputchar>
            buf[i ++] = c;
c01002b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002b8:	8d 50 01             	lea    0x1(%eax),%edx
c01002bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002be:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002c1:	88 90 20 20 15 c0    	mov    %dl,-0x3feadfe0(%eax)
c01002c7:	eb 46                	jmp    c010030f <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002c9:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002cd:	75 17                	jne    c01002e6 <readline+0x86>
c01002cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002d3:	7e 11                	jle    c01002e6 <readline+0x86>
            cputchar(c);
c01002d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002d8:	89 04 24             	mov    %eax,(%esp)
c01002db:	e8 b7 00 00 00       	call   c0100397 <cputchar>
            i --;
c01002e0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002e4:	eb 29                	jmp    c010030f <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002e6:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002ea:	74 06                	je     c01002f2 <readline+0x92>
c01002ec:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002f0:	75 1d                	jne    c010030f <readline+0xaf>
            cputchar(c);
c01002f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f5:	89 04 24             	mov    %eax,(%esp)
c01002f8:	e8 9a 00 00 00       	call   c0100397 <cputchar>
            buf[i] = '\0';
c01002fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100300:	05 20 20 15 c0       	add    $0xc0152020,%eax
c0100305:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c0100308:	b8 20 20 15 c0       	mov    $0xc0152020,%eax
c010030d:	eb 05                	jmp    c0100314 <readline+0xb4>
        }
    }
c010030f:	e9 72 ff ff ff       	jmp    c0100286 <readline+0x26>
}
c0100314:	c9                   	leave  
c0100315:	c3                   	ret    

c0100316 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100316:	55                   	push   %ebp
c0100317:	89 e5                	mov    %esp,%ebp
c0100319:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010031c:	8b 45 08             	mov    0x8(%ebp),%eax
c010031f:	89 04 24             	mov    %eax,(%esp)
c0100322:	e8 04 15 00 00       	call   c010182b <cons_putc>
    (*cnt) ++;
c0100327:	8b 45 0c             	mov    0xc(%ebp),%eax
c010032a:	8b 00                	mov    (%eax),%eax
c010032c:	8d 50 01             	lea    0x1(%eax),%edx
c010032f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100332:	89 10                	mov    %edx,(%eax)
}
c0100334:	c9                   	leave  
c0100335:	c3                   	ret    

c0100336 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100336:	55                   	push   %ebp
c0100337:	89 e5                	mov    %esp,%ebp
c0100339:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c010033c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100343:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100346:	89 44 24 10          	mov    %eax,0x10(%esp)
c010034a:	8b 45 08             	mov    0x8(%ebp),%eax
c010034d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100351:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100354:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100358:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c010035f:	ff 
c0100360:	c7 04 24 16 03 10 c0 	movl   $0xc0100316,(%esp)
c0100367:	e8 ab 49 01 00       	call   c0114d17 <vprintfmt>
    return cnt;
c010036c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010036f:	c9                   	leave  
c0100370:	c3                   	ret    

c0100371 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100371:	55                   	push   %ebp
c0100372:	89 e5                	mov    %esp,%ebp
c0100374:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100377:	8d 45 0c             	lea    0xc(%ebp),%eax
c010037a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010037d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100380:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 a7 ff ff ff       	call   c0100336 <vcprintf>
c010038f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100392:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100395:	c9                   	leave  
c0100396:	c3                   	ret    

c0100397 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c0100397:	55                   	push   %ebp
c0100398:	89 e5                	mov    %esp,%ebp
c010039a:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010039d:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a0:	89 04 24             	mov    %eax,(%esp)
c01003a3:	e8 83 14 00 00       	call   c010182b <cons_putc>
}
c01003a8:	c9                   	leave  
c01003a9:	c3                   	ret    

c01003aa <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003aa:	55                   	push   %ebp
c01003ab:	89 e5                	mov    %esp,%ebp
c01003ad:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003b7:	eb 13                	jmp    c01003cc <cputs+0x22>
        cputch(c, &cnt);
c01003b9:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003bd:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003c4:	89 04 24             	mov    %eax,(%esp)
c01003c7:	e8 4a ff ff ff       	call   c0100316 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01003cf:	8d 50 01             	lea    0x1(%eax),%edx
c01003d2:	89 55 08             	mov    %edx,0x8(%ebp)
c01003d5:	0f b6 00             	movzbl (%eax),%eax
c01003d8:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003db:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003df:	75 d8                	jne    c01003b9 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003e1:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003e8:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003ef:	e8 22 ff ff ff       	call   c0100316 <cputch>
    return cnt;
c01003f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003ff:	e8 63 14 00 00       	call   c0101867 <cons_getc>
c0100404:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100407:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010040b:	74 f2                	je     c01003ff <getchar+0x6>
        /* do nothing */;
    return c;
c010040d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100410:	c9                   	leave  
c0100411:	c3                   	ret    

c0100412 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100412:	55                   	push   %ebp
c0100413:	89 e5                	mov    %esp,%ebp
c0100415:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c0100418:	8b 45 08             	mov    0x8(%ebp),%eax
c010041b:	89 04 24             	mov    %eax,(%esp)
c010041e:	e8 ee 4e 01 00       	call   c0115311 <strlen>
c0100423:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c0100426:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100429:	83 c0 01             	add    $0x1,%eax
c010042c:	89 04 24             	mov    %eax,(%esp)
c010042f:	e8 7b 49 00 00       	call   c0104daf <kmalloc>
c0100434:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100437:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010043b:	74 24                	je     c0100461 <strdup+0x4f>
        memcpy(dst, src, len);
c010043d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100440:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100444:	8b 45 08             	mov    0x8(%ebp),%eax
c0100447:	89 44 24 04          	mov    %eax,0x4(%esp)
c010044b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010044e:	89 04 24             	mov    %eax,(%esp)
c0100451:	e8 f3 52 01 00       	call   c0115749 <memcpy>
        dst[len] = '\0';
c0100456:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100459:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010045c:	01 d0                	add    %edx,%eax
c010045e:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100461:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100464:	c9                   	leave  
c0100465:	c3                   	ret    

c0100466 <stradd>:

char *
stradd(const char *src1, const char *src2) {
c0100466:	55                   	push   %ebp
c0100467:	89 e5                	mov    %esp,%ebp
c0100469:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c010046c:	8b 45 08             	mov    0x8(%ebp),%eax
c010046f:	89 04 24             	mov    %eax,(%esp)
c0100472:	e8 9a 4e 01 00       	call   c0115311 <strlen>
c0100477:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010047a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010047d:	89 04 24             	mov    %eax,(%esp)
c0100480:	e8 8c 4e 01 00       	call   c0115311 <strlen>
c0100485:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c0100488:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010048b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010048e:	01 d0                	add    %edx,%eax
c0100490:	83 c0 01             	add    $0x1,%eax
c0100493:	89 04 24             	mov    %eax,(%esp)
c0100496:	e8 14 49 00 00       	call   c0104daf <kmalloc>
c010049b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010049e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01004a4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01004a8:	74 44                	je     c01004ee <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c01004aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ad:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01004b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004bb:	89 04 24             	mov    %eax,(%esp)
c01004be:	e8 86 52 01 00       	call   c0115749 <memcpy>
c01004c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004c6:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004cc:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004da:	89 04 24             	mov    %eax,(%esp)
c01004dd:	e8 67 52 01 00       	call   c0115749 <memcpy>
c01004e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e5:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004eb:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004f1:	c9                   	leave  
c01004f2:	c3                   	ret    

c01004f3 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004f3:	55                   	push   %ebp
c01004f4:	89 e5                	mov    %esp,%ebp
c01004f6:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004fc:	8b 00                	mov    (%eax),%eax
c01004fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100501:	8b 45 10             	mov    0x10(%ebp),%eax
c0100504:	8b 00                	mov    (%eax),%eax
c0100506:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100509:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100510:	e9 d2 00 00 00       	jmp    c01005e7 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100515:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100518:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010051b:	01 d0                	add    %edx,%eax
c010051d:	89 c2                	mov    %eax,%edx
c010051f:	c1 ea 1f             	shr    $0x1f,%edx
c0100522:	01 d0                	add    %edx,%eax
c0100524:	d1 f8                	sar    %eax
c0100526:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100529:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010052c:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010052f:	eb 04                	jmp    c0100535 <stab_binsearch+0x42>
            m --;
c0100531:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100538:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010053b:	7c 1f                	jl     c010055c <stab_binsearch+0x69>
c010053d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100540:	89 d0                	mov    %edx,%eax
c0100542:	01 c0                	add    %eax,%eax
c0100544:	01 d0                	add    %edx,%eax
c0100546:	c1 e0 02             	shl    $0x2,%eax
c0100549:	89 c2                	mov    %eax,%edx
c010054b:	8b 45 08             	mov    0x8(%ebp),%eax
c010054e:	01 d0                	add    %edx,%eax
c0100550:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100554:	0f b6 c0             	movzbl %al,%eax
c0100557:	3b 45 14             	cmp    0x14(%ebp),%eax
c010055a:	75 d5                	jne    c0100531 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010055c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010055f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100562:	7d 0b                	jge    c010056f <stab_binsearch+0x7c>
            l = true_m + 1;
c0100564:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100567:	83 c0 01             	add    $0x1,%eax
c010056a:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010056d:	eb 78                	jmp    c01005e7 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010056f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100576:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100579:	89 d0                	mov    %edx,%eax
c010057b:	01 c0                	add    %eax,%eax
c010057d:	01 d0                	add    %edx,%eax
c010057f:	c1 e0 02             	shl    $0x2,%eax
c0100582:	89 c2                	mov    %eax,%edx
c0100584:	8b 45 08             	mov    0x8(%ebp),%eax
c0100587:	01 d0                	add    %edx,%eax
c0100589:	8b 40 08             	mov    0x8(%eax),%eax
c010058c:	3b 45 18             	cmp    0x18(%ebp),%eax
c010058f:	73 13                	jae    c01005a4 <stab_binsearch+0xb1>
            *region_left = m;
c0100591:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100594:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100597:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100599:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010059c:	83 c0 01             	add    $0x1,%eax
c010059f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01005a2:	eb 43                	jmp    c01005e7 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01005a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005a7:	89 d0                	mov    %edx,%eax
c01005a9:	01 c0                	add    %eax,%eax
c01005ab:	01 d0                	add    %edx,%eax
c01005ad:	c1 e0 02             	shl    $0x2,%eax
c01005b0:	89 c2                	mov    %eax,%edx
c01005b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01005b5:	01 d0                	add    %edx,%eax
c01005b7:	8b 40 08             	mov    0x8(%eax),%eax
c01005ba:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005bd:	76 16                	jbe    c01005d5 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005c8:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005cd:	83 e8 01             	sub    $0x1,%eax
c01005d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005d3:	eb 12                	jmp    c01005e7 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005db:	89 10                	mov    %edx,(%eax)
            l = m;
c01005dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005e3:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005ea:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005ed:	0f 8e 22 ff ff ff    	jle    c0100515 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005f7:	75 0f                	jne    c0100608 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005fc:	8b 00                	mov    (%eax),%eax
c01005fe:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100601:	8b 45 10             	mov    0x10(%ebp),%eax
c0100604:	89 10                	mov    %edx,(%eax)
c0100606:	eb 3f                	jmp    c0100647 <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c0100608:	8b 45 10             	mov    0x10(%ebp),%eax
c010060b:	8b 00                	mov    (%eax),%eax
c010060d:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100610:	eb 04                	jmp    c0100616 <stab_binsearch+0x123>
c0100612:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0100616:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100619:	8b 00                	mov    (%eax),%eax
c010061b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010061e:	7d 1f                	jge    c010063f <stab_binsearch+0x14c>
c0100620:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100623:	89 d0                	mov    %edx,%eax
c0100625:	01 c0                	add    %eax,%eax
c0100627:	01 d0                	add    %edx,%eax
c0100629:	c1 e0 02             	shl    $0x2,%eax
c010062c:	89 c2                	mov    %eax,%edx
c010062e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100631:	01 d0                	add    %edx,%eax
c0100633:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100637:	0f b6 c0             	movzbl %al,%eax
c010063a:	3b 45 14             	cmp    0x14(%ebp),%eax
c010063d:	75 d3                	jne    c0100612 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010063f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100642:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100645:	89 10                	mov    %edx,(%eax)
    }
}
c0100647:	c9                   	leave  
c0100648:	c3                   	ret    

c0100649 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100649:	55                   	push   %ebp
c010064a:	89 e5                	mov    %esp,%ebp
c010064c:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010064f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100652:	c7 00 ac 58 11 c0    	movl   $0xc01158ac,(%eax)
    info->eip_line = 0;
c0100658:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100662:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100665:	c7 40 08 ac 58 11 c0 	movl   $0xc01158ac,0x8(%eax)
    info->eip_fn_namelen = 9;
c010066c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066f:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100676:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100679:	8b 55 08             	mov    0x8(%ebp),%edx
c010067c:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010067f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100682:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100689:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100690:	76 21                	jbe    c01006b3 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100692:	c7 45 f4 a0 9f 11 c0 	movl   $0xc0119fa0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100699:	c7 45 f0 2c f9 13 c0 	movl   $0xc013f92c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01006a0:	c7 45 ec 2d f9 13 c0 	movl   $0xc013f92d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01006a7:	c7 45 e8 46 c2 14 c0 	movl   $0xc014c246,-0x18(%ebp)
c01006ae:	e9 ea 00 00 00       	jmp    c010079d <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006b3:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ba:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c01006bf:	85 c0                	test   %eax,%eax
c01006c1:	74 11                	je     c01006d4 <debuginfo_eip+0x8b>
c01006c3:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c01006c8:	8b 40 18             	mov    0x18(%eax),%eax
c01006cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ce:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006d2:	75 0a                	jne    c01006de <debuginfo_eip+0x95>
            return -1;
c01006d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d9:	e9 9e 03 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006e8:	00 
c01006e9:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006f0:	00 
c01006f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006f8:	89 04 24             	mov    %eax,(%esp)
c01006fb:	e8 4f 8a 00 00       	call   c010914f <user_mem_check>
c0100700:	85 c0                	test   %eax,%eax
c0100702:	75 0a                	jne    c010070e <debuginfo_eip+0xc5>
            return -1;
c0100704:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100709:	e9 6e 03 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c010070e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100711:	8b 00                	mov    (%eax),%eax
c0100713:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0100716:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100719:	8b 40 04             	mov    0x4(%eax),%eax
c010071c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c010071f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100722:	8b 40 08             	mov    0x8(%eax),%eax
c0100725:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0100728:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010072b:	8b 40 0c             	mov    0xc(%eax),%eax
c010072e:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100731:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100737:	29 c2                	sub    %eax,%edx
c0100739:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010073c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100743:	00 
c0100744:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100748:	89 44 24 04          	mov    %eax,0x4(%esp)
c010074c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010074f:	89 04 24             	mov    %eax,(%esp)
c0100752:	e8 f8 89 00 00       	call   c010914f <user_mem_check>
c0100757:	85 c0                	test   %eax,%eax
c0100759:	75 0a                	jne    c0100765 <debuginfo_eip+0x11c>
            return -1;
c010075b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100760:	e9 17 03 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100765:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100768:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010076b:	29 c2                	sub    %eax,%edx
c010076d:	89 d0                	mov    %edx,%eax
c010076f:	89 c2                	mov    %eax,%edx
c0100771:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100774:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010077b:	00 
c010077c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100780:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100784:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100787:	89 04 24             	mov    %eax,(%esp)
c010078a:	e8 c0 89 00 00       	call   c010914f <user_mem_check>
c010078f:	85 c0                	test   %eax,%eax
c0100791:	75 0a                	jne    c010079d <debuginfo_eip+0x154>
            return -1;
c0100793:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100798:	e9 df 02 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c010079d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01007a0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01007a3:	76 0d                	jbe    c01007b2 <debuginfo_eip+0x169>
c01007a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01007a8:	83 e8 01             	sub    $0x1,%eax
c01007ab:	0f b6 00             	movzbl (%eax),%eax
c01007ae:	84 c0                	test   %al,%al
c01007b0:	74 0a                	je     c01007bc <debuginfo_eip+0x173>
        return -1;
c01007b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007b7:	e9 c0 02 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007c9:	29 c2                	sub    %eax,%edx
c01007cb:	89 d0                	mov    %edx,%eax
c01007cd:	c1 f8 02             	sar    $0x2,%eax
c01007d0:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007d6:	83 e8 01             	sub    $0x1,%eax
c01007d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01007df:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007e3:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007ea:	00 
c01007eb:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007ee:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007f2:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007fc:	89 04 24             	mov    %eax,(%esp)
c01007ff:	e8 ef fc ff ff       	call   c01004f3 <stab_binsearch>
    if (lfile == 0)
c0100804:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100807:	85 c0                	test   %eax,%eax
c0100809:	75 0a                	jne    c0100815 <debuginfo_eip+0x1cc>
        return -1;
c010080b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100810:	e9 67 02 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100815:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100818:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010081b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010081e:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100821:	8b 45 08             	mov    0x8(%ebp),%eax
c0100824:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100828:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c010082f:	00 
c0100830:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100833:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100837:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010083a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010083e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100841:	89 04 24             	mov    %eax,(%esp)
c0100844:	e8 aa fc ff ff       	call   c01004f3 <stab_binsearch>

    if (lfun <= rfun) {
c0100849:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010084c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010084f:	39 c2                	cmp    %eax,%edx
c0100851:	7f 7c                	jg     c01008cf <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100853:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100856:	89 c2                	mov    %eax,%edx
c0100858:	89 d0                	mov    %edx,%eax
c010085a:	01 c0                	add    %eax,%eax
c010085c:	01 d0                	add    %edx,%eax
c010085e:	c1 e0 02             	shl    $0x2,%eax
c0100861:	89 c2                	mov    %eax,%edx
c0100863:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100866:	01 d0                	add    %edx,%eax
c0100868:	8b 10                	mov    (%eax),%edx
c010086a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010086d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100870:	29 c1                	sub    %eax,%ecx
c0100872:	89 c8                	mov    %ecx,%eax
c0100874:	39 c2                	cmp    %eax,%edx
c0100876:	73 22                	jae    c010089a <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100878:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010087b:	89 c2                	mov    %eax,%edx
c010087d:	89 d0                	mov    %edx,%eax
c010087f:	01 c0                	add    %eax,%eax
c0100881:	01 d0                	add    %edx,%eax
c0100883:	c1 e0 02             	shl    $0x2,%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010088b:	01 d0                	add    %edx,%eax
c010088d:	8b 10                	mov    (%eax),%edx
c010088f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100892:	01 c2                	add    %eax,%edx
c0100894:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100897:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010089a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010089d:	89 c2                	mov    %eax,%edx
c010089f:	89 d0                	mov    %edx,%eax
c01008a1:	01 c0                	add    %eax,%eax
c01008a3:	01 d0                	add    %edx,%eax
c01008a5:	c1 e0 02             	shl    $0x2,%eax
c01008a8:	89 c2                	mov    %eax,%edx
c01008aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008ad:	01 d0                	add    %edx,%eax
c01008af:	8b 50 08             	mov    0x8(%eax),%edx
c01008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008b5:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008bb:	8b 40 10             	mov    0x10(%eax),%eax
c01008be:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008ca:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008cd:	eb 15                	jmp    c01008e4 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008d2:	8b 55 08             	mov    0x8(%ebp),%edx
c01008d5:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008db:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008de:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008e1:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008e7:	8b 40 08             	mov    0x8(%eax),%eax
c01008ea:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008f1:	00 
c01008f2:	89 04 24             	mov    %eax,(%esp)
c01008f5:	e8 e1 4b 01 00       	call   c01154db <strfind>
c01008fa:	89 c2                	mov    %eax,%edx
c01008fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008ff:	8b 40 08             	mov    0x8(%eax),%eax
c0100902:	29 c2                	sub    %eax,%edx
c0100904:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100907:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010090a:	8b 45 08             	mov    0x8(%ebp),%eax
c010090d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100911:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c0100918:	00 
c0100919:	8d 45 c8             	lea    -0x38(%ebp),%eax
c010091c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100920:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100923:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010092a:	89 04 24             	mov    %eax,(%esp)
c010092d:	e8 c1 fb ff ff       	call   c01004f3 <stab_binsearch>
    if (lline <= rline) {
c0100932:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100935:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100938:	39 c2                	cmp    %eax,%edx
c010093a:	7f 24                	jg     c0100960 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c010093c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010093f:	89 c2                	mov    %eax,%edx
c0100941:	89 d0                	mov    %edx,%eax
c0100943:	01 c0                	add    %eax,%eax
c0100945:	01 d0                	add    %edx,%eax
c0100947:	c1 e0 02             	shl    $0x2,%eax
c010094a:	89 c2                	mov    %eax,%edx
c010094c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010094f:	01 d0                	add    %edx,%eax
c0100951:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100955:	0f b7 d0             	movzwl %ax,%edx
c0100958:	8b 45 0c             	mov    0xc(%ebp),%eax
c010095b:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010095e:	eb 13                	jmp    c0100973 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100960:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100965:	e9 12 01 00 00       	jmp    c0100a7c <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010096a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096d:	83 e8 01             	sub    $0x1,%eax
c0100970:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100973:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100976:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100979:	39 c2                	cmp    %eax,%edx
c010097b:	7c 56                	jl     c01009d3 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c010097d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100980:	89 c2                	mov    %eax,%edx
c0100982:	89 d0                	mov    %edx,%eax
c0100984:	01 c0                	add    %eax,%eax
c0100986:	01 d0                	add    %edx,%eax
c0100988:	c1 e0 02             	shl    $0x2,%eax
c010098b:	89 c2                	mov    %eax,%edx
c010098d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100990:	01 d0                	add    %edx,%eax
c0100992:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100996:	3c 84                	cmp    $0x84,%al
c0100998:	74 39                	je     c01009d3 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010099a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010099d:	89 c2                	mov    %eax,%edx
c010099f:	89 d0                	mov    %edx,%eax
c01009a1:	01 c0                	add    %eax,%eax
c01009a3:	01 d0                	add    %edx,%eax
c01009a5:	c1 e0 02             	shl    $0x2,%eax
c01009a8:	89 c2                	mov    %eax,%edx
c01009aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009ad:	01 d0                	add    %edx,%eax
c01009af:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009b3:	3c 64                	cmp    $0x64,%al
c01009b5:	75 b3                	jne    c010096a <debuginfo_eip+0x321>
c01009b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ba:	89 c2                	mov    %eax,%edx
c01009bc:	89 d0                	mov    %edx,%eax
c01009be:	01 c0                	add    %eax,%eax
c01009c0:	01 d0                	add    %edx,%eax
c01009c2:	c1 e0 02             	shl    $0x2,%eax
c01009c5:	89 c2                	mov    %eax,%edx
c01009c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009ca:	01 d0                	add    %edx,%eax
c01009cc:	8b 40 08             	mov    0x8(%eax),%eax
c01009cf:	85 c0                	test   %eax,%eax
c01009d1:	74 97                	je     c010096a <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009d3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009d9:	39 c2                	cmp    %eax,%edx
c01009db:	7c 46                	jl     c0100a23 <debuginfo_eip+0x3da>
c01009dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e0:	89 c2                	mov    %eax,%edx
c01009e2:	89 d0                	mov    %edx,%eax
c01009e4:	01 c0                	add    %eax,%eax
c01009e6:	01 d0                	add    %edx,%eax
c01009e8:	c1 e0 02             	shl    $0x2,%eax
c01009eb:	89 c2                	mov    %eax,%edx
c01009ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009f0:	01 d0                	add    %edx,%eax
c01009f2:	8b 10                	mov    (%eax),%edx
c01009f4:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009fa:	29 c1                	sub    %eax,%ecx
c01009fc:	89 c8                	mov    %ecx,%eax
c01009fe:	39 c2                	cmp    %eax,%edx
c0100a00:	73 21                	jae    c0100a23 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100a02:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a05:	89 c2                	mov    %eax,%edx
c0100a07:	89 d0                	mov    %edx,%eax
c0100a09:	01 c0                	add    %eax,%eax
c0100a0b:	01 d0                	add    %edx,%eax
c0100a0d:	c1 e0 02             	shl    $0x2,%eax
c0100a10:	89 c2                	mov    %eax,%edx
c0100a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a15:	01 d0                	add    %edx,%eax
c0100a17:	8b 10                	mov    (%eax),%edx
c0100a19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a1c:	01 c2                	add    %eax,%edx
c0100a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a21:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a23:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a26:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a29:	39 c2                	cmp    %eax,%edx
c0100a2b:	7d 4a                	jge    c0100a77 <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a30:	83 c0 01             	add    $0x1,%eax
c0100a33:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a36:	eb 18                	jmp    c0100a50 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a3b:	8b 40 14             	mov    0x14(%eax),%eax
c0100a3e:	8d 50 01             	lea    0x1(%eax),%edx
c0100a41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a44:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a47:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a4a:	83 c0 01             	add    $0x1,%eax
c0100a4d:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a50:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a53:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a56:	39 c2                	cmp    %eax,%edx
c0100a58:	7d 1d                	jge    c0100a77 <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a5a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a5d:	89 c2                	mov    %eax,%edx
c0100a5f:	89 d0                	mov    %edx,%eax
c0100a61:	01 c0                	add    %eax,%eax
c0100a63:	01 d0                	add    %edx,%eax
c0100a65:	c1 e0 02             	shl    $0x2,%eax
c0100a68:	89 c2                	mov    %eax,%edx
c0100a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a6d:	01 d0                	add    %edx,%eax
c0100a6f:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a73:	3c a0                	cmp    $0xa0,%al
c0100a75:	74 c1                	je     c0100a38 <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a77:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a7c:	c9                   	leave  
c0100a7d:	c3                   	ret    

c0100a7e <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a7e:	55                   	push   %ebp
c0100a7f:	89 e5                	mov    %esp,%ebp
c0100a81:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a84:	c7 04 24 b6 58 11 c0 	movl   $0xc01158b6,(%esp)
c0100a8b:	e8 e1 f8 ff ff       	call   c0100371 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a90:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
c0100a97:	c0 
c0100a98:	c7 04 24 cf 58 11 c0 	movl   $0xc01158cf,(%esp)
c0100a9f:	e8 cd f8 ff ff       	call   c0100371 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100aa4:	c7 44 24 04 f0 57 11 	movl   $0xc01157f0,0x4(%esp)
c0100aab:	c0 
c0100aac:	c7 04 24 e7 58 11 c0 	movl   $0xc01158e7,(%esp)
c0100ab3:	e8 b9 f8 ff ff       	call   c0100371 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100ab8:	c7 44 24 04 00 20 15 	movl   $0xc0152000,0x4(%esp)
c0100abf:	c0 
c0100ac0:	c7 04 24 ff 58 11 c0 	movl   $0xc01158ff,(%esp)
c0100ac7:	e8 a5 f8 ff ff       	call   c0100371 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100acc:	c7 44 24 04 24 63 15 	movl   $0xc0156324,0x4(%esp)
c0100ad3:	c0 
c0100ad4:	c7 04 24 17 59 11 c0 	movl   $0xc0115917,(%esp)
c0100adb:	e8 91 f8 ff ff       	call   c0100371 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ae0:	b8 24 63 15 c0       	mov    $0xc0156324,%eax
c0100ae5:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aeb:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100af0:	29 c2                	sub    %eax,%edx
c0100af2:	89 d0                	mov    %edx,%eax
c0100af4:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100afa:	85 c0                	test   %eax,%eax
c0100afc:	0f 48 c2             	cmovs  %edx,%eax
c0100aff:	c1 f8 0a             	sar    $0xa,%eax
c0100b02:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b06:	c7 04 24 30 59 11 c0 	movl   $0xc0115930,(%esp)
c0100b0d:	e8 5f f8 ff ff       	call   c0100371 <cprintf>
}
c0100b12:	c9                   	leave  
c0100b13:	c3                   	ret    

c0100b14 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b14:	55                   	push   %ebp
c0100b15:	89 e5                	mov    %esp,%ebp
c0100b17:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b1d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b20:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b27:	89 04 24             	mov    %eax,(%esp)
c0100b2a:	e8 1a fb ff ff       	call   c0100649 <debuginfo_eip>
c0100b2f:	85 c0                	test   %eax,%eax
c0100b31:	74 15                	je     c0100b48 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b33:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b3a:	c7 04 24 5a 59 11 c0 	movl   $0xc011595a,(%esp)
c0100b41:	e8 2b f8 ff ff       	call   c0100371 <cprintf>
c0100b46:	eb 6d                	jmp    c0100bb5 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b4f:	eb 1c                	jmp    c0100b6d <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b57:	01 d0                	add    %edx,%eax
c0100b59:	0f b6 00             	movzbl (%eax),%eax
c0100b5c:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b62:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b65:	01 ca                	add    %ecx,%edx
c0100b67:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b69:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b73:	7f dc                	jg     c0100b51 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b75:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b7e:	01 d0                	add    %edx,%eax
c0100b80:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b86:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b89:	89 d1                	mov    %edx,%ecx
c0100b8b:	29 c1                	sub    %eax,%ecx
c0100b8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b90:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b93:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b97:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b9d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100ba1:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100ba5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ba9:	c7 04 24 76 59 11 c0 	movl   $0xc0115976,(%esp)
c0100bb0:	e8 bc f7 ff ff       	call   c0100371 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100bb5:	c9                   	leave  
c0100bb6:	c3                   	ret    

c0100bb7 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bb7:	55                   	push   %ebp
c0100bb8:	89 e5                	mov    %esp,%ebp
c0100bba:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bbd:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bc0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bc6:	c9                   	leave  
c0100bc7:	c3                   	ret    

c0100bc8 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bc8:	55                   	push   %ebp
c0100bc9:	89 e5                	mov    %esp,%ebp
c0100bcb:	53                   	push   %ebx
c0100bcc:	83 ec 44             	sub    $0x44,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bcf:	89 e8                	mov    %ebp,%eax
c0100bd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100bd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
c0100bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t eip = read_eip();
c0100bda:	e8 d8 ff ff ff       	call   c0100bb7 <read_eip>
c0100bdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i;
	for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++)
c0100be2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100be9:	e9 8d 00 00 00       	jmp    c0100c7b <print_stackframe+0xb3>
	{
		cprintf("ebp:0x%08x eip:0x%08x args:",ebp,eip);
c0100bee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bf1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bfc:	c7 04 24 88 59 11 c0 	movl   $0xc0115988,(%esp)
c0100c03:	e8 69 f7 ff ff       	call   c0100371 <cprintf>
		uint32_t *args = (uint32_t *)ebp + 2;
c0100c08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c0b:	83 c0 08             	add    $0x8,%eax
c0100c0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		cprintf("0x%08x 0x%08x 0x%08x 0x%08x",*args,*(args+1),*(args+2),*(args+3));
c0100c11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c14:	83 c0 0c             	add    $0xc,%eax
c0100c17:	8b 18                	mov    (%eax),%ebx
c0100c19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c1c:	83 c0 08             	add    $0x8,%eax
c0100c1f:	8b 08                	mov    (%eax),%ecx
c0100c21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c24:	83 c0 04             	add    $0x4,%eax
c0100c27:	8b 10                	mov    (%eax),%edx
c0100c29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c2c:	8b 00                	mov    (%eax),%eax
c0100c2e:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0100c32:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100c36:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100c3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c3e:	c7 04 24 a4 59 11 c0 	movl   $0xc01159a4,(%esp)
c0100c45:	e8 27 f7 ff ff       	call   c0100371 <cprintf>
		cprintf("\n");
c0100c4a:	c7 04 24 c0 59 11 c0 	movl   $0xc01159c0,(%esp)
c0100c51:	e8 1b f7 ff ff       	call   c0100371 <cprintf>
		print_debuginfo(eip-1);
c0100c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c59:	83 e8 01             	sub    $0x1,%eax
c0100c5c:	89 04 24             	mov    %eax,(%esp)
c0100c5f:	e8 b0 fe ff ff       	call   c0100b14 <print_debuginfo>
		eip = ((uint32_t *)ebp)[1];
c0100c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c67:	83 c0 04             	add    $0x4,%eax
c0100c6a:	8b 00                	mov    (%eax),%eax
c0100c6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ebp = ((uint32_t *)ebp)[0];
c0100c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c72:	8b 00                	mov    (%eax),%eax
c0100c74:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
	uint32_t eip = read_eip();
	int i;
	for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++)
c0100c77:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c7f:	74 0a                	je     c0100c8b <print_stackframe+0xc3>
c0100c81:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c85:	0f 8e 63 ff ff ff    	jle    c0100bee <print_stackframe+0x26>
		cprintf("\n");
		print_debuginfo(eip-1);
		eip = ((uint32_t *)ebp)[1];
		ebp = ((uint32_t *)ebp)[0];
	}
}
c0100c8b:	83 c4 44             	add    $0x44,%esp
c0100c8e:	5b                   	pop    %ebx
c0100c8f:	5d                   	pop    %ebp
c0100c90:	c3                   	ret    

c0100c91 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c91:	55                   	push   %ebp
c0100c92:	89 e5                	mov    %esp,%ebp
c0100c94:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c9e:	eb 0c                	jmp    c0100cac <parse+0x1b>
            *buf ++ = '\0';
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	8d 50 01             	lea    0x1(%eax),%edx
c0100ca6:	89 55 08             	mov    %edx,0x8(%ebp)
c0100ca9:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100cac:	8b 45 08             	mov    0x8(%ebp),%eax
c0100caf:	0f b6 00             	movzbl (%eax),%eax
c0100cb2:	84 c0                	test   %al,%al
c0100cb4:	74 1d                	je     c0100cd3 <parse+0x42>
c0100cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb9:	0f b6 00             	movzbl (%eax),%eax
c0100cbc:	0f be c0             	movsbl %al,%eax
c0100cbf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cc3:	c7 04 24 44 5a 11 c0 	movl   $0xc0115a44,(%esp)
c0100cca:	e8 d9 47 01 00       	call   c01154a8 <strchr>
c0100ccf:	85 c0                	test   %eax,%eax
c0100cd1:	75 cd                	jne    c0100ca0 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cd6:	0f b6 00             	movzbl (%eax),%eax
c0100cd9:	84 c0                	test   %al,%al
c0100cdb:	75 02                	jne    c0100cdf <parse+0x4e>
            break;
c0100cdd:	eb 67                	jmp    c0100d46 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cdf:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ce3:	75 14                	jne    c0100cf9 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ce5:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cec:	00 
c0100ced:	c7 04 24 49 5a 11 c0 	movl   $0xc0115a49,(%esp)
c0100cf4:	e8 78 f6 ff ff       	call   c0100371 <cprintf>
        }
        argv[argc ++] = buf;
c0100cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cfc:	8d 50 01             	lea    0x1(%eax),%edx
c0100cff:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100d02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100d09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d0c:	01 c2                	add    %eax,%edx
c0100d0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d11:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d13:	eb 04                	jmp    c0100d19 <parse+0x88>
            buf ++;
c0100d15:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d19:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d1c:	0f b6 00             	movzbl (%eax),%eax
c0100d1f:	84 c0                	test   %al,%al
c0100d21:	74 1d                	je     c0100d40 <parse+0xaf>
c0100d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d26:	0f b6 00             	movzbl (%eax),%eax
c0100d29:	0f be c0             	movsbl %al,%eax
c0100d2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d30:	c7 04 24 44 5a 11 c0 	movl   $0xc0115a44,(%esp)
c0100d37:	e8 6c 47 01 00       	call   c01154a8 <strchr>
c0100d3c:	85 c0                	test   %eax,%eax
c0100d3e:	74 d5                	je     c0100d15 <parse+0x84>
            buf ++;
        }
    }
c0100d40:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d41:	e9 66 ff ff ff       	jmp    c0100cac <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d49:	c9                   	leave  
c0100d4a:	c3                   	ret    

c0100d4b <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d4b:	55                   	push   %ebp
c0100d4c:	89 e5                	mov    %esp,%ebp
c0100d4e:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d51:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d58:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d5b:	89 04 24             	mov    %eax,(%esp)
c0100d5e:	e8 2e ff ff ff       	call   c0100c91 <parse>
c0100d63:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d6a:	75 0a                	jne    c0100d76 <runcmd+0x2b>
        return 0;
c0100d6c:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d71:	e9 85 00 00 00       	jmp    c0100dfb <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d7d:	eb 5c                	jmp    c0100ddb <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d7f:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d82:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d85:	89 d0                	mov    %edx,%eax
c0100d87:	01 c0                	add    %eax,%eax
c0100d89:	01 d0                	add    %edx,%eax
c0100d8b:	c1 e0 02             	shl    $0x2,%eax
c0100d8e:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100d93:	8b 00                	mov    (%eax),%eax
c0100d95:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d99:	89 04 24             	mov    %eax,(%esp)
c0100d9c:	e8 68 46 01 00       	call   c0115409 <strcmp>
c0100da1:	85 c0                	test   %eax,%eax
c0100da3:	75 32                	jne    c0100dd7 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100da5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100da8:	89 d0                	mov    %edx,%eax
c0100daa:	01 c0                	add    %eax,%eax
c0100dac:	01 d0                	add    %edx,%eax
c0100dae:	c1 e0 02             	shl    $0x2,%eax
c0100db1:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100db6:	8b 40 08             	mov    0x8(%eax),%eax
c0100db9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100dbc:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100dbf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dc2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100dc6:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100dc9:	83 c2 04             	add    $0x4,%edx
c0100dcc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dd0:	89 0c 24             	mov    %ecx,(%esp)
c0100dd3:	ff d0                	call   *%eax
c0100dd5:	eb 24                	jmp    c0100dfb <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dd7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dde:	83 f8 02             	cmp    $0x2,%eax
c0100de1:	76 9c                	jbe    c0100d7f <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100de3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100de6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dea:	c7 04 24 67 5a 11 c0 	movl   $0xc0115a67,(%esp)
c0100df1:	e8 7b f5 ff ff       	call   c0100371 <cprintf>
    return 0;
c0100df6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100dfd:	55                   	push   %ebp
c0100dfe:	89 e5                	mov    %esp,%ebp
c0100e00:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100e03:	c7 04 24 80 5a 11 c0 	movl   $0xc0115a80,(%esp)
c0100e0a:	e8 62 f5 ff ff       	call   c0100371 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100e0f:	c7 04 24 a8 5a 11 c0 	movl   $0xc0115aa8,(%esp)
c0100e16:	e8 56 f5 ff ff       	call   c0100371 <cprintf>

    if (tf != NULL) {
c0100e1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e1f:	74 0b                	je     c0100e2c <kmonitor+0x2f>
        print_trapframe(tf);
c0100e21:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e24:	89 04 24             	mov    %eax,(%esp)
c0100e27:	e8 bd 16 00 00       	call   c01024e9 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e2c:	c7 04 24 cd 5a 11 c0 	movl   $0xc0115acd,(%esp)
c0100e33:	e8 28 f4 ff ff       	call   c0100260 <readline>
c0100e38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e3f:	74 18                	je     c0100e59 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e41:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e4b:	89 04 24             	mov    %eax,(%esp)
c0100e4e:	e8 f8 fe ff ff       	call   c0100d4b <runcmd>
c0100e53:	85 c0                	test   %eax,%eax
c0100e55:	79 02                	jns    c0100e59 <kmonitor+0x5c>
                break;
c0100e57:	eb 02                	jmp    c0100e5b <kmonitor+0x5e>
            }
        }
    }
c0100e59:	eb d1                	jmp    c0100e2c <kmonitor+0x2f>
}
c0100e5b:	c9                   	leave  
c0100e5c:	c3                   	ret    

c0100e5d <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e5d:	55                   	push   %ebp
c0100e5e:	89 e5                	mov    %esp,%ebp
c0100e60:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e6a:	eb 3f                	jmp    c0100eab <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6f:	89 d0                	mov    %edx,%eax
c0100e71:	01 c0                	add    %eax,%eax
c0100e73:	01 d0                	add    %edx,%eax
c0100e75:	c1 e0 02             	shl    $0x2,%eax
c0100e78:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100e7d:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e80:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e83:	89 d0                	mov    %edx,%eax
c0100e85:	01 c0                	add    %eax,%eax
c0100e87:	01 d0                	add    %edx,%eax
c0100e89:	c1 e0 02             	shl    $0x2,%eax
c0100e8c:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100e91:	8b 00                	mov    (%eax),%eax
c0100e93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e9b:	c7 04 24 d1 5a 11 c0 	movl   $0xc0115ad1,(%esp)
c0100ea2:	e8 ca f4 ff ff       	call   c0100371 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ea7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100eae:	83 f8 02             	cmp    $0x2,%eax
c0100eb1:	76 b9                	jbe    c0100e6c <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb8:	c9                   	leave  
c0100eb9:	c3                   	ret    

c0100eba <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100eba:	55                   	push   %ebp
c0100ebb:	89 e5                	mov    %esp,%ebp
c0100ebd:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100ec0:	e8 b9 fb ff ff       	call   c0100a7e <print_kerninfo>
    return 0;
c0100ec5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eca:	c9                   	leave  
c0100ecb:	c3                   	ret    

c0100ecc <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100ecc:	55                   	push   %ebp
c0100ecd:	89 e5                	mov    %esp,%ebp
c0100ecf:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ed2:	e8 f1 fc ff ff       	call   c0100bc8 <print_stackframe>
    return 0;
c0100ed7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100edc:	c9                   	leave  
c0100edd:	c3                   	ret    

c0100ede <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ede:	55                   	push   %ebp
c0100edf:	89 e5                	mov    %esp,%ebp
c0100ee1:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ee4:	a1 20 24 15 c0       	mov    0xc0152420,%eax
c0100ee9:	85 c0                	test   %eax,%eax
c0100eeb:	74 02                	je     c0100eef <__panic+0x11>
        goto panic_dead;
c0100eed:	eb 59                	jmp    c0100f48 <__panic+0x6a>
    }
    is_panic = 1;
c0100eef:	c7 05 20 24 15 c0 01 	movl   $0x1,0xc0152420
c0100ef6:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ef9:	8d 45 14             	lea    0x14(%ebp),%eax
c0100efc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100eff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f02:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f06:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0d:	c7 04 24 da 5a 11 c0 	movl   $0xc0115ada,(%esp)
c0100f14:	e8 58 f4 ff ff       	call   c0100371 <cprintf>
    vcprintf(fmt, ap);
c0100f19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f20:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f23:	89 04 24             	mov    %eax,(%esp)
c0100f26:	e8 0b f4 ff ff       	call   c0100336 <vcprintf>
    cprintf("\n");
c0100f2b:	c7 04 24 f6 5a 11 c0 	movl   $0xc0115af6,(%esp)
c0100f32:	e8 3a f4 ff ff       	call   c0100371 <cprintf>
    
    cprintf("stack trackback:\n");
c0100f37:	c7 04 24 f8 5a 11 c0 	movl   $0xc0115af8,(%esp)
c0100f3e:	e8 2e f4 ff ff       	call   c0100371 <cprintf>
    print_stackframe();
c0100f43:	e8 80 fc ff ff       	call   c0100bc8 <print_stackframe>
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100f48:	e8 04 12 00 00       	call   c0102151 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f4d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f54:	e8 a4 fe ff ff       	call   c0100dfd <kmonitor>
    }
c0100f59:	eb f2                	jmp    c0100f4d <__panic+0x6f>

c0100f5b <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f5b:	55                   	push   %ebp
c0100f5c:	89 e5                	mov    %esp,%ebp
c0100f5e:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f61:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f67:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f6a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f75:	c7 04 24 0a 5b 11 c0 	movl   $0xc0115b0a,(%esp)
c0100f7c:	e8 f0 f3 ff ff       	call   c0100371 <cprintf>
    vcprintf(fmt, ap);
c0100f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f84:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f88:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f8b:	89 04 24             	mov    %eax,(%esp)
c0100f8e:	e8 a3 f3 ff ff       	call   c0100336 <vcprintf>
    cprintf("\n");
c0100f93:	c7 04 24 f6 5a 11 c0 	movl   $0xc0115af6,(%esp)
c0100f9a:	e8 d2 f3 ff ff       	call   c0100371 <cprintf>
    va_end(ap);
}
c0100f9f:	c9                   	leave  
c0100fa0:	c3                   	ret    

c0100fa1 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100fa1:	55                   	push   %ebp
c0100fa2:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100fa4:	a1 20 24 15 c0       	mov    0xc0152420,%eax
}
c0100fa9:	5d                   	pop    %ebp
c0100faa:	c3                   	ret    

c0100fab <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100fab:	55                   	push   %ebp
c0100fac:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100fae:	a1 30 61 15 c0       	mov    0xc0156130,%eax
}
c0100fb3:	5d                   	pop    %ebp
c0100fb4:	c3                   	ret    

c0100fb5 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100fb5:	55                   	push   %ebp
c0100fb6:	89 e5                	mov    %esp,%ebp
c0100fb8:	83 ec 28             	sub    $0x28,%esp
c0100fbb:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100fc1:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fc5:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fc9:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fcd:	ee                   	out    %al,(%dx)
c0100fce:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fd4:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fd8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fdc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe0:	ee                   	out    %al,(%dx)
c0100fe1:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fe7:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100feb:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fef:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ff3:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ff4:	c7 05 30 61 15 c0 00 	movl   $0x0,0xc0156130
c0100ffb:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100ffe:	c7 04 24 28 5b 11 c0 	movl   $0xc0115b28,(%esp)
c0101005:	e8 67 f3 ff ff       	call   c0100371 <cprintf>
    pic_enable(IRQ_TIMER);
c010100a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0101011:	e8 99 11 00 00       	call   c01021af <pic_enable>
}
c0101016:	c9                   	leave  
c0101017:	c3                   	ret    

c0101018 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101018:	55                   	push   %ebp
c0101019:	89 e5                	mov    %esp,%ebp
c010101b:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010101e:	9c                   	pushf  
c010101f:	58                   	pop    %eax
c0101020:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101023:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101026:	25 00 02 00 00       	and    $0x200,%eax
c010102b:	85 c0                	test   %eax,%eax
c010102d:	74 0c                	je     c010103b <__intr_save+0x23>
        intr_disable();
c010102f:	e8 1d 11 00 00       	call   c0102151 <intr_disable>
        return 1;
c0101034:	b8 01 00 00 00       	mov    $0x1,%eax
c0101039:	eb 05                	jmp    c0101040 <__intr_save+0x28>
    }
    return 0;
c010103b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101040:	c9                   	leave  
c0101041:	c3                   	ret    

c0101042 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101042:	55                   	push   %ebp
c0101043:	89 e5                	mov    %esp,%ebp
c0101045:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101048:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010104c:	74 05                	je     c0101053 <__intr_restore+0x11>
        intr_enable();
c010104e:	e8 f8 10 00 00       	call   c010214b <intr_enable>
    }
}
c0101053:	c9                   	leave  
c0101054:	c3                   	ret    

c0101055 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101055:	55                   	push   %ebp
c0101056:	89 e5                	mov    %esp,%ebp
c0101058:	83 ec 10             	sub    $0x10,%esp
c010105b:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101061:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101065:	89 c2                	mov    %eax,%edx
c0101067:	ec                   	in     (%dx),%al
c0101068:	88 45 fd             	mov    %al,-0x3(%ebp)
c010106b:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101071:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101075:	89 c2                	mov    %eax,%edx
c0101077:	ec                   	in     (%dx),%al
c0101078:	88 45 f9             	mov    %al,-0x7(%ebp)
c010107b:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0101081:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101085:	89 c2                	mov    %eax,%edx
c0101087:	ec                   	in     (%dx),%al
c0101088:	88 45 f5             	mov    %al,-0xb(%ebp)
c010108b:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0101091:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101095:	89 c2                	mov    %eax,%edx
c0101097:	ec                   	in     (%dx),%al
c0101098:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c010109b:	c9                   	leave  
c010109c:	c3                   	ret    

c010109d <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010109d:	55                   	push   %ebp
c010109e:	89 e5                	mov    %esp,%ebp
c01010a0:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01010a3:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01010aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010ad:	0f b7 00             	movzwl (%eax),%eax
c01010b0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01010b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b7:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01010bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010bf:	0f b7 00             	movzwl (%eax),%eax
c01010c2:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01010c6:	74 12                	je     c01010da <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010c8:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010cf:	66 c7 05 46 24 15 c0 	movw   $0x3b4,0xc0152446
c01010d6:	b4 03 
c01010d8:	eb 13                	jmp    c01010ed <cga_init+0x50>
    } else {
        *cp = was;
c01010da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010dd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010e1:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010e4:	66 c7 05 46 24 15 c0 	movw   $0x3d4,0xc0152446
c01010eb:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010ed:	0f b7 05 46 24 15 c0 	movzwl 0xc0152446,%eax
c01010f4:	0f b7 c0             	movzwl %ax,%eax
c01010f7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010fb:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010ff:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101103:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101107:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101108:	0f b7 05 46 24 15 c0 	movzwl 0xc0152446,%eax
c010110f:	83 c0 01             	add    $0x1,%eax
c0101112:	0f b7 c0             	movzwl %ax,%eax
c0101115:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101119:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010111d:	89 c2                	mov    %eax,%edx
c010111f:	ec                   	in     (%dx),%al
c0101120:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101123:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101127:	0f b6 c0             	movzbl %al,%eax
c010112a:	c1 e0 08             	shl    $0x8,%eax
c010112d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101130:	0f b7 05 46 24 15 c0 	movzwl 0xc0152446,%eax
c0101137:	0f b7 c0             	movzwl %ax,%eax
c010113a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010113e:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101142:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101146:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010114a:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010114b:	0f b7 05 46 24 15 c0 	movzwl 0xc0152446,%eax
c0101152:	83 c0 01             	add    $0x1,%eax
c0101155:	0f b7 c0             	movzwl %ax,%eax
c0101158:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010115c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101160:	89 c2                	mov    %eax,%edx
c0101162:	ec                   	in     (%dx),%al
c0101163:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101166:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010116a:	0f b6 c0             	movzbl %al,%eax
c010116d:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101170:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101173:	a3 40 24 15 c0       	mov    %eax,0xc0152440
    crt_pos = pos;
c0101178:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010117b:	66 a3 44 24 15 c0    	mov    %ax,0xc0152444
}
c0101181:	c9                   	leave  
c0101182:	c3                   	ret    

c0101183 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101183:	55                   	push   %ebp
c0101184:	89 e5                	mov    %esp,%ebp
c0101186:	83 ec 48             	sub    $0x48,%esp
c0101189:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010118f:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101193:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101197:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010119b:	ee                   	out    %al,(%dx)
c010119c:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01011a2:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01011a6:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011aa:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011ae:	ee                   	out    %al,(%dx)
c01011af:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01011b5:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01011b9:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011bd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011c1:	ee                   	out    %al,(%dx)
c01011c2:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011c8:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011cc:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011d0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011d4:	ee                   	out    %al,(%dx)
c01011d5:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011db:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011df:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011e3:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011e7:	ee                   	out    %al,(%dx)
c01011e8:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011ee:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011f2:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011f6:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011fa:	ee                   	out    %al,(%dx)
c01011fb:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0101201:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101205:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101209:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010120d:	ee                   	out    %al,(%dx)
c010120e:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101214:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101218:	89 c2                	mov    %eax,%edx
c010121a:	ec                   	in     (%dx),%al
c010121b:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c010121e:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101222:	3c ff                	cmp    $0xff,%al
c0101224:	0f 95 c0             	setne  %al
c0101227:	0f b6 c0             	movzbl %al,%eax
c010122a:	a3 48 24 15 c0       	mov    %eax,0xc0152448
c010122f:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101235:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101239:	89 c2                	mov    %eax,%edx
c010123b:	ec                   	in     (%dx),%al
c010123c:	88 45 d5             	mov    %al,-0x2b(%ebp)
c010123f:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101245:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101249:	89 c2                	mov    %eax,%edx
c010124b:	ec                   	in     (%dx),%al
c010124c:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010124f:	a1 48 24 15 c0       	mov    0xc0152448,%eax
c0101254:	85 c0                	test   %eax,%eax
c0101256:	74 0c                	je     c0101264 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101258:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010125f:	e8 4b 0f 00 00       	call   c01021af <pic_enable>
    }
}
c0101264:	c9                   	leave  
c0101265:	c3                   	ret    

c0101266 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101266:	55                   	push   %ebp
c0101267:	89 e5                	mov    %esp,%ebp
c0101269:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010126c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101273:	eb 09                	jmp    c010127e <lpt_putc_sub+0x18>
        delay();
c0101275:	e8 db fd ff ff       	call   c0101055 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010127a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010127e:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101284:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101288:	89 c2                	mov    %eax,%edx
c010128a:	ec                   	in     (%dx),%al
c010128b:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010128e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101292:	84 c0                	test   %al,%al
c0101294:	78 09                	js     c010129f <lpt_putc_sub+0x39>
c0101296:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010129d:	7e d6                	jle    c0101275 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c010129f:	8b 45 08             	mov    0x8(%ebp),%eax
c01012a2:	0f b6 c0             	movzbl %al,%eax
c01012a5:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c01012ab:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01012ae:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01012b2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01012b6:	ee                   	out    %al,(%dx)
c01012b7:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c01012bd:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01012c1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01012c5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012c9:	ee                   	out    %al,(%dx)
c01012ca:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012d0:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012d4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012d8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012dc:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012dd:	c9                   	leave  
c01012de:	c3                   	ret    

c01012df <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012df:	55                   	push   %ebp
c01012e0:	89 e5                	mov    %esp,%ebp
c01012e2:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012e5:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012e9:	74 0d                	je     c01012f8 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01012ee:	89 04 24             	mov    %eax,(%esp)
c01012f1:	e8 70 ff ff ff       	call   c0101266 <lpt_putc_sub>
c01012f6:	eb 24                	jmp    c010131c <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012f8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012ff:	e8 62 ff ff ff       	call   c0101266 <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101304:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010130b:	e8 56 ff ff ff       	call   c0101266 <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101310:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101317:	e8 4a ff ff ff       	call   c0101266 <lpt_putc_sub>
    }
}
c010131c:	c9                   	leave  
c010131d:	c3                   	ret    

c010131e <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c010131e:	55                   	push   %ebp
c010131f:	89 e5                	mov    %esp,%ebp
c0101321:	53                   	push   %ebx
c0101322:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101325:	8b 45 08             	mov    0x8(%ebp),%eax
c0101328:	b0 00                	mov    $0x0,%al
c010132a:	85 c0                	test   %eax,%eax
c010132c:	75 07                	jne    c0101335 <cga_putc+0x17>
        c |= 0x0700;
c010132e:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101335:	8b 45 08             	mov    0x8(%ebp),%eax
c0101338:	0f b6 c0             	movzbl %al,%eax
c010133b:	83 f8 0a             	cmp    $0xa,%eax
c010133e:	74 4c                	je     c010138c <cga_putc+0x6e>
c0101340:	83 f8 0d             	cmp    $0xd,%eax
c0101343:	74 57                	je     c010139c <cga_putc+0x7e>
c0101345:	83 f8 08             	cmp    $0x8,%eax
c0101348:	0f 85 88 00 00 00    	jne    c01013d6 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c010134e:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c0101355:	66 85 c0             	test   %ax,%ax
c0101358:	74 30                	je     c010138a <cga_putc+0x6c>
            crt_pos --;
c010135a:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c0101361:	83 e8 01             	sub    $0x1,%eax
c0101364:	66 a3 44 24 15 c0    	mov    %ax,0xc0152444
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010136a:	a1 40 24 15 c0       	mov    0xc0152440,%eax
c010136f:	0f b7 15 44 24 15 c0 	movzwl 0xc0152444,%edx
c0101376:	0f b7 d2             	movzwl %dx,%edx
c0101379:	01 d2                	add    %edx,%edx
c010137b:	01 c2                	add    %eax,%edx
c010137d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101380:	b0 00                	mov    $0x0,%al
c0101382:	83 c8 20             	or     $0x20,%eax
c0101385:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101388:	eb 72                	jmp    c01013fc <cga_putc+0xde>
c010138a:	eb 70                	jmp    c01013fc <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c010138c:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c0101393:	83 c0 50             	add    $0x50,%eax
c0101396:	66 a3 44 24 15 c0    	mov    %ax,0xc0152444
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c010139c:	0f b7 1d 44 24 15 c0 	movzwl 0xc0152444,%ebx
c01013a3:	0f b7 0d 44 24 15 c0 	movzwl 0xc0152444,%ecx
c01013aa:	0f b7 c1             	movzwl %cx,%eax
c01013ad:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01013b3:	c1 e8 10             	shr    $0x10,%eax
c01013b6:	89 c2                	mov    %eax,%edx
c01013b8:	66 c1 ea 06          	shr    $0x6,%dx
c01013bc:	89 d0                	mov    %edx,%eax
c01013be:	c1 e0 02             	shl    $0x2,%eax
c01013c1:	01 d0                	add    %edx,%eax
c01013c3:	c1 e0 04             	shl    $0x4,%eax
c01013c6:	29 c1                	sub    %eax,%ecx
c01013c8:	89 ca                	mov    %ecx,%edx
c01013ca:	89 d8                	mov    %ebx,%eax
c01013cc:	29 d0                	sub    %edx,%eax
c01013ce:	66 a3 44 24 15 c0    	mov    %ax,0xc0152444
        break;
c01013d4:	eb 26                	jmp    c01013fc <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013d6:	8b 0d 40 24 15 c0    	mov    0xc0152440,%ecx
c01013dc:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c01013e3:	8d 50 01             	lea    0x1(%eax),%edx
c01013e6:	66 89 15 44 24 15 c0 	mov    %dx,0xc0152444
c01013ed:	0f b7 c0             	movzwl %ax,%eax
c01013f0:	01 c0                	add    %eax,%eax
c01013f2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01013f8:	66 89 02             	mov    %ax,(%edx)
        break;
c01013fb:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013fc:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c0101403:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101407:	76 5b                	jbe    c0101464 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101409:	a1 40 24 15 c0       	mov    0xc0152440,%eax
c010140e:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101414:	a1 40 24 15 c0       	mov    0xc0152440,%eax
c0101419:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101420:	00 
c0101421:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101425:	89 04 24             	mov    %eax,(%esp)
c0101428:	e8 79 42 01 00       	call   c01156a6 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010142d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101434:	eb 15                	jmp    c010144b <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101436:	a1 40 24 15 c0       	mov    0xc0152440,%eax
c010143b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010143e:	01 d2                	add    %edx,%edx
c0101440:	01 d0                	add    %edx,%eax
c0101442:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101447:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010144b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101452:	7e e2                	jle    c0101436 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101454:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c010145b:	83 e8 50             	sub    $0x50,%eax
c010145e:	66 a3 44 24 15 c0    	mov    %ax,0xc0152444
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101464:	0f b7 05 46 24 15 c0 	movzwl 0xc0152446,%eax
c010146b:	0f b7 c0             	movzwl %ax,%eax
c010146e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101472:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101476:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010147a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010147e:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c010147f:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c0101486:	66 c1 e8 08          	shr    $0x8,%ax
c010148a:	0f b6 c0             	movzbl %al,%eax
c010148d:	0f b7 15 46 24 15 c0 	movzwl 0xc0152446,%edx
c0101494:	83 c2 01             	add    $0x1,%edx
c0101497:	0f b7 d2             	movzwl %dx,%edx
c010149a:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010149e:	88 45 ed             	mov    %al,-0x13(%ebp)
c01014a1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01014a5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01014a9:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c01014aa:	0f b7 05 46 24 15 c0 	movzwl 0xc0152446,%eax
c01014b1:	0f b7 c0             	movzwl %ax,%eax
c01014b4:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01014b8:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c01014bc:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01014c0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01014c5:	0f b7 05 44 24 15 c0 	movzwl 0xc0152444,%eax
c01014cc:	0f b6 c0             	movzbl %al,%eax
c01014cf:	0f b7 15 46 24 15 c0 	movzwl 0xc0152446,%edx
c01014d6:	83 c2 01             	add    $0x1,%edx
c01014d9:	0f b7 d2             	movzwl %dx,%edx
c01014dc:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014e0:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014e3:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014e7:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014eb:	ee                   	out    %al,(%dx)
}
c01014ec:	83 c4 34             	add    $0x34,%esp
c01014ef:	5b                   	pop    %ebx
c01014f0:	5d                   	pop    %ebp
c01014f1:	c3                   	ret    

c01014f2 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014f2:	55                   	push   %ebp
c01014f3:	89 e5                	mov    %esp,%ebp
c01014f5:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014ff:	eb 09                	jmp    c010150a <serial_putc_sub+0x18>
        delay();
c0101501:	e8 4f fb ff ff       	call   c0101055 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101506:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010150a:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101510:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101514:	89 c2                	mov    %eax,%edx
c0101516:	ec                   	in     (%dx),%al
c0101517:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010151a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010151e:	0f b6 c0             	movzbl %al,%eax
c0101521:	83 e0 20             	and    $0x20,%eax
c0101524:	85 c0                	test   %eax,%eax
c0101526:	75 09                	jne    c0101531 <serial_putc_sub+0x3f>
c0101528:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010152f:	7e d0                	jle    c0101501 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101531:	8b 45 08             	mov    0x8(%ebp),%eax
c0101534:	0f b6 c0             	movzbl %al,%eax
c0101537:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010153d:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101540:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101544:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101548:	ee                   	out    %al,(%dx)
}
c0101549:	c9                   	leave  
c010154a:	c3                   	ret    

c010154b <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010154b:	55                   	push   %ebp
c010154c:	89 e5                	mov    %esp,%ebp
c010154e:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101551:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101555:	74 0d                	je     c0101564 <serial_putc+0x19>
        serial_putc_sub(c);
c0101557:	8b 45 08             	mov    0x8(%ebp),%eax
c010155a:	89 04 24             	mov    %eax,(%esp)
c010155d:	e8 90 ff ff ff       	call   c01014f2 <serial_putc_sub>
c0101562:	eb 24                	jmp    c0101588 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101564:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010156b:	e8 82 ff ff ff       	call   c01014f2 <serial_putc_sub>
        serial_putc_sub(' ');
c0101570:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101577:	e8 76 ff ff ff       	call   c01014f2 <serial_putc_sub>
        serial_putc_sub('\b');
c010157c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101583:	e8 6a ff ff ff       	call   c01014f2 <serial_putc_sub>
    }
}
c0101588:	c9                   	leave  
c0101589:	c3                   	ret    

c010158a <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010158a:	55                   	push   %ebp
c010158b:	89 e5                	mov    %esp,%ebp
c010158d:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101590:	eb 33                	jmp    c01015c5 <cons_intr+0x3b>
        if (c != 0) {
c0101592:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101596:	74 2d                	je     c01015c5 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101598:	a1 64 26 15 c0       	mov    0xc0152664,%eax
c010159d:	8d 50 01             	lea    0x1(%eax),%edx
c01015a0:	89 15 64 26 15 c0    	mov    %edx,0xc0152664
c01015a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01015a9:	88 90 60 24 15 c0    	mov    %dl,-0x3feadba0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c01015af:	a1 64 26 15 c0       	mov    0xc0152664,%eax
c01015b4:	3d 00 02 00 00       	cmp    $0x200,%eax
c01015b9:	75 0a                	jne    c01015c5 <cons_intr+0x3b>
                cons.wpos = 0;
c01015bb:	c7 05 64 26 15 c0 00 	movl   $0x0,0xc0152664
c01015c2:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01015c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01015c8:	ff d0                	call   *%eax
c01015ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015cd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015d1:	75 bf                	jne    c0101592 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015d3:	c9                   	leave  
c01015d4:	c3                   	ret    

c01015d5 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015d5:	55                   	push   %ebp
c01015d6:	89 e5                	mov    %esp,%ebp
c01015d8:	83 ec 10             	sub    $0x10,%esp
c01015db:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015e1:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015e5:	89 c2                	mov    %eax,%edx
c01015e7:	ec                   	in     (%dx),%al
c01015e8:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015eb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015ef:	0f b6 c0             	movzbl %al,%eax
c01015f2:	83 e0 01             	and    $0x1,%eax
c01015f5:	85 c0                	test   %eax,%eax
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x2b>
        return -1;
c01015f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015fe:	eb 2a                	jmp    c010162a <serial_proc_data+0x55>
c0101600:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101606:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010160a:	89 c2                	mov    %eax,%edx
c010160c:	ec                   	in     (%dx),%al
c010160d:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c0101610:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101614:	0f b6 c0             	movzbl %al,%eax
c0101617:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c010161a:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c010161e:	75 07                	jne    c0101627 <serial_proc_data+0x52>
        c = '\b';
c0101620:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101627:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010162a:	c9                   	leave  
c010162b:	c3                   	ret    

c010162c <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010162c:	55                   	push   %ebp
c010162d:	89 e5                	mov    %esp,%ebp
c010162f:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101632:	a1 48 24 15 c0       	mov    0xc0152448,%eax
c0101637:	85 c0                	test   %eax,%eax
c0101639:	74 0c                	je     c0101647 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010163b:	c7 04 24 d5 15 10 c0 	movl   $0xc01015d5,(%esp)
c0101642:	e8 43 ff ff ff       	call   c010158a <cons_intr>
    }
}
c0101647:	c9                   	leave  
c0101648:	c3                   	ret    

c0101649 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101649:	55                   	push   %ebp
c010164a:	89 e5                	mov    %esp,%ebp
c010164c:	83 ec 38             	sub    $0x38,%esp
c010164f:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101655:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101659:	89 c2                	mov    %eax,%edx
c010165b:	ec                   	in     (%dx),%al
c010165c:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c010165f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101663:	0f b6 c0             	movzbl %al,%eax
c0101666:	83 e0 01             	and    $0x1,%eax
c0101669:	85 c0                	test   %eax,%eax
c010166b:	75 0a                	jne    c0101677 <kbd_proc_data+0x2e>
        return -1;
c010166d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101672:	e9 59 01 00 00       	jmp    c01017d0 <kbd_proc_data+0x187>
c0101677:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010167d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101681:	89 c2                	mov    %eax,%edx
c0101683:	ec                   	in     (%dx),%al
c0101684:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101687:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c010168b:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010168e:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101692:	75 17                	jne    c01016ab <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101694:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c0101699:	83 c8 40             	or     $0x40,%eax
c010169c:	a3 68 26 15 c0       	mov    %eax,0xc0152668
        return 0;
c01016a1:	b8 00 00 00 00       	mov    $0x0,%eax
c01016a6:	e9 25 01 00 00       	jmp    c01017d0 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c01016ab:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016af:	84 c0                	test   %al,%al
c01016b1:	79 47                	jns    c01016fa <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01016b3:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c01016b8:	83 e0 40             	and    $0x40,%eax
c01016bb:	85 c0                	test   %eax,%eax
c01016bd:	75 09                	jne    c01016c8 <kbd_proc_data+0x7f>
c01016bf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016c3:	83 e0 7f             	and    $0x7f,%eax
c01016c6:	eb 04                	jmp    c01016cc <kbd_proc_data+0x83>
c01016c8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016cc:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016cf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016d3:	0f b6 80 40 f0 14 c0 	movzbl -0x3feb0fc0(%eax),%eax
c01016da:	83 c8 40             	or     $0x40,%eax
c01016dd:	0f b6 c0             	movzbl %al,%eax
c01016e0:	f7 d0                	not    %eax
c01016e2:	89 c2                	mov    %eax,%edx
c01016e4:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c01016e9:	21 d0                	and    %edx,%eax
c01016eb:	a3 68 26 15 c0       	mov    %eax,0xc0152668
        return 0;
c01016f0:	b8 00 00 00 00       	mov    $0x0,%eax
c01016f5:	e9 d6 00 00 00       	jmp    c01017d0 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016fa:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c01016ff:	83 e0 40             	and    $0x40,%eax
c0101702:	85 c0                	test   %eax,%eax
c0101704:	74 11                	je     c0101717 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101706:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c010170a:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c010170f:	83 e0 bf             	and    $0xffffffbf,%eax
c0101712:	a3 68 26 15 c0       	mov    %eax,0xc0152668
    }

    shift |= shiftcode[data];
c0101717:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010171b:	0f b6 80 40 f0 14 c0 	movzbl -0x3feb0fc0(%eax),%eax
c0101722:	0f b6 d0             	movzbl %al,%edx
c0101725:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c010172a:	09 d0                	or     %edx,%eax
c010172c:	a3 68 26 15 c0       	mov    %eax,0xc0152668
    shift ^= togglecode[data];
c0101731:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101735:	0f b6 80 40 f1 14 c0 	movzbl -0x3feb0ec0(%eax),%eax
c010173c:	0f b6 d0             	movzbl %al,%edx
c010173f:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c0101744:	31 d0                	xor    %edx,%eax
c0101746:	a3 68 26 15 c0       	mov    %eax,0xc0152668

    c = charcode[shift & (CTL | SHIFT)][data];
c010174b:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c0101750:	83 e0 03             	and    $0x3,%eax
c0101753:	8b 14 85 40 f5 14 c0 	mov    -0x3feb0ac0(,%eax,4),%edx
c010175a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010175e:	01 d0                	add    %edx,%eax
c0101760:	0f b6 00             	movzbl (%eax),%eax
c0101763:	0f b6 c0             	movzbl %al,%eax
c0101766:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101769:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c010176e:	83 e0 08             	and    $0x8,%eax
c0101771:	85 c0                	test   %eax,%eax
c0101773:	74 22                	je     c0101797 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101775:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101779:	7e 0c                	jle    c0101787 <kbd_proc_data+0x13e>
c010177b:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c010177f:	7f 06                	jg     c0101787 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101781:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101785:	eb 10                	jmp    c0101797 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101787:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c010178b:	7e 0a                	jle    c0101797 <kbd_proc_data+0x14e>
c010178d:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101791:	7f 04                	jg     c0101797 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101793:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101797:	a1 68 26 15 c0       	mov    0xc0152668,%eax
c010179c:	f7 d0                	not    %eax
c010179e:	83 e0 06             	and    $0x6,%eax
c01017a1:	85 c0                	test   %eax,%eax
c01017a3:	75 28                	jne    c01017cd <kbd_proc_data+0x184>
c01017a5:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c01017ac:	75 1f                	jne    c01017cd <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c01017ae:	c7 04 24 43 5b 11 c0 	movl   $0xc0115b43,(%esp)
c01017b5:	e8 b7 eb ff ff       	call   c0100371 <cprintf>
c01017ba:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01017c0:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017c8:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017cc:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017d0:	c9                   	leave  
c01017d1:	c3                   	ret    

c01017d2 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017d2:	55                   	push   %ebp
c01017d3:	89 e5                	mov    %esp,%ebp
c01017d5:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017d8:	c7 04 24 49 16 10 c0 	movl   $0xc0101649,(%esp)
c01017df:	e8 a6 fd ff ff       	call   c010158a <cons_intr>
}
c01017e4:	c9                   	leave  
c01017e5:	c3                   	ret    

c01017e6 <kbd_init>:

static void
kbd_init(void) {
c01017e6:	55                   	push   %ebp
c01017e7:	89 e5                	mov    %esp,%ebp
c01017e9:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017ec:	e8 e1 ff ff ff       	call   c01017d2 <kbd_intr>
    pic_enable(IRQ_KBD);
c01017f1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017f8:	e8 b2 09 00 00       	call   c01021af <pic_enable>
}
c01017fd:	c9                   	leave  
c01017fe:	c3                   	ret    

c01017ff <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017ff:	55                   	push   %ebp
c0101800:	89 e5                	mov    %esp,%ebp
c0101802:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101805:	e8 93 f8 ff ff       	call   c010109d <cga_init>
    serial_init();
c010180a:	e8 74 f9 ff ff       	call   c0101183 <serial_init>
    kbd_init();
c010180f:	e8 d2 ff ff ff       	call   c01017e6 <kbd_init>
    if (!serial_exists) {
c0101814:	a1 48 24 15 c0       	mov    0xc0152448,%eax
c0101819:	85 c0                	test   %eax,%eax
c010181b:	75 0c                	jne    c0101829 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c010181d:	c7 04 24 4f 5b 11 c0 	movl   $0xc0115b4f,(%esp)
c0101824:	e8 48 eb ff ff       	call   c0100371 <cprintf>
    }
}
c0101829:	c9                   	leave  
c010182a:	c3                   	ret    

c010182b <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010182b:	55                   	push   %ebp
c010182c:	89 e5                	mov    %esp,%ebp
c010182e:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101831:	e8 e2 f7 ff ff       	call   c0101018 <__intr_save>
c0101836:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101839:	8b 45 08             	mov    0x8(%ebp),%eax
c010183c:	89 04 24             	mov    %eax,(%esp)
c010183f:	e8 9b fa ff ff       	call   c01012df <lpt_putc>
        cga_putc(c);
c0101844:	8b 45 08             	mov    0x8(%ebp),%eax
c0101847:	89 04 24             	mov    %eax,(%esp)
c010184a:	e8 cf fa ff ff       	call   c010131e <cga_putc>
        serial_putc(c);
c010184f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101852:	89 04 24             	mov    %eax,(%esp)
c0101855:	e8 f1 fc ff ff       	call   c010154b <serial_putc>
    }
    local_intr_restore(intr_flag);
c010185a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010185d:	89 04 24             	mov    %eax,(%esp)
c0101860:	e8 dd f7 ff ff       	call   c0101042 <__intr_restore>
}
c0101865:	c9                   	leave  
c0101866:	c3                   	ret    

c0101867 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101867:	55                   	push   %ebp
c0101868:	89 e5                	mov    %esp,%ebp
c010186a:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c010186d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101874:	e8 9f f7 ff ff       	call   c0101018 <__intr_save>
c0101879:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010187c:	e8 ab fd ff ff       	call   c010162c <serial_intr>
        kbd_intr();
c0101881:	e8 4c ff ff ff       	call   c01017d2 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101886:	8b 15 60 26 15 c0    	mov    0xc0152660,%edx
c010188c:	a1 64 26 15 c0       	mov    0xc0152664,%eax
c0101891:	39 c2                	cmp    %eax,%edx
c0101893:	74 31                	je     c01018c6 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101895:	a1 60 26 15 c0       	mov    0xc0152660,%eax
c010189a:	8d 50 01             	lea    0x1(%eax),%edx
c010189d:	89 15 60 26 15 c0    	mov    %edx,0xc0152660
c01018a3:	0f b6 80 60 24 15 c0 	movzbl -0x3feadba0(%eax),%eax
c01018aa:	0f b6 c0             	movzbl %al,%eax
c01018ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c01018b0:	a1 60 26 15 c0       	mov    0xc0152660,%eax
c01018b5:	3d 00 02 00 00       	cmp    $0x200,%eax
c01018ba:	75 0a                	jne    c01018c6 <cons_getc+0x5f>
                cons.rpos = 0;
c01018bc:	c7 05 60 26 15 c0 00 	movl   $0x0,0xc0152660
c01018c3:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01018c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018c9:	89 04 24             	mov    %eax,(%esp)
c01018cc:	e8 71 f7 ff ff       	call   c0101042 <__intr_restore>
    return c;
c01018d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018d4:	c9                   	leave  
c01018d5:	c3                   	ret    

c01018d6 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018d6:	55                   	push   %ebp
c01018d7:	89 e5                	mov    %esp,%ebp
c01018d9:	83 ec 14             	sub    $0x14,%esp
c01018dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01018df:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018e3:	90                   	nop
c01018e4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018e8:	83 c0 07             	add    $0x7,%eax
c01018eb:	0f b7 c0             	movzwl %ax,%eax
c01018ee:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018f2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018f6:	89 c2                	mov    %eax,%edx
c01018f8:	ec                   	in     (%dx),%al
c01018f9:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018fc:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101900:	0f b6 c0             	movzbl %al,%eax
c0101903:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101906:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101909:	25 80 00 00 00       	and    $0x80,%eax
c010190e:	85 c0                	test   %eax,%eax
c0101910:	75 d2                	jne    c01018e4 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0101912:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0101916:	74 11                	je     c0101929 <ide_wait_ready+0x53>
c0101918:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010191b:	83 e0 21             	and    $0x21,%eax
c010191e:	85 c0                	test   %eax,%eax
c0101920:	74 07                	je     c0101929 <ide_wait_ready+0x53>
        return -1;
c0101922:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101927:	eb 05                	jmp    c010192e <ide_wait_ready+0x58>
    }
    return 0;
c0101929:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010192e:	c9                   	leave  
c010192f:	c3                   	ret    

c0101930 <ide_init>:

void
ide_init(void) {
c0101930:	55                   	push   %ebp
c0101931:	89 e5                	mov    %esp,%ebp
c0101933:	57                   	push   %edi
c0101934:	53                   	push   %ebx
c0101935:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010193b:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101941:	e9 d6 02 00 00       	jmp    c0101c1c <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101946:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010194a:	c1 e0 03             	shl    $0x3,%eax
c010194d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101954:	29 c2                	sub    %eax,%edx
c0101956:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c010195c:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c010195f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101963:	66 d1 e8             	shr    %ax
c0101966:	0f b7 c0             	movzwl %ax,%eax
c0101969:	0f b7 04 85 70 5b 11 	movzwl -0x3feea490(,%eax,4),%eax
c0101970:	c0 
c0101971:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101975:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101979:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101980:	00 
c0101981:	89 04 24             	mov    %eax,(%esp)
c0101984:	e8 4d ff ff ff       	call   c01018d6 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101989:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010198d:	83 e0 01             	and    $0x1,%eax
c0101990:	c1 e0 04             	shl    $0x4,%eax
c0101993:	83 c8 e0             	or     $0xffffffe0,%eax
c0101996:	0f b6 c0             	movzbl %al,%eax
c0101999:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010199d:	83 c2 06             	add    $0x6,%edx
c01019a0:	0f b7 d2             	movzwl %dx,%edx
c01019a3:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c01019a7:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019aa:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01019ae:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01019b2:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019b3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019be:	00 
c01019bf:	89 04 24             	mov    %eax,(%esp)
c01019c2:	e8 0f ff ff ff       	call   c01018d6 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019c7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019cb:	83 c0 07             	add    $0x7,%eax
c01019ce:	0f b7 c0             	movzwl %ax,%eax
c01019d1:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019d5:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019d9:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019dd:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019e1:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019e2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019ed:	00 
c01019ee:	89 04 24             	mov    %eax,(%esp)
c01019f1:	e8 e0 fe ff ff       	call   c01018d6 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019f6:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019fa:	83 c0 07             	add    $0x7,%eax
c01019fd:	0f b7 c0             	movzwl %ax,%eax
c0101a00:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a04:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0101a08:	89 c2                	mov    %eax,%edx
c0101a0a:	ec                   	in     (%dx),%al
c0101a0b:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0101a0e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101a12:	84 c0                	test   %al,%al
c0101a14:	0f 84 f7 01 00 00    	je     c0101c11 <ide_init+0x2e1>
c0101a1a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a1e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101a25:	00 
c0101a26:	89 04 24             	mov    %eax,(%esp)
c0101a29:	e8 a8 fe ff ff       	call   c01018d6 <ide_wait_ready>
c0101a2e:	85 c0                	test   %eax,%eax
c0101a30:	0f 85 db 01 00 00    	jne    c0101c11 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a36:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a3a:	c1 e0 03             	shl    $0x3,%eax
c0101a3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a44:	29 c2                	sub    %eax,%edx
c0101a46:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101a4c:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a4f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a53:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a56:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a5c:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a5f:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a66:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a69:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a6f:	89 cb                	mov    %ecx,%ebx
c0101a71:	89 df                	mov    %ebx,%edi
c0101a73:	89 c1                	mov    %eax,%ecx
c0101a75:	fc                   	cld    
c0101a76:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a78:	89 c8                	mov    %ecx,%eax
c0101a7a:	89 fb                	mov    %edi,%ebx
c0101a7c:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a7f:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a82:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8e:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a94:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a97:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a9a:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a9f:	85 c0                	test   %eax,%eax
c0101aa1:	74 0e                	je     c0101ab1 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aa6:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101aac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101aaf:	eb 09                	jmp    c0101aba <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101ab1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ab4:	8b 40 78             	mov    0x78(%eax),%eax
c0101ab7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101aba:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101abe:	c1 e0 03             	shl    $0x3,%eax
c0101ac1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ac8:	29 c2                	sub    %eax,%edx
c0101aca:	81 c2 80 26 15 c0    	add    $0xc0152680,%edx
c0101ad0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101ad3:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101ad6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ada:	c1 e0 03             	shl    $0x3,%eax
c0101add:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ae4:	29 c2                	sub    %eax,%edx
c0101ae6:	81 c2 80 26 15 c0    	add    $0xc0152680,%edx
c0101aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101aef:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101af2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101af5:	83 c0 62             	add    $0x62,%eax
c0101af8:	0f b7 00             	movzwl (%eax),%eax
c0101afb:	0f b7 c0             	movzwl %ax,%eax
c0101afe:	25 00 02 00 00       	and    $0x200,%eax
c0101b03:	85 c0                	test   %eax,%eax
c0101b05:	75 24                	jne    c0101b2b <ide_init+0x1fb>
c0101b07:	c7 44 24 0c 78 5b 11 	movl   $0xc0115b78,0xc(%esp)
c0101b0e:	c0 
c0101b0f:	c7 44 24 08 bb 5b 11 	movl   $0xc0115bbb,0x8(%esp)
c0101b16:	c0 
c0101b17:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101b1e:	00 
c0101b1f:	c7 04 24 d0 5b 11 c0 	movl   $0xc0115bd0,(%esp)
c0101b26:	e8 b3 f3 ff ff       	call   c0100ede <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b2b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b2f:	c1 e0 03             	shl    $0x3,%eax
c0101b32:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b39:	29 c2                	sub    %eax,%edx
c0101b3b:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101b41:	83 c0 0c             	add    $0xc,%eax
c0101b44:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b4a:	83 c0 36             	add    $0x36,%eax
c0101b4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b50:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b5e:	eb 34                	jmp    c0101b94 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b63:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b66:	01 c2                	add    %eax,%edx
c0101b68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b6b:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b6e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b71:	01 c8                	add    %ecx,%eax
c0101b73:	0f b6 00             	movzbl (%eax),%eax
c0101b76:	88 02                	mov    %al,(%edx)
c0101b78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b7b:	8d 50 01             	lea    0x1(%eax),%edx
c0101b7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b81:	01 c2                	add    %eax,%edx
c0101b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b86:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b89:	01 c8                	add    %ecx,%eax
c0101b8b:	0f b6 00             	movzbl (%eax),%eax
c0101b8e:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b90:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b97:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b9a:	72 c4                	jb     c0101b60 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101ba2:	01 d0                	add    %edx,%eax
c0101ba4:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101ba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101baa:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101bad:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101bb0:	85 c0                	test   %eax,%eax
c0101bb2:	74 0f                	je     c0101bc3 <ide_init+0x293>
c0101bb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101bb7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101bba:	01 d0                	add    %edx,%eax
c0101bbc:	0f b6 00             	movzbl (%eax),%eax
c0101bbf:	3c 20                	cmp    $0x20,%al
c0101bc1:	74 d9                	je     c0101b9c <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101bc3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bc7:	c1 e0 03             	shl    $0x3,%eax
c0101bca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bd1:	29 c2                	sub    %eax,%edx
c0101bd3:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101bd9:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bdc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101be0:	c1 e0 03             	shl    $0x3,%eax
c0101be3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bea:	29 c2                	sub    %eax,%edx
c0101bec:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101bf2:	8b 50 08             	mov    0x8(%eax),%edx
c0101bf5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bf9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bfd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101c01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101c05:	c7 04 24 e2 5b 11 c0 	movl   $0xc0115be2,(%esp)
c0101c0c:	e8 60 e7 ff ff       	call   c0100371 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101c11:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101c15:	83 c0 01             	add    $0x1,%eax
c0101c18:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101c1c:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101c21:	0f 86 1f fd ff ff    	jbe    c0101946 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c27:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c2e:	e8 7c 05 00 00       	call   c01021af <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c33:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c3a:	e8 70 05 00 00       	call   c01021af <pic_enable>
}
c0101c3f:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c45:	5b                   	pop    %ebx
c0101c46:	5f                   	pop    %edi
c0101c47:	5d                   	pop    %ebp
c0101c48:	c3                   	ret    

c0101c49 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c49:	55                   	push   %ebp
c0101c4a:	89 e5                	mov    %esp,%ebp
c0101c4c:	83 ec 04             	sub    $0x4,%esp
c0101c4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c52:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c56:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c5b:	77 24                	ja     c0101c81 <ide_device_valid+0x38>
c0101c5d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c61:	c1 e0 03             	shl    $0x3,%eax
c0101c64:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c6b:	29 c2                	sub    %eax,%edx
c0101c6d:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101c73:	0f b6 00             	movzbl (%eax),%eax
c0101c76:	84 c0                	test   %al,%al
c0101c78:	74 07                	je     c0101c81 <ide_device_valid+0x38>
c0101c7a:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c7f:	eb 05                	jmp    c0101c86 <ide_device_valid+0x3d>
c0101c81:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c86:	c9                   	leave  
c0101c87:	c3                   	ret    

c0101c88 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c88:	55                   	push   %ebp
c0101c89:	89 e5                	mov    %esp,%ebp
c0101c8b:	83 ec 08             	sub    $0x8,%esp
c0101c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c91:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c95:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c99:	89 04 24             	mov    %eax,(%esp)
c0101c9c:	e8 a8 ff ff ff       	call   c0101c49 <ide_device_valid>
c0101ca1:	85 c0                	test   %eax,%eax
c0101ca3:	74 1b                	je     c0101cc0 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101ca5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101ca9:	c1 e0 03             	shl    $0x3,%eax
c0101cac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101cb3:	29 c2                	sub    %eax,%edx
c0101cb5:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101cbb:	8b 40 08             	mov    0x8(%eax),%eax
c0101cbe:	eb 05                	jmp    c0101cc5 <ide_device_size+0x3d>
    }
    return 0;
c0101cc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101cc5:	c9                   	leave  
c0101cc6:	c3                   	ret    

c0101cc7 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101cc7:	55                   	push   %ebp
c0101cc8:	89 e5                	mov    %esp,%ebp
c0101cca:	57                   	push   %edi
c0101ccb:	53                   	push   %ebx
c0101ccc:	83 ec 50             	sub    $0x50,%esp
c0101ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cd2:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101cd6:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cdd:	77 24                	ja     c0101d03 <ide_read_secs+0x3c>
c0101cdf:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101ce4:	77 1d                	ja     c0101d03 <ide_read_secs+0x3c>
c0101ce6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101cea:	c1 e0 03             	shl    $0x3,%eax
c0101ced:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101cf4:	29 c2                	sub    %eax,%edx
c0101cf6:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101cfc:	0f b6 00             	movzbl (%eax),%eax
c0101cff:	84 c0                	test   %al,%al
c0101d01:	75 24                	jne    c0101d27 <ide_read_secs+0x60>
c0101d03:	c7 44 24 0c 00 5c 11 	movl   $0xc0115c00,0xc(%esp)
c0101d0a:	c0 
c0101d0b:	c7 44 24 08 bb 5b 11 	movl   $0xc0115bbb,0x8(%esp)
c0101d12:	c0 
c0101d13:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101d1a:	00 
c0101d1b:	c7 04 24 d0 5b 11 c0 	movl   $0xc0115bd0,(%esp)
c0101d22:	e8 b7 f1 ff ff       	call   c0100ede <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d27:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d2e:	77 0f                	ja     c0101d3f <ide_read_secs+0x78>
c0101d30:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d33:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d36:	01 d0                	add    %edx,%eax
c0101d38:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d3d:	76 24                	jbe    c0101d63 <ide_read_secs+0x9c>
c0101d3f:	c7 44 24 0c 28 5c 11 	movl   $0xc0115c28,0xc(%esp)
c0101d46:	c0 
c0101d47:	c7 44 24 08 bb 5b 11 	movl   $0xc0115bbb,0x8(%esp)
c0101d4e:	c0 
c0101d4f:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d56:	00 
c0101d57:	c7 04 24 d0 5b 11 c0 	movl   $0xc0115bd0,(%esp)
c0101d5e:	e8 7b f1 ff ff       	call   c0100ede <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d63:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d67:	66 d1 e8             	shr    %ax
c0101d6a:	0f b7 c0             	movzwl %ax,%eax
c0101d6d:	0f b7 04 85 70 5b 11 	movzwl -0x3feea490(,%eax,4),%eax
c0101d74:	c0 
c0101d75:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d79:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d7d:	66 d1 e8             	shr    %ax
c0101d80:	0f b7 c0             	movzwl %ax,%eax
c0101d83:	0f b7 04 85 72 5b 11 	movzwl -0x3feea48e(,%eax,4),%eax
c0101d8a:	c0 
c0101d8b:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d8f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d93:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d9a:	00 
c0101d9b:	89 04 24             	mov    %eax,(%esp)
c0101d9e:	e8 33 fb ff ff       	call   c01018d6 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101da3:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101da7:	83 c0 02             	add    $0x2,%eax
c0101daa:	0f b7 c0             	movzwl %ax,%eax
c0101dad:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101db1:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101db5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101db9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101dbd:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101dbe:	8b 45 14             	mov    0x14(%ebp),%eax
c0101dc1:	0f b6 c0             	movzbl %al,%eax
c0101dc4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dc8:	83 c2 02             	add    $0x2,%edx
c0101dcb:	0f b7 d2             	movzwl %dx,%edx
c0101dce:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dd2:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dd5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101dd9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ddd:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101dde:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de1:	0f b6 c0             	movzbl %al,%eax
c0101de4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101de8:	83 c2 03             	add    $0x3,%edx
c0101deb:	0f b7 d2             	movzwl %dx,%edx
c0101dee:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101df2:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101df5:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101df9:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101dfd:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e01:	c1 e8 08             	shr    $0x8,%eax
c0101e04:	0f b6 c0             	movzbl %al,%eax
c0101e07:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e0b:	83 c2 04             	add    $0x4,%edx
c0101e0e:	0f b7 d2             	movzwl %dx,%edx
c0101e11:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101e15:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101e18:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101e1c:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e20:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101e21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e24:	c1 e8 10             	shr    $0x10,%eax
c0101e27:	0f b6 c0             	movzbl %al,%eax
c0101e2a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e2e:	83 c2 05             	add    $0x5,%edx
c0101e31:	0f b7 d2             	movzwl %dx,%edx
c0101e34:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e38:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e3b:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e3f:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e43:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e44:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e48:	83 e0 01             	and    $0x1,%eax
c0101e4b:	c1 e0 04             	shl    $0x4,%eax
c0101e4e:	89 c2                	mov    %eax,%edx
c0101e50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e53:	c1 e8 18             	shr    $0x18,%eax
c0101e56:	83 e0 0f             	and    $0xf,%eax
c0101e59:	09 d0                	or     %edx,%eax
c0101e5b:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e5e:	0f b6 c0             	movzbl %al,%eax
c0101e61:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e65:	83 c2 06             	add    $0x6,%edx
c0101e68:	0f b7 d2             	movzwl %dx,%edx
c0101e6b:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e6f:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e72:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e76:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e7a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e7b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e7f:	83 c0 07             	add    $0x7,%eax
c0101e82:	0f b7 c0             	movzwl %ax,%eax
c0101e85:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e89:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e8d:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e91:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e95:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e9d:	eb 5a                	jmp    c0101ef9 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e9f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101ea3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101eaa:	00 
c0101eab:	89 04 24             	mov    %eax,(%esp)
c0101eae:	e8 23 fa ff ff       	call   c01018d6 <ide_wait_ready>
c0101eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101eb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101eba:	74 02                	je     c0101ebe <ide_read_secs+0x1f7>
            goto out;
c0101ebc:	eb 41                	jmp    c0101eff <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101ebe:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101ec2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101ec5:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ec8:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ecb:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101ed2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ed5:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ed8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101edb:	89 cb                	mov    %ecx,%ebx
c0101edd:	89 df                	mov    %ebx,%edi
c0101edf:	89 c1                	mov    %eax,%ecx
c0101ee1:	fc                   	cld    
c0101ee2:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ee4:	89 c8                	mov    %ecx,%eax
c0101ee6:	89 fb                	mov    %edi,%ebx
c0101ee8:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101eeb:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101eee:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ef2:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ef9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101efd:	75 a0                	jne    c0101e9f <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101f02:	83 c4 50             	add    $0x50,%esp
c0101f05:	5b                   	pop    %ebx
c0101f06:	5f                   	pop    %edi
c0101f07:	5d                   	pop    %ebp
c0101f08:	c3                   	ret    

c0101f09 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101f09:	55                   	push   %ebp
c0101f0a:	89 e5                	mov    %esp,%ebp
c0101f0c:	56                   	push   %esi
c0101f0d:	53                   	push   %ebx
c0101f0e:	83 ec 50             	sub    $0x50,%esp
c0101f11:	8b 45 08             	mov    0x8(%ebp),%eax
c0101f14:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101f18:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101f1f:	77 24                	ja     c0101f45 <ide_write_secs+0x3c>
c0101f21:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101f26:	77 1d                	ja     c0101f45 <ide_write_secs+0x3c>
c0101f28:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f2c:	c1 e0 03             	shl    $0x3,%eax
c0101f2f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f36:	29 c2                	sub    %eax,%edx
c0101f38:	8d 82 80 26 15 c0    	lea    -0x3fead980(%edx),%eax
c0101f3e:	0f b6 00             	movzbl (%eax),%eax
c0101f41:	84 c0                	test   %al,%al
c0101f43:	75 24                	jne    c0101f69 <ide_write_secs+0x60>
c0101f45:	c7 44 24 0c 00 5c 11 	movl   $0xc0115c00,0xc(%esp)
c0101f4c:	c0 
c0101f4d:	c7 44 24 08 bb 5b 11 	movl   $0xc0115bbb,0x8(%esp)
c0101f54:	c0 
c0101f55:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f5c:	00 
c0101f5d:	c7 04 24 d0 5b 11 c0 	movl   $0xc0115bd0,(%esp)
c0101f64:	e8 75 ef ff ff       	call   c0100ede <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f69:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f70:	77 0f                	ja     c0101f81 <ide_write_secs+0x78>
c0101f72:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f75:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f78:	01 d0                	add    %edx,%eax
c0101f7a:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f7f:	76 24                	jbe    c0101fa5 <ide_write_secs+0x9c>
c0101f81:	c7 44 24 0c 28 5c 11 	movl   $0xc0115c28,0xc(%esp)
c0101f88:	c0 
c0101f89:	c7 44 24 08 bb 5b 11 	movl   $0xc0115bbb,0x8(%esp)
c0101f90:	c0 
c0101f91:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f98:	00 
c0101f99:	c7 04 24 d0 5b 11 c0 	movl   $0xc0115bd0,(%esp)
c0101fa0:	e8 39 ef ff ff       	call   c0100ede <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101fa5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101fa9:	66 d1 e8             	shr    %ax
c0101fac:	0f b7 c0             	movzwl %ax,%eax
c0101faf:	0f b7 04 85 70 5b 11 	movzwl -0x3feea490(,%eax,4),%eax
c0101fb6:	c0 
c0101fb7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101fbb:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101fbf:	66 d1 e8             	shr    %ax
c0101fc2:	0f b7 c0             	movzwl %ax,%eax
c0101fc5:	0f b7 04 85 72 5b 11 	movzwl -0x3feea48e(,%eax,4),%eax
c0101fcc:	c0 
c0101fcd:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101fd1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fd5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fdc:	00 
c0101fdd:	89 04 24             	mov    %eax,(%esp)
c0101fe0:	e8 f1 f8 ff ff       	call   c01018d6 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fe5:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fe9:	83 c0 02             	add    $0x2,%eax
c0101fec:	0f b7 c0             	movzwl %ax,%eax
c0101fef:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ff3:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ff7:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101ffb:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fff:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0102000:	8b 45 14             	mov    0x14(%ebp),%eax
c0102003:	0f b6 c0             	movzbl %al,%eax
c0102006:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010200a:	83 c2 02             	add    $0x2,%edx
c010200d:	0f b7 d2             	movzwl %dx,%edx
c0102010:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102014:	88 45 e9             	mov    %al,-0x17(%ebp)
c0102017:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010201b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010201f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0102020:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102023:	0f b6 c0             	movzbl %al,%eax
c0102026:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010202a:	83 c2 03             	add    $0x3,%edx
c010202d:	0f b7 d2             	movzwl %dx,%edx
c0102030:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0102034:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102037:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010203b:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010203f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102040:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102043:	c1 e8 08             	shr    $0x8,%eax
c0102046:	0f b6 c0             	movzbl %al,%eax
c0102049:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010204d:	83 c2 04             	add    $0x4,%edx
c0102050:	0f b7 d2             	movzwl %dx,%edx
c0102053:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102057:	88 45 e1             	mov    %al,-0x1f(%ebp)
c010205a:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010205e:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102062:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0102063:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102066:	c1 e8 10             	shr    $0x10,%eax
c0102069:	0f b6 c0             	movzbl %al,%eax
c010206c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102070:	83 c2 05             	add    $0x5,%edx
c0102073:	0f b7 d2             	movzwl %dx,%edx
c0102076:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010207a:	88 45 dd             	mov    %al,-0x23(%ebp)
c010207d:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102081:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102085:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102086:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010208a:	83 e0 01             	and    $0x1,%eax
c010208d:	c1 e0 04             	shl    $0x4,%eax
c0102090:	89 c2                	mov    %eax,%edx
c0102092:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102095:	c1 e8 18             	shr    $0x18,%eax
c0102098:	83 e0 0f             	and    $0xf,%eax
c010209b:	09 d0                	or     %edx,%eax
c010209d:	83 c8 e0             	or     $0xffffffe0,%eax
c01020a0:	0f b6 c0             	movzbl %al,%eax
c01020a3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01020a7:	83 c2 06             	add    $0x6,%edx
c01020aa:	0f b7 d2             	movzwl %dx,%edx
c01020ad:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01020b1:	88 45 d9             	mov    %al,-0x27(%ebp)
c01020b4:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020b8:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01020bc:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c01020bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020c1:	83 c0 07             	add    $0x7,%eax
c01020c4:	0f b7 c0             	movzwl %ax,%eax
c01020c7:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020cb:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020cf:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020d3:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020d7:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020df:	eb 5a                	jmp    c010213b <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020e1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020e5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020ec:	00 
c01020ed:	89 04 24             	mov    %eax,(%esp)
c01020f0:	e8 e1 f7 ff ff       	call   c01018d6 <ide_wait_ready>
c01020f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020fc:	74 02                	je     c0102100 <ide_write_secs+0x1f7>
            goto out;
c01020fe:	eb 41                	jmp    c0102141 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102100:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102104:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102107:	8b 45 10             	mov    0x10(%ebp),%eax
c010210a:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010210d:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0102114:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102117:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010211a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010211d:	89 cb                	mov    %ecx,%ebx
c010211f:	89 de                	mov    %ebx,%esi
c0102121:	89 c1                	mov    %eax,%ecx
c0102123:	fc                   	cld    
c0102124:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102126:	89 c8                	mov    %ecx,%eax
c0102128:	89 f3                	mov    %esi,%ebx
c010212a:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010212d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102130:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102134:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010213b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010213f:	75 a0                	jne    c01020e1 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102141:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102144:	83 c4 50             	add    $0x50,%esp
c0102147:	5b                   	pop    %ebx
c0102148:	5e                   	pop    %esi
c0102149:	5d                   	pop    %ebp
c010214a:	c3                   	ret    

c010214b <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010214b:	55                   	push   %ebp
c010214c:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010214e:	fb                   	sti    
    sti();
}
c010214f:	5d                   	pop    %ebp
c0102150:	c3                   	ret    

c0102151 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102151:	55                   	push   %ebp
c0102152:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102154:	fa                   	cli    
    cli();
}
c0102155:	5d                   	pop    %ebp
c0102156:	c3                   	ret    

c0102157 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102157:	55                   	push   %ebp
c0102158:	89 e5                	mov    %esp,%ebp
c010215a:	83 ec 14             	sub    $0x14,%esp
c010215d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102160:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102164:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102168:	66 a3 50 f5 14 c0    	mov    %ax,0xc014f550
    if (did_init) {
c010216e:	a1 60 27 15 c0       	mov    0xc0152760,%eax
c0102173:	85 c0                	test   %eax,%eax
c0102175:	74 36                	je     c01021ad <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102177:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010217b:	0f b6 c0             	movzbl %al,%eax
c010217e:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102184:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102187:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010218b:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010218f:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102190:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102194:	66 c1 e8 08          	shr    $0x8,%ax
c0102198:	0f b6 c0             	movzbl %al,%eax
c010219b:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021a1:	88 45 f9             	mov    %al,-0x7(%ebp)
c01021a4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021a8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021ac:	ee                   	out    %al,(%dx)
    }
}
c01021ad:	c9                   	leave  
c01021ae:	c3                   	ret    

c01021af <pic_enable>:

void
pic_enable(unsigned int irq) {
c01021af:	55                   	push   %ebp
c01021b0:	89 e5                	mov    %esp,%ebp
c01021b2:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c01021b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01021b8:	ba 01 00 00 00       	mov    $0x1,%edx
c01021bd:	89 c1                	mov    %eax,%ecx
c01021bf:	d3 e2                	shl    %cl,%edx
c01021c1:	89 d0                	mov    %edx,%eax
c01021c3:	f7 d0                	not    %eax
c01021c5:	89 c2                	mov    %eax,%edx
c01021c7:	0f b7 05 50 f5 14 c0 	movzwl 0xc014f550,%eax
c01021ce:	21 d0                	and    %edx,%eax
c01021d0:	0f b7 c0             	movzwl %ax,%eax
c01021d3:	89 04 24             	mov    %eax,(%esp)
c01021d6:	e8 7c ff ff ff       	call   c0102157 <pic_setmask>
}
c01021db:	c9                   	leave  
c01021dc:	c3                   	ret    

c01021dd <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021dd:	55                   	push   %ebp
c01021de:	89 e5                	mov    %esp,%ebp
c01021e0:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021e3:	c7 05 60 27 15 c0 01 	movl   $0x1,0xc0152760
c01021ea:	00 00 00 
c01021ed:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021f3:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021f7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021fb:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021ff:	ee                   	out    %al,(%dx)
c0102200:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102206:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c010220a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010220e:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102212:	ee                   	out    %al,(%dx)
c0102213:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102219:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c010221d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102221:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102225:	ee                   	out    %al,(%dx)
c0102226:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010222c:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102230:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102234:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102238:	ee                   	out    %al,(%dx)
c0102239:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010223f:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102243:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102247:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010224b:	ee                   	out    %al,(%dx)
c010224c:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102252:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102256:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010225a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010225e:	ee                   	out    %al,(%dx)
c010225f:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102265:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102269:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010226d:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102271:	ee                   	out    %al,(%dx)
c0102272:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102278:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010227c:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102280:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102284:	ee                   	out    %al,(%dx)
c0102285:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010228b:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010228f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102293:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102297:	ee                   	out    %al,(%dx)
c0102298:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010229e:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c01022a2:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01022a6:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01022aa:	ee                   	out    %al,(%dx)
c01022ab:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c01022b1:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c01022b5:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01022b9:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01022bd:	ee                   	out    %al,(%dx)
c01022be:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01022c4:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022c8:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022cc:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022d0:	ee                   	out    %al,(%dx)
c01022d1:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022d7:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022db:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022df:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022e3:	ee                   	out    %al,(%dx)
c01022e4:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022ea:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022ee:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022f2:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022f6:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022f7:	0f b7 05 50 f5 14 c0 	movzwl 0xc014f550,%eax
c01022fe:	66 83 f8 ff          	cmp    $0xffff,%ax
c0102302:	74 12                	je     c0102316 <pic_init+0x139>
        pic_setmask(irq_mask);
c0102304:	0f b7 05 50 f5 14 c0 	movzwl 0xc014f550,%eax
c010230b:	0f b7 c0             	movzwl %ax,%eax
c010230e:	89 04 24             	mov    %eax,(%esp)
c0102311:	e8 41 fe ff ff       	call   c0102157 <pic_setmask>
    }
}
c0102316:	c9                   	leave  
c0102317:	c3                   	ret    

c0102318 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c0102318:	55                   	push   %ebp
c0102319:	89 e5                	mov    %esp,%ebp
c010231b:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c010231e:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102325:	00 
c0102326:	c7 04 24 80 5c 11 c0 	movl   $0xc0115c80,(%esp)
c010232d:	e8 3f e0 ff ff       	call   c0100371 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102332:	c9                   	leave  
c0102333:	c3                   	ret    

c0102334 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102334:	55                   	push   %ebp
c0102335:	89 e5                	mov    %esp,%ebp
c0102337:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
	int i;
	for(i = 0;i < sizeof(idt) / sizeof(struct gatedesc); i++){
c010233a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102341:	e9 c3 00 00 00       	jmp    c0102409 <idt_init+0xd5>
		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102346:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102349:	8b 04 85 e0 f5 14 c0 	mov    -0x3feb0a20(,%eax,4),%eax
c0102350:	89 c2                	mov    %eax,%edx
c0102352:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102355:	66 89 14 c5 80 27 15 	mov    %dx,-0x3fead880(,%eax,8)
c010235c:	c0 
c010235d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102360:	66 c7 04 c5 82 27 15 	movw   $0x8,-0x3fead87e(,%eax,8)
c0102367:	c0 08 00 
c010236a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010236d:	0f b6 14 c5 84 27 15 	movzbl -0x3fead87c(,%eax,8),%edx
c0102374:	c0 
c0102375:	83 e2 e0             	and    $0xffffffe0,%edx
c0102378:	88 14 c5 84 27 15 c0 	mov    %dl,-0x3fead87c(,%eax,8)
c010237f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102382:	0f b6 14 c5 84 27 15 	movzbl -0x3fead87c(,%eax,8),%edx
c0102389:	c0 
c010238a:	83 e2 1f             	and    $0x1f,%edx
c010238d:	88 14 c5 84 27 15 c0 	mov    %dl,-0x3fead87c(,%eax,8)
c0102394:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102397:	0f b6 14 c5 85 27 15 	movzbl -0x3fead87b(,%eax,8),%edx
c010239e:	c0 
c010239f:	83 e2 f0             	and    $0xfffffff0,%edx
c01023a2:	83 ca 0e             	or     $0xe,%edx
c01023a5:	88 14 c5 85 27 15 c0 	mov    %dl,-0x3fead87b(,%eax,8)
c01023ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023af:	0f b6 14 c5 85 27 15 	movzbl -0x3fead87b(,%eax,8),%edx
c01023b6:	c0 
c01023b7:	83 e2 ef             	and    $0xffffffef,%edx
c01023ba:	88 14 c5 85 27 15 c0 	mov    %dl,-0x3fead87b(,%eax,8)
c01023c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c4:	0f b6 14 c5 85 27 15 	movzbl -0x3fead87b(,%eax,8),%edx
c01023cb:	c0 
c01023cc:	83 e2 9f             	and    $0xffffff9f,%edx
c01023cf:	88 14 c5 85 27 15 c0 	mov    %dl,-0x3fead87b(,%eax,8)
c01023d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d9:	0f b6 14 c5 85 27 15 	movzbl -0x3fead87b(,%eax,8),%edx
c01023e0:	c0 
c01023e1:	83 ca 80             	or     $0xffffff80,%edx
c01023e4:	88 14 c5 85 27 15 c0 	mov    %dl,-0x3fead87b(,%eax,8)
c01023eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ee:	8b 04 85 e0 f5 14 c0 	mov    -0x3feb0a20(,%eax,4),%eax
c01023f5:	c1 e8 10             	shr    $0x10,%eax
c01023f8:	89 c2                	mov    %eax,%edx
c01023fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023fd:	66 89 14 c5 86 27 15 	mov    %dx,-0x3fead87a(,%eax,8)
c0102404:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
	int i;
	for(i = 0;i < sizeof(idt) / sizeof(struct gatedesc); i++){
c0102405:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102409:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240c:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102411:	0f 86 2f ff ff ff    	jbe    c0102346 <idt_init+0x12>
		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
	}
	//SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
	//SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3);
	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102417:	a1 e0 f7 14 c0       	mov    0xc014f7e0,%eax
c010241c:	66 a3 80 2b 15 c0    	mov    %ax,0xc0152b80
c0102422:	66 c7 05 82 2b 15 c0 	movw   $0x8,0xc0152b82
c0102429:	08 00 
c010242b:	0f b6 05 84 2b 15 c0 	movzbl 0xc0152b84,%eax
c0102432:	83 e0 e0             	and    $0xffffffe0,%eax
c0102435:	a2 84 2b 15 c0       	mov    %al,0xc0152b84
c010243a:	0f b6 05 84 2b 15 c0 	movzbl 0xc0152b84,%eax
c0102441:	83 e0 1f             	and    $0x1f,%eax
c0102444:	a2 84 2b 15 c0       	mov    %al,0xc0152b84
c0102449:	0f b6 05 85 2b 15 c0 	movzbl 0xc0152b85,%eax
c0102450:	83 c8 0f             	or     $0xf,%eax
c0102453:	a2 85 2b 15 c0       	mov    %al,0xc0152b85
c0102458:	0f b6 05 85 2b 15 c0 	movzbl 0xc0152b85,%eax
c010245f:	83 e0 ef             	and    $0xffffffef,%eax
c0102462:	a2 85 2b 15 c0       	mov    %al,0xc0152b85
c0102467:	0f b6 05 85 2b 15 c0 	movzbl 0xc0152b85,%eax
c010246e:	83 c8 60             	or     $0x60,%eax
c0102471:	a2 85 2b 15 c0       	mov    %al,0xc0152b85
c0102476:	0f b6 05 85 2b 15 c0 	movzbl 0xc0152b85,%eax
c010247d:	83 c8 80             	or     $0xffffff80,%eax
c0102480:	a2 85 2b 15 c0       	mov    %al,0xc0152b85
c0102485:	a1 e0 f7 14 c0       	mov    0xc014f7e0,%eax
c010248a:	c1 e8 10             	shr    $0x10,%eax
c010248d:	66 a3 86 2b 15 c0    	mov    %ax,0xc0152b86
c0102493:	c7 45 f8 60 f5 14 c0 	movl   $0xc014f560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010249a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010249d:	0f 01 18             	lidtl  (%eax)
	lidt(&idt_pd);
}
c01024a0:	c9                   	leave  
c01024a1:	c3                   	ret    

c01024a2 <trapname>:

static const char *
trapname(int trapno) {
c01024a2:	55                   	push   %ebp
c01024a3:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01024a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a8:	83 f8 13             	cmp    $0x13,%eax
c01024ab:	77 0c                	ja     c01024b9 <trapname+0x17>
        return excnames[trapno];
c01024ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b0:	8b 04 85 00 61 11 c0 	mov    -0x3fee9f00(,%eax,4),%eax
c01024b7:	eb 18                	jmp    c01024d1 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024b9:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024bd:	7e 0d                	jle    c01024cc <trapname+0x2a>
c01024bf:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024c3:	7f 07                	jg     c01024cc <trapname+0x2a>
        return "Hardware Interrupt";
c01024c5:	b8 8a 5c 11 c0       	mov    $0xc0115c8a,%eax
c01024ca:	eb 05                	jmp    c01024d1 <trapname+0x2f>
    }
    return "(unknown trap)";
c01024cc:	b8 9d 5c 11 c0       	mov    $0xc0115c9d,%eax
}
c01024d1:	5d                   	pop    %ebp
c01024d2:	c3                   	ret    

c01024d3 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024d3:	55                   	push   %ebp
c01024d4:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d9:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024dd:	66 83 f8 08          	cmp    $0x8,%ax
c01024e1:	0f 94 c0             	sete   %al
c01024e4:	0f b6 c0             	movzbl %al,%eax
}
c01024e7:	5d                   	pop    %ebp
c01024e8:	c3                   	ret    

c01024e9 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024e9:	55                   	push   %ebp
c01024ea:	89 e5                	mov    %esp,%ebp
c01024ec:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f6:	c7 04 24 de 5c 11 c0 	movl   $0xc0115cde,(%esp)
c01024fd:	e8 6f de ff ff       	call   c0100371 <cprintf>
    print_regs(&tf->tf_regs);
c0102502:	8b 45 08             	mov    0x8(%ebp),%eax
c0102505:	89 04 24             	mov    %eax,(%esp)
c0102508:	e8 a1 01 00 00       	call   c01026ae <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010250d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102510:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102514:	0f b7 c0             	movzwl %ax,%eax
c0102517:	89 44 24 04          	mov    %eax,0x4(%esp)
c010251b:	c7 04 24 ef 5c 11 c0 	movl   $0xc0115cef,(%esp)
c0102522:	e8 4a de ff ff       	call   c0100371 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102527:	8b 45 08             	mov    0x8(%ebp),%eax
c010252a:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010252e:	0f b7 c0             	movzwl %ax,%eax
c0102531:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102535:	c7 04 24 02 5d 11 c0 	movl   $0xc0115d02,(%esp)
c010253c:	e8 30 de ff ff       	call   c0100371 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102541:	8b 45 08             	mov    0x8(%ebp),%eax
c0102544:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102548:	0f b7 c0             	movzwl %ax,%eax
c010254b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010254f:	c7 04 24 15 5d 11 c0 	movl   $0xc0115d15,(%esp)
c0102556:	e8 16 de ff ff       	call   c0100371 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010255b:	8b 45 08             	mov    0x8(%ebp),%eax
c010255e:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102562:	0f b7 c0             	movzwl %ax,%eax
c0102565:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102569:	c7 04 24 28 5d 11 c0 	movl   $0xc0115d28,(%esp)
c0102570:	e8 fc dd ff ff       	call   c0100371 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102575:	8b 45 08             	mov    0x8(%ebp),%eax
c0102578:	8b 40 30             	mov    0x30(%eax),%eax
c010257b:	89 04 24             	mov    %eax,(%esp)
c010257e:	e8 1f ff ff ff       	call   c01024a2 <trapname>
c0102583:	8b 55 08             	mov    0x8(%ebp),%edx
c0102586:	8b 52 30             	mov    0x30(%edx),%edx
c0102589:	89 44 24 08          	mov    %eax,0x8(%esp)
c010258d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102591:	c7 04 24 3b 5d 11 c0 	movl   $0xc0115d3b,(%esp)
c0102598:	e8 d4 dd ff ff       	call   c0100371 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010259d:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a0:	8b 40 34             	mov    0x34(%eax),%eax
c01025a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a7:	c7 04 24 4d 5d 11 c0 	movl   $0xc0115d4d,(%esp)
c01025ae:	e8 be dd ff ff       	call   c0100371 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01025b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b6:	8b 40 38             	mov    0x38(%eax),%eax
c01025b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025bd:	c7 04 24 5c 5d 11 c0 	movl   $0xc0115d5c,(%esp)
c01025c4:	e8 a8 dd ff ff       	call   c0100371 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01025cc:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025d0:	0f b7 c0             	movzwl %ax,%eax
c01025d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d7:	c7 04 24 6b 5d 11 c0 	movl   $0xc0115d6b,(%esp)
c01025de:	e8 8e dd ff ff       	call   c0100371 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e6:	8b 40 40             	mov    0x40(%eax),%eax
c01025e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ed:	c7 04 24 7e 5d 11 c0 	movl   $0xc0115d7e,(%esp)
c01025f4:	e8 78 dd ff ff       	call   c0100371 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102600:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102607:	eb 3e                	jmp    c0102647 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102609:	8b 45 08             	mov    0x8(%ebp),%eax
c010260c:	8b 50 40             	mov    0x40(%eax),%edx
c010260f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102612:	21 d0                	and    %edx,%eax
c0102614:	85 c0                	test   %eax,%eax
c0102616:	74 28                	je     c0102640 <print_trapframe+0x157>
c0102618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010261b:	8b 04 85 80 f5 14 c0 	mov    -0x3feb0a80(,%eax,4),%eax
c0102622:	85 c0                	test   %eax,%eax
c0102624:	74 1a                	je     c0102640 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102626:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102629:	8b 04 85 80 f5 14 c0 	mov    -0x3feb0a80(,%eax,4),%eax
c0102630:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102634:	c7 04 24 8d 5d 11 c0 	movl   $0xc0115d8d,(%esp)
c010263b:	e8 31 dd ff ff       	call   c0100371 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102640:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102644:	d1 65 f0             	shll   -0x10(%ebp)
c0102647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010264a:	83 f8 17             	cmp    $0x17,%eax
c010264d:	76 ba                	jbe    c0102609 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010264f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102652:	8b 40 40             	mov    0x40(%eax),%eax
c0102655:	25 00 30 00 00       	and    $0x3000,%eax
c010265a:	c1 e8 0c             	shr    $0xc,%eax
c010265d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102661:	c7 04 24 91 5d 11 c0 	movl   $0xc0115d91,(%esp)
c0102668:	e8 04 dd ff ff       	call   c0100371 <cprintf>

    if (!trap_in_kernel(tf)) {
c010266d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102670:	89 04 24             	mov    %eax,(%esp)
c0102673:	e8 5b fe ff ff       	call   c01024d3 <trap_in_kernel>
c0102678:	85 c0                	test   %eax,%eax
c010267a:	75 30                	jne    c01026ac <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010267c:	8b 45 08             	mov    0x8(%ebp),%eax
c010267f:	8b 40 44             	mov    0x44(%eax),%eax
c0102682:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102686:	c7 04 24 9a 5d 11 c0 	movl   $0xc0115d9a,(%esp)
c010268d:	e8 df dc ff ff       	call   c0100371 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102692:	8b 45 08             	mov    0x8(%ebp),%eax
c0102695:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102699:	0f b7 c0             	movzwl %ax,%eax
c010269c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a0:	c7 04 24 a9 5d 11 c0 	movl   $0xc0115da9,(%esp)
c01026a7:	e8 c5 dc ff ff       	call   c0100371 <cprintf>
    }
}
c01026ac:	c9                   	leave  
c01026ad:	c3                   	ret    

c01026ae <print_regs>:

void
print_regs(struct pushregs *regs) {
c01026ae:	55                   	push   %ebp
c01026af:	89 e5                	mov    %esp,%ebp
c01026b1:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01026b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b7:	8b 00                	mov    (%eax),%eax
c01026b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026bd:	c7 04 24 bc 5d 11 c0 	movl   $0xc0115dbc,(%esp)
c01026c4:	e8 a8 dc ff ff       	call   c0100371 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01026cc:	8b 40 04             	mov    0x4(%eax),%eax
c01026cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d3:	c7 04 24 cb 5d 11 c0 	movl   $0xc0115dcb,(%esp)
c01026da:	e8 92 dc ff ff       	call   c0100371 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026df:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e2:	8b 40 08             	mov    0x8(%eax),%eax
c01026e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e9:	c7 04 24 da 5d 11 c0 	movl   $0xc0115dda,(%esp)
c01026f0:	e8 7c dc ff ff       	call   c0100371 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f8:	8b 40 0c             	mov    0xc(%eax),%eax
c01026fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ff:	c7 04 24 e9 5d 11 c0 	movl   $0xc0115de9,(%esp)
c0102706:	e8 66 dc ff ff       	call   c0100371 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c010270b:	8b 45 08             	mov    0x8(%ebp),%eax
c010270e:	8b 40 10             	mov    0x10(%eax),%eax
c0102711:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102715:	c7 04 24 f8 5d 11 c0 	movl   $0xc0115df8,(%esp)
c010271c:	e8 50 dc ff ff       	call   c0100371 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102721:	8b 45 08             	mov    0x8(%ebp),%eax
c0102724:	8b 40 14             	mov    0x14(%eax),%eax
c0102727:	89 44 24 04          	mov    %eax,0x4(%esp)
c010272b:	c7 04 24 07 5e 11 c0 	movl   $0xc0115e07,(%esp)
c0102732:	e8 3a dc ff ff       	call   c0100371 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102737:	8b 45 08             	mov    0x8(%ebp),%eax
c010273a:	8b 40 18             	mov    0x18(%eax),%eax
c010273d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102741:	c7 04 24 16 5e 11 c0 	movl   $0xc0115e16,(%esp)
c0102748:	e8 24 dc ff ff       	call   c0100371 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010274d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102750:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102753:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102757:	c7 04 24 25 5e 11 c0 	movl   $0xc0115e25,(%esp)
c010275e:	e8 0e dc ff ff       	call   c0100371 <cprintf>
}
c0102763:	c9                   	leave  
c0102764:	c3                   	ret    

c0102765 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102765:	55                   	push   %ebp
c0102766:	89 e5                	mov    %esp,%ebp
c0102768:	53                   	push   %ebx
c0102769:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010276c:	8b 45 08             	mov    0x8(%ebp),%eax
c010276f:	8b 40 34             	mov    0x34(%eax),%eax
c0102772:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102775:	85 c0                	test   %eax,%eax
c0102777:	74 07                	je     c0102780 <print_pgfault+0x1b>
c0102779:	b9 34 5e 11 c0       	mov    $0xc0115e34,%ecx
c010277e:	eb 05                	jmp    c0102785 <print_pgfault+0x20>
c0102780:	b9 45 5e 11 c0       	mov    $0xc0115e45,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102785:	8b 45 08             	mov    0x8(%ebp),%eax
c0102788:	8b 40 34             	mov    0x34(%eax),%eax
c010278b:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010278e:	85 c0                	test   %eax,%eax
c0102790:	74 07                	je     c0102799 <print_pgfault+0x34>
c0102792:	ba 57 00 00 00       	mov    $0x57,%edx
c0102797:	eb 05                	jmp    c010279e <print_pgfault+0x39>
c0102799:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010279e:	8b 45 08             	mov    0x8(%ebp),%eax
c01027a1:	8b 40 34             	mov    0x34(%eax),%eax
c01027a4:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01027a7:	85 c0                	test   %eax,%eax
c01027a9:	74 07                	je     c01027b2 <print_pgfault+0x4d>
c01027ab:	b8 55 00 00 00       	mov    $0x55,%eax
c01027b0:	eb 05                	jmp    c01027b7 <print_pgfault+0x52>
c01027b2:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027b7:	0f 20 d3             	mov    %cr2,%ebx
c01027ba:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01027bd:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01027c0:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01027c4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027c8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027cc:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027d0:	c7 04 24 54 5e 11 c0 	movl   $0xc0115e54,(%esp)
c01027d7:	e8 95 db ff ff       	call   c0100371 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027dc:	83 c4 34             	add    $0x34,%esp
c01027df:	5b                   	pop    %ebx
c01027e0:	5d                   	pop    %ebp
c01027e1:	c3                   	ret    

c01027e2 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027e2:	55                   	push   %ebp
c01027e3:	89 e5                	mov    %esp,%ebp
c01027e5:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027e8:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c01027ed:	85 c0                	test   %eax,%eax
c01027ef:	74 0b                	je     c01027fc <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f4:	89 04 24             	mov    %eax,(%esp)
c01027f7:	e8 69 ff ff ff       	call   c0102765 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027fc:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c0102801:	85 c0                	test   %eax,%eax
c0102803:	74 3d                	je     c0102842 <pgfault_handler+0x60>
        assert(current == idleproc);
c0102805:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010280b:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c0102810:	39 c2                	cmp    %eax,%edx
c0102812:	74 24                	je     c0102838 <pgfault_handler+0x56>
c0102814:	c7 44 24 0c 77 5e 11 	movl   $0xc0115e77,0xc(%esp)
c010281b:	c0 
c010281c:	c7 44 24 08 8b 5e 11 	movl   $0xc0115e8b,0x8(%esp)
c0102823:	c0 
c0102824:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c010282b:	00 
c010282c:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c0102833:	e8 a6 e6 ff ff       	call   c0100ede <__panic>
        mm = check_mm_struct;
c0102838:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c010283d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102840:	eb 46                	jmp    c0102888 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102842:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102847:	85 c0                	test   %eax,%eax
c0102849:	75 32                	jne    c010287d <pgfault_handler+0x9b>
            print_trapframe(tf);
c010284b:	8b 45 08             	mov    0x8(%ebp),%eax
c010284e:	89 04 24             	mov    %eax,(%esp)
c0102851:	e8 93 fc ff ff       	call   c01024e9 <print_trapframe>
            print_pgfault(tf);
c0102856:	8b 45 08             	mov    0x8(%ebp),%eax
c0102859:	89 04 24             	mov    %eax,(%esp)
c010285c:	e8 04 ff ff ff       	call   c0102765 <print_pgfault>
            panic("unhandled page fault.\n");
c0102861:	c7 44 24 08 b1 5e 11 	movl   $0xc0115eb1,0x8(%esp)
c0102868:	c0 
c0102869:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c0102870:	00 
c0102871:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c0102878:	e8 61 e6 ff ff       	call   c0100ede <__panic>
        }
        mm = current->mm;
c010287d:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102882:	8b 40 18             	mov    0x18(%eax),%eax
c0102885:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102888:	0f 20 d0             	mov    %cr2,%eax
c010288b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010288e:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102891:	89 c2                	mov    %eax,%edx
c0102893:	8b 45 08             	mov    0x8(%ebp),%eax
c0102896:	8b 40 34             	mov    0x34(%eax),%eax
c0102899:	89 54 24 08          	mov    %edx,0x8(%esp)
c010289d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028a4:	89 04 24             	mov    %eax,(%esp)
c01028a7:	e8 4c 66 00 00       	call   c0108ef8 <do_pgfault>
}
c01028ac:	c9                   	leave  
c01028ad:	c3                   	ret    

c01028ae <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01028ae:	55                   	push   %ebp
c01028af:	89 e5                	mov    %esp,%ebp
c01028b1:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01028b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01028be:	8b 40 30             	mov    0x30(%eax),%eax
c01028c1:	83 f8 2f             	cmp    $0x2f,%eax
c01028c4:	77 38                	ja     c01028fe <trap_dispatch+0x50>
c01028c6:	83 f8 2e             	cmp    $0x2e,%eax
c01028c9:	0f 83 cb 01 00 00    	jae    c0102a9a <trap_dispatch+0x1ec>
c01028cf:	83 f8 20             	cmp    $0x20,%eax
c01028d2:	0f 84 07 01 00 00    	je     c01029df <trap_dispatch+0x131>
c01028d8:	83 f8 20             	cmp    $0x20,%eax
c01028db:	77 0a                	ja     c01028e7 <trap_dispatch+0x39>
c01028dd:	83 f8 0e             	cmp    $0xe,%eax
c01028e0:	74 3e                	je     c0102920 <trap_dispatch+0x72>
c01028e2:	e9 6b 01 00 00       	jmp    c0102a52 <trap_dispatch+0x1a4>
c01028e7:	83 f8 21             	cmp    $0x21,%eax
c01028ea:	0f 84 30 01 00 00    	je     c0102a20 <trap_dispatch+0x172>
c01028f0:	83 f8 24             	cmp    $0x24,%eax
c01028f3:	0f 84 27 01 00 00    	je     c0102a20 <trap_dispatch+0x172>
c01028f9:	e9 54 01 00 00       	jmp    c0102a52 <trap_dispatch+0x1a4>
c01028fe:	83 f8 78             	cmp    $0x78,%eax
c0102901:	0f 82 4b 01 00 00    	jb     c0102a52 <trap_dispatch+0x1a4>
c0102907:	83 f8 79             	cmp    $0x79,%eax
c010290a:	0f 86 26 01 00 00    	jbe    c0102a36 <trap_dispatch+0x188>
c0102910:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102915:	0f 84 ba 00 00 00    	je     c01029d5 <trap_dispatch+0x127>
c010291b:	e9 32 01 00 00       	jmp    c0102a52 <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102920:	8b 45 08             	mov    0x8(%ebp),%eax
c0102923:	89 04 24             	mov    %eax,(%esp)
c0102926:	e8 b7 fe ff ff       	call   c01027e2 <pgfault_handler>
c010292b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010292e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102932:	0f 84 98 00 00 00    	je     c01029d0 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102938:	8b 45 08             	mov    0x8(%ebp),%eax
c010293b:	89 04 24             	mov    %eax,(%esp)
c010293e:	e8 a6 fb ff ff       	call   c01024e9 <print_trapframe>
            if (current == NULL) {
c0102943:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102948:	85 c0                	test   %eax,%eax
c010294a:	75 23                	jne    c010296f <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010294c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010294f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102953:	c7 44 24 08 c8 5e 11 	movl   $0xc0115ec8,0x8(%esp)
c010295a:	c0 
c010295b:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0102962:	00 
c0102963:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c010296a:	e8 6f e5 ff ff       	call   c0100ede <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010296f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102972:	89 04 24             	mov    %eax,(%esp)
c0102975:	e8 59 fb ff ff       	call   c01024d3 <trap_in_kernel>
c010297a:	85 c0                	test   %eax,%eax
c010297c:	74 23                	je     c01029a1 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010297e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102981:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102985:	c7 44 24 08 e8 5e 11 	movl   $0xc0115ee8,0x8(%esp)
c010298c:	c0 
c010298d:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0102994:	00 
c0102995:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c010299c:	e8 3d e5 ff ff       	call   c0100ede <__panic>
                }
                cprintf("killed by kernel.\n");
c01029a1:	c7 04 24 16 5f 11 c0 	movl   $0xc0115f16,(%esp)
c01029a8:	e8 c4 d9 ff ff       	call   c0100371 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01029ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029b0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029b4:	c7 44 24 08 2c 5f 11 	movl   $0xc0115f2c,0x8(%esp)
c01029bb:	c0 
c01029bc:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
c01029c3:	00 
c01029c4:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c01029cb:	e8 0e e5 ff ff       	call   c0100ede <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029d0:	e9 c6 00 00 00       	jmp    c0102a9b <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029d5:	e8 ca c4 00 00       	call   c010eea4 <syscall>
        break;
c01029da:	e9 bc 00 00 00       	jmp    c0102a9b <trap_dispatch+0x1ed>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
		ticks++;	
c01029df:	a1 30 61 15 c0       	mov    0xc0156130,%eax
c01029e4:	83 c0 01             	add    $0x1,%eax
c01029e7:	a3 30 61 15 c0       	mov    %eax,0xc0156130
    	assert(current != NULL);
c01029ec:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c01029f1:	85 c0                	test   %eax,%eax
c01029f3:	75 24                	jne    c0102a19 <trap_dispatch+0x16b>
c01029f5:	c7 44 24 0c 55 5f 11 	movl   $0xc0115f55,0xc(%esp)
c01029fc:	c0 
c01029fd:	c7 44 24 08 8b 5e 11 	movl   $0xc0115e8b,0x8(%esp)
c0102a04:	c0 
c0102a05:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c0102a0c:	00 
c0102a0d:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c0102a14:	e8 c5 e4 ff ff       	call   c0100ede <__panic>
		run_timer_list();
c0102a19:	e8 11 c0 00 00       	call   c010ea2f <run_timer_list>
       	break;
c0102a1e:	eb 7b                	jmp    c0102a9b <trap_dispatch+0x1ed>
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c0102a20:	e8 42 ee ff ff       	call   c0101867 <cons_getc>
c0102a25:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a28:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a2c:	89 04 24             	mov    %eax,(%esp)
c0102a2f:	e8 72 e7 00 00       	call   c01111a6 <dev_stdin_write>
        }
        break;
c0102a34:	eb 65                	jmp    c0102a9b <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a36:	c7 44 24 08 65 5f 11 	movl   $0xc0115f65,0x8(%esp)
c0102a3d:	c0 
c0102a3e:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c0102a45:	00 
c0102a46:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c0102a4d:	e8 8c e4 ff ff       	call   c0100ede <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a52:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a55:	89 04 24             	mov    %eax,(%esp)
c0102a58:	e8 8c fa ff ff       	call   c01024e9 <print_trapframe>
        if (current != NULL) {
c0102a5d:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102a62:	85 c0                	test   %eax,%eax
c0102a64:	74 18                	je     c0102a7e <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a66:	c7 04 24 75 5f 11 c0 	movl   $0xc0115f75,(%esp)
c0102a6d:	e8 ff d8 ff ff       	call   c0100371 <cprintf>
            do_exit(-E_KILLED);
c0102a72:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a79:	e8 de a1 00 00       	call   c010cc5c <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a7e:	c7 44 24 08 86 5f 11 	movl   $0xc0115f86,0x8(%esp)
c0102a85:	c0 
c0102a86:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c0102a8d:	00 
c0102a8e:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c0102a95:	e8 44 e4 ff ff       	call   c0100ede <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a9a:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a9b:	c9                   	leave  
c0102a9c:	c3                   	ret    

c0102a9d <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a9d:	55                   	push   %ebp
c0102a9e:	89 e5                	mov    %esp,%ebp
c0102aa0:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102aa3:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102aa8:	85 c0                	test   %eax,%eax
c0102aaa:	75 0d                	jne    c0102ab9 <trap+0x1c>
        trap_dispatch(tf);
c0102aac:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aaf:	89 04 24             	mov    %eax,(%esp)
c0102ab2:	e8 f7 fd ff ff       	call   c01028ae <trap_dispatch>
c0102ab7:	eb 6c                	jmp    c0102b25 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102ab9:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102abe:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ac4:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102ac9:	8b 55 08             	mov    0x8(%ebp),%edx
c0102acc:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ad2:	89 04 24             	mov    %eax,(%esp)
c0102ad5:	e8 f9 f9 ff ff       	call   c01024d3 <trap_in_kernel>
c0102ada:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102add:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ae0:	89 04 24             	mov    %eax,(%esp)
c0102ae3:	e8 c6 fd ff ff       	call   c01028ae <trap_dispatch>
    
        current->tf = otf;
c0102ae8:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102aed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102af0:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102af3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102af7:	75 2c                	jne    c0102b25 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102af9:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102afe:	8b 40 44             	mov    0x44(%eax),%eax
c0102b01:	83 e0 01             	and    $0x1,%eax
c0102b04:	85 c0                	test   %eax,%eax
c0102b06:	74 0c                	je     c0102b14 <trap+0x77>
                do_exit(-E_KILLED);
c0102b08:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b0f:	e8 48 a1 00 00       	call   c010cc5c <do_exit>
            }
            if (current->need_resched) {
c0102b14:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0102b19:	8b 40 10             	mov    0x10(%eax),%eax
c0102b1c:	85 c0                	test   %eax,%eax
c0102b1e:	74 05                	je     c0102b25 <trap+0x88>
                schedule();
c0102b20:	e8 7d bc 00 00       	call   c010e7a2 <schedule>
            }
        }
    }
}
c0102b25:	c9                   	leave  
c0102b26:	c3                   	ret    

c0102b27 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b27:	1e                   	push   %ds
    pushl %es
c0102b28:	06                   	push   %es
    pushl %fs
c0102b29:	0f a0                	push   %fs
    pushl %gs
c0102b2b:	0f a8                	push   %gs
    pushal
c0102b2d:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b2e:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b33:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b35:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b37:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b38:	e8 60 ff ff ff       	call   c0102a9d <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b3d:	5c                   	pop    %esp

c0102b3e <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b3e:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b3f:	0f a9                	pop    %gs
    popl %fs
c0102b41:	0f a1                	pop    %fs
    popl %es
c0102b43:	07                   	pop    %es
    popl %ds
c0102b44:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b45:	83 c4 08             	add    $0x8,%esp
    iret
c0102b48:	cf                   	iret   

c0102b49 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b49:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b4d:	e9 ec ff ff ff       	jmp    c0102b3e <__trapret>

c0102b52 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $0
c0102b54:	6a 00                	push   $0x0
  jmp __alltraps
c0102b56:	e9 cc ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b5b <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $1
c0102b5d:	6a 01                	push   $0x1
  jmp __alltraps
c0102b5f:	e9 c3 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b64 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $2
c0102b66:	6a 02                	push   $0x2
  jmp __alltraps
c0102b68:	e9 ba ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b6d <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $3
c0102b6f:	6a 03                	push   $0x3
  jmp __alltraps
c0102b71:	e9 b1 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b76 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $4
c0102b78:	6a 04                	push   $0x4
  jmp __alltraps
c0102b7a:	e9 a8 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b7f <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $5
c0102b81:	6a 05                	push   $0x5
  jmp __alltraps
c0102b83:	e9 9f ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b88 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $6
c0102b8a:	6a 06                	push   $0x6
  jmp __alltraps
c0102b8c:	e9 96 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b91 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $7
c0102b93:	6a 07                	push   $0x7
  jmp __alltraps
c0102b95:	e9 8d ff ff ff       	jmp    c0102b27 <__alltraps>

c0102b9a <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b9a:	6a 08                	push   $0x8
  jmp __alltraps
c0102b9c:	e9 86 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102ba1 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102ba1:	6a 00                	push   $0x0
  pushl $9
c0102ba3:	6a 09                	push   $0x9
  jmp __alltraps
c0102ba5:	e9 7d ff ff ff       	jmp    c0102b27 <__alltraps>

c0102baa <vector10>:
.globl vector10
vector10:
  pushl $10
c0102baa:	6a 0a                	push   $0xa
  jmp __alltraps
c0102bac:	e9 76 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bb1 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102bb1:	6a 0b                	push   $0xb
  jmp __alltraps
c0102bb3:	e9 6f ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bb8 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102bb8:	6a 0c                	push   $0xc
  jmp __alltraps
c0102bba:	e9 68 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bbf <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bbf:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bc1:	e9 61 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bc6 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bc6:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bc8:	e9 5a ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bcd <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bcd:	6a 00                	push   $0x0
  pushl $15
c0102bcf:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bd1:	e9 51 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bd6 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bd6:	6a 00                	push   $0x0
  pushl $16
c0102bd8:	6a 10                	push   $0x10
  jmp __alltraps
c0102bda:	e9 48 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bdf <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bdf:	6a 11                	push   $0x11
  jmp __alltraps
c0102be1:	e9 41 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102be6 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102be6:	6a 00                	push   $0x0
  pushl $18
c0102be8:	6a 12                	push   $0x12
  jmp __alltraps
c0102bea:	e9 38 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bef <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bef:	6a 00                	push   $0x0
  pushl $19
c0102bf1:	6a 13                	push   $0x13
  jmp __alltraps
c0102bf3:	e9 2f ff ff ff       	jmp    c0102b27 <__alltraps>

c0102bf8 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bf8:	6a 00                	push   $0x0
  pushl $20
c0102bfa:	6a 14                	push   $0x14
  jmp __alltraps
c0102bfc:	e9 26 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102c01 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102c01:	6a 00                	push   $0x0
  pushl $21
c0102c03:	6a 15                	push   $0x15
  jmp __alltraps
c0102c05:	e9 1d ff ff ff       	jmp    c0102b27 <__alltraps>

c0102c0a <vector22>:
.globl vector22
vector22:
  pushl $0
c0102c0a:	6a 00                	push   $0x0
  pushl $22
c0102c0c:	6a 16                	push   $0x16
  jmp __alltraps
c0102c0e:	e9 14 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102c13 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c13:	6a 00                	push   $0x0
  pushl $23
c0102c15:	6a 17                	push   $0x17
  jmp __alltraps
c0102c17:	e9 0b ff ff ff       	jmp    c0102b27 <__alltraps>

c0102c1c <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c1c:	6a 00                	push   $0x0
  pushl $24
c0102c1e:	6a 18                	push   $0x18
  jmp __alltraps
c0102c20:	e9 02 ff ff ff       	jmp    c0102b27 <__alltraps>

c0102c25 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c25:	6a 00                	push   $0x0
  pushl $25
c0102c27:	6a 19                	push   $0x19
  jmp __alltraps
c0102c29:	e9 f9 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c2e <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c2e:	6a 00                	push   $0x0
  pushl $26
c0102c30:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c32:	e9 f0 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c37 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c37:	6a 00                	push   $0x0
  pushl $27
c0102c39:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c3b:	e9 e7 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c40 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c40:	6a 00                	push   $0x0
  pushl $28
c0102c42:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c44:	e9 de fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c49 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c49:	6a 00                	push   $0x0
  pushl $29
c0102c4b:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c4d:	e9 d5 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c52 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c52:	6a 00                	push   $0x0
  pushl $30
c0102c54:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c56:	e9 cc fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c5b <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c5b:	6a 00                	push   $0x0
  pushl $31
c0102c5d:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c5f:	e9 c3 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c64 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c64:	6a 00                	push   $0x0
  pushl $32
c0102c66:	6a 20                	push   $0x20
  jmp __alltraps
c0102c68:	e9 ba fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c6d <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c6d:	6a 00                	push   $0x0
  pushl $33
c0102c6f:	6a 21                	push   $0x21
  jmp __alltraps
c0102c71:	e9 b1 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c76 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c76:	6a 00                	push   $0x0
  pushl $34
c0102c78:	6a 22                	push   $0x22
  jmp __alltraps
c0102c7a:	e9 a8 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c7f <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c7f:	6a 00                	push   $0x0
  pushl $35
c0102c81:	6a 23                	push   $0x23
  jmp __alltraps
c0102c83:	e9 9f fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c88 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c88:	6a 00                	push   $0x0
  pushl $36
c0102c8a:	6a 24                	push   $0x24
  jmp __alltraps
c0102c8c:	e9 96 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c91 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c91:	6a 00                	push   $0x0
  pushl $37
c0102c93:	6a 25                	push   $0x25
  jmp __alltraps
c0102c95:	e9 8d fe ff ff       	jmp    c0102b27 <__alltraps>

c0102c9a <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c9a:	6a 00                	push   $0x0
  pushl $38
c0102c9c:	6a 26                	push   $0x26
  jmp __alltraps
c0102c9e:	e9 84 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102ca3 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102ca3:	6a 00                	push   $0x0
  pushl $39
c0102ca5:	6a 27                	push   $0x27
  jmp __alltraps
c0102ca7:	e9 7b fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cac <vector40>:
.globl vector40
vector40:
  pushl $0
c0102cac:	6a 00                	push   $0x0
  pushl $40
c0102cae:	6a 28                	push   $0x28
  jmp __alltraps
c0102cb0:	e9 72 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cb5 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102cb5:	6a 00                	push   $0x0
  pushl $41
c0102cb7:	6a 29                	push   $0x29
  jmp __alltraps
c0102cb9:	e9 69 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cbe <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cbe:	6a 00                	push   $0x0
  pushl $42
c0102cc0:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cc2:	e9 60 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cc7 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cc7:	6a 00                	push   $0x0
  pushl $43
c0102cc9:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102ccb:	e9 57 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cd0 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cd0:	6a 00                	push   $0x0
  pushl $44
c0102cd2:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cd4:	e9 4e fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cd9 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cd9:	6a 00                	push   $0x0
  pushl $45
c0102cdb:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cdd:	e9 45 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102ce2 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102ce2:	6a 00                	push   $0x0
  pushl $46
c0102ce4:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102ce6:	e9 3c fe ff ff       	jmp    c0102b27 <__alltraps>

c0102ceb <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ceb:	6a 00                	push   $0x0
  pushl $47
c0102ced:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cef:	e9 33 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cf4 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cf4:	6a 00                	push   $0x0
  pushl $48
c0102cf6:	6a 30                	push   $0x30
  jmp __alltraps
c0102cf8:	e9 2a fe ff ff       	jmp    c0102b27 <__alltraps>

c0102cfd <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cfd:	6a 00                	push   $0x0
  pushl $49
c0102cff:	6a 31                	push   $0x31
  jmp __alltraps
c0102d01:	e9 21 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102d06 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102d06:	6a 00                	push   $0x0
  pushl $50
c0102d08:	6a 32                	push   $0x32
  jmp __alltraps
c0102d0a:	e9 18 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102d0f <vector51>:
.globl vector51
vector51:
  pushl $0
c0102d0f:	6a 00                	push   $0x0
  pushl $51
c0102d11:	6a 33                	push   $0x33
  jmp __alltraps
c0102d13:	e9 0f fe ff ff       	jmp    c0102b27 <__alltraps>

c0102d18 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d18:	6a 00                	push   $0x0
  pushl $52
c0102d1a:	6a 34                	push   $0x34
  jmp __alltraps
c0102d1c:	e9 06 fe ff ff       	jmp    c0102b27 <__alltraps>

c0102d21 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d21:	6a 00                	push   $0x0
  pushl $53
c0102d23:	6a 35                	push   $0x35
  jmp __alltraps
c0102d25:	e9 fd fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d2a <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d2a:	6a 00                	push   $0x0
  pushl $54
c0102d2c:	6a 36                	push   $0x36
  jmp __alltraps
c0102d2e:	e9 f4 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d33 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d33:	6a 00                	push   $0x0
  pushl $55
c0102d35:	6a 37                	push   $0x37
  jmp __alltraps
c0102d37:	e9 eb fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d3c <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d3c:	6a 00                	push   $0x0
  pushl $56
c0102d3e:	6a 38                	push   $0x38
  jmp __alltraps
c0102d40:	e9 e2 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d45 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d45:	6a 00                	push   $0x0
  pushl $57
c0102d47:	6a 39                	push   $0x39
  jmp __alltraps
c0102d49:	e9 d9 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d4e <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d4e:	6a 00                	push   $0x0
  pushl $58
c0102d50:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d52:	e9 d0 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d57 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d57:	6a 00                	push   $0x0
  pushl $59
c0102d59:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d5b:	e9 c7 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d60 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d60:	6a 00                	push   $0x0
  pushl $60
c0102d62:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d64:	e9 be fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d69 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d69:	6a 00                	push   $0x0
  pushl $61
c0102d6b:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d6d:	e9 b5 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d72 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d72:	6a 00                	push   $0x0
  pushl $62
c0102d74:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d76:	e9 ac fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d7b <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d7b:	6a 00                	push   $0x0
  pushl $63
c0102d7d:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d7f:	e9 a3 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d84 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d84:	6a 00                	push   $0x0
  pushl $64
c0102d86:	6a 40                	push   $0x40
  jmp __alltraps
c0102d88:	e9 9a fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d8d <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d8d:	6a 00                	push   $0x0
  pushl $65
c0102d8f:	6a 41                	push   $0x41
  jmp __alltraps
c0102d91:	e9 91 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d96 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d96:	6a 00                	push   $0x0
  pushl $66
c0102d98:	6a 42                	push   $0x42
  jmp __alltraps
c0102d9a:	e9 88 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102d9f <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d9f:	6a 00                	push   $0x0
  pushl $67
c0102da1:	6a 43                	push   $0x43
  jmp __alltraps
c0102da3:	e9 7f fd ff ff       	jmp    c0102b27 <__alltraps>

c0102da8 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102da8:	6a 00                	push   $0x0
  pushl $68
c0102daa:	6a 44                	push   $0x44
  jmp __alltraps
c0102dac:	e9 76 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102db1 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102db1:	6a 00                	push   $0x0
  pushl $69
c0102db3:	6a 45                	push   $0x45
  jmp __alltraps
c0102db5:	e9 6d fd ff ff       	jmp    c0102b27 <__alltraps>

c0102dba <vector70>:
.globl vector70
vector70:
  pushl $0
c0102dba:	6a 00                	push   $0x0
  pushl $70
c0102dbc:	6a 46                	push   $0x46
  jmp __alltraps
c0102dbe:	e9 64 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102dc3 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102dc3:	6a 00                	push   $0x0
  pushl $71
c0102dc5:	6a 47                	push   $0x47
  jmp __alltraps
c0102dc7:	e9 5b fd ff ff       	jmp    c0102b27 <__alltraps>

c0102dcc <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dcc:	6a 00                	push   $0x0
  pushl $72
c0102dce:	6a 48                	push   $0x48
  jmp __alltraps
c0102dd0:	e9 52 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102dd5 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dd5:	6a 00                	push   $0x0
  pushl $73
c0102dd7:	6a 49                	push   $0x49
  jmp __alltraps
c0102dd9:	e9 49 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102dde <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dde:	6a 00                	push   $0x0
  pushl $74
c0102de0:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102de2:	e9 40 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102de7 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102de7:	6a 00                	push   $0x0
  pushl $75
c0102de9:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102deb:	e9 37 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102df0 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102df0:	6a 00                	push   $0x0
  pushl $76
c0102df2:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102df4:	e9 2e fd ff ff       	jmp    c0102b27 <__alltraps>

c0102df9 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102df9:	6a 00                	push   $0x0
  pushl $77
c0102dfb:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dfd:	e9 25 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102e02 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102e02:	6a 00                	push   $0x0
  pushl $78
c0102e04:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102e06:	e9 1c fd ff ff       	jmp    c0102b27 <__alltraps>

c0102e0b <vector79>:
.globl vector79
vector79:
  pushl $0
c0102e0b:	6a 00                	push   $0x0
  pushl $79
c0102e0d:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102e0f:	e9 13 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102e14 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e14:	6a 00                	push   $0x0
  pushl $80
c0102e16:	6a 50                	push   $0x50
  jmp __alltraps
c0102e18:	e9 0a fd ff ff       	jmp    c0102b27 <__alltraps>

c0102e1d <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e1d:	6a 00                	push   $0x0
  pushl $81
c0102e1f:	6a 51                	push   $0x51
  jmp __alltraps
c0102e21:	e9 01 fd ff ff       	jmp    c0102b27 <__alltraps>

c0102e26 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e26:	6a 00                	push   $0x0
  pushl $82
c0102e28:	6a 52                	push   $0x52
  jmp __alltraps
c0102e2a:	e9 f8 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e2f <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e2f:	6a 00                	push   $0x0
  pushl $83
c0102e31:	6a 53                	push   $0x53
  jmp __alltraps
c0102e33:	e9 ef fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e38 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e38:	6a 00                	push   $0x0
  pushl $84
c0102e3a:	6a 54                	push   $0x54
  jmp __alltraps
c0102e3c:	e9 e6 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e41 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e41:	6a 00                	push   $0x0
  pushl $85
c0102e43:	6a 55                	push   $0x55
  jmp __alltraps
c0102e45:	e9 dd fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e4a <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e4a:	6a 00                	push   $0x0
  pushl $86
c0102e4c:	6a 56                	push   $0x56
  jmp __alltraps
c0102e4e:	e9 d4 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e53 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e53:	6a 00                	push   $0x0
  pushl $87
c0102e55:	6a 57                	push   $0x57
  jmp __alltraps
c0102e57:	e9 cb fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e5c <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e5c:	6a 00                	push   $0x0
  pushl $88
c0102e5e:	6a 58                	push   $0x58
  jmp __alltraps
c0102e60:	e9 c2 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e65 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e65:	6a 00                	push   $0x0
  pushl $89
c0102e67:	6a 59                	push   $0x59
  jmp __alltraps
c0102e69:	e9 b9 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e6e <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e6e:	6a 00                	push   $0x0
  pushl $90
c0102e70:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e72:	e9 b0 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e77 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e77:	6a 00                	push   $0x0
  pushl $91
c0102e79:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e7b:	e9 a7 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e80 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e80:	6a 00                	push   $0x0
  pushl $92
c0102e82:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e84:	e9 9e fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e89 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e89:	6a 00                	push   $0x0
  pushl $93
c0102e8b:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e8d:	e9 95 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e92 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e92:	6a 00                	push   $0x0
  pushl $94
c0102e94:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e96:	e9 8c fc ff ff       	jmp    c0102b27 <__alltraps>

c0102e9b <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e9b:	6a 00                	push   $0x0
  pushl $95
c0102e9d:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e9f:	e9 83 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ea4 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102ea4:	6a 00                	push   $0x0
  pushl $96
c0102ea6:	6a 60                	push   $0x60
  jmp __alltraps
c0102ea8:	e9 7a fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ead <vector97>:
.globl vector97
vector97:
  pushl $0
c0102ead:	6a 00                	push   $0x0
  pushl $97
c0102eaf:	6a 61                	push   $0x61
  jmp __alltraps
c0102eb1:	e9 71 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102eb6 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102eb6:	6a 00                	push   $0x0
  pushl $98
c0102eb8:	6a 62                	push   $0x62
  jmp __alltraps
c0102eba:	e9 68 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ebf <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ebf:	6a 00                	push   $0x0
  pushl $99
c0102ec1:	6a 63                	push   $0x63
  jmp __alltraps
c0102ec3:	e9 5f fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ec8 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102ec8:	6a 00                	push   $0x0
  pushl $100
c0102eca:	6a 64                	push   $0x64
  jmp __alltraps
c0102ecc:	e9 56 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ed1 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ed1:	6a 00                	push   $0x0
  pushl $101
c0102ed3:	6a 65                	push   $0x65
  jmp __alltraps
c0102ed5:	e9 4d fc ff ff       	jmp    c0102b27 <__alltraps>

c0102eda <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eda:	6a 00                	push   $0x0
  pushl $102
c0102edc:	6a 66                	push   $0x66
  jmp __alltraps
c0102ede:	e9 44 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ee3 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ee3:	6a 00                	push   $0x0
  pushl $103
c0102ee5:	6a 67                	push   $0x67
  jmp __alltraps
c0102ee7:	e9 3b fc ff ff       	jmp    c0102b27 <__alltraps>

c0102eec <vector104>:
.globl vector104
vector104:
  pushl $0
c0102eec:	6a 00                	push   $0x0
  pushl $104
c0102eee:	6a 68                	push   $0x68
  jmp __alltraps
c0102ef0:	e9 32 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102ef5 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ef5:	6a 00                	push   $0x0
  pushl $105
c0102ef7:	6a 69                	push   $0x69
  jmp __alltraps
c0102ef9:	e9 29 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102efe <vector106>:
.globl vector106
vector106:
  pushl $0
c0102efe:	6a 00                	push   $0x0
  pushl $106
c0102f00:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102f02:	e9 20 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102f07 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102f07:	6a 00                	push   $0x0
  pushl $107
c0102f09:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102f0b:	e9 17 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102f10 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102f10:	6a 00                	push   $0x0
  pushl $108
c0102f12:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f14:	e9 0e fc ff ff       	jmp    c0102b27 <__alltraps>

c0102f19 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f19:	6a 00                	push   $0x0
  pushl $109
c0102f1b:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f1d:	e9 05 fc ff ff       	jmp    c0102b27 <__alltraps>

c0102f22 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f22:	6a 00                	push   $0x0
  pushl $110
c0102f24:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f26:	e9 fc fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f2b <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f2b:	6a 00                	push   $0x0
  pushl $111
c0102f2d:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f2f:	e9 f3 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f34 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f34:	6a 00                	push   $0x0
  pushl $112
c0102f36:	6a 70                	push   $0x70
  jmp __alltraps
c0102f38:	e9 ea fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f3d <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $113
c0102f3f:	6a 71                	push   $0x71
  jmp __alltraps
c0102f41:	e9 e1 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f46 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $114
c0102f48:	6a 72                	push   $0x72
  jmp __alltraps
c0102f4a:	e9 d8 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f4f <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f4f:	6a 00                	push   $0x0
  pushl $115
c0102f51:	6a 73                	push   $0x73
  jmp __alltraps
c0102f53:	e9 cf fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f58 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f58:	6a 00                	push   $0x0
  pushl $116
c0102f5a:	6a 74                	push   $0x74
  jmp __alltraps
c0102f5c:	e9 c6 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f61 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $117
c0102f63:	6a 75                	push   $0x75
  jmp __alltraps
c0102f65:	e9 bd fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f6a <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $118
c0102f6c:	6a 76                	push   $0x76
  jmp __alltraps
c0102f6e:	e9 b4 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f73 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f73:	6a 00                	push   $0x0
  pushl $119
c0102f75:	6a 77                	push   $0x77
  jmp __alltraps
c0102f77:	e9 ab fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f7c <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f7c:	6a 00                	push   $0x0
  pushl $120
c0102f7e:	6a 78                	push   $0x78
  jmp __alltraps
c0102f80:	e9 a2 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f85 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $121
c0102f87:	6a 79                	push   $0x79
  jmp __alltraps
c0102f89:	e9 99 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f8e <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f8e:	6a 00                	push   $0x0
  pushl $122
c0102f90:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f92:	e9 90 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102f97 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f97:	6a 00                	push   $0x0
  pushl $123
c0102f99:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f9b:	e9 87 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fa0 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102fa0:	6a 00                	push   $0x0
  pushl $124
c0102fa2:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102fa4:	e9 7e fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fa9 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $125
c0102fab:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102fad:	e9 75 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fb2 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $126
c0102fb4:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fb6:	e9 6c fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fbb <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fbb:	6a 00                	push   $0x0
  pushl $127
c0102fbd:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fbf:	e9 63 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fc4 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fc4:	6a 00                	push   $0x0
  pushl $128
c0102fc6:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fcb:	e9 57 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fd0 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fd0:	6a 00                	push   $0x0
  pushl $129
c0102fd2:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fd7:	e9 4b fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fdc <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fdc:	6a 00                	push   $0x0
  pushl $130
c0102fde:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fe3:	e9 3f fb ff ff       	jmp    c0102b27 <__alltraps>

c0102fe8 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fe8:	6a 00                	push   $0x0
  pushl $131
c0102fea:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fef:	e9 33 fb ff ff       	jmp    c0102b27 <__alltraps>

c0102ff4 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102ff4:	6a 00                	push   $0x0
  pushl $132
c0102ff6:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102ffb:	e9 27 fb ff ff       	jmp    c0102b27 <__alltraps>

c0103000 <vector133>:
.globl vector133
vector133:
  pushl $0
c0103000:	6a 00                	push   $0x0
  pushl $133
c0103002:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0103007:	e9 1b fb ff ff       	jmp    c0102b27 <__alltraps>

c010300c <vector134>:
.globl vector134
vector134:
  pushl $0
c010300c:	6a 00                	push   $0x0
  pushl $134
c010300e:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103013:	e9 0f fb ff ff       	jmp    c0102b27 <__alltraps>

c0103018 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103018:	6a 00                	push   $0x0
  pushl $135
c010301a:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010301f:	e9 03 fb ff ff       	jmp    c0102b27 <__alltraps>

c0103024 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103024:	6a 00                	push   $0x0
  pushl $136
c0103026:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010302b:	e9 f7 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103030 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103030:	6a 00                	push   $0x0
  pushl $137
c0103032:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103037:	e9 eb fa ff ff       	jmp    c0102b27 <__alltraps>

c010303c <vector138>:
.globl vector138
vector138:
  pushl $0
c010303c:	6a 00                	push   $0x0
  pushl $138
c010303e:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103043:	e9 df fa ff ff       	jmp    c0102b27 <__alltraps>

c0103048 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103048:	6a 00                	push   $0x0
  pushl $139
c010304a:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010304f:	e9 d3 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103054 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103054:	6a 00                	push   $0x0
  pushl $140
c0103056:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010305b:	e9 c7 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103060 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103060:	6a 00                	push   $0x0
  pushl $141
c0103062:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103067:	e9 bb fa ff ff       	jmp    c0102b27 <__alltraps>

c010306c <vector142>:
.globl vector142
vector142:
  pushl $0
c010306c:	6a 00                	push   $0x0
  pushl $142
c010306e:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103073:	e9 af fa ff ff       	jmp    c0102b27 <__alltraps>

c0103078 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103078:	6a 00                	push   $0x0
  pushl $143
c010307a:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010307f:	e9 a3 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103084 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103084:	6a 00                	push   $0x0
  pushl $144
c0103086:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010308b:	e9 97 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103090 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103090:	6a 00                	push   $0x0
  pushl $145
c0103092:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103097:	e9 8b fa ff ff       	jmp    c0102b27 <__alltraps>

c010309c <vector146>:
.globl vector146
vector146:
  pushl $0
c010309c:	6a 00                	push   $0x0
  pushl $146
c010309e:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c01030a3:	e9 7f fa ff ff       	jmp    c0102b27 <__alltraps>

c01030a8 <vector147>:
.globl vector147
vector147:
  pushl $0
c01030a8:	6a 00                	push   $0x0
  pushl $147
c01030aa:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01030af:	e9 73 fa ff ff       	jmp    c0102b27 <__alltraps>

c01030b4 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030b4:	6a 00                	push   $0x0
  pushl $148
c01030b6:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030bb:	e9 67 fa ff ff       	jmp    c0102b27 <__alltraps>

c01030c0 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030c0:	6a 00                	push   $0x0
  pushl $149
c01030c2:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030c7:	e9 5b fa ff ff       	jmp    c0102b27 <__alltraps>

c01030cc <vector150>:
.globl vector150
vector150:
  pushl $0
c01030cc:	6a 00                	push   $0x0
  pushl $150
c01030ce:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030d3:	e9 4f fa ff ff       	jmp    c0102b27 <__alltraps>

c01030d8 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030d8:	6a 00                	push   $0x0
  pushl $151
c01030da:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030df:	e9 43 fa ff ff       	jmp    c0102b27 <__alltraps>

c01030e4 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030e4:	6a 00                	push   $0x0
  pushl $152
c01030e6:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030eb:	e9 37 fa ff ff       	jmp    c0102b27 <__alltraps>

c01030f0 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030f0:	6a 00                	push   $0x0
  pushl $153
c01030f2:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030f7:	e9 2b fa ff ff       	jmp    c0102b27 <__alltraps>

c01030fc <vector154>:
.globl vector154
vector154:
  pushl $0
c01030fc:	6a 00                	push   $0x0
  pushl $154
c01030fe:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103103:	e9 1f fa ff ff       	jmp    c0102b27 <__alltraps>

c0103108 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103108:	6a 00                	push   $0x0
  pushl $155
c010310a:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010310f:	e9 13 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103114 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103114:	6a 00                	push   $0x0
  pushl $156
c0103116:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010311b:	e9 07 fa ff ff       	jmp    c0102b27 <__alltraps>

c0103120 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103120:	6a 00                	push   $0x0
  pushl $157
c0103122:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103127:	e9 fb f9 ff ff       	jmp    c0102b27 <__alltraps>

c010312c <vector158>:
.globl vector158
vector158:
  pushl $0
c010312c:	6a 00                	push   $0x0
  pushl $158
c010312e:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103133:	e9 ef f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103138 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103138:	6a 00                	push   $0x0
  pushl $159
c010313a:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010313f:	e9 e3 f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103144 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103144:	6a 00                	push   $0x0
  pushl $160
c0103146:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010314b:	e9 d7 f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103150 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103150:	6a 00                	push   $0x0
  pushl $161
c0103152:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103157:	e9 cb f9 ff ff       	jmp    c0102b27 <__alltraps>

c010315c <vector162>:
.globl vector162
vector162:
  pushl $0
c010315c:	6a 00                	push   $0x0
  pushl $162
c010315e:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103163:	e9 bf f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103168 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103168:	6a 00                	push   $0x0
  pushl $163
c010316a:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010316f:	e9 b3 f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103174 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103174:	6a 00                	push   $0x0
  pushl $164
c0103176:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010317b:	e9 a7 f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103180 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103180:	6a 00                	push   $0x0
  pushl $165
c0103182:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103187:	e9 9b f9 ff ff       	jmp    c0102b27 <__alltraps>

c010318c <vector166>:
.globl vector166
vector166:
  pushl $0
c010318c:	6a 00                	push   $0x0
  pushl $166
c010318e:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103193:	e9 8f f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103198 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103198:	6a 00                	push   $0x0
  pushl $167
c010319a:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010319f:	e9 83 f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031a4 <vector168>:
.globl vector168
vector168:
  pushl $0
c01031a4:	6a 00                	push   $0x0
  pushl $168
c01031a6:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01031ab:	e9 77 f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031b0 <vector169>:
.globl vector169
vector169:
  pushl $0
c01031b0:	6a 00                	push   $0x0
  pushl $169
c01031b2:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031b7:	e9 6b f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031bc <vector170>:
.globl vector170
vector170:
  pushl $0
c01031bc:	6a 00                	push   $0x0
  pushl $170
c01031be:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031c3:	e9 5f f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031c8 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031c8:	6a 00                	push   $0x0
  pushl $171
c01031ca:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031cf:	e9 53 f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031d4 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031d4:	6a 00                	push   $0x0
  pushl $172
c01031d6:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031db:	e9 47 f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031e0 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031e0:	6a 00                	push   $0x0
  pushl $173
c01031e2:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031e7:	e9 3b f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031ec <vector174>:
.globl vector174
vector174:
  pushl $0
c01031ec:	6a 00                	push   $0x0
  pushl $174
c01031ee:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031f3:	e9 2f f9 ff ff       	jmp    c0102b27 <__alltraps>

c01031f8 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031f8:	6a 00                	push   $0x0
  pushl $175
c01031fa:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031ff:	e9 23 f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103204 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103204:	6a 00                	push   $0x0
  pushl $176
c0103206:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010320b:	e9 17 f9 ff ff       	jmp    c0102b27 <__alltraps>

c0103210 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103210:	6a 00                	push   $0x0
  pushl $177
c0103212:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103217:	e9 0b f9 ff ff       	jmp    c0102b27 <__alltraps>

c010321c <vector178>:
.globl vector178
vector178:
  pushl $0
c010321c:	6a 00                	push   $0x0
  pushl $178
c010321e:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103223:	e9 ff f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103228 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103228:	6a 00                	push   $0x0
  pushl $179
c010322a:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010322f:	e9 f3 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103234 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103234:	6a 00                	push   $0x0
  pushl $180
c0103236:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010323b:	e9 e7 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103240 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103240:	6a 00                	push   $0x0
  pushl $181
c0103242:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103247:	e9 db f8 ff ff       	jmp    c0102b27 <__alltraps>

c010324c <vector182>:
.globl vector182
vector182:
  pushl $0
c010324c:	6a 00                	push   $0x0
  pushl $182
c010324e:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103253:	e9 cf f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103258 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103258:	6a 00                	push   $0x0
  pushl $183
c010325a:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010325f:	e9 c3 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103264 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103264:	6a 00                	push   $0x0
  pushl $184
c0103266:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010326b:	e9 b7 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103270 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103270:	6a 00                	push   $0x0
  pushl $185
c0103272:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103277:	e9 ab f8 ff ff       	jmp    c0102b27 <__alltraps>

c010327c <vector186>:
.globl vector186
vector186:
  pushl $0
c010327c:	6a 00                	push   $0x0
  pushl $186
c010327e:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103283:	e9 9f f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103288 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103288:	6a 00                	push   $0x0
  pushl $187
c010328a:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010328f:	e9 93 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103294 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103294:	6a 00                	push   $0x0
  pushl $188
c0103296:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010329b:	e9 87 f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032a0 <vector189>:
.globl vector189
vector189:
  pushl $0
c01032a0:	6a 00                	push   $0x0
  pushl $189
c01032a2:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01032a7:	e9 7b f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032ac <vector190>:
.globl vector190
vector190:
  pushl $0
c01032ac:	6a 00                	push   $0x0
  pushl $190
c01032ae:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032b3:	e9 6f f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032b8 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032b8:	6a 00                	push   $0x0
  pushl $191
c01032ba:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032bf:	e9 63 f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032c4 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032c4:	6a 00                	push   $0x0
  pushl $192
c01032c6:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032cb:	e9 57 f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032d0 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032d0:	6a 00                	push   $0x0
  pushl $193
c01032d2:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032d7:	e9 4b f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032dc <vector194>:
.globl vector194
vector194:
  pushl $0
c01032dc:	6a 00                	push   $0x0
  pushl $194
c01032de:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032e3:	e9 3f f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032e8 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032e8:	6a 00                	push   $0x0
  pushl $195
c01032ea:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032ef:	e9 33 f8 ff ff       	jmp    c0102b27 <__alltraps>

c01032f4 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032f4:	6a 00                	push   $0x0
  pushl $196
c01032f6:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032fb:	e9 27 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103300 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103300:	6a 00                	push   $0x0
  pushl $197
c0103302:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103307:	e9 1b f8 ff ff       	jmp    c0102b27 <__alltraps>

c010330c <vector198>:
.globl vector198
vector198:
  pushl $0
c010330c:	6a 00                	push   $0x0
  pushl $198
c010330e:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103313:	e9 0f f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103318 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103318:	6a 00                	push   $0x0
  pushl $199
c010331a:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010331f:	e9 03 f8 ff ff       	jmp    c0102b27 <__alltraps>

c0103324 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103324:	6a 00                	push   $0x0
  pushl $200
c0103326:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010332b:	e9 f7 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103330 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103330:	6a 00                	push   $0x0
  pushl $201
c0103332:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103337:	e9 eb f7 ff ff       	jmp    c0102b27 <__alltraps>

c010333c <vector202>:
.globl vector202
vector202:
  pushl $0
c010333c:	6a 00                	push   $0x0
  pushl $202
c010333e:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103343:	e9 df f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103348 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103348:	6a 00                	push   $0x0
  pushl $203
c010334a:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010334f:	e9 d3 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103354 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103354:	6a 00                	push   $0x0
  pushl $204
c0103356:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010335b:	e9 c7 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103360 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103360:	6a 00                	push   $0x0
  pushl $205
c0103362:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103367:	e9 bb f7 ff ff       	jmp    c0102b27 <__alltraps>

c010336c <vector206>:
.globl vector206
vector206:
  pushl $0
c010336c:	6a 00                	push   $0x0
  pushl $206
c010336e:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103373:	e9 af f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103378 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103378:	6a 00                	push   $0x0
  pushl $207
c010337a:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010337f:	e9 a3 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103384 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103384:	6a 00                	push   $0x0
  pushl $208
c0103386:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010338b:	e9 97 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103390 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103390:	6a 00                	push   $0x0
  pushl $209
c0103392:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103397:	e9 8b f7 ff ff       	jmp    c0102b27 <__alltraps>

c010339c <vector210>:
.globl vector210
vector210:
  pushl $0
c010339c:	6a 00                	push   $0x0
  pushl $210
c010339e:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01033a3:	e9 7f f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033a8 <vector211>:
.globl vector211
vector211:
  pushl $0
c01033a8:	6a 00                	push   $0x0
  pushl $211
c01033aa:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01033af:	e9 73 f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033b4 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033b4:	6a 00                	push   $0x0
  pushl $212
c01033b6:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033bb:	e9 67 f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033c0 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033c0:	6a 00                	push   $0x0
  pushl $213
c01033c2:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033c7:	e9 5b f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033cc <vector214>:
.globl vector214
vector214:
  pushl $0
c01033cc:	6a 00                	push   $0x0
  pushl $214
c01033ce:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033d3:	e9 4f f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033d8 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033d8:	6a 00                	push   $0x0
  pushl $215
c01033da:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033df:	e9 43 f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033e4 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033e4:	6a 00                	push   $0x0
  pushl $216
c01033e6:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033eb:	e9 37 f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033f0 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033f0:	6a 00                	push   $0x0
  pushl $217
c01033f2:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033f7:	e9 2b f7 ff ff       	jmp    c0102b27 <__alltraps>

c01033fc <vector218>:
.globl vector218
vector218:
  pushl $0
c01033fc:	6a 00                	push   $0x0
  pushl $218
c01033fe:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103403:	e9 1f f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103408 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103408:	6a 00                	push   $0x0
  pushl $219
c010340a:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010340f:	e9 13 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103414 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103414:	6a 00                	push   $0x0
  pushl $220
c0103416:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010341b:	e9 07 f7 ff ff       	jmp    c0102b27 <__alltraps>

c0103420 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103420:	6a 00                	push   $0x0
  pushl $221
c0103422:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103427:	e9 fb f6 ff ff       	jmp    c0102b27 <__alltraps>

c010342c <vector222>:
.globl vector222
vector222:
  pushl $0
c010342c:	6a 00                	push   $0x0
  pushl $222
c010342e:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103433:	e9 ef f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103438 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103438:	6a 00                	push   $0x0
  pushl $223
c010343a:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010343f:	e9 e3 f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103444 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103444:	6a 00                	push   $0x0
  pushl $224
c0103446:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010344b:	e9 d7 f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103450 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103450:	6a 00                	push   $0x0
  pushl $225
c0103452:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103457:	e9 cb f6 ff ff       	jmp    c0102b27 <__alltraps>

c010345c <vector226>:
.globl vector226
vector226:
  pushl $0
c010345c:	6a 00                	push   $0x0
  pushl $226
c010345e:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103463:	e9 bf f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103468 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103468:	6a 00                	push   $0x0
  pushl $227
c010346a:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010346f:	e9 b3 f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103474 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103474:	6a 00                	push   $0x0
  pushl $228
c0103476:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010347b:	e9 a7 f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103480 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103480:	6a 00                	push   $0x0
  pushl $229
c0103482:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103487:	e9 9b f6 ff ff       	jmp    c0102b27 <__alltraps>

c010348c <vector230>:
.globl vector230
vector230:
  pushl $0
c010348c:	6a 00                	push   $0x0
  pushl $230
c010348e:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103493:	e9 8f f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103498 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103498:	6a 00                	push   $0x0
  pushl $231
c010349a:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010349f:	e9 83 f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034a4 <vector232>:
.globl vector232
vector232:
  pushl $0
c01034a4:	6a 00                	push   $0x0
  pushl $232
c01034a6:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01034ab:	e9 77 f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034b0 <vector233>:
.globl vector233
vector233:
  pushl $0
c01034b0:	6a 00                	push   $0x0
  pushl $233
c01034b2:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034b7:	e9 6b f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034bc <vector234>:
.globl vector234
vector234:
  pushl $0
c01034bc:	6a 00                	push   $0x0
  pushl $234
c01034be:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034c3:	e9 5f f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034c8 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034c8:	6a 00                	push   $0x0
  pushl $235
c01034ca:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034cf:	e9 53 f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034d4 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034d4:	6a 00                	push   $0x0
  pushl $236
c01034d6:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034db:	e9 47 f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034e0 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034e0:	6a 00                	push   $0x0
  pushl $237
c01034e2:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034e7:	e9 3b f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034ec <vector238>:
.globl vector238
vector238:
  pushl $0
c01034ec:	6a 00                	push   $0x0
  pushl $238
c01034ee:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034f3:	e9 2f f6 ff ff       	jmp    c0102b27 <__alltraps>

c01034f8 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034f8:	6a 00                	push   $0x0
  pushl $239
c01034fa:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034ff:	e9 23 f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103504 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103504:	6a 00                	push   $0x0
  pushl $240
c0103506:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010350b:	e9 17 f6 ff ff       	jmp    c0102b27 <__alltraps>

c0103510 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103510:	6a 00                	push   $0x0
  pushl $241
c0103512:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103517:	e9 0b f6 ff ff       	jmp    c0102b27 <__alltraps>

c010351c <vector242>:
.globl vector242
vector242:
  pushl $0
c010351c:	6a 00                	push   $0x0
  pushl $242
c010351e:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103523:	e9 ff f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103528 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103528:	6a 00                	push   $0x0
  pushl $243
c010352a:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010352f:	e9 f3 f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103534 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103534:	6a 00                	push   $0x0
  pushl $244
c0103536:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010353b:	e9 e7 f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103540 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103540:	6a 00                	push   $0x0
  pushl $245
c0103542:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103547:	e9 db f5 ff ff       	jmp    c0102b27 <__alltraps>

c010354c <vector246>:
.globl vector246
vector246:
  pushl $0
c010354c:	6a 00                	push   $0x0
  pushl $246
c010354e:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103553:	e9 cf f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103558 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103558:	6a 00                	push   $0x0
  pushl $247
c010355a:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010355f:	e9 c3 f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103564 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103564:	6a 00                	push   $0x0
  pushl $248
c0103566:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010356b:	e9 b7 f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103570 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103570:	6a 00                	push   $0x0
  pushl $249
c0103572:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103577:	e9 ab f5 ff ff       	jmp    c0102b27 <__alltraps>

c010357c <vector250>:
.globl vector250
vector250:
  pushl $0
c010357c:	6a 00                	push   $0x0
  pushl $250
c010357e:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103583:	e9 9f f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103588 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103588:	6a 00                	push   $0x0
  pushl $251
c010358a:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010358f:	e9 93 f5 ff ff       	jmp    c0102b27 <__alltraps>

c0103594 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103594:	6a 00                	push   $0x0
  pushl $252
c0103596:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010359b:	e9 87 f5 ff ff       	jmp    c0102b27 <__alltraps>

c01035a0 <vector253>:
.globl vector253
vector253:
  pushl $0
c01035a0:	6a 00                	push   $0x0
  pushl $253
c01035a2:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01035a7:	e9 7b f5 ff ff       	jmp    c0102b27 <__alltraps>

c01035ac <vector254>:
.globl vector254
vector254:
  pushl $0
c01035ac:	6a 00                	push   $0x0
  pushl $254
c01035ae:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035b3:	e9 6f f5 ff ff       	jmp    c0102b27 <__alltraps>

c01035b8 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035b8:	6a 00                	push   $0x0
  pushl $255
c01035ba:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035bf:	e9 63 f5 ff ff       	jmp    c0102b27 <__alltraps>

c01035c4 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035c4:	55                   	push   %ebp
c01035c5:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035c7:	8b 55 08             	mov    0x8(%ebp),%edx
c01035ca:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c01035cf:	29 c2                	sub    %eax,%edx
c01035d1:	89 d0                	mov    %edx,%eax
c01035d3:	c1 f8 05             	sar    $0x5,%eax
}
c01035d6:	5d                   	pop    %ebp
c01035d7:	c3                   	ret    

c01035d8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035d8:	55                   	push   %ebp
c01035d9:	89 e5                	mov    %esp,%ebp
c01035db:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035de:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e1:	89 04 24             	mov    %eax,(%esp)
c01035e4:	e8 db ff ff ff       	call   c01035c4 <page2ppn>
c01035e9:	c1 e0 0c             	shl    $0xc,%eax
}
c01035ec:	c9                   	leave  
c01035ed:	c3                   	ret    

c01035ee <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035ee:	55                   	push   %ebp
c01035ef:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01035f4:	8b 00                	mov    (%eax),%eax
}
c01035f6:	5d                   	pop    %ebp
c01035f7:	c3                   	ret    

c01035f8 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035f8:	55                   	push   %ebp
c01035f9:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01035fe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103601:	89 10                	mov    %edx,(%eax)
}
c0103603:	5d                   	pop    %ebp
c0103604:	c3                   	ret    

c0103605 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103605:	55                   	push   %ebp
c0103606:	89 e5                	mov    %esp,%ebp
c0103608:	83 ec 10             	sub    $0x10,%esp
c010360b:	c7 45 fc 34 61 15 c0 	movl   $0xc0156134,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103612:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103615:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103618:	89 50 04             	mov    %edx,0x4(%eax)
c010361b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010361e:	8b 50 04             	mov    0x4(%eax),%edx
c0103621:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103624:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103626:	c7 05 3c 61 15 c0 00 	movl   $0x0,0xc015613c
c010362d:	00 00 00 
}
c0103630:	c9                   	leave  
c0103631:	c3                   	ret    

c0103632 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103632:	55                   	push   %ebp
c0103633:	89 e5                	mov    %esp,%ebp
c0103635:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103638:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010363c:	75 24                	jne    c0103662 <default_init_memmap+0x30>
c010363e:	c7 44 24 0c 50 61 11 	movl   $0xc0116150,0xc(%esp)
c0103645:	c0 
c0103646:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c010364d:	c0 
c010364e:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0103655:	00 
c0103656:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c010365d:	e8 7c d8 ff ff       	call   c0100ede <__panic>
    struct Page *p = base;
c0103662:	8b 45 08             	mov    0x8(%ebp),%eax
c0103665:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103668:	eb 7d                	jmp    c01036e7 <default_init_memmap+0xb5>
        assert(PageReserved(p));
c010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010366d:	83 c0 04             	add    $0x4,%eax
c0103670:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103677:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010367a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010367d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103680:	0f a3 10             	bt     %edx,(%eax)
c0103683:	19 c0                	sbb    %eax,%eax
c0103685:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103688:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010368c:	0f 95 c0             	setne  %al
c010368f:	0f b6 c0             	movzbl %al,%eax
c0103692:	85 c0                	test   %eax,%eax
c0103694:	75 24                	jne    c01036ba <default_init_memmap+0x88>
c0103696:	c7 44 24 0c 81 61 11 	movl   $0xc0116181,0xc(%esp)
c010369d:	c0 
c010369e:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01036a5:	c0 
c01036a6:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01036ad:	00 
c01036ae:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01036b5:	e8 24 d8 ff ff       	call   c0100ede <__panic>
        p->flags = p->property = 0;
c01036ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036bd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01036c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c7:	8b 50 08             	mov    0x8(%eax),%edx
c01036ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036cd:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01036d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036d7:	00 
c01036d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036db:	89 04 24             	mov    %eax,(%esp)
c01036de:	e8 15 ff ff ff       	call   c01035f8 <set_page_ref>

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c01036e3:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01036e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01036ea:	c1 e0 05             	shl    $0x5,%eax
c01036ed:	89 c2                	mov    %eax,%edx
c01036ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01036f2:	01 d0                	add    %edx,%eax
c01036f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01036f7:	0f 85 6d ff ff ff    	jne    c010366a <default_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c01036fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103700:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103703:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103706:	8b 45 08             	mov    0x8(%ebp),%eax
c0103709:	83 c0 04             	add    $0x4,%eax
c010370c:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0103713:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103716:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103719:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010371c:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c010371f:	8b 15 3c 61 15 c0    	mov    0xc015613c,%edx
c0103725:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103728:	01 d0                	add    %edx,%eax
c010372a:	a3 3c 61 15 c0       	mov    %eax,0xc015613c
    list_add_before(&free_list, &(base->page_link));
c010372f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103732:	83 c0 0c             	add    $0xc,%eax
c0103735:	c7 45 dc 34 61 15 c0 	movl   $0xc0156134,-0x24(%ebp)
c010373c:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010373f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103742:	8b 00                	mov    (%eax),%eax
c0103744:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103747:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010374a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010374d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103750:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103753:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103756:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103759:	89 10                	mov    %edx,(%eax)
c010375b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010375e:	8b 10                	mov    (%eax),%edx
c0103760:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103763:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103766:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103769:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010376c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010376f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103772:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103775:	89 10                	mov    %edx,(%eax)
}
c0103777:	c9                   	leave  
c0103778:	c3                   	ret    

c0103779 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103779:	55                   	push   %ebp
c010377a:	89 e5                	mov    %esp,%ebp
c010377c:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c010377f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103783:	75 24                	jne    c01037a9 <default_alloc_pages+0x30>
c0103785:	c7 44 24 0c 50 61 11 	movl   $0xc0116150,0xc(%esp)
c010378c:	c0 
c010378d:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103794:	c0 
c0103795:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c010379c:	00 
c010379d:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01037a4:	e8 35 d7 ff ff       	call   c0100ede <__panic>
    if (n > nr_free) {
c01037a9:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c01037ae:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037b1:	73 0a                	jae    c01037bd <default_alloc_pages+0x44>
        return NULL;
c01037b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01037b8:	e9 36 01 00 00       	jmp    c01038f3 <default_alloc_pages+0x17a>
    }
    struct Page *page = NULL;
c01037bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01037c4:	c7 45 f0 34 61 15 c0 	movl   $0xc0156134,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01037cb:	eb 1c                	jmp    c01037e9 <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c01037cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037d0:	83 e8 0c             	sub    $0xc,%eax
c01037d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c01037d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d9:	8b 40 08             	mov    0x8(%eax),%eax
c01037dc:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037df:	72 08                	jb     c01037e9 <default_alloc_pages+0x70>
            page = p;
c01037e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c01037e7:	eb 18                	jmp    c0103801 <default_alloc_pages+0x88>
c01037e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037f2:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01037f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01037f8:	81 7d f0 34 61 15 c0 	cmpl   $0xc0156134,-0x10(%ebp)
c01037ff:	75 cc                	jne    c01037cd <default_alloc_pages+0x54>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0103801:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103805:	0f 84 e5 00 00 00    	je     c01038f0 <default_alloc_pages+0x177>
        if (page->property > n) {
c010380b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010380e:	8b 40 08             	mov    0x8(%eax),%eax
c0103811:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103814:	0f 86 85 00 00 00    	jbe    c010389f <default_alloc_pages+0x126>
            struct Page *p = page + n;
c010381a:	8b 45 08             	mov    0x8(%ebp),%eax
c010381d:	c1 e0 05             	shl    $0x5,%eax
c0103820:	89 c2                	mov    %eax,%edx
c0103822:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103825:	01 d0                	add    %edx,%eax
c0103827:	89 45 e8             	mov    %eax,-0x18(%ebp)
			SetPageProperty(p);
c010382a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010382d:	83 c0 04             	add    $0x4,%eax
c0103830:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0103837:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010383a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010383d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103840:	0f ab 10             	bts    %edx,(%eax)
            p->property = page->property - n;
c0103843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103846:	8b 40 08             	mov    0x8(%eax),%eax
c0103849:	2b 45 08             	sub    0x8(%ebp),%eax
c010384c:	89 c2                	mov    %eax,%edx
c010384e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103851:	89 50 08             	mov    %edx,0x8(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c0103854:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103857:	83 c0 0c             	add    $0xc,%eax
c010385a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010385d:	83 c2 0c             	add    $0xc,%edx
c0103860:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0103863:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103866:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103869:	8b 40 04             	mov    0x4(%eax),%eax
c010386c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010386f:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103872:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103875:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103878:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010387b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010387e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103881:	89 10                	mov    %edx,(%eax)
c0103883:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103886:	8b 10                	mov    (%eax),%edx
c0103888:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010388b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010388e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103891:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103894:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103897:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010389a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010389d:	89 10                	mov    %edx,(%eax)
    }
	list_del(&(page->page_link));
c010389f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038a2:	83 c0 0c             	add    $0xc,%eax
c01038a5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01038a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01038ab:	8b 40 04             	mov    0x4(%eax),%eax
c01038ae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01038b1:	8b 12                	mov    (%edx),%edx
c01038b3:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01038b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01038b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01038bc:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01038bf:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01038c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01038c5:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01038c8:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c01038ca:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c01038cf:	2b 45 08             	sub    0x8(%ebp),%eax
c01038d2:	a3 3c 61 15 c0       	mov    %eax,0xc015613c
        ClearPageProperty(page);
c01038d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038da:	83 c0 04             	add    $0x4,%eax
c01038dd:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
c01038e4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038ea:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038ed:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01038f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01038f3:	c9                   	leave  
c01038f4:	c3                   	ret    

c01038f5 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038f5:	55                   	push   %ebp
c01038f6:	89 e5                	mov    %esp,%ebp
c01038f8:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c01038fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103902:	75 24                	jne    c0103928 <default_free_pages+0x33>
c0103904:	c7 44 24 0c 50 61 11 	movl   $0xc0116150,0xc(%esp)
c010390b:	c0 
c010390c:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103913:	c0 
c0103914:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010391b:	00 
c010391c:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103923:	e8 b6 d5 ff ff       	call   c0100ede <__panic>
    struct Page *p = base;
c0103928:	8b 45 08             	mov    0x8(%ebp),%eax
c010392b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010392e:	e9 9d 00 00 00       	jmp    c01039d0 <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c0103933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103936:	83 c0 04             	add    $0x4,%eax
c0103939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103940:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103943:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103946:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103949:	0f a3 10             	bt     %edx,(%eax)
c010394c:	19 c0                	sbb    %eax,%eax
c010394e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103951:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103955:	0f 95 c0             	setne  %al
c0103958:	0f b6 c0             	movzbl %al,%eax
c010395b:	85 c0                	test   %eax,%eax
c010395d:	75 2c                	jne    c010398b <default_free_pages+0x96>
c010395f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103962:	83 c0 04             	add    $0x4,%eax
c0103965:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010396c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010396f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103972:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103975:	0f a3 10             	bt     %edx,(%eax)
c0103978:	19 c0                	sbb    %eax,%eax
c010397a:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c010397d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103981:	0f 95 c0             	setne  %al
c0103984:	0f b6 c0             	movzbl %al,%eax
c0103987:	85 c0                	test   %eax,%eax
c0103989:	74 24                	je     c01039af <default_free_pages+0xba>
c010398b:	c7 44 24 0c 94 61 11 	movl   $0xc0116194,0xc(%esp)
c0103992:	c0 
c0103993:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c010399a:	c0 
c010399b:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01039a2:	00 
c01039a3:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01039aa:	e8 2f d5 ff ff       	call   c0100ede <__panic>
        p->flags = 0;
c01039af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01039b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01039c0:	00 
c01039c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039c4:	89 04 24             	mov    %eax,(%esp)
c01039c7:	e8 2c fc ff ff       	call   c01035f8 <set_page_ref>

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c01039cc:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01039d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039d3:	c1 e0 05             	shl    $0x5,%eax
c01039d6:	89 c2                	mov    %eax,%edx
c01039d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039db:	01 d0                	add    %edx,%eax
c01039dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039e0:	0f 85 4d ff ff ff    	jne    c0103933 <default_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c01039e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039e9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039ec:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01039ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f2:	83 c0 04             	add    $0x4,%eax
c01039f5:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01039fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01039ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103a02:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103a05:	0f ab 10             	bts    %edx,(%eax)
c0103a08:	c7 45 cc 34 61 15 c0 	movl   $0xc0156134,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103a0f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103a12:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0103a15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103a18:	e9 fa 00 00 00       	jmp    c0103b17 <default_free_pages+0x222>
        p = le2page(le, page_link);
c0103a1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a20:	83 e8 0c             	sub    $0xc,%eax
c0103a23:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103a26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a29:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0103a2c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103a2f:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103a32:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // TODO: optimize
        if (base + base->property == p) {
c0103a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a38:	8b 40 08             	mov    0x8(%eax),%eax
c0103a3b:	c1 e0 05             	shl    $0x5,%eax
c0103a3e:	89 c2                	mov    %eax,%edx
c0103a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a43:	01 d0                	add    %edx,%eax
c0103a45:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a48:	75 5a                	jne    c0103aa4 <default_free_pages+0x1af>
            base->property += p->property;
c0103a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4d:	8b 50 08             	mov    0x8(%eax),%edx
c0103a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a53:	8b 40 08             	mov    0x8(%eax),%eax
c0103a56:	01 c2                	add    %eax,%edx
c0103a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a5b:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c0103a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a61:	83 c0 04             	add    $0x4,%eax
c0103a64:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0103a6b:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a6e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103a71:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103a74:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0103a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a7a:	83 c0 0c             	add    $0xc,%eax
c0103a7d:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103a80:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a83:	8b 40 04             	mov    0x4(%eax),%eax
c0103a86:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103a89:	8b 12                	mov    (%edx),%edx
c0103a8b:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0103a8e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103a91:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103a94:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103a97:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a9a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103a9d:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103aa0:	89 10                	mov    %edx,(%eax)
c0103aa2:	eb 73                	jmp    c0103b17 <default_free_pages+0x222>
        }
        else if (p + p->property == base) {
c0103aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aa7:	8b 40 08             	mov    0x8(%eax),%eax
c0103aaa:	c1 e0 05             	shl    $0x5,%eax
c0103aad:	89 c2                	mov    %eax,%edx
c0103aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ab2:	01 d0                	add    %edx,%eax
c0103ab4:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103ab7:	75 5e                	jne    c0103b17 <default_free_pages+0x222>
            p->property += base->property;
c0103ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103abc:	8b 50 08             	mov    0x8(%eax),%edx
c0103abf:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ac2:	8b 40 08             	mov    0x8(%eax),%eax
c0103ac5:	01 c2                	add    %eax,%edx
c0103ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aca:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0103acd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad0:	83 c0 04             	add    $0x4,%eax
c0103ad3:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0103ada:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0103add:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103ae0:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103ae3:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0103ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ae9:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0103aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aef:	83 c0 0c             	add    $0xc,%eax
c0103af2:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103af5:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103af8:	8b 40 04             	mov    0x4(%eax),%eax
c0103afb:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0103afe:	8b 12                	mov    (%edx),%edx
c0103b00:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0103b03:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103b06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103b09:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103b0c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103b0f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103b12:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103b15:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0103b17:	81 7d f0 34 61 15 c0 	cmpl   $0xc0156134,-0x10(%ebp)
c0103b1e:	0f 85 f9 fe ff ff    	jne    c0103a1d <default_free_pages+0x128>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c0103b24:	8b 15 3c 61 15 c0    	mov    0xc015613c,%edx
c0103b2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b2d:	01 d0                	add    %edx,%eax
c0103b2f:	a3 3c 61 15 c0       	mov    %eax,0xc015613c
c0103b34:	c7 45 9c 34 61 15 c0 	movl   $0xc0156134,-0x64(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103b3b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103b3e:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c0103b41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103b44:	eb 68                	jmp    c0103bae <default_free_pages+0x2b9>
        p = le2page(le, page_link);
c0103b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b49:	83 e8 0c             	sub    $0xc,%eax
c0103b4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b52:	8b 40 08             	mov    0x8(%eax),%eax
c0103b55:	c1 e0 05             	shl    $0x5,%eax
c0103b58:	89 c2                	mov    %eax,%edx
c0103b5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b5d:	01 d0                	add    %edx,%eax
c0103b5f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103b62:	77 3b                	ja     c0103b9f <default_free_pages+0x2aa>
            assert(base + base->property != p);
c0103b64:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b67:	8b 40 08             	mov    0x8(%eax),%eax
c0103b6a:	c1 e0 05             	shl    $0x5,%eax
c0103b6d:	89 c2                	mov    %eax,%edx
c0103b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b72:	01 d0                	add    %edx,%eax
c0103b74:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103b77:	75 24                	jne    c0103b9d <default_free_pages+0x2a8>
c0103b79:	c7 44 24 0c b9 61 11 	movl   $0xc01161b9,0xc(%esp)
c0103b80:	c0 
c0103b81:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103b88:	c0 
c0103b89:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103b90:	00 
c0103b91:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103b98:	e8 41 d3 ff ff       	call   c0100ede <__panic>
            break;
c0103b9d:	eb 18                	jmp    c0103bb7 <default_free_pages+0x2c2>
c0103b9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ba2:	89 45 98             	mov    %eax,-0x68(%ebp)
c0103ba5:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103ba8:	8b 40 04             	mov    0x4(%eax),%eax
        }
        le = list_next(le);
c0103bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    le = list_next(&free_list);
    while (le != &free_list) {
c0103bae:	81 7d f0 34 61 15 c0 	cmpl   $0xc0156134,-0x10(%ebp)
c0103bb5:	75 8f                	jne    c0103b46 <default_free_pages+0x251>
            assert(base + base->property != p);
            break;
        }
        le = list_next(le);
    }
    list_add_before(le, &(base->page_link));
c0103bb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bba:	8d 50 0c             	lea    0xc(%eax),%edx
c0103bbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bc0:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0103bc3:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103bc6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103bc9:	8b 00                	mov    (%eax),%eax
c0103bcb:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103bce:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0103bd1:	89 45 88             	mov    %eax,-0x78(%ebp)
c0103bd4:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103bd7:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103bda:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103bdd:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0103be0:	89 10                	mov    %edx,(%eax)
c0103be2:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103be5:	8b 10                	mov    (%eax),%edx
c0103be7:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103bea:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103bed:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103bf0:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103bf3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103bf6:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103bf9:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103bfc:	89 10                	mov    %edx,(%eax)
}
c0103bfe:	c9                   	leave  
c0103bff:	c3                   	ret    

c0103c00 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103c00:	55                   	push   %ebp
c0103c01:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103c03:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
}
c0103c08:	5d                   	pop    %ebp
c0103c09:	c3                   	ret    

c0103c0a <basic_check>:

static void
basic_check(void) {
c0103c0a:	55                   	push   %ebp
c0103c0b:	89 e5                	mov    %esp,%ebp
c0103c0d:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103c10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c20:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103c23:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c2a:	e8 f5 15 00 00       	call   c0105224 <alloc_pages>
c0103c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103c36:	75 24                	jne    c0103c5c <basic_check+0x52>
c0103c38:	c7 44 24 0c d4 61 11 	movl   $0xc01161d4,0xc(%esp)
c0103c3f:	c0 
c0103c40:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103c47:	c0 
c0103c48:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0103c4f:	00 
c0103c50:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103c57:	e8 82 d2 ff ff       	call   c0100ede <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103c5c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c63:	e8 bc 15 00 00       	call   c0105224 <alloc_pages>
c0103c68:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103c6f:	75 24                	jne    c0103c95 <basic_check+0x8b>
c0103c71:	c7 44 24 0c f0 61 11 	movl   $0xc01161f0,0xc(%esp)
c0103c78:	c0 
c0103c79:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103c80:	c0 
c0103c81:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103c88:	00 
c0103c89:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103c90:	e8 49 d2 ff ff       	call   c0100ede <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103c95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c9c:	e8 83 15 00 00       	call   c0105224 <alloc_pages>
c0103ca1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ca4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ca8:	75 24                	jne    c0103cce <basic_check+0xc4>
c0103caa:	c7 44 24 0c 0c 62 11 	movl   $0xc011620c,0xc(%esp)
c0103cb1:	c0 
c0103cb2:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103cb9:	c0 
c0103cba:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103cc1:	00 
c0103cc2:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103cc9:	e8 10 d2 ff ff       	call   c0100ede <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103cce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cd1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103cd4:	74 10                	je     c0103ce6 <basic_check+0xdc>
c0103cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cd9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103cdc:	74 08                	je     c0103ce6 <basic_check+0xdc>
c0103cde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ce1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ce4:	75 24                	jne    c0103d0a <basic_check+0x100>
c0103ce6:	c7 44 24 0c 28 62 11 	movl   $0xc0116228,0xc(%esp)
c0103ced:	c0 
c0103cee:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103cf5:	c0 
c0103cf6:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103cfd:	00 
c0103cfe:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103d05:	e8 d4 d1 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103d0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d0d:	89 04 24             	mov    %eax,(%esp)
c0103d10:	e8 d9 f8 ff ff       	call   c01035ee <page_ref>
c0103d15:	85 c0                	test   %eax,%eax
c0103d17:	75 1e                	jne    c0103d37 <basic_check+0x12d>
c0103d19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d1c:	89 04 24             	mov    %eax,(%esp)
c0103d1f:	e8 ca f8 ff ff       	call   c01035ee <page_ref>
c0103d24:	85 c0                	test   %eax,%eax
c0103d26:	75 0f                	jne    c0103d37 <basic_check+0x12d>
c0103d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d2b:	89 04 24             	mov    %eax,(%esp)
c0103d2e:	e8 bb f8 ff ff       	call   c01035ee <page_ref>
c0103d33:	85 c0                	test   %eax,%eax
c0103d35:	74 24                	je     c0103d5b <basic_check+0x151>
c0103d37:	c7 44 24 0c 4c 62 11 	movl   $0xc011624c,0xc(%esp)
c0103d3e:	c0 
c0103d3f:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103d46:	c0 
c0103d47:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0103d4e:	00 
c0103d4f:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103d56:	e8 83 d1 ff ff       	call   c0100ede <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103d5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d5e:	89 04 24             	mov    %eax,(%esp)
c0103d61:	e8 72 f8 ff ff       	call   c01035d8 <page2pa>
c0103d66:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c0103d6c:	c1 e2 0c             	shl    $0xc,%edx
c0103d6f:	39 d0                	cmp    %edx,%eax
c0103d71:	72 24                	jb     c0103d97 <basic_check+0x18d>
c0103d73:	c7 44 24 0c 88 62 11 	movl   $0xc0116288,0xc(%esp)
c0103d7a:	c0 
c0103d7b:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103d82:	c0 
c0103d83:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103d8a:	00 
c0103d8b:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103d92:	e8 47 d1 ff ff       	call   c0100ede <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103d97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d9a:	89 04 24             	mov    %eax,(%esp)
c0103d9d:	e8 36 f8 ff ff       	call   c01035d8 <page2pa>
c0103da2:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c0103da8:	c1 e2 0c             	shl    $0xc,%edx
c0103dab:	39 d0                	cmp    %edx,%eax
c0103dad:	72 24                	jb     c0103dd3 <basic_check+0x1c9>
c0103daf:	c7 44 24 0c a5 62 11 	movl   $0xc01162a5,0xc(%esp)
c0103db6:	c0 
c0103db7:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103dbe:	c0 
c0103dbf:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103dc6:	00 
c0103dc7:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103dce:	e8 0b d1 ff ff       	call   c0100ede <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103dd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dd6:	89 04 24             	mov    %eax,(%esp)
c0103dd9:	e8 fa f7 ff ff       	call   c01035d8 <page2pa>
c0103dde:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c0103de4:	c1 e2 0c             	shl    $0xc,%edx
c0103de7:	39 d0                	cmp    %edx,%eax
c0103de9:	72 24                	jb     c0103e0f <basic_check+0x205>
c0103deb:	c7 44 24 0c c2 62 11 	movl   $0xc01162c2,0xc(%esp)
c0103df2:	c0 
c0103df3:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103dfa:	c0 
c0103dfb:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103e02:	00 
c0103e03:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103e0a:	e8 cf d0 ff ff       	call   c0100ede <__panic>

    list_entry_t free_list_store = free_list;
c0103e0f:	a1 34 61 15 c0       	mov    0xc0156134,%eax
c0103e14:	8b 15 38 61 15 c0    	mov    0xc0156138,%edx
c0103e1a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103e1d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103e20:	c7 45 e0 34 61 15 c0 	movl   $0xc0156134,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103e27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e2a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103e2d:	89 50 04             	mov    %edx,0x4(%eax)
c0103e30:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e33:	8b 50 04             	mov    0x4(%eax),%edx
c0103e36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e39:	89 10                	mov    %edx,(%eax)
c0103e3b:	c7 45 dc 34 61 15 c0 	movl   $0xc0156134,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103e42:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e45:	8b 40 04             	mov    0x4(%eax),%eax
c0103e48:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103e4b:	0f 94 c0             	sete   %al
c0103e4e:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103e51:	85 c0                	test   %eax,%eax
c0103e53:	75 24                	jne    c0103e79 <basic_check+0x26f>
c0103e55:	c7 44 24 0c df 62 11 	movl   $0xc01162df,0xc(%esp)
c0103e5c:	c0 
c0103e5d:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103e64:	c0 
c0103e65:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103e6c:	00 
c0103e6d:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103e74:	e8 65 d0 ff ff       	call   c0100ede <__panic>

    unsigned int nr_free_store = nr_free;
c0103e79:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c0103e7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103e81:	c7 05 3c 61 15 c0 00 	movl   $0x0,0xc015613c
c0103e88:	00 00 00 

    assert(alloc_page() == NULL);
c0103e8b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e92:	e8 8d 13 00 00       	call   c0105224 <alloc_pages>
c0103e97:	85 c0                	test   %eax,%eax
c0103e99:	74 24                	je     c0103ebf <basic_check+0x2b5>
c0103e9b:	c7 44 24 0c f6 62 11 	movl   $0xc01162f6,0xc(%esp)
c0103ea2:	c0 
c0103ea3:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103eaa:	c0 
c0103eab:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0103eb2:	00 
c0103eb3:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103eba:	e8 1f d0 ff ff       	call   c0100ede <__panic>

    free_page(p0);
c0103ebf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ec6:	00 
c0103ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103eca:	89 04 24             	mov    %eax,(%esp)
c0103ecd:	e8 bd 13 00 00       	call   c010528f <free_pages>
    free_page(p1);
c0103ed2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ed9:	00 
c0103eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103edd:	89 04 24             	mov    %eax,(%esp)
c0103ee0:	e8 aa 13 00 00       	call   c010528f <free_pages>
    free_page(p2);
c0103ee5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103eec:	00 
c0103eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ef0:	89 04 24             	mov    %eax,(%esp)
c0103ef3:	e8 97 13 00 00       	call   c010528f <free_pages>
    assert(nr_free == 3);
c0103ef8:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c0103efd:	83 f8 03             	cmp    $0x3,%eax
c0103f00:	74 24                	je     c0103f26 <basic_check+0x31c>
c0103f02:	c7 44 24 0c 0b 63 11 	movl   $0xc011630b,0xc(%esp)
c0103f09:	c0 
c0103f0a:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103f11:	c0 
c0103f12:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0103f19:	00 
c0103f1a:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103f21:	e8 b8 cf ff ff       	call   c0100ede <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103f26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f2d:	e8 f2 12 00 00       	call   c0105224 <alloc_pages>
c0103f32:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103f35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103f39:	75 24                	jne    c0103f5f <basic_check+0x355>
c0103f3b:	c7 44 24 0c d4 61 11 	movl   $0xc01161d4,0xc(%esp)
c0103f42:	c0 
c0103f43:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103f4a:	c0 
c0103f4b:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c0103f52:	00 
c0103f53:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103f5a:	e8 7f cf ff ff       	call   c0100ede <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103f5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f66:	e8 b9 12 00 00       	call   c0105224 <alloc_pages>
c0103f6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103f72:	75 24                	jne    c0103f98 <basic_check+0x38e>
c0103f74:	c7 44 24 0c f0 61 11 	movl   $0xc01161f0,0xc(%esp)
c0103f7b:	c0 
c0103f7c:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103f83:	c0 
c0103f84:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c0103f8b:	00 
c0103f8c:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103f93:	e8 46 cf ff ff       	call   c0100ede <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103f98:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f9f:	e8 80 12 00 00       	call   c0105224 <alloc_pages>
c0103fa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103fa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103fab:	75 24                	jne    c0103fd1 <basic_check+0x3c7>
c0103fad:	c7 44 24 0c 0c 62 11 	movl   $0xc011620c,0xc(%esp)
c0103fb4:	c0 
c0103fb5:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103fbc:	c0 
c0103fbd:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0103fc4:	00 
c0103fc5:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0103fcc:	e8 0d cf ff ff       	call   c0100ede <__panic>

    assert(alloc_page() == NULL);
c0103fd1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fd8:	e8 47 12 00 00       	call   c0105224 <alloc_pages>
c0103fdd:	85 c0                	test   %eax,%eax
c0103fdf:	74 24                	je     c0104005 <basic_check+0x3fb>
c0103fe1:	c7 44 24 0c f6 62 11 	movl   $0xc01162f6,0xc(%esp)
c0103fe8:	c0 
c0103fe9:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0103ff0:	c0 
c0103ff1:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0103ff8:	00 
c0103ff9:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104000:	e8 d9 ce ff ff       	call   c0100ede <__panic>

    free_page(p0);
c0104005:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010400c:	00 
c010400d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104010:	89 04 24             	mov    %eax,(%esp)
c0104013:	e8 77 12 00 00       	call   c010528f <free_pages>
c0104018:	c7 45 d8 34 61 15 c0 	movl   $0xc0156134,-0x28(%ebp)
c010401f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104022:	8b 40 04             	mov    0x4(%eax),%eax
c0104025:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0104028:	0f 94 c0             	sete   %al
c010402b:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c010402e:	85 c0                	test   %eax,%eax
c0104030:	74 24                	je     c0104056 <basic_check+0x44c>
c0104032:	c7 44 24 0c 18 63 11 	movl   $0xc0116318,0xc(%esp)
c0104039:	c0 
c010403a:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104041:	c0 
c0104042:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0104049:	00 
c010404a:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104051:	e8 88 ce ff ff       	call   c0100ede <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0104056:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010405d:	e8 c2 11 00 00       	call   c0105224 <alloc_pages>
c0104062:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104065:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104068:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010406b:	74 24                	je     c0104091 <basic_check+0x487>
c010406d:	c7 44 24 0c 30 63 11 	movl   $0xc0116330,0xc(%esp)
c0104074:	c0 
c0104075:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c010407c:	c0 
c010407d:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c0104084:	00 
c0104085:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c010408c:	e8 4d ce ff ff       	call   c0100ede <__panic>
    assert(alloc_page() == NULL);
c0104091:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104098:	e8 87 11 00 00       	call   c0105224 <alloc_pages>
c010409d:	85 c0                	test   %eax,%eax
c010409f:	74 24                	je     c01040c5 <basic_check+0x4bb>
c01040a1:	c7 44 24 0c f6 62 11 	movl   $0xc01162f6,0xc(%esp)
c01040a8:	c0 
c01040a9:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01040b0:	c0 
c01040b1:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01040b8:	00 
c01040b9:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01040c0:	e8 19 ce ff ff       	call   c0100ede <__panic>

    assert(nr_free == 0);
c01040c5:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c01040ca:	85 c0                	test   %eax,%eax
c01040cc:	74 24                	je     c01040f2 <basic_check+0x4e8>
c01040ce:	c7 44 24 0c 49 63 11 	movl   $0xc0116349,0xc(%esp)
c01040d5:	c0 
c01040d6:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01040dd:	c0 
c01040de:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c01040e5:	00 
c01040e6:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01040ed:	e8 ec cd ff ff       	call   c0100ede <__panic>
    free_list = free_list_store;
c01040f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01040f5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01040f8:	a3 34 61 15 c0       	mov    %eax,0xc0156134
c01040fd:	89 15 38 61 15 c0    	mov    %edx,0xc0156138
    nr_free = nr_free_store;
c0104103:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104106:	a3 3c 61 15 c0       	mov    %eax,0xc015613c

    free_page(p);
c010410b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104112:	00 
c0104113:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104116:	89 04 24             	mov    %eax,(%esp)
c0104119:	e8 71 11 00 00       	call   c010528f <free_pages>
    free_page(p1);
c010411e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104125:	00 
c0104126:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104129:	89 04 24             	mov    %eax,(%esp)
c010412c:	e8 5e 11 00 00       	call   c010528f <free_pages>
    free_page(p2);
c0104131:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104138:	00 
c0104139:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010413c:	89 04 24             	mov    %eax,(%esp)
c010413f:	e8 4b 11 00 00       	call   c010528f <free_pages>
}
c0104144:	c9                   	leave  
c0104145:	c3                   	ret    

c0104146 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104146:	55                   	push   %ebp
c0104147:	89 e5                	mov    %esp,%ebp
c0104149:	53                   	push   %ebx
c010414a:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104157:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010415e:	c7 45 ec 34 61 15 c0 	movl   $0xc0156134,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104165:	eb 6b                	jmp    c01041d2 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104167:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010416a:	83 e8 0c             	sub    $0xc,%eax
c010416d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104170:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104173:	83 c0 04             	add    $0x4,%eax
c0104176:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010417d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104180:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104183:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104186:	0f a3 10             	bt     %edx,(%eax)
c0104189:	19 c0                	sbb    %eax,%eax
c010418b:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c010418e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104192:	0f 95 c0             	setne  %al
c0104195:	0f b6 c0             	movzbl %al,%eax
c0104198:	85 c0                	test   %eax,%eax
c010419a:	75 24                	jne    c01041c0 <default_check+0x7a>
c010419c:	c7 44 24 0c 56 63 11 	movl   $0xc0116356,0xc(%esp)
c01041a3:	c0 
c01041a4:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01041ab:	c0 
c01041ac:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01041b3:	00 
c01041b4:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01041bb:	e8 1e cd ff ff       	call   c0100ede <__panic>
        count ++, total += p->property;
c01041c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01041c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041c7:	8b 50 08             	mov    0x8(%eax),%edx
c01041ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041cd:	01 d0                	add    %edx,%eax
c01041cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01041d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01041d5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01041d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01041db:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01041de:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01041e1:	81 7d ec 34 61 15 c0 	cmpl   $0xc0156134,-0x14(%ebp)
c01041e8:	0f 85 79 ff ff ff    	jne    c0104167 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01041ee:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01041f1:	e8 cb 10 00 00       	call   c01052c1 <nr_free_pages>
c01041f6:	39 c3                	cmp    %eax,%ebx
c01041f8:	74 24                	je     c010421e <default_check+0xd8>
c01041fa:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c0104201:	c0 
c0104202:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104209:	c0 
c010420a:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c0104211:	00 
c0104212:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104219:	e8 c0 cc ff ff       	call   c0100ede <__panic>

    basic_check();
c010421e:	e8 e7 f9 ff ff       	call   c0103c0a <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104223:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010422a:	e8 f5 0f 00 00       	call   c0105224 <alloc_pages>
c010422f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104232:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104236:	75 24                	jne    c010425c <default_check+0x116>
c0104238:	c7 44 24 0c 7f 63 11 	movl   $0xc011637f,0xc(%esp)
c010423f:	c0 
c0104240:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104247:	c0 
c0104248:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010424f:	00 
c0104250:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104257:	e8 82 cc ff ff       	call   c0100ede <__panic>
    assert(!PageProperty(p0));
c010425c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010425f:	83 c0 04             	add    $0x4,%eax
c0104262:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104269:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010426c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010426f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104272:	0f a3 10             	bt     %edx,(%eax)
c0104275:	19 c0                	sbb    %eax,%eax
c0104277:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010427a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010427e:	0f 95 c0             	setne  %al
c0104281:	0f b6 c0             	movzbl %al,%eax
c0104284:	85 c0                	test   %eax,%eax
c0104286:	74 24                	je     c01042ac <default_check+0x166>
c0104288:	c7 44 24 0c 8a 63 11 	movl   $0xc011638a,0xc(%esp)
c010428f:	c0 
c0104290:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104297:	c0 
c0104298:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c010429f:	00 
c01042a0:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01042a7:	e8 32 cc ff ff       	call   c0100ede <__panic>

    list_entry_t free_list_store = free_list;
c01042ac:	a1 34 61 15 c0       	mov    0xc0156134,%eax
c01042b1:	8b 15 38 61 15 c0    	mov    0xc0156138,%edx
c01042b7:	89 45 80             	mov    %eax,-0x80(%ebp)
c01042ba:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01042bd:	c7 45 b4 34 61 15 c0 	movl   $0xc0156134,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01042c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042c7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01042ca:	89 50 04             	mov    %edx,0x4(%eax)
c01042cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042d0:	8b 50 04             	mov    0x4(%eax),%edx
c01042d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042d6:	89 10                	mov    %edx,(%eax)
c01042d8:	c7 45 b0 34 61 15 c0 	movl   $0xc0156134,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01042df:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01042e2:	8b 40 04             	mov    0x4(%eax),%eax
c01042e5:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01042e8:	0f 94 c0             	sete   %al
c01042eb:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01042ee:	85 c0                	test   %eax,%eax
c01042f0:	75 24                	jne    c0104316 <default_check+0x1d0>
c01042f2:	c7 44 24 0c df 62 11 	movl   $0xc01162df,0xc(%esp)
c01042f9:	c0 
c01042fa:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104301:	c0 
c0104302:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c0104309:	00 
c010430a:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104311:	e8 c8 cb ff ff       	call   c0100ede <__panic>
    assert(alloc_page() == NULL);
c0104316:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010431d:	e8 02 0f 00 00       	call   c0105224 <alloc_pages>
c0104322:	85 c0                	test   %eax,%eax
c0104324:	74 24                	je     c010434a <default_check+0x204>
c0104326:	c7 44 24 0c f6 62 11 	movl   $0xc01162f6,0xc(%esp)
c010432d:	c0 
c010432e:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104335:	c0 
c0104336:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010433d:	00 
c010433e:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104345:	e8 94 cb ff ff       	call   c0100ede <__panic>

    unsigned int nr_free_store = nr_free;
c010434a:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c010434f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104352:	c7 05 3c 61 15 c0 00 	movl   $0x0,0xc015613c
c0104359:	00 00 00 

    free_pages(p0 + 2, 3);
c010435c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010435f:	83 c0 40             	add    $0x40,%eax
c0104362:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104369:	00 
c010436a:	89 04 24             	mov    %eax,(%esp)
c010436d:	e8 1d 0f 00 00       	call   c010528f <free_pages>
    assert(alloc_pages(4) == NULL);
c0104372:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0104379:	e8 a6 0e 00 00       	call   c0105224 <alloc_pages>
c010437e:	85 c0                	test   %eax,%eax
c0104380:	74 24                	je     c01043a6 <default_check+0x260>
c0104382:	c7 44 24 0c 9c 63 11 	movl   $0xc011639c,0xc(%esp)
c0104389:	c0 
c010438a:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104391:	c0 
c0104392:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
c0104399:	00 
c010439a:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01043a1:	e8 38 cb ff ff       	call   c0100ede <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01043a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043a9:	83 c0 40             	add    $0x40,%eax
c01043ac:	83 c0 04             	add    $0x4,%eax
c01043af:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01043b6:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043b9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01043bc:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01043bf:	0f a3 10             	bt     %edx,(%eax)
c01043c2:	19 c0                	sbb    %eax,%eax
c01043c4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01043c7:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01043cb:	0f 95 c0             	setne  %al
c01043ce:	0f b6 c0             	movzbl %al,%eax
c01043d1:	85 c0                	test   %eax,%eax
c01043d3:	74 0e                	je     c01043e3 <default_check+0x29d>
c01043d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043d8:	83 c0 40             	add    $0x40,%eax
c01043db:	8b 40 08             	mov    0x8(%eax),%eax
c01043de:	83 f8 03             	cmp    $0x3,%eax
c01043e1:	74 24                	je     c0104407 <default_check+0x2c1>
c01043e3:	c7 44 24 0c b4 63 11 	movl   $0xc01163b4,0xc(%esp)
c01043ea:	c0 
c01043eb:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01043f2:	c0 
c01043f3:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c01043fa:	00 
c01043fb:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104402:	e8 d7 ca ff ff       	call   c0100ede <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104407:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010440e:	e8 11 0e 00 00       	call   c0105224 <alloc_pages>
c0104413:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104416:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010441a:	75 24                	jne    c0104440 <default_check+0x2fa>
c010441c:	c7 44 24 0c e0 63 11 	movl   $0xc01163e0,0xc(%esp)
c0104423:	c0 
c0104424:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c010442b:	c0 
c010442c:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c0104433:	00 
c0104434:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c010443b:	e8 9e ca ff ff       	call   c0100ede <__panic>
    assert(alloc_page() == NULL);
c0104440:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104447:	e8 d8 0d 00 00       	call   c0105224 <alloc_pages>
c010444c:	85 c0                	test   %eax,%eax
c010444e:	74 24                	je     c0104474 <default_check+0x32e>
c0104450:	c7 44 24 0c f6 62 11 	movl   $0xc01162f6,0xc(%esp)
c0104457:	c0 
c0104458:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c010445f:	c0 
c0104460:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c0104467:	00 
c0104468:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c010446f:	e8 6a ca ff ff       	call   c0100ede <__panic>
    assert(p0 + 2 == p1);
c0104474:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104477:	83 c0 40             	add    $0x40,%eax
c010447a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010447d:	74 24                	je     c01044a3 <default_check+0x35d>
c010447f:	c7 44 24 0c fe 63 11 	movl   $0xc01163fe,0xc(%esp)
c0104486:	c0 
c0104487:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c010448e:	c0 
c010448f:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0104496:	00 
c0104497:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c010449e:	e8 3b ca ff ff       	call   c0100ede <__panic>

    p2 = p0 + 1;
c01044a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044a6:	83 c0 20             	add    $0x20,%eax
c01044a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01044ac:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044b3:	00 
c01044b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044b7:	89 04 24             	mov    %eax,(%esp)
c01044ba:	e8 d0 0d 00 00       	call   c010528f <free_pages>
    free_pages(p1, 3);
c01044bf:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01044c6:	00 
c01044c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01044ca:	89 04 24             	mov    %eax,(%esp)
c01044cd:	e8 bd 0d 00 00       	call   c010528f <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01044d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044d5:	83 c0 04             	add    $0x4,%eax
c01044d8:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01044df:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01044e2:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01044e5:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01044e8:	0f a3 10             	bt     %edx,(%eax)
c01044eb:	19 c0                	sbb    %eax,%eax
c01044ed:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01044f0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01044f4:	0f 95 c0             	setne  %al
c01044f7:	0f b6 c0             	movzbl %al,%eax
c01044fa:	85 c0                	test   %eax,%eax
c01044fc:	74 0b                	je     c0104509 <default_check+0x3c3>
c01044fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104501:	8b 40 08             	mov    0x8(%eax),%eax
c0104504:	83 f8 01             	cmp    $0x1,%eax
c0104507:	74 24                	je     c010452d <default_check+0x3e7>
c0104509:	c7 44 24 0c 0c 64 11 	movl   $0xc011640c,0xc(%esp)
c0104510:	c0 
c0104511:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104518:	c0 
c0104519:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c0104520:	00 
c0104521:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104528:	e8 b1 c9 ff ff       	call   c0100ede <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010452d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104530:	83 c0 04             	add    $0x4,%eax
c0104533:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010453a:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010453d:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104540:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104543:	0f a3 10             	bt     %edx,(%eax)
c0104546:	19 c0                	sbb    %eax,%eax
c0104548:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010454b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010454f:	0f 95 c0             	setne  %al
c0104552:	0f b6 c0             	movzbl %al,%eax
c0104555:	85 c0                	test   %eax,%eax
c0104557:	74 0b                	je     c0104564 <default_check+0x41e>
c0104559:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010455c:	8b 40 08             	mov    0x8(%eax),%eax
c010455f:	83 f8 03             	cmp    $0x3,%eax
c0104562:	74 24                	je     c0104588 <default_check+0x442>
c0104564:	c7 44 24 0c 34 64 11 	movl   $0xc0116434,0xc(%esp)
c010456b:	c0 
c010456c:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104573:	c0 
c0104574:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010457b:	00 
c010457c:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104583:	e8 56 c9 ff ff       	call   c0100ede <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104588:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010458f:	e8 90 0c 00 00       	call   c0105224 <alloc_pages>
c0104594:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104597:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010459a:	83 e8 20             	sub    $0x20,%eax
c010459d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01045a0:	74 24                	je     c01045c6 <default_check+0x480>
c01045a2:	c7 44 24 0c 5a 64 11 	movl   $0xc011645a,0xc(%esp)
c01045a9:	c0 
c01045aa:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01045b1:	c0 
c01045b2:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01045b9:	00 
c01045ba:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01045c1:	e8 18 c9 ff ff       	call   c0100ede <__panic>
    free_page(p0);
c01045c6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01045cd:	00 
c01045ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045d1:	89 04 24             	mov    %eax,(%esp)
c01045d4:	e8 b6 0c 00 00       	call   c010528f <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01045d9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01045e0:	e8 3f 0c 00 00       	call   c0105224 <alloc_pages>
c01045e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01045e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01045eb:	83 c0 20             	add    $0x20,%eax
c01045ee:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01045f1:	74 24                	je     c0104617 <default_check+0x4d1>
c01045f3:	c7 44 24 0c 78 64 11 	movl   $0xc0116478,0xc(%esp)
c01045fa:	c0 
c01045fb:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104602:	c0 
c0104603:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010460a:	00 
c010460b:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104612:	e8 c7 c8 ff ff       	call   c0100ede <__panic>

    free_pages(p0, 2);
c0104617:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010461e:	00 
c010461f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104622:	89 04 24             	mov    %eax,(%esp)
c0104625:	e8 65 0c 00 00       	call   c010528f <free_pages>
    free_page(p2);
c010462a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104631:	00 
c0104632:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104635:	89 04 24             	mov    %eax,(%esp)
c0104638:	e8 52 0c 00 00       	call   c010528f <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010463d:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104644:	e8 db 0b 00 00       	call   c0105224 <alloc_pages>
c0104649:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010464c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104650:	75 24                	jne    c0104676 <default_check+0x530>
c0104652:	c7 44 24 0c 98 64 11 	movl   $0xc0116498,0xc(%esp)
c0104659:	c0 
c010465a:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104661:	c0 
c0104662:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
c0104669:	00 
c010466a:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104671:	e8 68 c8 ff ff       	call   c0100ede <__panic>
    assert(alloc_page() == NULL);
c0104676:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010467d:	e8 a2 0b 00 00       	call   c0105224 <alloc_pages>
c0104682:	85 c0                	test   %eax,%eax
c0104684:	74 24                	je     c01046aa <default_check+0x564>
c0104686:	c7 44 24 0c f6 62 11 	movl   $0xc01162f6,0xc(%esp)
c010468d:	c0 
c010468e:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104695:	c0 
c0104696:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c010469d:	00 
c010469e:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01046a5:	e8 34 c8 ff ff       	call   c0100ede <__panic>

    assert(nr_free == 0);
c01046aa:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c01046af:	85 c0                	test   %eax,%eax
c01046b1:	74 24                	je     c01046d7 <default_check+0x591>
c01046b3:	c7 44 24 0c 49 63 11 	movl   $0xc0116349,0xc(%esp)
c01046ba:	c0 
c01046bb:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c01046c2:	c0 
c01046c3:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01046ca:	00 
c01046cb:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c01046d2:	e8 07 c8 ff ff       	call   c0100ede <__panic>
    nr_free = nr_free_store;
c01046d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01046da:	a3 3c 61 15 c0       	mov    %eax,0xc015613c

    free_list = free_list_store;
c01046df:	8b 45 80             	mov    -0x80(%ebp),%eax
c01046e2:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01046e5:	a3 34 61 15 c0       	mov    %eax,0xc0156134
c01046ea:	89 15 38 61 15 c0    	mov    %edx,0xc0156138
    free_pages(p0, 5);
c01046f0:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01046f7:	00 
c01046f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046fb:	89 04 24             	mov    %eax,(%esp)
c01046fe:	e8 8c 0b 00 00       	call   c010528f <free_pages>

    le = &free_list;
c0104703:	c7 45 ec 34 61 15 c0 	movl   $0xc0156134,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010470a:	eb 1d                	jmp    c0104729 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010470c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010470f:	83 e8 0c             	sub    $0xc,%eax
c0104712:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104715:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104719:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010471c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010471f:	8b 40 08             	mov    0x8(%eax),%eax
c0104722:	29 c2                	sub    %eax,%edx
c0104724:	89 d0                	mov    %edx,%eax
c0104726:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104729:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010472c:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010472f:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104732:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104735:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104738:	81 7d ec 34 61 15 c0 	cmpl   $0xc0156134,-0x14(%ebp)
c010473f:	75 cb                	jne    c010470c <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104741:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104745:	74 24                	je     c010476b <default_check+0x625>
c0104747:	c7 44 24 0c b6 64 11 	movl   $0xc01164b6,0xc(%esp)
c010474e:	c0 
c010474f:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104756:	c0 
c0104757:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c010475e:	00 
c010475f:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104766:	e8 73 c7 ff ff       	call   c0100ede <__panic>
    assert(total == 0);
c010476b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010476f:	74 24                	je     c0104795 <default_check+0x64f>
c0104771:	c7 44 24 0c c1 64 11 	movl   $0xc01164c1,0xc(%esp)
c0104778:	c0 
c0104779:	c7 44 24 08 56 61 11 	movl   $0xc0116156,0x8(%esp)
c0104780:	c0 
c0104781:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
c0104788:	00 
c0104789:	c7 04 24 6b 61 11 c0 	movl   $0xc011616b,(%esp)
c0104790:	e8 49 c7 ff ff       	call   c0100ede <__panic>
}
c0104795:	81 c4 94 00 00 00    	add    $0x94,%esp
c010479b:	5b                   	pop    %ebx
c010479c:	5d                   	pop    %ebp
c010479d:	c3                   	ret    

c010479e <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010479e:	55                   	push   %ebp
c010479f:	89 e5                	mov    %esp,%ebp
c01047a1:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01047a4:	9c                   	pushf  
c01047a5:	58                   	pop    %eax
c01047a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01047a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01047ac:	25 00 02 00 00       	and    $0x200,%eax
c01047b1:	85 c0                	test   %eax,%eax
c01047b3:	74 0c                	je     c01047c1 <__intr_save+0x23>
        intr_disable();
c01047b5:	e8 97 d9 ff ff       	call   c0102151 <intr_disable>
        return 1;
c01047ba:	b8 01 00 00 00       	mov    $0x1,%eax
c01047bf:	eb 05                	jmp    c01047c6 <__intr_save+0x28>
    }
    return 0;
c01047c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047c6:	c9                   	leave  
c01047c7:	c3                   	ret    

c01047c8 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01047c8:	55                   	push   %ebp
c01047c9:	89 e5                	mov    %esp,%ebp
c01047cb:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01047ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01047d2:	74 05                	je     c01047d9 <__intr_restore+0x11>
        intr_enable();
c01047d4:	e8 72 d9 ff ff       	call   c010214b <intr_enable>
    }
}
c01047d9:	c9                   	leave  
c01047da:	c3                   	ret    

c01047db <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01047db:	55                   	push   %ebp
c01047dc:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01047de:	8b 55 08             	mov    0x8(%ebp),%edx
c01047e1:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c01047e6:	29 c2                	sub    %eax,%edx
c01047e8:	89 d0                	mov    %edx,%eax
c01047ea:	c1 f8 05             	sar    $0x5,%eax
}
c01047ed:	5d                   	pop    %ebp
c01047ee:	c3                   	ret    

c01047ef <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01047ef:	55                   	push   %ebp
c01047f0:	89 e5                	mov    %esp,%ebp
c01047f2:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01047f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01047f8:	89 04 24             	mov    %eax,(%esp)
c01047fb:	e8 db ff ff ff       	call   c01047db <page2ppn>
c0104800:	c1 e0 0c             	shl    $0xc,%eax
}
c0104803:	c9                   	leave  
c0104804:	c3                   	ret    

c0104805 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104805:	55                   	push   %ebp
c0104806:	89 e5                	mov    %esp,%ebp
c0104808:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010480b:	8b 45 08             	mov    0x8(%ebp),%eax
c010480e:	c1 e8 0c             	shr    $0xc,%eax
c0104811:	89 c2                	mov    %eax,%edx
c0104813:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0104818:	39 c2                	cmp    %eax,%edx
c010481a:	72 1c                	jb     c0104838 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010481c:	c7 44 24 08 fc 64 11 	movl   $0xc01164fc,0x8(%esp)
c0104823:	c0 
c0104824:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010482b:	00 
c010482c:	c7 04 24 1b 65 11 c0 	movl   $0xc011651b,(%esp)
c0104833:	e8 a6 c6 ff ff       	call   c0100ede <__panic>
    }
    return &pages[PPN(pa)];
c0104838:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c010483d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104840:	c1 ea 0c             	shr    $0xc,%edx
c0104843:	c1 e2 05             	shl    $0x5,%edx
c0104846:	01 d0                	add    %edx,%eax
}
c0104848:	c9                   	leave  
c0104849:	c3                   	ret    

c010484a <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010484a:	55                   	push   %ebp
c010484b:	89 e5                	mov    %esp,%ebp
c010484d:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104850:	8b 45 08             	mov    0x8(%ebp),%eax
c0104853:	89 04 24             	mov    %eax,(%esp)
c0104856:	e8 94 ff ff ff       	call   c01047ef <page2pa>
c010485b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010485e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104861:	c1 e8 0c             	shr    $0xc,%eax
c0104864:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104867:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010486c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010486f:	72 23                	jb     c0104894 <page2kva+0x4a>
c0104871:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104874:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104878:	c7 44 24 08 2c 65 11 	movl   $0xc011652c,0x8(%esp)
c010487f:	c0 
c0104880:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104887:	00 
c0104888:	c7 04 24 1b 65 11 c0 	movl   $0xc011651b,(%esp)
c010488f:	e8 4a c6 ff ff       	call   c0100ede <__panic>
c0104894:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104897:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010489c:	c9                   	leave  
c010489d:	c3                   	ret    

c010489e <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010489e:	55                   	push   %ebp
c010489f:	89 e5                	mov    %esp,%ebp
c01048a1:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01048a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01048aa:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01048b1:	77 23                	ja     c01048d6 <kva2page+0x38>
c01048b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01048ba:	c7 44 24 08 50 65 11 	movl   $0xc0116550,0x8(%esp)
c01048c1:	c0 
c01048c2:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01048c9:	00 
c01048ca:	c7 04 24 1b 65 11 c0 	movl   $0xc011651b,(%esp)
c01048d1:	e8 08 c6 ff ff       	call   c0100ede <__panic>
c01048d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048d9:	05 00 00 00 40       	add    $0x40000000,%eax
c01048de:	89 04 24             	mov    %eax,(%esp)
c01048e1:	e8 1f ff ff ff       	call   c0104805 <pa2page>
}
c01048e6:	c9                   	leave  
c01048e7:	c3                   	ret    

c01048e8 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01048e8:	55                   	push   %ebp
c01048e9:	89 e5                	mov    %esp,%ebp
c01048eb:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c01048ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01048f1:	ba 01 00 00 00       	mov    $0x1,%edx
c01048f6:	89 c1                	mov    %eax,%ecx
c01048f8:	d3 e2                	shl    %cl,%edx
c01048fa:	89 d0                	mov    %edx,%eax
c01048fc:	89 04 24             	mov    %eax,(%esp)
c01048ff:	e8 20 09 00 00       	call   c0105224 <alloc_pages>
c0104904:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104907:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010490b:	75 07                	jne    c0104914 <__slob_get_free_pages+0x2c>
    return NULL;
c010490d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104912:	eb 0b                	jmp    c010491f <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104914:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104917:	89 04 24             	mov    %eax,(%esp)
c010491a:	e8 2b ff ff ff       	call   c010484a <page2kva>
}
c010491f:	c9                   	leave  
c0104920:	c3                   	ret    

c0104921 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104921:	55                   	push   %ebp
c0104922:	89 e5                	mov    %esp,%ebp
c0104924:	53                   	push   %ebx
c0104925:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104928:	8b 45 0c             	mov    0xc(%ebp),%eax
c010492b:	ba 01 00 00 00       	mov    $0x1,%edx
c0104930:	89 c1                	mov    %eax,%ecx
c0104932:	d3 e2                	shl    %cl,%edx
c0104934:	89 d0                	mov    %edx,%eax
c0104936:	89 c3                	mov    %eax,%ebx
c0104938:	8b 45 08             	mov    0x8(%ebp),%eax
c010493b:	89 04 24             	mov    %eax,(%esp)
c010493e:	e8 5b ff ff ff       	call   c010489e <kva2page>
c0104943:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104947:	89 04 24             	mov    %eax,(%esp)
c010494a:	e8 40 09 00 00       	call   c010528f <free_pages>
}
c010494f:	83 c4 14             	add    $0x14,%esp
c0104952:	5b                   	pop    %ebx
c0104953:	5d                   	pop    %ebp
c0104954:	c3                   	ret    

c0104955 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104955:	55                   	push   %ebp
c0104956:	89 e5                	mov    %esp,%ebp
c0104958:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010495b:	8b 45 08             	mov    0x8(%ebp),%eax
c010495e:	83 c0 08             	add    $0x8,%eax
c0104961:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104966:	76 24                	jbe    c010498c <slob_alloc+0x37>
c0104968:	c7 44 24 0c 74 65 11 	movl   $0xc0116574,0xc(%esp)
c010496f:	c0 
c0104970:	c7 44 24 08 93 65 11 	movl   $0xc0116593,0x8(%esp)
c0104977:	c0 
c0104978:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010497f:	00 
c0104980:	c7 04 24 a8 65 11 c0 	movl   $0xc01165a8,(%esp)
c0104987:	e8 52 c5 ff ff       	call   c0100ede <__panic>

	slob_t *prev, *cur, *aligned = 0;
c010498c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104993:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010499a:	8b 45 08             	mov    0x8(%ebp),%eax
c010499d:	83 c0 07             	add    $0x7,%eax
c01049a0:	c1 e8 03             	shr    $0x3,%eax
c01049a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01049a6:	e8 f3 fd ff ff       	call   c010479e <__intr_save>
c01049ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01049ae:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c01049b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01049b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049b9:	8b 40 04             	mov    0x4(%eax),%eax
c01049bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01049bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01049c3:	74 25                	je     c01049ea <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01049c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01049cb:	01 d0                	add    %edx,%eax
c01049cd:	8d 50 ff             	lea    -0x1(%eax),%edx
c01049d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01049d3:	f7 d8                	neg    %eax
c01049d5:	21 d0                	and    %edx,%eax
c01049d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01049da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01049dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049e0:	29 c2                	sub    %eax,%edx
c01049e2:	89 d0                	mov    %edx,%eax
c01049e4:	c1 f8 03             	sar    $0x3,%eax
c01049e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01049ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049ed:	8b 00                	mov    (%eax),%eax
c01049ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01049f2:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01049f5:	01 ca                	add    %ecx,%edx
c01049f7:	39 d0                	cmp    %edx,%eax
c01049f9:	0f 8c aa 00 00 00    	jl     c0104aa9 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c01049ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a03:	74 38                	je     c0104a3d <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a08:	8b 00                	mov    (%eax),%eax
c0104a0a:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104a0d:	89 c2                	mov    %eax,%edx
c0104a0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a12:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a17:	8b 50 04             	mov    0x4(%eax),%edx
c0104a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a1d:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104a20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a23:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104a26:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a2f:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104a31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a34:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104a37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104a3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a40:	8b 00                	mov    (%eax),%eax
c0104a42:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104a45:	75 0e                	jne    c0104a55 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4a:	8b 50 04             	mov    0x4(%eax),%edx
c0104a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a50:	89 50 04             	mov    %edx,0x4(%eax)
c0104a53:	eb 3c                	jmp    c0104a91 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104a55:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104a58:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a62:	01 c2                	add    %eax,%edx
c0104a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a67:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a6d:	8b 40 04             	mov    0x4(%eax),%eax
c0104a70:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a73:	8b 12                	mov    (%edx),%edx
c0104a75:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104a78:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a7d:	8b 40 04             	mov    0x4(%eax),%eax
c0104a80:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a83:	8b 52 04             	mov    0x4(%edx),%edx
c0104a86:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a8c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104a8f:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a94:	a3 e8 f9 14 c0       	mov    %eax,0xc014f9e8
			spin_unlock_irqrestore(&slob_lock, flags);
c0104a99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a9c:	89 04 24             	mov    %eax,(%esp)
c0104a9f:	e8 24 fd ff ff       	call   c01047c8 <__intr_restore>
			return cur;
c0104aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa7:	eb 7f                	jmp    c0104b28 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0104aa9:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c0104aae:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ab1:	75 61                	jne    c0104b14 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104ab3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ab6:	89 04 24             	mov    %eax,(%esp)
c0104ab9:	e8 0a fd ff ff       	call   c01047c8 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104abe:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104ac5:	75 07                	jne    c0104ace <slob_alloc+0x179>
				return 0;
c0104ac7:	b8 00 00 00 00       	mov    $0x0,%eax
c0104acc:	eb 5a                	jmp    c0104b28 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104ace:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ad5:	00 
c0104ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ad9:	89 04 24             	mov    %eax,(%esp)
c0104adc:	e8 07 fe ff ff       	call   c01048e8 <__slob_get_free_pages>
c0104ae1:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104ae4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104ae8:	75 07                	jne    c0104af1 <slob_alloc+0x19c>
				return 0;
c0104aea:	b8 00 00 00 00       	mov    $0x0,%eax
c0104aef:	eb 37                	jmp    c0104b28 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104af1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104af8:	00 
c0104af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104afc:	89 04 24             	mov    %eax,(%esp)
c0104aff:	e8 26 00 00 00       	call   c0104b2a <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104b04:	e8 95 fc ff ff       	call   c010479e <__intr_save>
c0104b09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104b0c:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c0104b11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104b14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1d:	8b 40 04             	mov    0x4(%eax),%eax
c0104b20:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104b23:	e9 97 fe ff ff       	jmp    c01049bf <slob_alloc+0x6a>
}
c0104b28:	c9                   	leave  
c0104b29:	c3                   	ret    

c0104b2a <slob_free>:

static void slob_free(void *block, int size)
{
c0104b2a:	55                   	push   %ebp
c0104b2b:	89 e5                	mov    %esp,%ebp
c0104b2d:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b33:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104b36:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b3a:	75 05                	jne    c0104b41 <slob_free+0x17>
		return;
c0104b3c:	e9 ff 00 00 00       	jmp    c0104c40 <slob_free+0x116>

	if (size)
c0104b41:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104b45:	74 10                	je     c0104b57 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104b47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b4a:	83 c0 07             	add    $0x7,%eax
c0104b4d:	c1 e8 03             	shr    $0x3,%eax
c0104b50:	89 c2                	mov    %eax,%edx
c0104b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b55:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104b57:	e8 42 fc ff ff       	call   c010479e <__intr_save>
c0104b5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104b5f:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c0104b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b67:	eb 27                	jmp    c0104b90 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b6c:	8b 40 04             	mov    0x4(%eax),%eax
c0104b6f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b72:	77 13                	ja     c0104b87 <slob_free+0x5d>
c0104b74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b7a:	77 27                	ja     c0104ba3 <slob_free+0x79>
c0104b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b7f:	8b 40 04             	mov    0x4(%eax),%eax
c0104b82:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b85:	77 1c                	ja     c0104ba3 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b8a:	8b 40 04             	mov    0x4(%eax),%eax
c0104b8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b93:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b96:	76 d1                	jbe    c0104b69 <slob_free+0x3f>
c0104b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b9b:	8b 40 04             	mov    0x4(%eax),%eax
c0104b9e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ba1:	76 c6                	jbe    c0104b69 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104ba3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ba6:	8b 00                	mov    (%eax),%eax
c0104ba8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bb2:	01 c2                	add    %eax,%edx
c0104bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bb7:	8b 40 04             	mov    0x4(%eax),%eax
c0104bba:	39 c2                	cmp    %eax,%edx
c0104bbc:	75 25                	jne    c0104be3 <slob_free+0xb9>
		b->units += cur->next->units;
c0104bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bc1:	8b 10                	mov    (%eax),%edx
c0104bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bc6:	8b 40 04             	mov    0x4(%eax),%eax
c0104bc9:	8b 00                	mov    (%eax),%eax
c0104bcb:	01 c2                	add    %eax,%edx
c0104bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bd0:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bd5:	8b 40 04             	mov    0x4(%eax),%eax
c0104bd8:	8b 50 04             	mov    0x4(%eax),%edx
c0104bdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bde:	89 50 04             	mov    %edx,0x4(%eax)
c0104be1:	eb 0c                	jmp    c0104bef <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104be6:	8b 50 04             	mov    0x4(%eax),%edx
c0104be9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bec:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bf2:	8b 00                	mov    (%eax),%eax
c0104bf4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bfe:	01 d0                	add    %edx,%eax
c0104c00:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104c03:	75 1f                	jne    c0104c24 <slob_free+0xfa>
		cur->units += b->units;
c0104c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c08:	8b 10                	mov    (%eax),%edx
c0104c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c0d:	8b 00                	mov    (%eax),%eax
c0104c0f:	01 c2                	add    %eax,%edx
c0104c11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c14:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104c16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c19:	8b 50 04             	mov    0x4(%eax),%edx
c0104c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c1f:	89 50 04             	mov    %edx,0x4(%eax)
c0104c22:	eb 09                	jmp    c0104c2d <slob_free+0x103>
	} else
		cur->next = b;
c0104c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c27:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c2a:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104c2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c30:	a3 e8 f9 14 c0       	mov    %eax,0xc014f9e8

	spin_unlock_irqrestore(&slob_lock, flags);
c0104c35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c38:	89 04 24             	mov    %eax,(%esp)
c0104c3b:	e8 88 fb ff ff       	call   c01047c8 <__intr_restore>
}
c0104c40:	c9                   	leave  
c0104c41:	c3                   	ret    

c0104c42 <check_slob>:



void check_slob(void) {
c0104c42:	55                   	push   %ebp
c0104c43:	89 e5                	mov    %esp,%ebp
c0104c45:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0104c48:	c7 04 24 ba 65 11 c0 	movl   $0xc01165ba,(%esp)
c0104c4f:	e8 1d b7 ff ff       	call   c0100371 <cprintf>
}
c0104c54:	c9                   	leave  
c0104c55:	c3                   	ret    

c0104c56 <slob_init>:

void
slob_init(void) {
c0104c56:	55                   	push   %ebp
c0104c57:	89 e5                	mov    %esp,%ebp
c0104c59:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104c5c:	c7 04 24 d0 65 11 c0 	movl   $0xc01165d0,(%esp)
c0104c63:	e8 09 b7 ff ff       	call   c0100371 <cprintf>
  check_slob();
c0104c68:	e8 d5 ff ff ff       	call   c0104c42 <check_slob>
}
c0104c6d:	c9                   	leave  
c0104c6e:	c3                   	ret    

c0104c6f <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104c6f:	55                   	push   %ebp
c0104c70:	89 e5                	mov    %esp,%ebp
c0104c72:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104c75:	e8 dc ff ff ff       	call   c0104c56 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104c7a:	c7 04 24 e4 65 11 c0 	movl   $0xc01165e4,(%esp)
c0104c81:	e8 eb b6 ff ff       	call   c0100371 <cprintf>
}
c0104c86:	c9                   	leave  
c0104c87:	c3                   	ret    

c0104c88 <slob_allocated>:

size_t
slob_allocated(void) {
c0104c88:	55                   	push   %ebp
c0104c89:	89 e5                	mov    %esp,%ebp
  return 0;
c0104c8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c90:	5d                   	pop    %ebp
c0104c91:	c3                   	ret    

c0104c92 <kallocated>:

size_t
kallocated(void) {
c0104c92:	55                   	push   %ebp
c0104c93:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104c95:	e8 ee ff ff ff       	call   c0104c88 <slob_allocated>
}
c0104c9a:	5d                   	pop    %ebp
c0104c9b:	c3                   	ret    

c0104c9c <find_order>:

static int find_order(int size)
{
c0104c9c:	55                   	push   %ebp
c0104c9d:	89 e5                	mov    %esp,%ebp
c0104c9f:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104ca2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104ca9:	eb 07                	jmp    c0104cb2 <find_order+0x16>
		order++;
c0104cab:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104caf:	d1 7d 08             	sarl   0x8(%ebp)
c0104cb2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104cb9:	7f f0                	jg     c0104cab <find_order+0xf>
		order++;
	return order;
c0104cbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104cbe:	c9                   	leave  
c0104cbf:	c3                   	ret    

c0104cc0 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104cc0:	55                   	push   %ebp
c0104cc1:	89 e5                	mov    %esp,%ebp
c0104cc3:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104cc6:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104ccd:	77 38                	ja     c0104d07 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd2:	8d 50 08             	lea    0x8(%eax),%edx
c0104cd5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104cdc:	00 
c0104cdd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ce0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104ce4:	89 14 24             	mov    %edx,(%esp)
c0104ce7:	e8 69 fc ff ff       	call   c0104955 <slob_alloc>
c0104cec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104cef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cf3:	74 08                	je     c0104cfd <__kmalloc+0x3d>
c0104cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cf8:	83 c0 08             	add    $0x8,%eax
c0104cfb:	eb 05                	jmp    c0104d02 <__kmalloc+0x42>
c0104cfd:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d02:	e9 a6 00 00 00       	jmp    c0104dad <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104d07:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104d0e:	00 
c0104d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d16:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104d1d:	e8 33 fc ff ff       	call   c0104955 <slob_alloc>
c0104d22:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104d25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104d29:	75 07                	jne    c0104d32 <__kmalloc+0x72>
		return 0;
c0104d2b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d30:	eb 7b                	jmp    c0104dad <__kmalloc+0xed>

	bb->order = find_order(size);
c0104d32:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d35:	89 04 24             	mov    %eax,(%esp)
c0104d38:	e8 5f ff ff ff       	call   c0104c9c <find_order>
c0104d3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d40:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104d42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d45:	8b 00                	mov    (%eax),%eax
c0104d47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d4e:	89 04 24             	mov    %eax,(%esp)
c0104d51:	e8 92 fb ff ff       	call   c01048e8 <__slob_get_free_pages>
c0104d56:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d59:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d5f:	8b 40 04             	mov    0x4(%eax),%eax
c0104d62:	85 c0                	test   %eax,%eax
c0104d64:	74 2f                	je     c0104d95 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104d66:	e8 33 fa ff ff       	call   c010479e <__intr_save>
c0104d6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104d6e:	8b 15 84 2f 15 c0    	mov    0xc0152f84,%edx
c0104d74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d77:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d7d:	a3 84 2f 15 c0       	mov    %eax,0xc0152f84
		spin_unlock_irqrestore(&block_lock, flags);
c0104d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d85:	89 04 24             	mov    %eax,(%esp)
c0104d88:	e8 3b fa ff ff       	call   c01047c8 <__intr_restore>
		return bb->pages;
c0104d8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d90:	8b 40 04             	mov    0x4(%eax),%eax
c0104d93:	eb 18                	jmp    c0104dad <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104d95:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d9c:	00 
c0104d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da0:	89 04 24             	mov    %eax,(%esp)
c0104da3:	e8 82 fd ff ff       	call   c0104b2a <slob_free>
	return 0;
c0104da8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104dad:	c9                   	leave  
c0104dae:	c3                   	ret    

c0104daf <kmalloc>:

void *
kmalloc(size_t size)
{
c0104daf:	55                   	push   %ebp
c0104db0:	89 e5                	mov    %esp,%ebp
c0104db2:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104db5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104dbc:	00 
c0104dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dc0:	89 04 24             	mov    %eax,(%esp)
c0104dc3:	e8 f8 fe ff ff       	call   c0104cc0 <__kmalloc>
}
c0104dc8:	c9                   	leave  
c0104dc9:	c3                   	ret    

c0104dca <kfree>:


void kfree(void *block)
{
c0104dca:	55                   	push   %ebp
c0104dcb:	89 e5                	mov    %esp,%ebp
c0104dcd:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104dd0:	c7 45 f0 84 2f 15 c0 	movl   $0xc0152f84,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104dd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ddb:	75 05                	jne    c0104de2 <kfree+0x18>
		return;
c0104ddd:	e9 a2 00 00 00       	jmp    c0104e84 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104de2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104de5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104dea:	85 c0                	test   %eax,%eax
c0104dec:	75 7f                	jne    c0104e6d <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104dee:	e8 ab f9 ff ff       	call   c010479e <__intr_save>
c0104df3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104df6:	a1 84 2f 15 c0       	mov    0xc0152f84,%eax
c0104dfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dfe:	eb 5c                	jmp    c0104e5c <kfree+0x92>
			if (bb->pages == block) {
c0104e00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e03:	8b 40 04             	mov    0x4(%eax),%eax
c0104e06:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104e09:	75 3f                	jne    c0104e4a <kfree+0x80>
				*last = bb->next;
c0104e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e0e:	8b 50 08             	mov    0x8(%eax),%edx
c0104e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e14:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104e16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e19:	89 04 24             	mov    %eax,(%esp)
c0104e1c:	e8 a7 f9 ff ff       	call   c01047c8 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104e21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e24:	8b 10                	mov    (%eax),%edx
c0104e26:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e29:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e2d:	89 04 24             	mov    %eax,(%esp)
c0104e30:	e8 ec fa ff ff       	call   c0104921 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104e35:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104e3c:	00 
c0104e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e40:	89 04 24             	mov    %eax,(%esp)
c0104e43:	e8 e2 fc ff ff       	call   c0104b2a <slob_free>
				return;
c0104e48:	eb 3a                	jmp    c0104e84 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104e4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e4d:	83 c0 08             	add    $0x8,%eax
c0104e50:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e56:	8b 40 08             	mov    0x8(%eax),%eax
c0104e59:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e60:	75 9e                	jne    c0104e00 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e65:	89 04 24             	mov    %eax,(%esp)
c0104e68:	e8 5b f9 ff ff       	call   c01047c8 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e70:	83 e8 08             	sub    $0x8,%eax
c0104e73:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104e7a:	00 
c0104e7b:	89 04 24             	mov    %eax,(%esp)
c0104e7e:	e8 a7 fc ff ff       	call   c0104b2a <slob_free>
	return;
c0104e83:	90                   	nop
}
c0104e84:	c9                   	leave  
c0104e85:	c3                   	ret    

c0104e86 <ksize>:


unsigned int ksize(const void *block)
{
c0104e86:	55                   	push   %ebp
c0104e87:	89 e5                	mov    %esp,%ebp
c0104e89:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104e8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e90:	75 07                	jne    c0104e99 <ksize+0x13>
		return 0;
c0104e92:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e97:	eb 6b                	jmp    c0104f04 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104e99:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e9c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104ea1:	85 c0                	test   %eax,%eax
c0104ea3:	75 54                	jne    c0104ef9 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104ea5:	e8 f4 f8 ff ff       	call   c010479e <__intr_save>
c0104eaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104ead:	a1 84 2f 15 c0       	mov    0xc0152f84,%eax
c0104eb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104eb5:	eb 31                	jmp    c0104ee8 <ksize+0x62>
			if (bb->pages == block) {
c0104eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eba:	8b 40 04             	mov    0x4(%eax),%eax
c0104ebd:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ec0:	75 1d                	jne    c0104edf <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ec5:	89 04 24             	mov    %eax,(%esp)
c0104ec8:	e8 fb f8 ff ff       	call   c01047c8 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ed0:	8b 00                	mov    (%eax),%eax
c0104ed2:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104ed7:	89 c1                	mov    %eax,%ecx
c0104ed9:	d3 e2                	shl    %cl,%edx
c0104edb:	89 d0                	mov    %edx,%eax
c0104edd:	eb 25                	jmp    c0104f04 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ee2:	8b 40 08             	mov    0x8(%eax),%eax
c0104ee5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ee8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104eec:	75 c9                	jne    c0104eb7 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104eee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef1:	89 04 24             	mov    %eax,(%esp)
c0104ef4:	e8 cf f8 ff ff       	call   c01047c8 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104ef9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104efc:	83 e8 08             	sub    $0x8,%eax
c0104eff:	8b 00                	mov    (%eax),%eax
c0104f01:	c1 e0 03             	shl    $0x3,%eax
}
c0104f04:	c9                   	leave  
c0104f05:	c3                   	ret    

c0104f06 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104f06:	55                   	push   %ebp
c0104f07:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104f09:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f0c:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c0104f11:	29 c2                	sub    %eax,%edx
c0104f13:	89 d0                	mov    %edx,%eax
c0104f15:	c1 f8 05             	sar    $0x5,%eax
}
c0104f18:	5d                   	pop    %ebp
c0104f19:	c3                   	ret    

c0104f1a <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104f1a:	55                   	push   %ebp
c0104f1b:	89 e5                	mov    %esp,%ebp
c0104f1d:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f23:	89 04 24             	mov    %eax,(%esp)
c0104f26:	e8 db ff ff ff       	call   c0104f06 <page2ppn>
c0104f2b:	c1 e0 0c             	shl    $0xc,%eax
}
c0104f2e:	c9                   	leave  
c0104f2f:	c3                   	ret    

c0104f30 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104f30:	55                   	push   %ebp
c0104f31:	89 e5                	mov    %esp,%ebp
c0104f33:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f39:	c1 e8 0c             	shr    $0xc,%eax
c0104f3c:	89 c2                	mov    %eax,%edx
c0104f3e:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0104f43:	39 c2                	cmp    %eax,%edx
c0104f45:	72 1c                	jb     c0104f63 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104f47:	c7 44 24 08 00 66 11 	movl   $0xc0116600,0x8(%esp)
c0104f4e:	c0 
c0104f4f:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104f56:	00 
c0104f57:	c7 04 24 1f 66 11 c0 	movl   $0xc011661f,(%esp)
c0104f5e:	e8 7b bf ff ff       	call   c0100ede <__panic>
    }
    return &pages[PPN(pa)];
c0104f63:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c0104f68:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f6b:	c1 ea 0c             	shr    $0xc,%edx
c0104f6e:	c1 e2 05             	shl    $0x5,%edx
c0104f71:	01 d0                	add    %edx,%eax
}
c0104f73:	c9                   	leave  
c0104f74:	c3                   	ret    

c0104f75 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104f75:	55                   	push   %ebp
c0104f76:	89 e5                	mov    %esp,%ebp
c0104f78:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7e:	89 04 24             	mov    %eax,(%esp)
c0104f81:	e8 94 ff ff ff       	call   c0104f1a <page2pa>
c0104f86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f8c:	c1 e8 0c             	shr    $0xc,%eax
c0104f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f92:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0104f97:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104f9a:	72 23                	jb     c0104fbf <page2kva+0x4a>
c0104f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104fa3:	c7 44 24 08 30 66 11 	movl   $0xc0116630,0x8(%esp)
c0104faa:	c0 
c0104fab:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104fb2:	00 
c0104fb3:	c7 04 24 1f 66 11 c0 	movl   $0xc011661f,(%esp)
c0104fba:	e8 1f bf ff ff       	call   c0100ede <__panic>
c0104fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc2:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104fc7:	c9                   	leave  
c0104fc8:	c3                   	ret    

c0104fc9 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104fc9:	55                   	push   %ebp
c0104fca:	89 e5                	mov    %esp,%ebp
c0104fcc:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104fcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fd2:	83 e0 01             	and    $0x1,%eax
c0104fd5:	85 c0                	test   %eax,%eax
c0104fd7:	75 1c                	jne    c0104ff5 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104fd9:	c7 44 24 08 54 66 11 	movl   $0xc0116654,0x8(%esp)
c0104fe0:	c0 
c0104fe1:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104fe8:	00 
c0104fe9:	c7 04 24 1f 66 11 c0 	movl   $0xc011661f,(%esp)
c0104ff0:	e8 e9 be ff ff       	call   c0100ede <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104ff5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ff8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104ffd:	89 04 24             	mov    %eax,(%esp)
c0105000:	e8 2b ff ff ff       	call   c0104f30 <pa2page>
}
c0105005:	c9                   	leave  
c0105006:	c3                   	ret    

c0105007 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105007:	55                   	push   %ebp
c0105008:	89 e5                	mov    %esp,%ebp
c010500a:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c010500d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105010:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105015:	89 04 24             	mov    %eax,(%esp)
c0105018:	e8 13 ff ff ff       	call   c0104f30 <pa2page>
}
c010501d:	c9                   	leave  
c010501e:	c3                   	ret    

c010501f <page_ref>:

static inline int
page_ref(struct Page *page) {
c010501f:	55                   	push   %ebp
c0105020:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105022:	8b 45 08             	mov    0x8(%ebp),%eax
c0105025:	8b 00                	mov    (%eax),%eax
}
c0105027:	5d                   	pop    %ebp
c0105028:	c3                   	ret    

c0105029 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105029:	55                   	push   %ebp
c010502a:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010502c:	8b 45 08             	mov    0x8(%ebp),%eax
c010502f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105032:	89 10                	mov    %edx,(%eax)
}
c0105034:	5d                   	pop    %ebp
c0105035:	c3                   	ret    

c0105036 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0105036:	55                   	push   %ebp
c0105037:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0105039:	8b 45 08             	mov    0x8(%ebp),%eax
c010503c:	8b 00                	mov    (%eax),%eax
c010503e:	8d 50 01             	lea    0x1(%eax),%edx
c0105041:	8b 45 08             	mov    0x8(%ebp),%eax
c0105044:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105046:	8b 45 08             	mov    0x8(%ebp),%eax
c0105049:	8b 00                	mov    (%eax),%eax
}
c010504b:	5d                   	pop    %ebp
c010504c:	c3                   	ret    

c010504d <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c010504d:	55                   	push   %ebp
c010504e:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0105050:	8b 45 08             	mov    0x8(%ebp),%eax
c0105053:	8b 00                	mov    (%eax),%eax
c0105055:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105058:	8b 45 08             	mov    0x8(%ebp),%eax
c010505b:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010505d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105060:	8b 00                	mov    (%eax),%eax
}
c0105062:	5d                   	pop    %ebp
c0105063:	c3                   	ret    

c0105064 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105064:	55                   	push   %ebp
c0105065:	89 e5                	mov    %esp,%ebp
c0105067:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010506a:	9c                   	pushf  
c010506b:	58                   	pop    %eax
c010506c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010506f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105072:	25 00 02 00 00       	and    $0x200,%eax
c0105077:	85 c0                	test   %eax,%eax
c0105079:	74 0c                	je     c0105087 <__intr_save+0x23>
        intr_disable();
c010507b:	e8 d1 d0 ff ff       	call   c0102151 <intr_disable>
        return 1;
c0105080:	b8 01 00 00 00       	mov    $0x1,%eax
c0105085:	eb 05                	jmp    c010508c <__intr_save+0x28>
    }
    return 0;
c0105087:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010508c:	c9                   	leave  
c010508d:	c3                   	ret    

c010508e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010508e:	55                   	push   %ebp
c010508f:	89 e5                	mov    %esp,%ebp
c0105091:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0105094:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105098:	74 05                	je     c010509f <__intr_restore+0x11>
        intr_enable();
c010509a:	e8 ac d0 ff ff       	call   c010214b <intr_enable>
    }
}
c010509f:	c9                   	leave  
c01050a0:	c3                   	ret    

c01050a1 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01050a1:	55                   	push   %ebp
c01050a2:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01050a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01050a7:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01050aa:	b8 23 00 00 00       	mov    $0x23,%eax
c01050af:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01050b1:	b8 23 00 00 00       	mov    $0x23,%eax
c01050b6:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01050b8:	b8 10 00 00 00       	mov    $0x10,%eax
c01050bd:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01050bf:	b8 10 00 00 00       	mov    $0x10,%eax
c01050c4:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01050c6:	b8 10 00 00 00       	mov    $0x10,%eax
c01050cb:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01050cd:	ea d4 50 10 c0 08 00 	ljmp   $0x8,$0xc01050d4
}
c01050d4:	5d                   	pop    %ebp
c01050d5:	c3                   	ret    

c01050d6 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01050d6:	55                   	push   %ebp
c01050d7:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01050d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01050dc:	a3 c4 2f 15 c0       	mov    %eax,0xc0152fc4
}
c01050e1:	5d                   	pop    %ebp
c01050e2:	c3                   	ret    

c01050e3 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01050e3:	55                   	push   %ebp
c01050e4:	89 e5                	mov    %esp,%ebp
c01050e6:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01050e9:	b8 00 f0 14 c0       	mov    $0xc014f000,%eax
c01050ee:	89 04 24             	mov    %eax,(%esp)
c01050f1:	e8 e0 ff ff ff       	call   c01050d6 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01050f6:	66 c7 05 c8 2f 15 c0 	movw   $0x10,0xc0152fc8
c01050fd:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01050ff:	66 c7 05 48 fa 14 c0 	movw   $0x68,0xc014fa48
c0105106:	68 00 
c0105108:	b8 c0 2f 15 c0       	mov    $0xc0152fc0,%eax
c010510d:	66 a3 4a fa 14 c0    	mov    %ax,0xc014fa4a
c0105113:	b8 c0 2f 15 c0       	mov    $0xc0152fc0,%eax
c0105118:	c1 e8 10             	shr    $0x10,%eax
c010511b:	a2 4c fa 14 c0       	mov    %al,0xc014fa4c
c0105120:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105127:	83 e0 f0             	and    $0xfffffff0,%eax
c010512a:	83 c8 09             	or     $0x9,%eax
c010512d:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c0105132:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105139:	83 e0 ef             	and    $0xffffffef,%eax
c010513c:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c0105141:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105148:	83 e0 9f             	and    $0xffffff9f,%eax
c010514b:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c0105150:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105157:	83 c8 80             	or     $0xffffff80,%eax
c010515a:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c010515f:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c0105166:	83 e0 f0             	and    $0xfffffff0,%eax
c0105169:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c010516e:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c0105175:	83 e0 ef             	and    $0xffffffef,%eax
c0105178:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c010517d:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c0105184:	83 e0 df             	and    $0xffffffdf,%eax
c0105187:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c010518c:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c0105193:	83 c8 40             	or     $0x40,%eax
c0105196:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c010519b:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01051a2:	83 e0 7f             	and    $0x7f,%eax
c01051a5:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01051aa:	b8 c0 2f 15 c0       	mov    $0xc0152fc0,%eax
c01051af:	c1 e8 18             	shr    $0x18,%eax
c01051b2:	a2 4f fa 14 c0       	mov    %al,0xc014fa4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01051b7:	c7 04 24 50 fa 14 c0 	movl   $0xc014fa50,(%esp)
c01051be:	e8 de fe ff ff       	call   c01050a1 <lgdt>
c01051c3:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01051c9:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01051cd:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01051d0:	c9                   	leave  
c01051d1:	c3                   	ret    

c01051d2 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01051d2:	55                   	push   %ebp
c01051d3:	89 e5                	mov    %esp,%ebp
c01051d5:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01051d8:	c7 05 40 61 15 c0 e0 	movl   $0xc01164e0,0xc0156140
c01051df:	64 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01051e2:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c01051e7:	8b 00                	mov    (%eax),%eax
c01051e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01051ed:	c7 04 24 80 66 11 c0 	movl   $0xc0116680,(%esp)
c01051f4:	e8 78 b1 ff ff       	call   c0100371 <cprintf>
    pmm_manager->init();
c01051f9:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c01051fe:	8b 40 04             	mov    0x4(%eax),%eax
c0105201:	ff d0                	call   *%eax
}
c0105203:	c9                   	leave  
c0105204:	c3                   	ret    

c0105205 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105205:	55                   	push   %ebp
c0105206:	89 e5                	mov    %esp,%ebp
c0105208:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010520b:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c0105210:	8b 40 08             	mov    0x8(%eax),%eax
c0105213:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105216:	89 54 24 04          	mov    %edx,0x4(%esp)
c010521a:	8b 55 08             	mov    0x8(%ebp),%edx
c010521d:	89 14 24             	mov    %edx,(%esp)
c0105220:	ff d0                	call   *%eax
}
c0105222:	c9                   	leave  
c0105223:	c3                   	ret    

c0105224 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105224:	55                   	push   %ebp
c0105225:	89 e5                	mov    %esp,%ebp
c0105227:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c010522a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105231:	e8 2e fe ff ff       	call   c0105064 <__intr_save>
c0105236:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105239:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c010523e:	8b 40 0c             	mov    0xc(%eax),%eax
c0105241:	8b 55 08             	mov    0x8(%ebp),%edx
c0105244:	89 14 24             	mov    %edx,(%esp)
c0105247:	ff d0                	call   *%eax
c0105249:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010524c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010524f:	89 04 24             	mov    %eax,(%esp)
c0105252:	e8 37 fe ff ff       	call   c010508e <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105257:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010525b:	75 2d                	jne    c010528a <alloc_pages+0x66>
c010525d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0105261:	77 27                	ja     c010528a <alloc_pages+0x66>
c0105263:	a1 2c 30 15 c0       	mov    0xc015302c,%eax
c0105268:	85 c0                	test   %eax,%eax
c010526a:	74 1e                	je     c010528a <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c010526c:	8b 55 08             	mov    0x8(%ebp),%edx
c010526f:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c0105274:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010527b:	00 
c010527c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105280:	89 04 24             	mov    %eax,(%esp)
c0105283:	e8 43 1d 00 00       	call   c0106fcb <swap_out>
    }
c0105288:	eb a7                	jmp    c0105231 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c010528a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010528d:	c9                   	leave  
c010528e:	c3                   	ret    

c010528f <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010528f:	55                   	push   %ebp
c0105290:	89 e5                	mov    %esp,%ebp
c0105292:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0105295:	e8 ca fd ff ff       	call   c0105064 <__intr_save>
c010529a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c010529d:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c01052a2:	8b 40 10             	mov    0x10(%eax),%eax
c01052a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01052a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01052ac:	8b 55 08             	mov    0x8(%ebp),%edx
c01052af:	89 14 24             	mov    %edx,(%esp)
c01052b2:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01052b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052b7:	89 04 24             	mov    %eax,(%esp)
c01052ba:	e8 cf fd ff ff       	call   c010508e <__intr_restore>
}
c01052bf:	c9                   	leave  
c01052c0:	c3                   	ret    

c01052c1 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01052c1:	55                   	push   %ebp
c01052c2:	89 e5                	mov    %esp,%ebp
c01052c4:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01052c7:	e8 98 fd ff ff       	call   c0105064 <__intr_save>
c01052cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01052cf:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c01052d4:	8b 40 14             	mov    0x14(%eax),%eax
c01052d7:	ff d0                	call   *%eax
c01052d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01052dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052df:	89 04 24             	mov    %eax,(%esp)
c01052e2:	e8 a7 fd ff ff       	call   c010508e <__intr_restore>
    return ret;
c01052e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01052ea:	c9                   	leave  
c01052eb:	c3                   	ret    

c01052ec <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01052ec:	55                   	push   %ebp
c01052ed:	89 e5                	mov    %esp,%ebp
c01052ef:	57                   	push   %edi
c01052f0:	56                   	push   %esi
c01052f1:	53                   	push   %ebx
c01052f2:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01052f8:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01052ff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105306:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010530d:	c7 04 24 97 66 11 c0 	movl   $0xc0116697,(%esp)
c0105314:	e8 58 b0 ff ff       	call   c0100371 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105319:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105320:	e9 15 01 00 00       	jmp    c010543a <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105325:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105328:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010532b:	89 d0                	mov    %edx,%eax
c010532d:	c1 e0 02             	shl    $0x2,%eax
c0105330:	01 d0                	add    %edx,%eax
c0105332:	c1 e0 02             	shl    $0x2,%eax
c0105335:	01 c8                	add    %ecx,%eax
c0105337:	8b 50 08             	mov    0x8(%eax),%edx
c010533a:	8b 40 04             	mov    0x4(%eax),%eax
c010533d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105340:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105343:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105346:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105349:	89 d0                	mov    %edx,%eax
c010534b:	c1 e0 02             	shl    $0x2,%eax
c010534e:	01 d0                	add    %edx,%eax
c0105350:	c1 e0 02             	shl    $0x2,%eax
c0105353:	01 c8                	add    %ecx,%eax
c0105355:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105358:	8b 58 10             	mov    0x10(%eax),%ebx
c010535b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010535e:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105361:	01 c8                	add    %ecx,%eax
c0105363:	11 da                	adc    %ebx,%edx
c0105365:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105368:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010536b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010536e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105371:	89 d0                	mov    %edx,%eax
c0105373:	c1 e0 02             	shl    $0x2,%eax
c0105376:	01 d0                	add    %edx,%eax
c0105378:	c1 e0 02             	shl    $0x2,%eax
c010537b:	01 c8                	add    %ecx,%eax
c010537d:	83 c0 14             	add    $0x14,%eax
c0105380:	8b 00                	mov    (%eax),%eax
c0105382:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105388:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010538b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010538e:	83 c0 ff             	add    $0xffffffff,%eax
c0105391:	83 d2 ff             	adc    $0xffffffff,%edx
c0105394:	89 c6                	mov    %eax,%esi
c0105396:	89 d7                	mov    %edx,%edi
c0105398:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010539b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010539e:	89 d0                	mov    %edx,%eax
c01053a0:	c1 e0 02             	shl    $0x2,%eax
c01053a3:	01 d0                	add    %edx,%eax
c01053a5:	c1 e0 02             	shl    $0x2,%eax
c01053a8:	01 c8                	add    %ecx,%eax
c01053aa:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053ad:	8b 58 10             	mov    0x10(%eax),%ebx
c01053b0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01053b6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01053ba:	89 74 24 14          	mov    %esi,0x14(%esp)
c01053be:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01053c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01053c5:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01053c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01053cc:	89 54 24 10          	mov    %edx,0x10(%esp)
c01053d0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01053d4:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01053d8:	c7 04 24 a4 66 11 c0 	movl   $0xc01166a4,(%esp)
c01053df:	e8 8d af ff ff       	call   c0100371 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01053e4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053e7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053ea:	89 d0                	mov    %edx,%eax
c01053ec:	c1 e0 02             	shl    $0x2,%eax
c01053ef:	01 d0                	add    %edx,%eax
c01053f1:	c1 e0 02             	shl    $0x2,%eax
c01053f4:	01 c8                	add    %ecx,%eax
c01053f6:	83 c0 14             	add    $0x14,%eax
c01053f9:	8b 00                	mov    (%eax),%eax
c01053fb:	83 f8 01             	cmp    $0x1,%eax
c01053fe:	75 36                	jne    c0105436 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105400:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105403:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105406:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105409:	77 2b                	ja     c0105436 <page_init+0x14a>
c010540b:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010540e:	72 05                	jb     c0105415 <page_init+0x129>
c0105410:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105413:	73 21                	jae    c0105436 <page_init+0x14a>
c0105415:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105419:	77 1b                	ja     c0105436 <page_init+0x14a>
c010541b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010541f:	72 09                	jb     c010542a <page_init+0x13e>
c0105421:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105428:	77 0c                	ja     c0105436 <page_init+0x14a>
                maxpa = end;
c010542a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010542d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105430:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105433:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105436:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010543a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010543d:	8b 00                	mov    (%eax),%eax
c010543f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105442:	0f 8f dd fe ff ff    	jg     c0105325 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105448:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010544c:	72 1d                	jb     c010546b <page_init+0x17f>
c010544e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105452:	77 09                	ja     c010545d <page_init+0x171>
c0105454:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010545b:	76 0e                	jbe    c010546b <page_init+0x17f>
        maxpa = KMEMSIZE;
c010545d:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105464:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010546b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010546e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105471:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105475:	c1 ea 0c             	shr    $0xc,%edx
c0105478:	a3 a0 2f 15 c0       	mov    %eax,0xc0152fa0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010547d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105484:	b8 24 63 15 c0       	mov    $0xc0156324,%eax
c0105489:	8d 50 ff             	lea    -0x1(%eax),%edx
c010548c:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010548f:	01 d0                	add    %edx,%eax
c0105491:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105494:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105497:	ba 00 00 00 00       	mov    $0x0,%edx
c010549c:	f7 75 ac             	divl   -0x54(%ebp)
c010549f:	89 d0                	mov    %edx,%eax
c01054a1:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01054a4:	29 c2                	sub    %eax,%edx
c01054a6:	89 d0                	mov    %edx,%eax
c01054a8:	a3 48 61 15 c0       	mov    %eax,0xc0156148

    for (i = 0; i < npage; i ++) {
c01054ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01054b4:	eb 27                	jmp    c01054dd <page_init+0x1f1>
        SetPageReserved(pages + i);
c01054b6:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c01054bb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054be:	c1 e2 05             	shl    $0x5,%edx
c01054c1:	01 d0                	add    %edx,%eax
c01054c3:	83 c0 04             	add    $0x4,%eax
c01054c6:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01054cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01054d0:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01054d3:	8b 55 90             	mov    -0x70(%ebp),%edx
c01054d6:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01054d9:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01054dd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054e0:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c01054e5:	39 c2                	cmp    %eax,%edx
c01054e7:	72 cd                	jb     c01054b6 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01054e9:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c01054ee:	c1 e0 05             	shl    $0x5,%eax
c01054f1:	89 c2                	mov    %eax,%edx
c01054f3:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c01054f8:	01 d0                	add    %edx,%eax
c01054fa:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01054fd:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105504:	77 23                	ja     c0105529 <page_init+0x23d>
c0105506:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105509:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010550d:	c7 44 24 08 d4 66 11 	movl   $0xc01166d4,0x8(%esp)
c0105514:	c0 
c0105515:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c010551c:	00 
c010551d:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105524:	e8 b5 b9 ff ff       	call   c0100ede <__panic>
c0105529:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010552c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105531:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105534:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010553b:	e9 74 01 00 00       	jmp    c01056b4 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105540:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105543:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105546:	89 d0                	mov    %edx,%eax
c0105548:	c1 e0 02             	shl    $0x2,%eax
c010554b:	01 d0                	add    %edx,%eax
c010554d:	c1 e0 02             	shl    $0x2,%eax
c0105550:	01 c8                	add    %ecx,%eax
c0105552:	8b 50 08             	mov    0x8(%eax),%edx
c0105555:	8b 40 04             	mov    0x4(%eax),%eax
c0105558:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010555b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010555e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105561:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105564:	89 d0                	mov    %edx,%eax
c0105566:	c1 e0 02             	shl    $0x2,%eax
c0105569:	01 d0                	add    %edx,%eax
c010556b:	c1 e0 02             	shl    $0x2,%eax
c010556e:	01 c8                	add    %ecx,%eax
c0105570:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105573:	8b 58 10             	mov    0x10(%eax),%ebx
c0105576:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105579:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010557c:	01 c8                	add    %ecx,%eax
c010557e:	11 da                	adc    %ebx,%edx
c0105580:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105583:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105586:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105589:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010558c:	89 d0                	mov    %edx,%eax
c010558e:	c1 e0 02             	shl    $0x2,%eax
c0105591:	01 d0                	add    %edx,%eax
c0105593:	c1 e0 02             	shl    $0x2,%eax
c0105596:	01 c8                	add    %ecx,%eax
c0105598:	83 c0 14             	add    $0x14,%eax
c010559b:	8b 00                	mov    (%eax),%eax
c010559d:	83 f8 01             	cmp    $0x1,%eax
c01055a0:	0f 85 0a 01 00 00    	jne    c01056b0 <page_init+0x3c4>
            if (begin < freemem) {
c01055a6:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01055a9:	ba 00 00 00 00       	mov    $0x0,%edx
c01055ae:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01055b1:	72 17                	jb     c01055ca <page_init+0x2de>
c01055b3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01055b6:	77 05                	ja     c01055bd <page_init+0x2d1>
c01055b8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01055bb:	76 0d                	jbe    c01055ca <page_init+0x2de>
                begin = freemem;
c01055bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01055c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01055c3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01055ca:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01055ce:	72 1d                	jb     c01055ed <page_init+0x301>
c01055d0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01055d4:	77 09                	ja     c01055df <page_init+0x2f3>
c01055d6:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01055dd:	76 0e                	jbe    c01055ed <page_init+0x301>
                end = KMEMSIZE;
c01055df:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01055e6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01055ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055f0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055f3:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055f6:	0f 87 b4 00 00 00    	ja     c01056b0 <page_init+0x3c4>
c01055fc:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055ff:	72 09                	jb     c010560a <page_init+0x31e>
c0105601:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105604:	0f 83 a6 00 00 00    	jae    c01056b0 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c010560a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105611:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105614:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105617:	01 d0                	add    %edx,%eax
c0105619:	83 e8 01             	sub    $0x1,%eax
c010561c:	89 45 98             	mov    %eax,-0x68(%ebp)
c010561f:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105622:	ba 00 00 00 00       	mov    $0x0,%edx
c0105627:	f7 75 9c             	divl   -0x64(%ebp)
c010562a:	89 d0                	mov    %edx,%eax
c010562c:	8b 55 98             	mov    -0x68(%ebp),%edx
c010562f:	29 c2                	sub    %eax,%edx
c0105631:	89 d0                	mov    %edx,%eax
c0105633:	ba 00 00 00 00       	mov    $0x0,%edx
c0105638:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010563b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010563e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105641:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105644:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105647:	ba 00 00 00 00       	mov    $0x0,%edx
c010564c:	89 c7                	mov    %eax,%edi
c010564e:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105654:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105657:	89 d0                	mov    %edx,%eax
c0105659:	83 e0 00             	and    $0x0,%eax
c010565c:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010565f:	8b 45 80             	mov    -0x80(%ebp),%eax
c0105662:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105665:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105668:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010566b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010566e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105671:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105674:	77 3a                	ja     c01056b0 <page_init+0x3c4>
c0105676:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105679:	72 05                	jb     c0105680 <page_init+0x394>
c010567b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010567e:	73 30                	jae    c01056b0 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105680:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105683:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105686:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105689:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010568c:	29 c8                	sub    %ecx,%eax
c010568e:	19 da                	sbb    %ebx,%edx
c0105690:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105694:	c1 ea 0c             	shr    $0xc,%edx
c0105697:	89 c3                	mov    %eax,%ebx
c0105699:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010569c:	89 04 24             	mov    %eax,(%esp)
c010569f:	e8 8c f8 ff ff       	call   c0104f30 <pa2page>
c01056a4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01056a8:	89 04 24             	mov    %eax,(%esp)
c01056ab:	e8 55 fb ff ff       	call   c0105205 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01056b0:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01056b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01056b7:	8b 00                	mov    (%eax),%eax
c01056b9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01056bc:	0f 8f 7e fe ff ff    	jg     c0105540 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01056c2:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01056c8:	5b                   	pop    %ebx
c01056c9:	5e                   	pop    %esi
c01056ca:	5f                   	pop    %edi
c01056cb:	5d                   	pop    %ebp
c01056cc:	c3                   	ret    

c01056cd <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01056cd:	55                   	push   %ebp
c01056ce:	89 e5                	mov    %esp,%ebp
c01056d0:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01056d3:	8b 45 14             	mov    0x14(%ebp),%eax
c01056d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01056d9:	31 d0                	xor    %edx,%eax
c01056db:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056e0:	85 c0                	test   %eax,%eax
c01056e2:	74 24                	je     c0105708 <boot_map_segment+0x3b>
c01056e4:	c7 44 24 0c 06 67 11 	movl   $0xc0116706,0xc(%esp)
c01056eb:	c0 
c01056ec:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01056f3:	c0 
c01056f4:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c01056fb:	00 
c01056fc:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105703:	e8 d6 b7 ff ff       	call   c0100ede <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105708:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010570f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105712:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105717:	89 c2                	mov    %eax,%edx
c0105719:	8b 45 10             	mov    0x10(%ebp),%eax
c010571c:	01 c2                	add    %eax,%edx
c010571e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105721:	01 d0                	add    %edx,%eax
c0105723:	83 e8 01             	sub    $0x1,%eax
c0105726:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105729:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010572c:	ba 00 00 00 00       	mov    $0x0,%edx
c0105731:	f7 75 f0             	divl   -0x10(%ebp)
c0105734:	89 d0                	mov    %edx,%eax
c0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105739:	29 c2                	sub    %eax,%edx
c010573b:	89 d0                	mov    %edx,%eax
c010573d:	c1 e8 0c             	shr    $0xc,%eax
c0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105743:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105746:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105749:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010574c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105751:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105754:	8b 45 14             	mov    0x14(%ebp),%eax
c0105757:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010575a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010575d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105762:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105765:	eb 6b                	jmp    c01057d2 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105767:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010576e:	00 
c010576f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105772:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105776:	8b 45 08             	mov    0x8(%ebp),%eax
c0105779:	89 04 24             	mov    %eax,(%esp)
c010577c:	e8 87 01 00 00       	call   c0105908 <get_pte>
c0105781:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105784:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105788:	75 24                	jne    c01057ae <boot_map_segment+0xe1>
c010578a:	c7 44 24 0c 32 67 11 	movl   $0xc0116732,0xc(%esp)
c0105791:	c0 
c0105792:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105799:	c0 
c010579a:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01057a1:	00 
c01057a2:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01057a9:	e8 30 b7 ff ff       	call   c0100ede <__panic>
        *ptep = pa | PTE_P | perm;
c01057ae:	8b 45 18             	mov    0x18(%ebp),%eax
c01057b1:	8b 55 14             	mov    0x14(%ebp),%edx
c01057b4:	09 d0                	or     %edx,%eax
c01057b6:	83 c8 01             	or     $0x1,%eax
c01057b9:	89 c2                	mov    %eax,%edx
c01057bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01057be:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01057c0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01057c4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01057cb:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01057d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01057d6:	75 8f                	jne    c0105767 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01057d8:	c9                   	leave  
c01057d9:	c3                   	ret    

c01057da <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01057da:	55                   	push   %ebp
c01057db:	89 e5                	mov    %esp,%ebp
c01057dd:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c01057e0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01057e7:	e8 38 fa ff ff       	call   c0105224 <alloc_pages>
c01057ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01057ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01057f3:	75 1c                	jne    c0105811 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c01057f5:	c7 44 24 08 3f 67 11 	movl   $0xc011673f,0x8(%esp)
c01057fc:	c0 
c01057fd:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0105804:	00 
c0105805:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010580c:	e8 cd b6 ff ff       	call   c0100ede <__panic>
    }
    return page2kva(p);
c0105811:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105814:	89 04 24             	mov    %eax,(%esp)
c0105817:	e8 59 f7 ff ff       	call   c0104f75 <page2kva>
}
c010581c:	c9                   	leave  
c010581d:	c3                   	ret    

c010581e <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010581e:	55                   	push   %ebp
c010581f:	89 e5                	mov    %esp,%ebp
c0105821:	83 ec 38             	sub    $0x38,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0105824:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0105829:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010582c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105833:	77 23                	ja     c0105858 <pmm_init+0x3a>
c0105835:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105838:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010583c:	c7 44 24 08 d4 66 11 	movl   $0xc01166d4,0x8(%esp)
c0105843:	c0 
c0105844:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010584b:	00 
c010584c:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105853:	e8 86 b6 ff ff       	call   c0100ede <__panic>
c0105858:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010585b:	05 00 00 00 40       	add    $0x40000000,%eax
c0105860:	a3 44 61 15 c0       	mov    %eax,0xc0156144
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105865:	e8 68 f9 ff ff       	call   c01051d2 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010586a:	e8 7d fa ff ff       	call   c01052ec <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010586f:	e8 d2 08 00 00       	call   c0106146 <check_alloc_page>

    check_pgdir();
c0105874:	e8 eb 08 00 00       	call   c0106164 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105879:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010587e:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105884:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0105889:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010588c:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105893:	77 23                	ja     c01058b8 <pmm_init+0x9a>
c0105895:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105898:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010589c:	c7 44 24 08 d4 66 11 	movl   $0xc01166d4,0x8(%esp)
c01058a3:	c0 
c01058a4:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c01058ab:	00 
c01058ac:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01058b3:	e8 26 b6 ff ff       	call   c0100ede <__panic>
c01058b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058bb:	05 00 00 00 40       	add    $0x40000000,%eax
c01058c0:	83 c8 03             	or     $0x3,%eax
c01058c3:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01058c5:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01058ca:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c01058d1:	00 
c01058d2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01058d9:	00 
c01058da:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01058e1:	38 
c01058e2:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c01058e9:	c0 
c01058ea:	89 04 24             	mov    %eax,(%esp)
c01058ed:	e8 db fd ff ff       	call   c01056cd <boot_map_segment>

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01058f2:	e8 ec f7 ff ff       	call   c01050e3 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01058f7:	e8 03 0f 00 00       	call   c01067ff <check_boot_pgdir>

    print_pgdir();
c01058fc:	e8 b5 13 00 00       	call   c0106cb6 <print_pgdir>
    
    kmalloc_init();
c0105901:	e8 69 f3 ff ff       	call   c0104c6f <kmalloc_init>

}
c0105906:	c9                   	leave  
c0105907:	c3                   	ret    

c0105908 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105908:	55                   	push   %ebp
c0105909:	89 e5                	mov    %esp,%ebp
c010590b:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c010590e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105911:	c1 e8 16             	shr    $0x16,%eax
c0105914:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010591b:	8b 45 08             	mov    0x8(%ebp),%eax
c010591e:	01 d0                	add    %edx,%eax
c0105920:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0105923:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105926:	8b 00                	mov    (%eax),%eax
c0105928:	83 e0 01             	and    $0x1,%eax
c010592b:	85 c0                	test   %eax,%eax
c010592d:	0f 85 af 00 00 00    	jne    c01059e2 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0105933:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105937:	74 15                	je     c010594e <get_pte+0x46>
c0105939:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105940:	e8 df f8 ff ff       	call   c0105224 <alloc_pages>
c0105945:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105948:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010594c:	75 0a                	jne    c0105958 <get_pte+0x50>
            return NULL;
c010594e:	b8 00 00 00 00       	mov    $0x0,%eax
c0105953:	e9 e6 00 00 00       	jmp    c0105a3e <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0105958:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010595f:	00 
c0105960:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105963:	89 04 24             	mov    %eax,(%esp)
c0105966:	e8 be f6 ff ff       	call   c0105029 <set_page_ref>
        uintptr_t pa = page2pa(page);
c010596b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010596e:	89 04 24             	mov    %eax,(%esp)
c0105971:	e8 a4 f5 ff ff       	call   c0104f1a <page2pa>
c0105976:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105979:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010597c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010597f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105982:	c1 e8 0c             	shr    $0xc,%eax
c0105985:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105988:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010598d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105990:	72 23                	jb     c01059b5 <get_pte+0xad>
c0105992:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105995:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105999:	c7 44 24 08 30 66 11 	movl   $0xc0116630,0x8(%esp)
c01059a0:	c0 
c01059a1:	c7 44 24 04 82 01 00 	movl   $0x182,0x4(%esp)
c01059a8:	00 
c01059a9:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01059b0:	e8 29 b5 ff ff       	call   c0100ede <__panic>
c01059b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059b8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059bd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01059c4:	00 
c01059c5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01059cc:	00 
c01059cd:	89 04 24             	mov    %eax,(%esp)
c01059d0:	e8 92 fc 00 00       	call   c0115667 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01059d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059d8:	83 c8 07             	or     $0x7,%eax
c01059db:	89 c2                	mov    %eax,%edx
c01059dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059e0:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01059e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059e5:	8b 00                	mov    (%eax),%eax
c01059e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01059ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01059ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059f2:	c1 e8 0c             	shr    $0xc,%eax
c01059f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01059f8:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c01059fd:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105a00:	72 23                	jb     c0105a25 <get_pte+0x11d>
c0105a02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a05:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105a09:	c7 44 24 08 30 66 11 	movl   $0xc0116630,0x8(%esp)
c0105a10:	c0 
c0105a11:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c0105a18:	00 
c0105a19:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105a20:	e8 b9 b4 ff ff       	call   c0100ede <__panic>
c0105a25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a28:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a2d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a30:	c1 ea 0c             	shr    $0xc,%edx
c0105a33:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105a39:	c1 e2 02             	shl    $0x2,%edx
c0105a3c:	01 d0                	add    %edx,%eax
}
c0105a3e:	c9                   	leave  
c0105a3f:	c3                   	ret    

c0105a40 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105a40:	55                   	push   %ebp
c0105a41:	89 e5                	mov    %esp,%ebp
c0105a43:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105a46:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a4d:	00 
c0105a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a55:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a58:	89 04 24             	mov    %eax,(%esp)
c0105a5b:	e8 a8 fe ff ff       	call   c0105908 <get_pte>
c0105a60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a63:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a67:	74 08                	je     c0105a71 <get_page+0x31>
        *ptep_store = ptep;
c0105a69:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a6f:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a75:	74 1b                	je     c0105a92 <get_page+0x52>
c0105a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a7a:	8b 00                	mov    (%eax),%eax
c0105a7c:	83 e0 01             	and    $0x1,%eax
c0105a7f:	85 c0                	test   %eax,%eax
c0105a81:	74 0f                	je     c0105a92 <get_page+0x52>
        return pte2page(*ptep);
c0105a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a86:	8b 00                	mov    (%eax),%eax
c0105a88:	89 04 24             	mov    %eax,(%esp)
c0105a8b:	e8 39 f5 ff ff       	call   c0104fc9 <pte2page>
c0105a90:	eb 05                	jmp    c0105a97 <get_page+0x57>
    }
    return NULL;
c0105a92:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a97:	c9                   	leave  
c0105a98:	c3                   	ret    

c0105a99 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a99:	55                   	push   %ebp
c0105a9a:	89 e5                	mov    %esp,%ebp
c0105a9c:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a9f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105aa2:	8b 00                	mov    (%eax),%eax
c0105aa4:	83 e0 01             	and    $0x1,%eax
c0105aa7:	85 c0                	test   %eax,%eax
c0105aa9:	74 4d                	je     c0105af8 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0105aab:	8b 45 10             	mov    0x10(%ebp),%eax
c0105aae:	8b 00                	mov    (%eax),%eax
c0105ab0:	89 04 24             	mov    %eax,(%esp)
c0105ab3:	e8 11 f5 ff ff       	call   c0104fc9 <pte2page>
c0105ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105abe:	89 04 24             	mov    %eax,(%esp)
c0105ac1:	e8 87 f5 ff ff       	call   c010504d <page_ref_dec>
c0105ac6:	85 c0                	test   %eax,%eax
c0105ac8:	75 13                	jne    c0105add <page_remove_pte+0x44>
            free_page(page);
c0105aca:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105ad1:	00 
c0105ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ad5:	89 04 24             	mov    %eax,(%esp)
c0105ad8:	e8 b2 f7 ff ff       	call   c010528f <free_pages>
        }
        *ptep = 0;
c0105add:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ae0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ae9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105aed:	8b 45 08             	mov    0x8(%ebp),%eax
c0105af0:	89 04 24             	mov    %eax,(%esp)
c0105af3:	e8 1d 05 00 00       	call   c0106015 <tlb_invalidate>
    }
}
c0105af8:	c9                   	leave  
c0105af9:	c3                   	ret    

c0105afa <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105afa:	55                   	push   %ebp
c0105afb:	89 e5                	mov    %esp,%ebp
c0105afd:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b03:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b08:	85 c0                	test   %eax,%eax
c0105b0a:	75 0c                	jne    c0105b18 <unmap_range+0x1e>
c0105b0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b0f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b14:	85 c0                	test   %eax,%eax
c0105b16:	74 24                	je     c0105b3c <unmap_range+0x42>
c0105b18:	c7 44 24 0c 58 67 11 	movl   $0xc0116758,0xc(%esp)
c0105b1f:	c0 
c0105b20:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105b27:	c0 
c0105b28:	c7 44 24 04 bf 01 00 	movl   $0x1bf,0x4(%esp)
c0105b2f:	00 
c0105b30:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105b37:	e8 a2 b3 ff ff       	call   c0100ede <__panic>
    assert(USER_ACCESS(start, end));
c0105b3c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b43:	76 11                	jbe    c0105b56 <unmap_range+0x5c>
c0105b45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b48:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b4b:	73 09                	jae    c0105b56 <unmap_range+0x5c>
c0105b4d:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b54:	76 24                	jbe    c0105b7a <unmap_range+0x80>
c0105b56:	c7 44 24 0c 81 67 11 	movl   $0xc0116781,0xc(%esp)
c0105b5d:	c0 
c0105b5e:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105b65:	c0 
c0105b66:	c7 44 24 04 c0 01 00 	movl   $0x1c0,0x4(%esp)
c0105b6d:	00 
c0105b6e:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105b75:	e8 64 b3 ff ff       	call   c0100ede <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b7a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b81:	00 
c0105b82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b85:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b89:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b8c:	89 04 24             	mov    %eax,(%esp)
c0105b8f:	e8 74 fd ff ff       	call   c0105908 <get_pte>
c0105b94:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b9b:	75 18                	jne    c0105bb5 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ba0:	05 00 00 40 00       	add    $0x400000,%eax
c0105ba5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bab:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105bb0:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105bb3:	eb 29                	jmp    c0105bde <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bb8:	8b 00                	mov    (%eax),%eax
c0105bba:	85 c0                	test   %eax,%eax
c0105bbc:	74 19                	je     c0105bd7 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bc1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bc8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bcf:	89 04 24             	mov    %eax,(%esp)
c0105bd2:	e8 c2 fe ff ff       	call   c0105a99 <page_remove_pte>
        }
        start += PGSIZE;
c0105bd7:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105bde:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105be2:	74 08                	je     c0105bec <unmap_range+0xf2>
c0105be4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105be7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bea:	72 8e                	jb     c0105b7a <unmap_range+0x80>
}
c0105bec:	c9                   	leave  
c0105bed:	c3                   	ret    

c0105bee <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105bee:	55                   	push   %ebp
c0105bef:	89 e5                	mov    %esp,%ebp
c0105bf1:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bf7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bfc:	85 c0                	test   %eax,%eax
c0105bfe:	75 0c                	jne    c0105c0c <exit_range+0x1e>
c0105c00:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c03:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c08:	85 c0                	test   %eax,%eax
c0105c0a:	74 24                	je     c0105c30 <exit_range+0x42>
c0105c0c:	c7 44 24 0c 58 67 11 	movl   $0xc0116758,0xc(%esp)
c0105c13:	c0 
c0105c14:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105c1b:	c0 
c0105c1c:	c7 44 24 04 d1 01 00 	movl   $0x1d1,0x4(%esp)
c0105c23:	00 
c0105c24:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105c2b:	e8 ae b2 ff ff       	call   c0100ede <__panic>
    assert(USER_ACCESS(start, end));
c0105c30:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105c37:	76 11                	jbe    c0105c4a <exit_range+0x5c>
c0105c39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c3c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c3f:	73 09                	jae    c0105c4a <exit_range+0x5c>
c0105c41:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c48:	76 24                	jbe    c0105c6e <exit_range+0x80>
c0105c4a:	c7 44 24 0c 81 67 11 	movl   $0xc0116781,0xc(%esp)
c0105c51:	c0 
c0105c52:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105c59:	c0 
c0105c5a:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
c0105c61:	00 
c0105c62:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105c69:	e8 70 b2 ff ff       	call   c0100ede <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c77:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c7c:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c82:	c1 e8 16             	shr    $0x16,%eax
c0105c85:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c92:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c95:	01 d0                	add    %edx,%eax
c0105c97:	8b 00                	mov    (%eax),%eax
c0105c99:	83 e0 01             	and    $0x1,%eax
c0105c9c:	85 c0                	test   %eax,%eax
c0105c9e:	74 3e                	je     c0105cde <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105ca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ca3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105caa:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cad:	01 d0                	add    %edx,%eax
c0105caf:	8b 00                	mov    (%eax),%eax
c0105cb1:	89 04 24             	mov    %eax,(%esp)
c0105cb4:	e8 4e f3 ff ff       	call   c0105007 <pde2page>
c0105cb9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105cc0:	00 
c0105cc1:	89 04 24             	mov    %eax,(%esp)
c0105cc4:	e8 c6 f5 ff ff       	call   c010528f <free_pages>
            pgdir[pde_idx] = 0;
c0105cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ccc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105cd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cd6:	01 d0                	add    %edx,%eax
c0105cd8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105cde:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105ce5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105ce9:	74 08                	je     c0105cf3 <exit_range+0x105>
c0105ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cee:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105cf1:	72 8c                	jb     c0105c7f <exit_range+0x91>
}
c0105cf3:	c9                   	leave  
c0105cf4:	c3                   	ret    

c0105cf5 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105cf5:	55                   	push   %ebp
c0105cf6:	89 e5                	mov    %esp,%ebp
c0105cf8:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105cfb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cfe:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d03:	85 c0                	test   %eax,%eax
c0105d05:	75 0c                	jne    c0105d13 <copy_range+0x1e>
c0105d07:	8b 45 14             	mov    0x14(%ebp),%eax
c0105d0a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d0f:	85 c0                	test   %eax,%eax
c0105d11:	74 24                	je     c0105d37 <copy_range+0x42>
c0105d13:	c7 44 24 0c 58 67 11 	movl   $0xc0116758,0xc(%esp)
c0105d1a:	c0 
c0105d1b:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105d22:	c0 
c0105d23:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105d2a:	00 
c0105d2b:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105d32:	e8 a7 b1 ff ff       	call   c0100ede <__panic>
    assert(USER_ACCESS(start, end));
c0105d37:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105d3e:	76 11                	jbe    c0105d51 <copy_range+0x5c>
c0105d40:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d43:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d46:	73 09                	jae    c0105d51 <copy_range+0x5c>
c0105d48:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105d4f:	76 24                	jbe    c0105d75 <copy_range+0x80>
c0105d51:	c7 44 24 0c 81 67 11 	movl   $0xc0116781,0xc(%esp)
c0105d58:	c0 
c0105d59:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105d60:	c0 
c0105d61:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105d68:	00 
c0105d69:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105d70:	e8 69 b1 ff ff       	call   c0100ede <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d75:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d7c:	00 
c0105d7d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d87:	89 04 24             	mov    %eax,(%esp)
c0105d8a:	e8 79 fb ff ff       	call   c0105908 <get_pte>
c0105d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d96:	75 1b                	jne    c0105db3 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d98:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d9b:	05 00 00 40 00       	add    $0x400000,%eax
c0105da0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105da6:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105dab:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105dae:	e9 4c 01 00 00       	jmp    c0105eff <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105db6:	8b 00                	mov    (%eax),%eax
c0105db8:	83 e0 01             	and    $0x1,%eax
c0105dbb:	85 c0                	test   %eax,%eax
c0105dbd:	0f 84 35 01 00 00    	je     c0105ef8 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105dc3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105dca:	00 
c0105dcb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dce:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dd5:	89 04 24             	mov    %eax,(%esp)
c0105dd8:	e8 2b fb ff ff       	call   c0105908 <get_pte>
c0105ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105de0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105de4:	75 0a                	jne    c0105df0 <copy_range+0xfb>
                return -E_NO_MEM;
c0105de6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105deb:	e9 26 01 00 00       	jmp    c0105f16 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105df3:	8b 00                	mov    (%eax),%eax
c0105df5:	83 e0 07             	and    $0x7,%eax
c0105df8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dfe:	8b 00                	mov    (%eax),%eax
c0105e00:	89 04 24             	mov    %eax,(%esp)
c0105e03:	e8 c1 f1 ff ff       	call   c0104fc9 <pte2page>
c0105e08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105e0b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105e12:	e8 0d f4 ff ff       	call   c0105224 <alloc_pages>
c0105e17:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105e1a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105e1e:	75 24                	jne    c0105e44 <copy_range+0x14f>
c0105e20:	c7 44 24 0c 99 67 11 	movl   $0xc0116799,0xc(%esp)
c0105e27:	c0 
c0105e28:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105e2f:	c0 
c0105e30:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c0105e37:	00 
c0105e38:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105e3f:	e8 9a b0 ff ff       	call   c0100ede <__panic>
        assert(npage!=NULL);
c0105e44:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e48:	75 24                	jne    c0105e6e <copy_range+0x179>
c0105e4a:	c7 44 24 0c a4 67 11 	movl   $0xc01167a4,0xc(%esp)
c0105e51:	c0 
c0105e52:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105e59:	c0 
c0105e5a:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105e61:	00 
c0105e62:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105e69:	e8 70 b0 ff ff       	call   c0100ede <__panic>
        int ret=0;
c0105e6e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105e75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e78:	89 04 24             	mov    %eax,(%esp)
c0105e7b:	e8 f5 f0 ff ff       	call   c0104f75 <page2kva>
c0105e80:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105e83:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e86:	89 04 24             	mov    %eax,(%esp)
c0105e89:	e8 e7 f0 ff ff       	call   c0104f75 <page2kva>
c0105e8e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105e91:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e98:	00 
c0105e99:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ea0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105ea3:	89 04 24             	mov    %eax,(%esp)
c0105ea6:	e8 9e f8 00 00       	call   c0115749 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105eab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105eae:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105eb2:	8b 45 10             	mov    0x10(%ebp),%eax
c0105eb5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105eb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ebc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ec0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec3:	89 04 24             	mov    %eax,(%esp)
c0105ec6:	e8 91 00 00 00       	call   c0105f5c <page_insert>
c0105ecb:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105ece:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105ed2:	74 24                	je     c0105ef8 <copy_range+0x203>
c0105ed4:	c7 44 24 0c b0 67 11 	movl   $0xc01167b0,0xc(%esp)
c0105edb:	c0 
c0105edc:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0105ee3:	c0 
c0105ee4:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0105eeb:	00 
c0105eec:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0105ef3:	e8 e6 af ff ff       	call   c0100ede <__panic>
        }
        start += PGSIZE;
c0105ef8:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105eff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105f03:	74 0c                	je     c0105f11 <copy_range+0x21c>
c0105f05:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f08:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105f0b:	0f 82 64 fe ff ff    	jb     c0105d75 <copy_range+0x80>
    return 0;
c0105f11:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f16:	c9                   	leave  
c0105f17:	c3                   	ret    

c0105f18 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105f18:	55                   	push   %ebp
c0105f19:	89 e5                	mov    %esp,%ebp
c0105f1b:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105f1e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105f25:	00 
c0105f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f30:	89 04 24             	mov    %eax,(%esp)
c0105f33:	e8 d0 f9 ff ff       	call   c0105908 <get_pte>
c0105f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105f3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f3f:	74 19                	je     c0105f5a <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f44:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f52:	89 04 24             	mov    %eax,(%esp)
c0105f55:	e8 3f fb ff ff       	call   c0105a99 <page_remove_pte>
    }
}
c0105f5a:	c9                   	leave  
c0105f5b:	c3                   	ret    

c0105f5c <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105f5c:	55                   	push   %ebp
c0105f5d:	89 e5                	mov    %esp,%ebp
c0105f5f:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105f62:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105f69:	00 
c0105f6a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f74:	89 04 24             	mov    %eax,(%esp)
c0105f77:	e8 8c f9 ff ff       	call   c0105908 <get_pte>
c0105f7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f83:	75 0a                	jne    c0105f8f <page_insert+0x33>
        return -E_NO_MEM;
c0105f85:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f8a:	e9 84 00 00 00       	jmp    c0106013 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f92:	89 04 24             	mov    %eax,(%esp)
c0105f95:	e8 9c f0 ff ff       	call   c0105036 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f9d:	8b 00                	mov    (%eax),%eax
c0105f9f:	83 e0 01             	and    $0x1,%eax
c0105fa2:	85 c0                	test   %eax,%eax
c0105fa4:	74 3e                	je     c0105fe4 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fa9:	8b 00                	mov    (%eax),%eax
c0105fab:	89 04 24             	mov    %eax,(%esp)
c0105fae:	e8 16 f0 ff ff       	call   c0104fc9 <pte2page>
c0105fb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fb9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105fbc:	75 0d                	jne    c0105fcb <page_insert+0x6f>
            page_ref_dec(page);
c0105fbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fc1:	89 04 24             	mov    %eax,(%esp)
c0105fc4:	e8 84 f0 ff ff       	call   c010504d <page_ref_dec>
c0105fc9:	eb 19                	jmp    c0105fe4 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fce:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fd2:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fd5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fdc:	89 04 24             	mov    %eax,(%esp)
c0105fdf:	e8 b5 fa ff ff       	call   c0105a99 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fe7:	89 04 24             	mov    %eax,(%esp)
c0105fea:	e8 2b ef ff ff       	call   c0104f1a <page2pa>
c0105fef:	0b 45 14             	or     0x14(%ebp),%eax
c0105ff2:	83 c8 01             	or     $0x1,%eax
c0105ff5:	89 c2                	mov    %eax,%edx
c0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ffa:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105ffc:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106003:	8b 45 08             	mov    0x8(%ebp),%eax
c0106006:	89 04 24             	mov    %eax,(%esp)
c0106009:	e8 07 00 00 00       	call   c0106015 <tlb_invalidate>
    return 0;
c010600e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106013:	c9                   	leave  
c0106014:	c3                   	ret    

c0106015 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0106015:	55                   	push   %ebp
c0106016:	89 e5                	mov    %esp,%ebp
c0106018:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c010601b:	0f 20 d8             	mov    %cr3,%eax
c010601e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0106021:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0106024:	89 c2                	mov    %eax,%edx
c0106026:	8b 45 08             	mov    0x8(%ebp),%eax
c0106029:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010602c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106033:	77 23                	ja     c0106058 <tlb_invalidate+0x43>
c0106035:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106038:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010603c:	c7 44 24 08 d4 66 11 	movl   $0xc01166d4,0x8(%esp)
c0106043:	c0 
c0106044:	c7 44 24 04 43 02 00 	movl   $0x243,0x4(%esp)
c010604b:	00 
c010604c:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106053:	e8 86 ae ff ff       	call   c0100ede <__panic>
c0106058:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010605b:	05 00 00 00 40       	add    $0x40000000,%eax
c0106060:	39 c2                	cmp    %eax,%edx
c0106062:	75 0c                	jne    c0106070 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0106064:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106067:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010606a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010606d:	0f 01 38             	invlpg (%eax)
    }
}
c0106070:	c9                   	leave  
c0106071:	c3                   	ret    

c0106072 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106072:	55                   	push   %ebp
c0106073:	89 e5                	mov    %esp,%ebp
c0106075:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106078:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010607f:	e8 a0 f1 ff ff       	call   c0105224 <alloc_pages>
c0106084:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106087:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010608b:	0f 84 b0 00 00 00    	je     c0106141 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106091:	8b 45 10             	mov    0x10(%ebp),%eax
c0106094:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106098:	8b 45 0c             	mov    0xc(%ebp),%eax
c010609b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010609f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01060a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01060a9:	89 04 24             	mov    %eax,(%esp)
c01060ac:	e8 ab fe ff ff       	call   c0105f5c <page_insert>
c01060b1:	85 c0                	test   %eax,%eax
c01060b3:	74 1a                	je     c01060cf <pgdir_alloc_page+0x5d>
            free_page(page);
c01060b5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01060bc:	00 
c01060bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060c0:	89 04 24             	mov    %eax,(%esp)
c01060c3:	e8 c7 f1 ff ff       	call   c010528f <free_pages>
            return NULL;
c01060c8:	b8 00 00 00 00       	mov    $0x0,%eax
c01060cd:	eb 75                	jmp    c0106144 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c01060cf:	a1 2c 30 15 c0       	mov    0xc015302c,%eax
c01060d4:	85 c0                	test   %eax,%eax
c01060d6:	74 69                	je     c0106141 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01060d8:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c01060dd:	85 c0                	test   %eax,%eax
c01060df:	74 60                	je     c0106141 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01060e1:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c01060e6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01060ed:	00 
c01060ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060f1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01060f5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060fc:	89 04 24             	mov    %eax,(%esp)
c01060ff:	e8 7b 0e 00 00       	call   c0106f7f <swap_map_swappable>
                page->pra_vaddr=la;
c0106104:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106107:	8b 55 0c             	mov    0xc(%ebp),%edx
c010610a:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010610d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106110:	89 04 24             	mov    %eax,(%esp)
c0106113:	e8 07 ef ff ff       	call   c010501f <page_ref>
c0106118:	83 f8 01             	cmp    $0x1,%eax
c010611b:	74 24                	je     c0106141 <pgdir_alloc_page+0xcf>
c010611d:	c7 44 24 0c b9 67 11 	movl   $0xc01167b9,0xc(%esp)
c0106124:	c0 
c0106125:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c010612c:	c0 
c010612d:	c7 44 24 04 57 02 00 	movl   $0x257,0x4(%esp)
c0106134:	00 
c0106135:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010613c:	e8 9d ad ff ff       	call   c0100ede <__panic>
            }
        }

    }

    return page;
c0106141:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106144:	c9                   	leave  
c0106145:	c3                   	ret    

c0106146 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106146:	55                   	push   %ebp
c0106147:	89 e5                	mov    %esp,%ebp
c0106149:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010614c:	a1 40 61 15 c0       	mov    0xc0156140,%eax
c0106151:	8b 40 18             	mov    0x18(%eax),%eax
c0106154:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106156:	c7 04 24 d0 67 11 c0 	movl   $0xc01167d0,(%esp)
c010615d:	e8 0f a2 ff ff       	call   c0100371 <cprintf>
}
c0106162:	c9                   	leave  
c0106163:	c3                   	ret    

c0106164 <check_pgdir>:

static void
check_pgdir(void) {
c0106164:	55                   	push   %ebp
c0106165:	89 e5                	mov    %esp,%ebp
c0106167:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010616a:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010616f:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106174:	76 24                	jbe    c010619a <check_pgdir+0x36>
c0106176:	c7 44 24 0c ef 67 11 	movl   $0xc01167ef,0xc(%esp)
c010617d:	c0 
c010617e:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106185:	c0 
c0106186:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
c010618d:	00 
c010618e:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106195:	e8 44 ad ff ff       	call   c0100ede <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010619a:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010619f:	85 c0                	test   %eax,%eax
c01061a1:	74 0e                	je     c01061b1 <check_pgdir+0x4d>
c01061a3:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01061a8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01061ad:	85 c0                	test   %eax,%eax
c01061af:	74 24                	je     c01061d5 <check_pgdir+0x71>
c01061b1:	c7 44 24 0c 0c 68 11 	movl   $0xc011680c,0xc(%esp)
c01061b8:	c0 
c01061b9:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01061c0:	c0 
c01061c1:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
c01061c8:	00 
c01061c9:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01061d0:	e8 09 ad ff ff       	call   c0100ede <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01061d5:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01061da:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061e1:	00 
c01061e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061e9:	00 
c01061ea:	89 04 24             	mov    %eax,(%esp)
c01061ed:	e8 4e f8 ff ff       	call   c0105a40 <get_page>
c01061f2:	85 c0                	test   %eax,%eax
c01061f4:	74 24                	je     c010621a <check_pgdir+0xb6>
c01061f6:	c7 44 24 0c 44 68 11 	movl   $0xc0116844,0xc(%esp)
c01061fd:	c0 
c01061fe:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106205:	c0 
c0106206:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c010620d:	00 
c010620e:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106215:	e8 c4 ac ff ff       	call   c0100ede <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010621a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106221:	e8 fe ef ff ff       	call   c0105224 <alloc_pages>
c0106226:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0106229:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010622e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106235:	00 
c0106236:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010623d:	00 
c010623e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106241:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106245:	89 04 24             	mov    %eax,(%esp)
c0106248:	e8 0f fd ff ff       	call   c0105f5c <page_insert>
c010624d:	85 c0                	test   %eax,%eax
c010624f:	74 24                	je     c0106275 <check_pgdir+0x111>
c0106251:	c7 44 24 0c 6c 68 11 	movl   $0xc011686c,0xc(%esp)
c0106258:	c0 
c0106259:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106260:	c0 
c0106261:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c0106268:	00 
c0106269:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106270:	e8 69 ac ff ff       	call   c0100ede <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106275:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010627a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106281:	00 
c0106282:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106289:	00 
c010628a:	89 04 24             	mov    %eax,(%esp)
c010628d:	e8 76 f6 ff ff       	call   c0105908 <get_pte>
c0106292:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106295:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106299:	75 24                	jne    c01062bf <check_pgdir+0x15b>
c010629b:	c7 44 24 0c 98 68 11 	movl   $0xc0116898,0xc(%esp)
c01062a2:	c0 
c01062a3:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01062aa:	c0 
c01062ab:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c01062b2:	00 
c01062b3:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01062ba:	e8 1f ac ff ff       	call   c0100ede <__panic>
    assert(pte2page(*ptep) == p1);
c01062bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062c2:	8b 00                	mov    (%eax),%eax
c01062c4:	89 04 24             	mov    %eax,(%esp)
c01062c7:	e8 fd ec ff ff       	call   c0104fc9 <pte2page>
c01062cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01062cf:	74 24                	je     c01062f5 <check_pgdir+0x191>
c01062d1:	c7 44 24 0c c5 68 11 	movl   $0xc01168c5,0xc(%esp)
c01062d8:	c0 
c01062d9:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01062e0:	c0 
c01062e1:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c01062e8:	00 
c01062e9:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01062f0:	e8 e9 ab ff ff       	call   c0100ede <__panic>
    assert(page_ref(p1) == 1);
c01062f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062f8:	89 04 24             	mov    %eax,(%esp)
c01062fb:	e8 1f ed ff ff       	call   c010501f <page_ref>
c0106300:	83 f8 01             	cmp    $0x1,%eax
c0106303:	74 24                	je     c0106329 <check_pgdir+0x1c5>
c0106305:	c7 44 24 0c db 68 11 	movl   $0xc01168db,0xc(%esp)
c010630c:	c0 
c010630d:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106314:	c0 
c0106315:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c010631c:	00 
c010631d:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106324:	e8 b5 ab ff ff       	call   c0100ede <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0106329:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010632e:	8b 00                	mov    (%eax),%eax
c0106330:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106335:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106338:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010633b:	c1 e8 0c             	shr    $0xc,%eax
c010633e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106341:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0106346:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106349:	72 23                	jb     c010636e <check_pgdir+0x20a>
c010634b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010634e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106352:	c7 44 24 08 30 66 11 	movl   $0xc0116630,0x8(%esp)
c0106359:	c0 
c010635a:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
c0106361:	00 
c0106362:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106369:	e8 70 ab ff ff       	call   c0100ede <__panic>
c010636e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106371:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106376:	83 c0 04             	add    $0x4,%eax
c0106379:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010637c:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106381:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106388:	00 
c0106389:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106390:	00 
c0106391:	89 04 24             	mov    %eax,(%esp)
c0106394:	e8 6f f5 ff ff       	call   c0105908 <get_pte>
c0106399:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010639c:	74 24                	je     c01063c2 <check_pgdir+0x25e>
c010639e:	c7 44 24 0c f0 68 11 	movl   $0xc01168f0,0xc(%esp)
c01063a5:	c0 
c01063a6:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01063ad:	c0 
c01063ae:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c01063b5:	00 
c01063b6:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01063bd:	e8 1c ab ff ff       	call   c0100ede <__panic>

    p2 = alloc_page();
c01063c2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01063c9:	e8 56 ee ff ff       	call   c0105224 <alloc_pages>
c01063ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01063d1:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01063d6:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01063dd:	00 
c01063de:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01063e5:	00 
c01063e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01063ed:	89 04 24             	mov    %eax,(%esp)
c01063f0:	e8 67 fb ff ff       	call   c0105f5c <page_insert>
c01063f5:	85 c0                	test   %eax,%eax
c01063f7:	74 24                	je     c010641d <check_pgdir+0x2b9>
c01063f9:	c7 44 24 0c 18 69 11 	movl   $0xc0116918,0xc(%esp)
c0106400:	c0 
c0106401:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106408:	c0 
c0106409:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c0106410:	00 
c0106411:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106418:	e8 c1 aa ff ff       	call   c0100ede <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010641d:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106422:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106429:	00 
c010642a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106431:	00 
c0106432:	89 04 24             	mov    %eax,(%esp)
c0106435:	e8 ce f4 ff ff       	call   c0105908 <get_pte>
c010643a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010643d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106441:	75 24                	jne    c0106467 <check_pgdir+0x303>
c0106443:	c7 44 24 0c 50 69 11 	movl   $0xc0116950,0xc(%esp)
c010644a:	c0 
c010644b:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106452:	c0 
c0106453:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010645a:	00 
c010645b:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106462:	e8 77 aa ff ff       	call   c0100ede <__panic>
    assert(*ptep & PTE_U);
c0106467:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010646a:	8b 00                	mov    (%eax),%eax
c010646c:	83 e0 04             	and    $0x4,%eax
c010646f:	85 c0                	test   %eax,%eax
c0106471:	75 24                	jne    c0106497 <check_pgdir+0x333>
c0106473:	c7 44 24 0c 80 69 11 	movl   $0xc0116980,0xc(%esp)
c010647a:	c0 
c010647b:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106482:	c0 
c0106483:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010648a:	00 
c010648b:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106492:	e8 47 aa ff ff       	call   c0100ede <__panic>
    assert(*ptep & PTE_W);
c0106497:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010649a:	8b 00                	mov    (%eax),%eax
c010649c:	83 e0 02             	and    $0x2,%eax
c010649f:	85 c0                	test   %eax,%eax
c01064a1:	75 24                	jne    c01064c7 <check_pgdir+0x363>
c01064a3:	c7 44 24 0c 8e 69 11 	movl   $0xc011698e,0xc(%esp)
c01064aa:	c0 
c01064ab:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01064b2:	c0 
c01064b3:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c01064ba:	00 
c01064bb:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01064c2:	e8 17 aa ff ff       	call   c0100ede <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01064c7:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01064cc:	8b 00                	mov    (%eax),%eax
c01064ce:	83 e0 04             	and    $0x4,%eax
c01064d1:	85 c0                	test   %eax,%eax
c01064d3:	75 24                	jne    c01064f9 <check_pgdir+0x395>
c01064d5:	c7 44 24 0c 9c 69 11 	movl   $0xc011699c,0xc(%esp)
c01064dc:	c0 
c01064dd:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01064e4:	c0 
c01064e5:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c01064ec:	00 
c01064ed:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01064f4:	e8 e5 a9 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p2) == 1);
c01064f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064fc:	89 04 24             	mov    %eax,(%esp)
c01064ff:	e8 1b eb ff ff       	call   c010501f <page_ref>
c0106504:	83 f8 01             	cmp    $0x1,%eax
c0106507:	74 24                	je     c010652d <check_pgdir+0x3c9>
c0106509:	c7 44 24 0c b2 69 11 	movl   $0xc01169b2,0xc(%esp)
c0106510:	c0 
c0106511:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106518:	c0 
c0106519:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0106520:	00 
c0106521:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106528:	e8 b1 a9 ff ff       	call   c0100ede <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c010652d:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106532:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106539:	00 
c010653a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106541:	00 
c0106542:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106545:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106549:	89 04 24             	mov    %eax,(%esp)
c010654c:	e8 0b fa ff ff       	call   c0105f5c <page_insert>
c0106551:	85 c0                	test   %eax,%eax
c0106553:	74 24                	je     c0106579 <check_pgdir+0x415>
c0106555:	c7 44 24 0c c4 69 11 	movl   $0xc01169c4,0xc(%esp)
c010655c:	c0 
c010655d:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106564:	c0 
c0106565:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c010656c:	00 
c010656d:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106574:	e8 65 a9 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p1) == 2);
c0106579:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010657c:	89 04 24             	mov    %eax,(%esp)
c010657f:	e8 9b ea ff ff       	call   c010501f <page_ref>
c0106584:	83 f8 02             	cmp    $0x2,%eax
c0106587:	74 24                	je     c01065ad <check_pgdir+0x449>
c0106589:	c7 44 24 0c f0 69 11 	movl   $0xc01169f0,0xc(%esp)
c0106590:	c0 
c0106591:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106598:	c0 
c0106599:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c01065a0:	00 
c01065a1:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01065a8:	e8 31 a9 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p2) == 0);
c01065ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b0:	89 04 24             	mov    %eax,(%esp)
c01065b3:	e8 67 ea ff ff       	call   c010501f <page_ref>
c01065b8:	85 c0                	test   %eax,%eax
c01065ba:	74 24                	je     c01065e0 <check_pgdir+0x47c>
c01065bc:	c7 44 24 0c 02 6a 11 	movl   $0xc0116a02,0xc(%esp)
c01065c3:	c0 
c01065c4:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01065cb:	c0 
c01065cc:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c01065d3:	00 
c01065d4:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01065db:	e8 fe a8 ff ff       	call   c0100ede <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01065e0:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01065e5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01065ec:	00 
c01065ed:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01065f4:	00 
c01065f5:	89 04 24             	mov    %eax,(%esp)
c01065f8:	e8 0b f3 ff ff       	call   c0105908 <get_pte>
c01065fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106600:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106604:	75 24                	jne    c010662a <check_pgdir+0x4c6>
c0106606:	c7 44 24 0c 50 69 11 	movl   $0xc0116950,0xc(%esp)
c010660d:	c0 
c010660e:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106615:	c0 
c0106616:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010661d:	00 
c010661e:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106625:	e8 b4 a8 ff ff       	call   c0100ede <__panic>
    assert(pte2page(*ptep) == p1);
c010662a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010662d:	8b 00                	mov    (%eax),%eax
c010662f:	89 04 24             	mov    %eax,(%esp)
c0106632:	e8 92 e9 ff ff       	call   c0104fc9 <pte2page>
c0106637:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010663a:	74 24                	je     c0106660 <check_pgdir+0x4fc>
c010663c:	c7 44 24 0c c5 68 11 	movl   $0xc01168c5,0xc(%esp)
c0106643:	c0 
c0106644:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c010664b:	c0 
c010664c:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106653:	00 
c0106654:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010665b:	e8 7e a8 ff ff       	call   c0100ede <__panic>
    assert((*ptep & PTE_U) == 0);
c0106660:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106663:	8b 00                	mov    (%eax),%eax
c0106665:	83 e0 04             	and    $0x4,%eax
c0106668:	85 c0                	test   %eax,%eax
c010666a:	74 24                	je     c0106690 <check_pgdir+0x52c>
c010666c:	c7 44 24 0c 14 6a 11 	movl   $0xc0116a14,0xc(%esp)
c0106673:	c0 
c0106674:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c010667b:	c0 
c010667c:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0106683:	00 
c0106684:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010668b:	e8 4e a8 ff ff       	call   c0100ede <__panic>

    page_remove(boot_pgdir, 0x0);
c0106690:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106695:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010669c:	00 
c010669d:	89 04 24             	mov    %eax,(%esp)
c01066a0:	e8 73 f8 ff ff       	call   c0105f18 <page_remove>
    assert(page_ref(p1) == 1);
c01066a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066a8:	89 04 24             	mov    %eax,(%esp)
c01066ab:	e8 6f e9 ff ff       	call   c010501f <page_ref>
c01066b0:	83 f8 01             	cmp    $0x1,%eax
c01066b3:	74 24                	je     c01066d9 <check_pgdir+0x575>
c01066b5:	c7 44 24 0c db 68 11 	movl   $0xc01168db,0xc(%esp)
c01066bc:	c0 
c01066bd:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01066c4:	c0 
c01066c5:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01066cc:	00 
c01066cd:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01066d4:	e8 05 a8 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p2) == 0);
c01066d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066dc:	89 04 24             	mov    %eax,(%esp)
c01066df:	e8 3b e9 ff ff       	call   c010501f <page_ref>
c01066e4:	85 c0                	test   %eax,%eax
c01066e6:	74 24                	je     c010670c <check_pgdir+0x5a8>
c01066e8:	c7 44 24 0c 02 6a 11 	movl   $0xc0116a02,0xc(%esp)
c01066ef:	c0 
c01066f0:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01066f7:	c0 
c01066f8:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c01066ff:	00 
c0106700:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106707:	e8 d2 a7 ff ff       	call   c0100ede <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010670c:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106711:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106718:	00 
c0106719:	89 04 24             	mov    %eax,(%esp)
c010671c:	e8 f7 f7 ff ff       	call   c0105f18 <page_remove>
    assert(page_ref(p1) == 0);
c0106721:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106724:	89 04 24             	mov    %eax,(%esp)
c0106727:	e8 f3 e8 ff ff       	call   c010501f <page_ref>
c010672c:	85 c0                	test   %eax,%eax
c010672e:	74 24                	je     c0106754 <check_pgdir+0x5f0>
c0106730:	c7 44 24 0c 29 6a 11 	movl   $0xc0116a29,0xc(%esp)
c0106737:	c0 
c0106738:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c010673f:	c0 
c0106740:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c0106747:	00 
c0106748:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010674f:	e8 8a a7 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p2) == 0);
c0106754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106757:	89 04 24             	mov    %eax,(%esp)
c010675a:	e8 c0 e8 ff ff       	call   c010501f <page_ref>
c010675f:	85 c0                	test   %eax,%eax
c0106761:	74 24                	je     c0106787 <check_pgdir+0x623>
c0106763:	c7 44 24 0c 02 6a 11 	movl   $0xc0116a02,0xc(%esp)
c010676a:	c0 
c010676b:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106772:	c0 
c0106773:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c010677a:	00 
c010677b:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106782:	e8 57 a7 ff ff       	call   c0100ede <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106787:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010678c:	8b 00                	mov    (%eax),%eax
c010678e:	89 04 24             	mov    %eax,(%esp)
c0106791:	e8 71 e8 ff ff       	call   c0105007 <pde2page>
c0106796:	89 04 24             	mov    %eax,(%esp)
c0106799:	e8 81 e8 ff ff       	call   c010501f <page_ref>
c010679e:	83 f8 01             	cmp    $0x1,%eax
c01067a1:	74 24                	je     c01067c7 <check_pgdir+0x663>
c01067a3:	c7 44 24 0c 3c 6a 11 	movl   $0xc0116a3c,0xc(%esp)
c01067aa:	c0 
c01067ab:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01067b2:	c0 
c01067b3:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01067ba:	00 
c01067bb:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01067c2:	e8 17 a7 ff ff       	call   c0100ede <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01067c7:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01067cc:	8b 00                	mov    (%eax),%eax
c01067ce:	89 04 24             	mov    %eax,(%esp)
c01067d1:	e8 31 e8 ff ff       	call   c0105007 <pde2page>
c01067d6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01067dd:	00 
c01067de:	89 04 24             	mov    %eax,(%esp)
c01067e1:	e8 a9 ea ff ff       	call   c010528f <free_pages>
    boot_pgdir[0] = 0;
c01067e6:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01067eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01067f1:	c7 04 24 63 6a 11 c0 	movl   $0xc0116a63,(%esp)
c01067f8:	e8 74 9b ff ff       	call   c0100371 <cprintf>
}
c01067fd:	c9                   	leave  
c01067fe:	c3                   	ret    

c01067ff <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01067ff:	55                   	push   %ebp
c0106800:	89 e5                	mov    %esp,%ebp
c0106802:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106805:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010680c:	e9 ca 00 00 00       	jmp    c01068db <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106811:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106814:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106817:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010681a:	c1 e8 0c             	shr    $0xc,%eax
c010681d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106820:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0106825:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106828:	72 23                	jb     c010684d <check_boot_pgdir+0x4e>
c010682a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010682d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106831:	c7 44 24 08 30 66 11 	movl   $0xc0116630,0x8(%esp)
c0106838:	c0 
c0106839:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0106840:	00 
c0106841:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106848:	e8 91 a6 ff ff       	call   c0100ede <__panic>
c010684d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106850:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106855:	89 c2                	mov    %eax,%edx
c0106857:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010685c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106863:	00 
c0106864:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106868:	89 04 24             	mov    %eax,(%esp)
c010686b:	e8 98 f0 ff ff       	call   c0105908 <get_pte>
c0106870:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106873:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106877:	75 24                	jne    c010689d <check_boot_pgdir+0x9e>
c0106879:	c7 44 24 0c 80 6a 11 	movl   $0xc0116a80,0xc(%esp)
c0106880:	c0 
c0106881:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106888:	c0 
c0106889:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0106890:	00 
c0106891:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106898:	e8 41 a6 ff ff       	call   c0100ede <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010689d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01068a0:	8b 00                	mov    (%eax),%eax
c01068a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01068a7:	89 c2                	mov    %eax,%edx
c01068a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068ac:	39 c2                	cmp    %eax,%edx
c01068ae:	74 24                	je     c01068d4 <check_boot_pgdir+0xd5>
c01068b0:	c7 44 24 0c bd 6a 11 	movl   $0xc0116abd,0xc(%esp)
c01068b7:	c0 
c01068b8:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01068bf:	c0 
c01068c0:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01068c7:	00 
c01068c8:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01068cf:	e8 0a a6 ff ff       	call   c0100ede <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01068d4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01068db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01068de:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c01068e3:	39 c2                	cmp    %eax,%edx
c01068e5:	0f 82 26 ff ff ff    	jb     c0106811 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01068eb:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01068f0:	05 ac 0f 00 00       	add    $0xfac,%eax
c01068f5:	8b 00                	mov    (%eax),%eax
c01068f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01068fc:	89 c2                	mov    %eax,%edx
c01068fe:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106903:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106906:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010690d:	77 23                	ja     c0106932 <check_boot_pgdir+0x133>
c010690f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106912:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106916:	c7 44 24 08 d4 66 11 	movl   $0xc01166d4,0x8(%esp)
c010691d:	c0 
c010691e:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0106925:	00 
c0106926:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010692d:	e8 ac a5 ff ff       	call   c0100ede <__panic>
c0106932:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106935:	05 00 00 00 40       	add    $0x40000000,%eax
c010693a:	39 c2                	cmp    %eax,%edx
c010693c:	74 24                	je     c0106962 <check_boot_pgdir+0x163>
c010693e:	c7 44 24 0c d4 6a 11 	movl   $0xc0116ad4,0xc(%esp)
c0106945:	c0 
c0106946:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c010694d:	c0 
c010694e:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0106955:	00 
c0106956:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010695d:	e8 7c a5 ff ff       	call   c0100ede <__panic>

    assert(boot_pgdir[0] == 0);
c0106962:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106967:	8b 00                	mov    (%eax),%eax
c0106969:	85 c0                	test   %eax,%eax
c010696b:	74 24                	je     c0106991 <check_boot_pgdir+0x192>
c010696d:	c7 44 24 0c 08 6b 11 	movl   $0xc0116b08,0xc(%esp)
c0106974:	c0 
c0106975:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c010697c:	c0 
c010697d:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0106984:	00 
c0106985:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c010698c:	e8 4d a5 ff ff       	call   c0100ede <__panic>

    struct Page *p;
    p = alloc_page();
c0106991:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106998:	e8 87 e8 ff ff       	call   c0105224 <alloc_pages>
c010699d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01069a0:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c01069a5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01069ac:	00 
c01069ad:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c01069b4:	00 
c01069b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069bc:	89 04 24             	mov    %eax,(%esp)
c01069bf:	e8 98 f5 ff ff       	call   c0105f5c <page_insert>
c01069c4:	85 c0                	test   %eax,%eax
c01069c6:	74 24                	je     c01069ec <check_boot_pgdir+0x1ed>
c01069c8:	c7 44 24 0c 1c 6b 11 	movl   $0xc0116b1c,0xc(%esp)
c01069cf:	c0 
c01069d0:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c01069d7:	c0 
c01069d8:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c01069df:	00 
c01069e0:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c01069e7:	e8 f2 a4 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p) == 1);
c01069ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069ef:	89 04 24             	mov    %eax,(%esp)
c01069f2:	e8 28 e6 ff ff       	call   c010501f <page_ref>
c01069f7:	83 f8 01             	cmp    $0x1,%eax
c01069fa:	74 24                	je     c0106a20 <check_boot_pgdir+0x221>
c01069fc:	c7 44 24 0c 4a 6b 11 	movl   $0xc0116b4a,0xc(%esp)
c0106a03:	c0 
c0106a04:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106a0b:	c0 
c0106a0c:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c0106a13:	00 
c0106a14:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106a1b:	e8 be a4 ff ff       	call   c0100ede <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106a20:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106a25:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106a2c:	00 
c0106a2d:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106a34:	00 
c0106a35:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a38:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a3c:	89 04 24             	mov    %eax,(%esp)
c0106a3f:	e8 18 f5 ff ff       	call   c0105f5c <page_insert>
c0106a44:	85 c0                	test   %eax,%eax
c0106a46:	74 24                	je     c0106a6c <check_boot_pgdir+0x26d>
c0106a48:	c7 44 24 0c 5c 6b 11 	movl   $0xc0116b5c,0xc(%esp)
c0106a4f:	c0 
c0106a50:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106a57:	c0 
c0106a58:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c0106a5f:	00 
c0106a60:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106a67:	e8 72 a4 ff ff       	call   c0100ede <__panic>
    assert(page_ref(p) == 2);
c0106a6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a6f:	89 04 24             	mov    %eax,(%esp)
c0106a72:	e8 a8 e5 ff ff       	call   c010501f <page_ref>
c0106a77:	83 f8 02             	cmp    $0x2,%eax
c0106a7a:	74 24                	je     c0106aa0 <check_boot_pgdir+0x2a1>
c0106a7c:	c7 44 24 0c 93 6b 11 	movl   $0xc0116b93,0xc(%esp)
c0106a83:	c0 
c0106a84:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106a8b:	c0 
c0106a8c:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c0106a93:	00 
c0106a94:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106a9b:	e8 3e a4 ff ff       	call   c0100ede <__panic>

    const char *str = "ucore: Hello world!!";
c0106aa0:	c7 45 dc a4 6b 11 c0 	movl   $0xc0116ba4,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106aa7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106aaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106aae:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106ab5:	e8 d6 e8 00 00       	call   c0115390 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106aba:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106ac1:	00 
c0106ac2:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106ac9:	e8 3b e9 00 00       	call   c0115409 <strcmp>
c0106ace:	85 c0                	test   %eax,%eax
c0106ad0:	74 24                	je     c0106af6 <check_boot_pgdir+0x2f7>
c0106ad2:	c7 44 24 0c bc 6b 11 	movl   $0xc0116bbc,0xc(%esp)
c0106ad9:	c0 
c0106ada:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106ae1:	c0 
c0106ae2:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c0106ae9:	00 
c0106aea:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106af1:	e8 e8 a3 ff ff       	call   c0100ede <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106af6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106af9:	89 04 24             	mov    %eax,(%esp)
c0106afc:	e8 74 e4 ff ff       	call   c0104f75 <page2kva>
c0106b01:	05 00 01 00 00       	add    $0x100,%eax
c0106b06:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106b09:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106b10:	e8 fc e7 00 00       	call   c0115311 <strlen>
c0106b15:	85 c0                	test   %eax,%eax
c0106b17:	74 24                	je     c0106b3d <check_boot_pgdir+0x33e>
c0106b19:	c7 44 24 0c f4 6b 11 	movl   $0xc0116bf4,0xc(%esp)
c0106b20:	c0 
c0106b21:	c7 44 24 08 1d 67 11 	movl   $0xc011671d,0x8(%esp)
c0106b28:	c0 
c0106b29:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c0106b30:	00 
c0106b31:	c7 04 24 f8 66 11 c0 	movl   $0xc01166f8,(%esp)
c0106b38:	e8 a1 a3 ff ff       	call   c0100ede <__panic>

    free_page(p);
c0106b3d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b44:	00 
c0106b45:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b48:	89 04 24             	mov    %eax,(%esp)
c0106b4b:	e8 3f e7 ff ff       	call   c010528f <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106b50:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106b55:	8b 00                	mov    (%eax),%eax
c0106b57:	89 04 24             	mov    %eax,(%esp)
c0106b5a:	e8 a8 e4 ff ff       	call   c0105007 <pde2page>
c0106b5f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b66:	00 
c0106b67:	89 04 24             	mov    %eax,(%esp)
c0106b6a:	e8 20 e7 ff ff       	call   c010528f <free_pages>
    boot_pgdir[0] = 0;
c0106b6f:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106b74:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    
    tlb_invalidate(boot_pgdir, 0x100);
c0106b7a:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106b7f:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0106b86:	00 
c0106b87:	89 04 24             	mov    %eax,(%esp)
c0106b8a:	e8 86 f4 ff ff       	call   c0106015 <tlb_invalidate>
    tlb_invalidate(boot_pgdir, 0x100+PGSIZE);
c0106b8f:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c0106b94:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106b9b:	00 
c0106b9c:	89 04 24             	mov    %eax,(%esp)
c0106b9f:	e8 71 f4 ff ff       	call   c0106015 <tlb_invalidate>
    
    cprintf("check_boot_pgdir() succeeded!\n");
c0106ba4:	c7 04 24 18 6c 11 c0 	movl   $0xc0116c18,(%esp)
c0106bab:	e8 c1 97 ff ff       	call   c0100371 <cprintf>
}
c0106bb0:	c9                   	leave  
c0106bb1:	c3                   	ret    

c0106bb2 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106bb2:	55                   	push   %ebp
c0106bb3:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106bb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bb8:	83 e0 04             	and    $0x4,%eax
c0106bbb:	85 c0                	test   %eax,%eax
c0106bbd:	74 07                	je     c0106bc6 <perm2str+0x14>
c0106bbf:	b8 75 00 00 00       	mov    $0x75,%eax
c0106bc4:	eb 05                	jmp    c0106bcb <perm2str+0x19>
c0106bc6:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106bcb:	a2 28 30 15 c0       	mov    %al,0xc0153028
    str[1] = 'r';
c0106bd0:	c6 05 29 30 15 c0 72 	movb   $0x72,0xc0153029
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106bd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bda:	83 e0 02             	and    $0x2,%eax
c0106bdd:	85 c0                	test   %eax,%eax
c0106bdf:	74 07                	je     c0106be8 <perm2str+0x36>
c0106be1:	b8 77 00 00 00       	mov    $0x77,%eax
c0106be6:	eb 05                	jmp    c0106bed <perm2str+0x3b>
c0106be8:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106bed:	a2 2a 30 15 c0       	mov    %al,0xc015302a
    str[3] = '\0';
c0106bf2:	c6 05 2b 30 15 c0 00 	movb   $0x0,0xc015302b
    return str;
c0106bf9:	b8 28 30 15 c0       	mov    $0xc0153028,%eax
}
c0106bfe:	5d                   	pop    %ebp
c0106bff:	c3                   	ret    

c0106c00 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106c00:	55                   	push   %ebp
c0106c01:	89 e5                	mov    %esp,%ebp
c0106c03:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106c06:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c09:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c0c:	72 0a                	jb     c0106c18 <get_pgtable_items+0x18>
        return 0;
c0106c0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106c13:	e9 9c 00 00 00       	jmp    c0106cb4 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106c18:	eb 04                	jmp    c0106c1e <get_pgtable_items+0x1e>
        start ++;
c0106c1a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106c1e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c21:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c24:	73 18                	jae    c0106c3e <get_pgtable_items+0x3e>
c0106c26:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c29:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c30:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c33:	01 d0                	add    %edx,%eax
c0106c35:	8b 00                	mov    (%eax),%eax
c0106c37:	83 e0 01             	and    $0x1,%eax
c0106c3a:	85 c0                	test   %eax,%eax
c0106c3c:	74 dc                	je     c0106c1a <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106c3e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c41:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c44:	73 69                	jae    c0106caf <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106c46:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106c4a:	74 08                	je     c0106c54 <get_pgtable_items+0x54>
            *left_store = start;
c0106c4c:	8b 45 18             	mov    0x18(%ebp),%eax
c0106c4f:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c52:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106c54:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c57:	8d 50 01             	lea    0x1(%eax),%edx
c0106c5a:	89 55 10             	mov    %edx,0x10(%ebp)
c0106c5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c64:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c67:	01 d0                	add    %edx,%eax
c0106c69:	8b 00                	mov    (%eax),%eax
c0106c6b:	83 e0 07             	and    $0x7,%eax
c0106c6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c71:	eb 04                	jmp    c0106c77 <get_pgtable_items+0x77>
            start ++;
c0106c73:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c77:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c7a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c7d:	73 1d                	jae    c0106c9c <get_pgtable_items+0x9c>
c0106c7f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c89:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c8c:	01 d0                	add    %edx,%eax
c0106c8e:	8b 00                	mov    (%eax),%eax
c0106c90:	83 e0 07             	and    $0x7,%eax
c0106c93:	89 c2                	mov    %eax,%edx
c0106c95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c98:	39 c2                	cmp    %eax,%edx
c0106c9a:	74 d7                	je     c0106c73 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106c9c:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106ca0:	74 08                	je     c0106caa <get_pgtable_items+0xaa>
            *right_store = start;
c0106ca2:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106ca5:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ca8:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106caa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cad:	eb 05                	jmp    c0106cb4 <get_pgtable_items+0xb4>
    }
    return 0;
c0106caf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106cb4:	c9                   	leave  
c0106cb5:	c3                   	ret    

c0106cb6 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106cb6:	55                   	push   %ebp
c0106cb7:	89 e5                	mov    %esp,%ebp
c0106cb9:	57                   	push   %edi
c0106cba:	56                   	push   %esi
c0106cbb:	53                   	push   %ebx
c0106cbc:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106cbf:	c7 04 24 38 6c 11 c0 	movl   $0xc0116c38,(%esp)
c0106cc6:	e8 a6 96 ff ff       	call   c0100371 <cprintf>
    size_t left, right = 0, perm;
c0106ccb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106cd2:	e9 fa 00 00 00       	jmp    c0106dd1 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106cd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cda:	89 04 24             	mov    %eax,(%esp)
c0106cdd:	e8 d0 fe ff ff       	call   c0106bb2 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106ce2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106ce5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106ce8:	29 d1                	sub    %edx,%ecx
c0106cea:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106cec:	89 d6                	mov    %edx,%esi
c0106cee:	c1 e6 16             	shl    $0x16,%esi
c0106cf1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106cf4:	89 d3                	mov    %edx,%ebx
c0106cf6:	c1 e3 16             	shl    $0x16,%ebx
c0106cf9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cfc:	89 d1                	mov    %edx,%ecx
c0106cfe:	c1 e1 16             	shl    $0x16,%ecx
c0106d01:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106d04:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d07:	29 d7                	sub    %edx,%edi
c0106d09:	89 fa                	mov    %edi,%edx
c0106d0b:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106d0f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106d13:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106d17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106d1b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d1f:	c7 04 24 69 6c 11 c0 	movl   $0xc0116c69,(%esp)
c0106d26:	e8 46 96 ff ff       	call   c0100371 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106d2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d2e:	c1 e0 0a             	shl    $0xa,%eax
c0106d31:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d34:	eb 54                	jmp    c0106d8a <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106d36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d39:	89 04 24             	mov    %eax,(%esp)
c0106d3c:	e8 71 fe ff ff       	call   c0106bb2 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106d41:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106d44:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d47:	29 d1                	sub    %edx,%ecx
c0106d49:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106d4b:	89 d6                	mov    %edx,%esi
c0106d4d:	c1 e6 0c             	shl    $0xc,%esi
c0106d50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106d53:	89 d3                	mov    %edx,%ebx
c0106d55:	c1 e3 0c             	shl    $0xc,%ebx
c0106d58:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d5b:	c1 e2 0c             	shl    $0xc,%edx
c0106d5e:	89 d1                	mov    %edx,%ecx
c0106d60:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106d63:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d66:	29 d7                	sub    %edx,%edi
c0106d68:	89 fa                	mov    %edi,%edx
c0106d6a:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106d6e:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106d72:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106d76:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106d7a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d7e:	c7 04 24 88 6c 11 c0 	movl   $0xc0116c88,(%esp)
c0106d85:	e8 e7 95 ff ff       	call   c0100371 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d8a:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106d8f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106d92:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d95:	89 ce                	mov    %ecx,%esi
c0106d97:	c1 e6 0a             	shl    $0xa,%esi
c0106d9a:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d9d:	89 cb                	mov    %ecx,%ebx
c0106d9f:	c1 e3 0a             	shl    $0xa,%ebx
c0106da2:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106da5:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106da9:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106dac:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106db0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106db4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106db8:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106dbc:	89 1c 24             	mov    %ebx,(%esp)
c0106dbf:	e8 3c fe ff ff       	call   c0106c00 <get_pgtable_items>
c0106dc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106dc7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106dcb:	0f 85 65 ff ff ff    	jne    c0106d36 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106dd1:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106dd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106dd9:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106ddc:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106de0:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106de3:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106de7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106deb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106def:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106df6:	00 
c0106df7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106dfe:	e8 fd fd ff ff       	call   c0106c00 <get_pgtable_items>
c0106e03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106e06:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106e0a:	0f 85 c7 fe ff ff    	jne    c0106cd7 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106e10:	c7 04 24 ac 6c 11 c0 	movl   $0xc0116cac,(%esp)
c0106e17:	e8 55 95 ff ff       	call   c0100371 <cprintf>
}
c0106e1c:	83 c4 4c             	add    $0x4c,%esp
c0106e1f:	5b                   	pop    %ebx
c0106e20:	5e                   	pop    %esi
c0106e21:	5f                   	pop    %edi
c0106e22:	5d                   	pop    %ebp
c0106e23:	c3                   	ret    

c0106e24 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106e24:	55                   	push   %ebp
c0106e25:	89 e5                	mov    %esp,%ebp
c0106e27:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106e2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e2d:	c1 e8 0c             	shr    $0xc,%eax
c0106e30:	89 c2                	mov    %eax,%edx
c0106e32:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0106e37:	39 c2                	cmp    %eax,%edx
c0106e39:	72 1c                	jb     c0106e57 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106e3b:	c7 44 24 08 e0 6c 11 	movl   $0xc0116ce0,0x8(%esp)
c0106e42:	c0 
c0106e43:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106e4a:	00 
c0106e4b:	c7 04 24 ff 6c 11 c0 	movl   $0xc0116cff,(%esp)
c0106e52:	e8 87 a0 ff ff       	call   c0100ede <__panic>
    }
    return &pages[PPN(pa)];
c0106e57:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c0106e5c:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e5f:	c1 ea 0c             	shr    $0xc,%edx
c0106e62:	c1 e2 05             	shl    $0x5,%edx
c0106e65:	01 d0                	add    %edx,%eax
}
c0106e67:	c9                   	leave  
c0106e68:	c3                   	ret    

c0106e69 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e69:	55                   	push   %ebp
c0106e6a:	89 e5                	mov    %esp,%ebp
c0106e6c:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e72:	83 e0 01             	and    $0x1,%eax
c0106e75:	85 c0                	test   %eax,%eax
c0106e77:	75 1c                	jne    c0106e95 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106e79:	c7 44 24 08 10 6d 11 	movl   $0xc0116d10,0x8(%esp)
c0106e80:	c0 
c0106e81:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106e88:	00 
c0106e89:	c7 04 24 ff 6c 11 c0 	movl   $0xc0116cff,(%esp)
c0106e90:	e8 49 a0 ff ff       	call   c0100ede <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e9d:	89 04 24             	mov    %eax,(%esp)
c0106ea0:	e8 7f ff ff ff       	call   c0106e24 <pa2page>
}
c0106ea5:	c9                   	leave  
c0106ea6:	c3                   	ret    

c0106ea7 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106ea7:	55                   	push   %ebp
c0106ea8:	89 e5                	mov    %esp,%ebp
c0106eaa:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eb0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106eb5:	89 04 24             	mov    %eax,(%esp)
c0106eb8:	e8 67 ff ff ff       	call   c0106e24 <pa2page>
}
c0106ebd:	c9                   	leave  
c0106ebe:	c3                   	ret    

c0106ebf <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106ebf:	55                   	push   %ebp
c0106ec0:	89 e5                	mov    %esp,%ebp
c0106ec2:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106ec5:	e8 20 81 00 00       	call   c010efea <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106eca:	a1 fc 61 15 c0       	mov    0xc01561fc,%eax
c0106ecf:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106ed4:	76 0c                	jbe    c0106ee2 <swap_init+0x23>
c0106ed6:	a1 fc 61 15 c0       	mov    0xc01561fc,%eax
c0106edb:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106ee0:	76 25                	jbe    c0106f07 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106ee2:	a1 fc 61 15 c0       	mov    0xc01561fc,%eax
c0106ee7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106eeb:	c7 44 24 08 31 6d 11 	movl   $0xc0116d31,0x8(%esp)
c0106ef2:	c0 
c0106ef3:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106efa:	00 
c0106efb:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0106f02:	e8 d7 9f ff ff       	call   c0100ede <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106f07:	c7 05 34 30 15 c0 60 	movl   $0xc014fa60,0xc0153034
c0106f0e:	fa 14 c0 
     int r = sm->init();
c0106f11:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106f16:	8b 40 04             	mov    0x4(%eax),%eax
c0106f19:	ff d0                	call   *%eax
c0106f1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106f1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f22:	75 26                	jne    c0106f4a <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106f24:	c7 05 2c 30 15 c0 01 	movl   $0x1,0xc015302c
c0106f2b:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106f2e:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106f33:	8b 00                	mov    (%eax),%eax
c0106f35:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f39:	c7 04 24 5b 6d 11 c0 	movl   $0xc0116d5b,(%esp)
c0106f40:	e8 2c 94 ff ff       	call   c0100371 <cprintf>
          check_swap();
c0106f45:	e8 a4 04 00 00       	call   c01073ee <check_swap>
     }

     return r;
c0106f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106f4d:	c9                   	leave  
c0106f4e:	c3                   	ret    

c0106f4f <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106f4f:	55                   	push   %ebp
c0106f50:	89 e5                	mov    %esp,%ebp
c0106f52:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106f55:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106f5a:	8b 40 08             	mov    0x8(%eax),%eax
c0106f5d:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f60:	89 14 24             	mov    %edx,(%esp)
c0106f63:	ff d0                	call   *%eax
}
c0106f65:	c9                   	leave  
c0106f66:	c3                   	ret    

c0106f67 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106f67:	55                   	push   %ebp
c0106f68:	89 e5                	mov    %esp,%ebp
c0106f6a:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106f6d:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106f72:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f75:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f78:	89 14 24             	mov    %edx,(%esp)
c0106f7b:	ff d0                	call   *%eax
}
c0106f7d:	c9                   	leave  
c0106f7e:	c3                   	ret    

c0106f7f <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106f7f:	55                   	push   %ebp
c0106f80:	89 e5                	mov    %esp,%ebp
c0106f82:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106f85:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106f8a:	8b 40 10             	mov    0x10(%eax),%eax
c0106f8d:	8b 55 14             	mov    0x14(%ebp),%edx
c0106f90:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106f94:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f97:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f9e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fa2:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fa5:	89 14 24             	mov    %edx,(%esp)
c0106fa8:	ff d0                	call   *%eax
}
c0106faa:	c9                   	leave  
c0106fab:	c3                   	ret    

c0106fac <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106fac:	55                   	push   %ebp
c0106fad:	89 e5                	mov    %esp,%ebp
c0106faf:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106fb2:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106fb7:	8b 40 14             	mov    0x14(%eax),%eax
c0106fba:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106fbd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fc1:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fc4:	89 14 24             	mov    %edx,(%esp)
c0106fc7:	ff d0                	call   *%eax
}
c0106fc9:	c9                   	leave  
c0106fca:	c3                   	ret    

c0106fcb <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106fcb:	55                   	push   %ebp
c0106fcc:	89 e5                	mov    %esp,%ebp
c0106fce:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106fd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106fd8:	e9 5a 01 00 00       	jmp    c0107137 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106fdd:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c0106fe2:	8b 40 18             	mov    0x18(%eax),%eax
c0106fe5:	8b 55 10             	mov    0x10(%ebp),%edx
c0106fe8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106fec:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106fef:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ff3:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ff6:	89 14 24             	mov    %edx,(%esp)
c0106ff9:	ff d0                	call   *%eax
c0106ffb:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106ffe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107002:	74 18                	je     c010701c <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0107004:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107007:	89 44 24 04          	mov    %eax,0x4(%esp)
c010700b:	c7 04 24 70 6d 11 c0 	movl   $0xc0116d70,(%esp)
c0107012:	e8 5a 93 ff ff       	call   c0100371 <cprintf>
c0107017:	e9 27 01 00 00       	jmp    c0107143 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010701c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010701f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107022:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0107025:	8b 45 08             	mov    0x8(%ebp),%eax
c0107028:	8b 40 0c             	mov    0xc(%eax),%eax
c010702b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107032:	00 
c0107033:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107036:	89 54 24 04          	mov    %edx,0x4(%esp)
c010703a:	89 04 24             	mov    %eax,(%esp)
c010703d:	e8 c6 e8 ff ff       	call   c0105908 <get_pte>
c0107042:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0107045:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107048:	8b 00                	mov    (%eax),%eax
c010704a:	83 e0 01             	and    $0x1,%eax
c010704d:	85 c0                	test   %eax,%eax
c010704f:	75 24                	jne    c0107075 <swap_out+0xaa>
c0107051:	c7 44 24 0c 9d 6d 11 	movl   $0xc0116d9d,0xc(%esp)
c0107058:	c0 
c0107059:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107060:	c0 
c0107061:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107068:	00 
c0107069:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107070:	e8 69 9e ff ff       	call   c0100ede <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0107075:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107078:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010707b:	8b 52 1c             	mov    0x1c(%edx),%edx
c010707e:	c1 ea 0c             	shr    $0xc,%edx
c0107081:	83 c2 01             	add    $0x1,%edx
c0107084:	c1 e2 08             	shl    $0x8,%edx
c0107087:	89 44 24 04          	mov    %eax,0x4(%esp)
c010708b:	89 14 24             	mov    %edx,(%esp)
c010708e:	e8 11 80 00 00       	call   c010f0a4 <swapfs_write>
c0107093:	85 c0                	test   %eax,%eax
c0107095:	74 34                	je     c01070cb <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0107097:	c7 04 24 c7 6d 11 c0 	movl   $0xc0116dc7,(%esp)
c010709e:	e8 ce 92 ff ff       	call   c0100371 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c01070a3:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c01070a8:	8b 40 10             	mov    0x10(%eax),%eax
c01070ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01070ae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01070b5:	00 
c01070b6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01070ba:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01070bd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070c1:	8b 55 08             	mov    0x8(%ebp),%edx
c01070c4:	89 14 24             	mov    %edx,(%esp)
c01070c7:	ff d0                	call   *%eax
c01070c9:	eb 68                	jmp    c0107133 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01070cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070ce:	8b 40 1c             	mov    0x1c(%eax),%eax
c01070d1:	c1 e8 0c             	shr    $0xc,%eax
c01070d4:	83 c0 01             	add    $0x1,%eax
c01070d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01070db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070de:	89 44 24 08          	mov    %eax,0x8(%esp)
c01070e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070e9:	c7 04 24 e0 6d 11 c0 	movl   $0xc0116de0,(%esp)
c01070f0:	e8 7c 92 ff ff       	call   c0100371 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01070f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070f8:	8b 40 1c             	mov    0x1c(%eax),%eax
c01070fb:	c1 e8 0c             	shr    $0xc,%eax
c01070fe:	83 c0 01             	add    $0x1,%eax
c0107101:	c1 e0 08             	shl    $0x8,%eax
c0107104:	89 c2                	mov    %eax,%edx
c0107106:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107109:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010710b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010710e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107115:	00 
c0107116:	89 04 24             	mov    %eax,(%esp)
c0107119:	e8 71 e1 ff ff       	call   c010528f <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c010711e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107121:	8b 40 0c             	mov    0xc(%eax),%eax
c0107124:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107127:	89 54 24 04          	mov    %edx,0x4(%esp)
c010712b:	89 04 24             	mov    %eax,(%esp)
c010712e:	e8 e2 ee ff ff       	call   c0106015 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107133:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107137:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010713a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010713d:	0f 85 9a fe ff ff    	jne    c0106fdd <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0107143:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107146:	c9                   	leave  
c0107147:	c3                   	ret    

c0107148 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107148:	55                   	push   %ebp
c0107149:	89 e5                	mov    %esp,%ebp
c010714b:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c010714e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107155:	e8 ca e0 ff ff       	call   c0105224 <alloc_pages>
c010715a:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c010715d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107161:	75 24                	jne    c0107187 <swap_in+0x3f>
c0107163:	c7 44 24 0c 20 6e 11 	movl   $0xc0116e20,0xc(%esp)
c010716a:	c0 
c010716b:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107172:	c0 
c0107173:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c010717a:	00 
c010717b:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107182:	e8 57 9d ff ff       	call   c0100ede <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107187:	8b 45 08             	mov    0x8(%ebp),%eax
c010718a:	8b 40 0c             	mov    0xc(%eax),%eax
c010718d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107194:	00 
c0107195:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107198:	89 54 24 04          	mov    %edx,0x4(%esp)
c010719c:	89 04 24             	mov    %eax,(%esp)
c010719f:	e8 64 e7 ff ff       	call   c0105908 <get_pte>
c01071a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01071a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071aa:	8b 00                	mov    (%eax),%eax
c01071ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01071af:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071b3:	89 04 24             	mov    %eax,(%esp)
c01071b6:	e8 77 7e 00 00       	call   c010f032 <swapfs_read>
c01071bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01071be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01071c2:	74 2a                	je     c01071ee <swap_in+0xa6>
     {
        assert(r!=0);
c01071c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01071c8:	75 24                	jne    c01071ee <swap_in+0xa6>
c01071ca:	c7 44 24 0c 2d 6e 11 	movl   $0xc0116e2d,0xc(%esp)
c01071d1:	c0 
c01071d2:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01071d9:	c0 
c01071da:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01071e1:	00 
c01071e2:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01071e9:	e8 f0 9c ff ff       	call   c0100ede <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01071ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071f1:	8b 00                	mov    (%eax),%eax
c01071f3:	c1 e8 08             	shr    $0x8,%eax
c01071f6:	89 c2                	mov    %eax,%edx
c01071f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01071fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071ff:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107203:	c7 04 24 34 6e 11 c0 	movl   $0xc0116e34,(%esp)
c010720a:	e8 62 91 ff ff       	call   c0100371 <cprintf>
     *ptr_result=result;
c010720f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107212:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107215:	89 10                	mov    %edx,(%eax)
     return 0;
c0107217:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010721c:	c9                   	leave  
c010721d:	c3                   	ret    

c010721e <check_content_set>:



static inline void
check_content_set(void)
{
c010721e:	55                   	push   %ebp
c010721f:	89 e5                	mov    %esp,%ebp
c0107221:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0107224:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107229:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010722c:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107231:	83 f8 01             	cmp    $0x1,%eax
c0107234:	74 24                	je     c010725a <check_content_set+0x3c>
c0107236:	c7 44 24 0c 72 6e 11 	movl   $0xc0116e72,0xc(%esp)
c010723d:	c0 
c010723e:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107245:	c0 
c0107246:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c010724d:	00 
c010724e:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107255:	e8 84 9c ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010725a:	b8 10 10 00 00       	mov    $0x1010,%eax
c010725f:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107262:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107267:	83 f8 01             	cmp    $0x1,%eax
c010726a:	74 24                	je     c0107290 <check_content_set+0x72>
c010726c:	c7 44 24 0c 72 6e 11 	movl   $0xc0116e72,0xc(%esp)
c0107273:	c0 
c0107274:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c010727b:	c0 
c010727c:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107283:	00 
c0107284:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010728b:	e8 4e 9c ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107290:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107295:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107298:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c010729d:	83 f8 02             	cmp    $0x2,%eax
c01072a0:	74 24                	je     c01072c6 <check_content_set+0xa8>
c01072a2:	c7 44 24 0c 81 6e 11 	movl   $0xc0116e81,0xc(%esp)
c01072a9:	c0 
c01072aa:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01072b1:	c0 
c01072b2:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01072b9:	00 
c01072ba:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01072c1:	e8 18 9c ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01072c6:	b8 10 20 00 00       	mov    $0x2010,%eax
c01072cb:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01072ce:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c01072d3:	83 f8 02             	cmp    $0x2,%eax
c01072d6:	74 24                	je     c01072fc <check_content_set+0xde>
c01072d8:	c7 44 24 0c 81 6e 11 	movl   $0xc0116e81,0xc(%esp)
c01072df:	c0 
c01072e0:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01072e7:	c0 
c01072e8:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01072ef:	00 
c01072f0:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01072f7:	e8 e2 9b ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01072fc:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107301:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107304:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107309:	83 f8 03             	cmp    $0x3,%eax
c010730c:	74 24                	je     c0107332 <check_content_set+0x114>
c010730e:	c7 44 24 0c 90 6e 11 	movl   $0xc0116e90,0xc(%esp)
c0107315:	c0 
c0107316:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c010731d:	c0 
c010731e:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0107325:	00 
c0107326:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010732d:	e8 ac 9b ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107332:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107337:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010733a:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c010733f:	83 f8 03             	cmp    $0x3,%eax
c0107342:	74 24                	je     c0107368 <check_content_set+0x14a>
c0107344:	c7 44 24 0c 90 6e 11 	movl   $0xc0116e90,0xc(%esp)
c010734b:	c0 
c010734c:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107353:	c0 
c0107354:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010735b:	00 
c010735c:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107363:	e8 76 9b ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107368:	b8 00 40 00 00       	mov    $0x4000,%eax
c010736d:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107370:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107375:	83 f8 04             	cmp    $0x4,%eax
c0107378:	74 24                	je     c010739e <check_content_set+0x180>
c010737a:	c7 44 24 0c 9f 6e 11 	movl   $0xc0116e9f,0xc(%esp)
c0107381:	c0 
c0107382:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107389:	c0 
c010738a:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107391:	00 
c0107392:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107399:	e8 40 9b ff ff       	call   c0100ede <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010739e:	b8 10 40 00 00       	mov    $0x4010,%eax
c01073a3:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01073a6:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c01073ab:	83 f8 04             	cmp    $0x4,%eax
c01073ae:	74 24                	je     c01073d4 <check_content_set+0x1b6>
c01073b0:	c7 44 24 0c 9f 6e 11 	movl   $0xc0116e9f,0xc(%esp)
c01073b7:	c0 
c01073b8:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01073bf:	c0 
c01073c0:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01073c7:	00 
c01073c8:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01073cf:	e8 0a 9b ff ff       	call   c0100ede <__panic>
}
c01073d4:	c9                   	leave  
c01073d5:	c3                   	ret    

c01073d6 <check_content_access>:

static inline int
check_content_access(void)
{
c01073d6:	55                   	push   %ebp
c01073d7:	89 e5                	mov    %esp,%ebp
c01073d9:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01073dc:	a1 34 30 15 c0       	mov    0xc0153034,%eax
c01073e1:	8b 40 1c             	mov    0x1c(%eax),%eax
c01073e4:	ff d0                	call   *%eax
c01073e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01073e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01073ec:	c9                   	leave  
c01073ed:	c3                   	ret    

c01073ee <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01073ee:	55                   	push   %ebp
c01073ef:	89 e5                	mov    %esp,%ebp
c01073f1:	53                   	push   %ebx
c01073f2:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01073f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01073fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107403:	c7 45 e8 34 61 15 c0 	movl   $0xc0156134,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010740a:	eb 6b                	jmp    c0107477 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010740c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010740f:	83 e8 0c             	sub    $0xc,%eax
c0107412:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107415:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107418:	83 c0 04             	add    $0x4,%eax
c010741b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107422:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107425:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107428:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010742b:	0f a3 10             	bt     %edx,(%eax)
c010742e:	19 c0                	sbb    %eax,%eax
c0107430:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107433:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107437:	0f 95 c0             	setne  %al
c010743a:	0f b6 c0             	movzbl %al,%eax
c010743d:	85 c0                	test   %eax,%eax
c010743f:	75 24                	jne    c0107465 <check_swap+0x77>
c0107441:	c7 44 24 0c ae 6e 11 	movl   $0xc0116eae,0xc(%esp)
c0107448:	c0 
c0107449:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107450:	c0 
c0107451:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107458:	00 
c0107459:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107460:	e8 79 9a ff ff       	call   c0100ede <__panic>
        count ++, total += p->property;
c0107465:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107469:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010746c:	8b 50 08             	mov    0x8(%eax),%edx
c010746f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107472:	01 d0                	add    %edx,%eax
c0107474:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107477:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010747a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010747d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107480:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107483:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107486:	81 7d e8 34 61 15 c0 	cmpl   $0xc0156134,-0x18(%ebp)
c010748d:	0f 85 79 ff ff ff    	jne    c010740c <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0107493:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0107496:	e8 26 de ff ff       	call   c01052c1 <nr_free_pages>
c010749b:	39 c3                	cmp    %eax,%ebx
c010749d:	74 24                	je     c01074c3 <check_swap+0xd5>
c010749f:	c7 44 24 0c be 6e 11 	movl   $0xc0116ebe,0xc(%esp)
c01074a6:	c0 
c01074a7:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01074ae:	c0 
c01074af:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01074b6:	00 
c01074b7:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01074be:	e8 1b 9a ff ff       	call   c0100ede <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01074c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01074c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01074ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074d1:	c7 04 24 d8 6e 11 c0 	movl   $0xc0116ed8,(%esp)
c01074d8:	e8 94 8e ff ff       	call   c0100371 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01074dd:	e8 66 0b 00 00       	call   c0108048 <mm_create>
c01074e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01074e5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01074e9:	75 24                	jne    c010750f <check_swap+0x121>
c01074eb:	c7 44 24 0c fe 6e 11 	movl   $0xc0116efe,0xc(%esp)
c01074f2:	c0 
c01074f3:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01074fa:	c0 
c01074fb:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107502:	00 
c0107503:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010750a:	e8 cf 99 ff ff       	call   c0100ede <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c010750f:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c0107514:	85 c0                	test   %eax,%eax
c0107516:	74 24                	je     c010753c <check_swap+0x14e>
c0107518:	c7 44 24 0c 09 6f 11 	movl   $0xc0116f09,0xc(%esp)
c010751f:	c0 
c0107520:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107527:	c0 
c0107528:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c010752f:	00 
c0107530:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107537:	e8 a2 99 ff ff       	call   c0100ede <__panic>

     check_mm_struct = mm;
c010753c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010753f:	a3 2c 62 15 c0       	mov    %eax,0xc015622c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107544:	8b 15 00 fa 14 c0    	mov    0xc014fa00,%edx
c010754a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010754d:	89 50 0c             	mov    %edx,0xc(%eax)
c0107550:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107553:	8b 40 0c             	mov    0xc(%eax),%eax
c0107556:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0107559:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010755c:	8b 00                	mov    (%eax),%eax
c010755e:	85 c0                	test   %eax,%eax
c0107560:	74 24                	je     c0107586 <check_swap+0x198>
c0107562:	c7 44 24 0c 21 6f 11 	movl   $0xc0116f21,0xc(%esp)
c0107569:	c0 
c010756a:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107571:	c0 
c0107572:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107579:	00 
c010757a:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107581:	e8 58 99 ff ff       	call   c0100ede <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107586:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010758d:	00 
c010758e:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0107595:	00 
c0107596:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010759d:	e8 4b 0b 00 00       	call   c01080ed <vma_create>
c01075a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01075a5:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01075a9:	75 24                	jne    c01075cf <check_swap+0x1e1>
c01075ab:	c7 44 24 0c 2f 6f 11 	movl   $0xc0116f2f,0xc(%esp)
c01075b2:	c0 
c01075b3:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01075ba:	c0 
c01075bb:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01075c2:	00 
c01075c3:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01075ca:	e8 0f 99 ff ff       	call   c0100ede <__panic>

     insert_vma_struct(mm, vma);
c01075cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01075d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01075d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075d9:	89 04 24             	mov    %eax,(%esp)
c01075dc:	e8 9c 0c 00 00       	call   c010827d <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01075e1:	c7 04 24 3c 6f 11 c0 	movl   $0xc0116f3c,(%esp)
c01075e8:	e8 84 8d ff ff       	call   c0100371 <cprintf>
     pte_t *temp_ptep=NULL;
c01075ed:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01075f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01075fa:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107601:	00 
c0107602:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107609:	00 
c010760a:	89 04 24             	mov    %eax,(%esp)
c010760d:	e8 f6 e2 ff ff       	call   c0105908 <get_pte>
c0107612:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107615:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107619:	75 24                	jne    c010763f <check_swap+0x251>
c010761b:	c7 44 24 0c 70 6f 11 	movl   $0xc0116f70,0xc(%esp)
c0107622:	c0 
c0107623:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c010762a:	c0 
c010762b:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107632:	00 
c0107633:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010763a:	e8 9f 98 ff ff       	call   c0100ede <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c010763f:	c7 04 24 84 6f 11 c0 	movl   $0xc0116f84,(%esp)
c0107646:	e8 26 8d ff ff       	call   c0100371 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010764b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107652:	e9 a3 00 00 00       	jmp    c01076fa <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0107657:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010765e:	e8 c1 db ff ff       	call   c0105224 <alloc_pages>
c0107663:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107666:	89 04 95 60 61 15 c0 	mov    %eax,-0x3fea9ea0(,%edx,4)
          assert(check_rp[i] != NULL );
c010766d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107670:	8b 04 85 60 61 15 c0 	mov    -0x3fea9ea0(,%eax,4),%eax
c0107677:	85 c0                	test   %eax,%eax
c0107679:	75 24                	jne    c010769f <check_swap+0x2b1>
c010767b:	c7 44 24 0c a8 6f 11 	movl   $0xc0116fa8,0xc(%esp)
c0107682:	c0 
c0107683:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c010768a:	c0 
c010768b:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0107692:	00 
c0107693:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010769a:	e8 3f 98 ff ff       	call   c0100ede <__panic>
          assert(!PageProperty(check_rp[i]));
c010769f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076a2:	8b 04 85 60 61 15 c0 	mov    -0x3fea9ea0(,%eax,4),%eax
c01076a9:	83 c0 04             	add    $0x4,%eax
c01076ac:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01076b3:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01076b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01076b9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01076bc:	0f a3 10             	bt     %edx,(%eax)
c01076bf:	19 c0                	sbb    %eax,%eax
c01076c1:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01076c4:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01076c8:	0f 95 c0             	setne  %al
c01076cb:	0f b6 c0             	movzbl %al,%eax
c01076ce:	85 c0                	test   %eax,%eax
c01076d0:	74 24                	je     c01076f6 <check_swap+0x308>
c01076d2:	c7 44 24 0c bc 6f 11 	movl   $0xc0116fbc,0xc(%esp)
c01076d9:	c0 
c01076da:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01076e1:	c0 
c01076e2:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01076e9:	00 
c01076ea:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01076f1:	e8 e8 97 ff ff       	call   c0100ede <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076f6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076fa:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076fe:	0f 8e 53 ff ff ff    	jle    c0107657 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107704:	a1 34 61 15 c0       	mov    0xc0156134,%eax
c0107709:	8b 15 38 61 15 c0    	mov    0xc0156138,%edx
c010770f:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107712:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107715:	c7 45 a8 34 61 15 c0 	movl   $0xc0156134,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010771c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010771f:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107722:	89 50 04             	mov    %edx,0x4(%eax)
c0107725:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107728:	8b 50 04             	mov    0x4(%eax),%edx
c010772b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010772e:	89 10                	mov    %edx,(%eax)
c0107730:	c7 45 a4 34 61 15 c0 	movl   $0xc0156134,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107737:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010773a:	8b 40 04             	mov    0x4(%eax),%eax
c010773d:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107740:	0f 94 c0             	sete   %al
c0107743:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107746:	85 c0                	test   %eax,%eax
c0107748:	75 24                	jne    c010776e <check_swap+0x380>
c010774a:	c7 44 24 0c d7 6f 11 	movl   $0xc0116fd7,0xc(%esp)
c0107751:	c0 
c0107752:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107759:	c0 
c010775a:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107761:	00 
c0107762:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107769:	e8 70 97 ff ff       	call   c0100ede <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010776e:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c0107773:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0107776:	c7 05 3c 61 15 c0 00 	movl   $0x0,0xc015613c
c010777d:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107780:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107787:	eb 1e                	jmp    c01077a7 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107789:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010778c:	8b 04 85 60 61 15 c0 	mov    -0x3fea9ea0(,%eax,4),%eax
c0107793:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010779a:	00 
c010779b:	89 04 24             	mov    %eax,(%esp)
c010779e:	e8 ec da ff ff       	call   c010528f <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077a3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077a7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077ab:	7e dc                	jle    c0107789 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01077ad:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c01077b2:	83 f8 04             	cmp    $0x4,%eax
c01077b5:	74 24                	je     c01077db <check_swap+0x3ed>
c01077b7:	c7 44 24 0c f0 6f 11 	movl   $0xc0116ff0,0xc(%esp)
c01077be:	c0 
c01077bf:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01077c6:	c0 
c01077c7:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01077ce:	00 
c01077cf:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01077d6:	e8 03 97 ff ff       	call   c0100ede <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01077db:	c7 04 24 14 70 11 c0 	movl   $0xc0117014,(%esp)
c01077e2:	e8 8a 8b ff ff       	call   c0100371 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01077e7:	c7 05 38 30 15 c0 00 	movl   $0x0,0xc0153038
c01077ee:	00 00 00 
     
     check_content_set();
c01077f1:	e8 28 fa ff ff       	call   c010721e <check_content_set>
     assert( nr_free == 0);         
c01077f6:	a1 3c 61 15 c0       	mov    0xc015613c,%eax
c01077fb:	85 c0                	test   %eax,%eax
c01077fd:	74 24                	je     c0107823 <check_swap+0x435>
c01077ff:	c7 44 24 0c 3b 70 11 	movl   $0xc011703b,0xc(%esp)
c0107806:	c0 
c0107807:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c010780e:	c0 
c010780f:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107816:	00 
c0107817:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010781e:	e8 bb 96 ff ff       	call   c0100ede <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107823:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010782a:	eb 26                	jmp    c0107852 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010782c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010782f:	c7 04 85 80 61 15 c0 	movl   $0xffffffff,-0x3fea9e80(,%eax,4)
c0107836:	ff ff ff ff 
c010783a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010783d:	8b 14 85 80 61 15 c0 	mov    -0x3fea9e80(,%eax,4),%edx
c0107844:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107847:	89 14 85 c0 61 15 c0 	mov    %edx,-0x3fea9e40(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010784e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107852:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107856:	7e d4                	jle    c010782c <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107858:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010785f:	e9 eb 00 00 00       	jmp    c010794f <check_swap+0x561>
         check_ptep[i]=0;
c0107864:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107867:	c7 04 85 14 62 15 c0 	movl   $0x0,-0x3fea9dec(,%eax,4)
c010786e:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107872:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107875:	83 c0 01             	add    $0x1,%eax
c0107878:	c1 e0 0c             	shl    $0xc,%eax
c010787b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107882:	00 
c0107883:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107887:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010788a:	89 04 24             	mov    %eax,(%esp)
c010788d:	e8 76 e0 ff ff       	call   c0105908 <get_pte>
c0107892:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107895:	89 04 95 14 62 15 c0 	mov    %eax,-0x3fea9dec(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010789c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010789f:	8b 04 85 14 62 15 c0 	mov    -0x3fea9dec(,%eax,4),%eax
c01078a6:	85 c0                	test   %eax,%eax
c01078a8:	75 24                	jne    c01078ce <check_swap+0x4e0>
c01078aa:	c7 44 24 0c 48 70 11 	movl   $0xc0117048,0xc(%esp)
c01078b1:	c0 
c01078b2:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01078b9:	c0 
c01078ba:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01078c1:	00 
c01078c2:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c01078c9:	e8 10 96 ff ff       	call   c0100ede <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01078ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078d1:	8b 04 85 14 62 15 c0 	mov    -0x3fea9dec(,%eax,4),%eax
c01078d8:	8b 00                	mov    (%eax),%eax
c01078da:	89 04 24             	mov    %eax,(%esp)
c01078dd:	e8 87 f5 ff ff       	call   c0106e69 <pte2page>
c01078e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01078e5:	8b 14 95 60 61 15 c0 	mov    -0x3fea9ea0(,%edx,4),%edx
c01078ec:	39 d0                	cmp    %edx,%eax
c01078ee:	74 24                	je     c0107914 <check_swap+0x526>
c01078f0:	c7 44 24 0c 60 70 11 	movl   $0xc0117060,0xc(%esp)
c01078f7:	c0 
c01078f8:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c01078ff:	c0 
c0107900:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0107907:	00 
c0107908:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c010790f:	e8 ca 95 ff ff       	call   c0100ede <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107914:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107917:	8b 04 85 14 62 15 c0 	mov    -0x3fea9dec(,%eax,4),%eax
c010791e:	8b 00                	mov    (%eax),%eax
c0107920:	83 e0 01             	and    $0x1,%eax
c0107923:	85 c0                	test   %eax,%eax
c0107925:	75 24                	jne    c010794b <check_swap+0x55d>
c0107927:	c7 44 24 0c 88 70 11 	movl   $0xc0117088,0xc(%esp)
c010792e:	c0 
c010792f:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107936:	c0 
c0107937:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010793e:	00 
c010793f:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107946:	e8 93 95 ff ff       	call   c0100ede <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010794b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010794f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107953:	0f 8e 0b ff ff ff    	jle    c0107864 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107959:	c7 04 24 a4 70 11 c0 	movl   $0xc01170a4,(%esp)
c0107960:	e8 0c 8a ff ff       	call   c0100371 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107965:	e8 6c fa ff ff       	call   c01073d6 <check_content_access>
c010796a:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c010796d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107971:	74 24                	je     c0107997 <check_swap+0x5a9>
c0107973:	c7 44 24 0c ca 70 11 	movl   $0xc01170ca,0xc(%esp)
c010797a:	c0 
c010797b:	c7 44 24 08 b2 6d 11 	movl   $0xc0116db2,0x8(%esp)
c0107982:	c0 
c0107983:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010798a:	00 
c010798b:	c7 04 24 4c 6d 11 c0 	movl   $0xc0116d4c,(%esp)
c0107992:	e8 47 95 ff ff       	call   c0100ede <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107997:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010799e:	eb 1e                	jmp    c01079be <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01079a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079a3:	8b 04 85 60 61 15 c0 	mov    -0x3fea9ea0(,%eax,4),%eax
c01079aa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01079b1:	00 
c01079b2:	89 04 24             	mov    %eax,(%esp)
c01079b5:	e8 d5 d8 ff ff       	call   c010528f <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01079ba:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01079be:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01079c2:	7e dc                	jle    c01079a0 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c01079c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079c7:	8b 00                	mov    (%eax),%eax
c01079c9:	89 04 24             	mov    %eax,(%esp)
c01079cc:	e8 d6 f4 ff ff       	call   c0106ea7 <pde2page>
c01079d1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01079d8:	00 
c01079d9:	89 04 24             	mov    %eax,(%esp)
c01079dc:	e8 ae d8 ff ff       	call   c010528f <free_pages>
     pgdir[0] = 0;
c01079e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01079ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079ed:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01079f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079f7:	89 04 24             	mov    %eax,(%esp)
c01079fa:	e8 ae 09 00 00       	call   c01083ad <mm_destroy>
     check_mm_struct = NULL;
c01079ff:	c7 05 2c 62 15 c0 00 	movl   $0x0,0xc015622c
c0107a06:	00 00 00 
     
     nr_free = nr_free_store;
c0107a09:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107a0c:	a3 3c 61 15 c0       	mov    %eax,0xc015613c
     free_list = free_list_store;
c0107a11:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107a14:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107a17:	a3 34 61 15 c0       	mov    %eax,0xc0156134
c0107a1c:	89 15 38 61 15 c0    	mov    %edx,0xc0156138

     
     le = &free_list;
c0107a22:	c7 45 e8 34 61 15 c0 	movl   $0xc0156134,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107a29:	eb 1d                	jmp    c0107a48 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107a2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a2e:	83 e8 0c             	sub    $0xc,%eax
c0107a31:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107a34:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107a38:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107a3b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107a3e:	8b 40 08             	mov    0x8(%eax),%eax
c0107a41:	29 c2                	sub    %eax,%edx
c0107a43:	89 d0                	mov    %edx,%eax
c0107a45:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a4b:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107a4e:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107a51:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107a54:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a57:	81 7d e8 34 61 15 c0 	cmpl   $0xc0156134,-0x18(%ebp)
c0107a5e:	75 cb                	jne    c0107a2b <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107a60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a63:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107a6e:	c7 04 24 d1 70 11 c0 	movl   $0xc01170d1,(%esp)
c0107a75:	e8 f7 88 ff ff       	call   c0100371 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107a7a:	c7 04 24 eb 70 11 c0 	movl   $0xc01170eb,(%esp)
c0107a81:	e8 eb 88 ff ff       	call   c0100371 <cprintf>
}
c0107a86:	83 c4 74             	add    $0x74,%esp
c0107a89:	5b                   	pop    %ebx
c0107a8a:	5d                   	pop    %ebp
c0107a8b:	c3                   	ret    

c0107a8c <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107a8c:	55                   	push   %ebp
c0107a8d:	89 e5                	mov    %esp,%ebp
c0107a8f:	83 ec 10             	sub    $0x10,%esp
c0107a92:	c7 45 fc 24 62 15 c0 	movl   $0xc0156224,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107a99:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a9c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107a9f:	89 50 04             	mov    %edx,0x4(%eax)
c0107aa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107aa5:	8b 50 04             	mov    0x4(%eax),%edx
c0107aa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107aab:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107aad:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ab0:	c7 40 14 24 62 15 c0 	movl   $0xc0156224,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107ab7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107abc:	c9                   	leave  
c0107abd:	c3                   	ret    

c0107abe <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107abe:	55                   	push   %ebp
c0107abf:	89 e5                	mov    %esp,%ebp
c0107ac1:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107ac4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ac7:	8b 40 14             	mov    0x14(%eax),%eax
c0107aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107acd:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ad0:	83 c0 14             	add    $0x14,%eax
c0107ad3:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107ad6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107ada:	74 06                	je     c0107ae2 <_fifo_map_swappable+0x24>
c0107adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ae0:	75 24                	jne    c0107b06 <_fifo_map_swappable+0x48>
c0107ae2:	c7 44 24 0c 04 71 11 	movl   $0xc0117104,0xc(%esp)
c0107ae9:	c0 
c0107aea:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107af1:	c0 
c0107af2:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107af9:	00 
c0107afa:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107b01:	e8 d8 93 ff ff       	call   c0100ede <__panic>
c0107b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107b12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107b18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107b1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b21:	8b 40 04             	mov    0x4(%eax),%eax
c0107b24:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107b27:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107b2a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b2d:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107b30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107b36:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b39:	89 10                	mov    %edx,(%eax)
c0107b3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107b3e:	8b 10                	mov    (%eax),%edx
c0107b40:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107b43:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107b46:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b49:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b4c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107b4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b52:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107b55:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107b57:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b5c:	c9                   	leave  
c0107b5d:	c3                   	ret    

c0107b5e <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107b5e:	55                   	push   %ebp
c0107b5f:	89 e5                	mov    %esp,%ebp
c0107b61:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b64:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b67:	8b 40 14             	mov    0x14(%eax),%eax
c0107b6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107b6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b71:	75 24                	jne    c0107b97 <_fifo_swap_out_victim+0x39>
c0107b73:	c7 44 24 0c 4b 71 11 	movl   $0xc011714b,0xc(%esp)
c0107b7a:	c0 
c0107b7b:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107b82:	c0 
c0107b83:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107b8a:	00 
c0107b8b:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107b92:	e8 47 93 ff ff       	call   c0100ede <__panic>
     assert(in_tick==0);
c0107b97:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107b9b:	74 24                	je     c0107bc1 <_fifo_swap_out_victim+0x63>
c0107b9d:	c7 44 24 0c 58 71 11 	movl   $0xc0117158,0xc(%esp)
c0107ba4:	c0 
c0107ba5:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107bac:	c0 
c0107bad:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107bb4:	00 
c0107bb5:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107bbc:	e8 1d 93 ff ff       	call   c0100ede <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bc4:	8b 00                	mov    (%eax),%eax
c0107bc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bcc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107bcf:	75 24                	jne    c0107bf5 <_fifo_swap_out_victim+0x97>
c0107bd1:	c7 44 24 0c 63 71 11 	movl   $0xc0117163,0xc(%esp)
c0107bd8:	c0 
c0107bd9:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107be0:	c0 
c0107be1:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107be8:	00 
c0107be9:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107bf0:	e8 e9 92 ff ff       	call   c0100ede <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107bf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bf8:	83 e8 14             	sub    $0x14,%eax
c0107bfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107bfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c01:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107c04:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c07:	8b 40 04             	mov    0x4(%eax),%eax
c0107c0a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107c0d:	8b 12                	mov    (%edx),%edx
c0107c0f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107c12:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107c15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107c18:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107c1b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107c1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c21:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107c24:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107c26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107c2a:	75 24                	jne    c0107c50 <_fifo_swap_out_victim+0xf2>
c0107c2c:	c7 44 24 0c 6c 71 11 	movl   $0xc011716c,0xc(%esp)
c0107c33:	c0 
c0107c34:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107c3b:	c0 
c0107c3c:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107c43:	00 
c0107c44:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107c4b:	e8 8e 92 ff ff       	call   c0100ede <__panic>
     *ptr_page = p;
c0107c50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c53:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107c56:	89 10                	mov    %edx,(%eax)
     return 0;
c0107c58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c5d:	c9                   	leave  
c0107c5e:	c3                   	ret    

c0107c5f <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107c5f:	55                   	push   %ebp
c0107c60:	89 e5                	mov    %esp,%ebp
c0107c62:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107c65:	c7 04 24 78 71 11 c0 	movl   $0xc0117178,(%esp)
c0107c6c:	e8 00 87 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107c71:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107c76:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107c79:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107c7e:	83 f8 04             	cmp    $0x4,%eax
c0107c81:	74 24                	je     c0107ca7 <_fifo_check_swap+0x48>
c0107c83:	c7 44 24 0c 9e 71 11 	movl   $0xc011719e,0xc(%esp)
c0107c8a:	c0 
c0107c8b:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107c92:	c0 
c0107c93:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107c9a:	00 
c0107c9b:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107ca2:	e8 37 92 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107ca7:	c7 04 24 b0 71 11 c0 	movl   $0xc01171b0,(%esp)
c0107cae:	e8 be 86 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107cb3:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107cb8:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107cbb:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107cc0:	83 f8 04             	cmp    $0x4,%eax
c0107cc3:	74 24                	je     c0107ce9 <_fifo_check_swap+0x8a>
c0107cc5:	c7 44 24 0c 9e 71 11 	movl   $0xc011719e,0xc(%esp)
c0107ccc:	c0 
c0107ccd:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107cd4:	c0 
c0107cd5:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107cdc:	00 
c0107cdd:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107ce4:	e8 f5 91 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107ce9:	c7 04 24 d8 71 11 c0 	movl   $0xc01171d8,(%esp)
c0107cf0:	e8 7c 86 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107cf5:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107cfa:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107cfd:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107d02:	83 f8 04             	cmp    $0x4,%eax
c0107d05:	74 24                	je     c0107d2b <_fifo_check_swap+0xcc>
c0107d07:	c7 44 24 0c 9e 71 11 	movl   $0xc011719e,0xc(%esp)
c0107d0e:	c0 
c0107d0f:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107d16:	c0 
c0107d17:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107d1e:	00 
c0107d1f:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107d26:	e8 b3 91 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d2b:	c7 04 24 00 72 11 c0 	movl   $0xc0117200,(%esp)
c0107d32:	e8 3a 86 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d37:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d3c:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107d3f:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107d44:	83 f8 04             	cmp    $0x4,%eax
c0107d47:	74 24                	je     c0107d6d <_fifo_check_swap+0x10e>
c0107d49:	c7 44 24 0c 9e 71 11 	movl   $0xc011719e,0xc(%esp)
c0107d50:	c0 
c0107d51:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107d58:	c0 
c0107d59:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107d60:	00 
c0107d61:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107d68:	e8 71 91 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107d6d:	c7 04 24 28 72 11 c0 	movl   $0xc0117228,(%esp)
c0107d74:	e8 f8 85 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107d79:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107d7e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107d81:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107d86:	83 f8 05             	cmp    $0x5,%eax
c0107d89:	74 24                	je     c0107daf <_fifo_check_swap+0x150>
c0107d8b:	c7 44 24 0c 4e 72 11 	movl   $0xc011724e,0xc(%esp)
c0107d92:	c0 
c0107d93:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107d9a:	c0 
c0107d9b:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107da2:	00 
c0107da3:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107daa:	e8 2f 91 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107daf:	c7 04 24 00 72 11 c0 	movl   $0xc0117200,(%esp)
c0107db6:	e8 b6 85 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107dbb:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107dc0:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107dc3:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107dc8:	83 f8 05             	cmp    $0x5,%eax
c0107dcb:	74 24                	je     c0107df1 <_fifo_check_swap+0x192>
c0107dcd:	c7 44 24 0c 4e 72 11 	movl   $0xc011724e,0xc(%esp)
c0107dd4:	c0 
c0107dd5:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107ddc:	c0 
c0107ddd:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107de4:	00 
c0107de5:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107dec:	e8 ed 90 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107df1:	c7 04 24 b0 71 11 c0 	movl   $0xc01171b0,(%esp)
c0107df8:	e8 74 85 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107dfd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107e02:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107e05:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107e0a:	83 f8 06             	cmp    $0x6,%eax
c0107e0d:	74 24                	je     c0107e33 <_fifo_check_swap+0x1d4>
c0107e0f:	c7 44 24 0c 5d 72 11 	movl   $0xc011725d,0xc(%esp)
c0107e16:	c0 
c0107e17:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107e1e:	c0 
c0107e1f:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107e26:	00 
c0107e27:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107e2e:	e8 ab 90 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e33:	c7 04 24 00 72 11 c0 	movl   $0xc0117200,(%esp)
c0107e3a:	e8 32 85 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e3f:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e44:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107e47:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107e4c:	83 f8 07             	cmp    $0x7,%eax
c0107e4f:	74 24                	je     c0107e75 <_fifo_check_swap+0x216>
c0107e51:	c7 44 24 0c 6c 72 11 	movl   $0xc011726c,0xc(%esp)
c0107e58:	c0 
c0107e59:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107e60:	c0 
c0107e61:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107e68:	00 
c0107e69:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107e70:	e8 69 90 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107e75:	c7 04 24 78 71 11 c0 	movl   $0xc0117178,(%esp)
c0107e7c:	e8 f0 84 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107e81:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107e86:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107e89:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107e8e:	83 f8 08             	cmp    $0x8,%eax
c0107e91:	74 24                	je     c0107eb7 <_fifo_check_swap+0x258>
c0107e93:	c7 44 24 0c 7b 72 11 	movl   $0xc011727b,0xc(%esp)
c0107e9a:	c0 
c0107e9b:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107ea2:	c0 
c0107ea3:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107eaa:	00 
c0107eab:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107eb2:	e8 27 90 ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107eb7:	c7 04 24 d8 71 11 c0 	movl   $0xc01171d8,(%esp)
c0107ebe:	e8 ae 84 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107ec3:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107ec8:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107ecb:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107ed0:	83 f8 09             	cmp    $0x9,%eax
c0107ed3:	74 24                	je     c0107ef9 <_fifo_check_swap+0x29a>
c0107ed5:	c7 44 24 0c 8a 72 11 	movl   $0xc011728a,0xc(%esp)
c0107edc:	c0 
c0107edd:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107ee4:	c0 
c0107ee5:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107eec:	00 
c0107eed:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107ef4:	e8 e5 8f ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107ef9:	c7 04 24 28 72 11 c0 	movl   $0xc0117228,(%esp)
c0107f00:	e8 6c 84 ff ff       	call   c0100371 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107f05:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107f0a:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107f0d:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107f12:	83 f8 0a             	cmp    $0xa,%eax
c0107f15:	74 24                	je     c0107f3b <_fifo_check_swap+0x2dc>
c0107f17:	c7 44 24 0c 99 72 11 	movl   $0xc0117299,0xc(%esp)
c0107f1e:	c0 
c0107f1f:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107f26:	c0 
c0107f27:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0107f2e:	00 
c0107f2f:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107f36:	e8 a3 8f ff ff       	call   c0100ede <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107f3b:	c7 04 24 b0 71 11 c0 	movl   $0xc01171b0,(%esp)
c0107f42:	e8 2a 84 ff ff       	call   c0100371 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0107f47:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107f4c:	0f b6 00             	movzbl (%eax),%eax
c0107f4f:	3c 0a                	cmp    $0xa,%al
c0107f51:	74 24                	je     c0107f77 <_fifo_check_swap+0x318>
c0107f53:	c7 44 24 0c ac 72 11 	movl   $0xc01172ac,0xc(%esp)
c0107f5a:	c0 
c0107f5b:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107f62:	c0 
c0107f63:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0107f6a:	00 
c0107f6b:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107f72:	e8 67 8f ff ff       	call   c0100ede <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0107f77:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107f7c:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0107f7f:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0107f84:	83 f8 0b             	cmp    $0xb,%eax
c0107f87:	74 24                	je     c0107fad <_fifo_check_swap+0x34e>
c0107f89:	c7 44 24 0c cd 72 11 	movl   $0xc01172cd,0xc(%esp)
c0107f90:	c0 
c0107f91:	c7 44 24 08 22 71 11 	movl   $0xc0117122,0x8(%esp)
c0107f98:	c0 
c0107f99:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0107fa0:	00 
c0107fa1:	c7 04 24 37 71 11 c0 	movl   $0xc0117137,(%esp)
c0107fa8:	e8 31 8f ff ff       	call   c0100ede <__panic>
    return 0;
c0107fad:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107fb2:	c9                   	leave  
c0107fb3:	c3                   	ret    

c0107fb4 <_fifo_init>:


static int
_fifo_init(void)
{
c0107fb4:	55                   	push   %ebp
c0107fb5:	89 e5                	mov    %esp,%ebp
    return 0;
c0107fb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107fbc:	5d                   	pop    %ebp
c0107fbd:	c3                   	ret    

c0107fbe <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107fbe:	55                   	push   %ebp
c0107fbf:	89 e5                	mov    %esp,%ebp
    return 0;
c0107fc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107fc6:	5d                   	pop    %ebp
c0107fc7:	c3                   	ret    

c0107fc8 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107fc8:	55                   	push   %ebp
c0107fc9:	89 e5                	mov    %esp,%ebp
c0107fcb:	b8 00 00 00 00       	mov    $0x0,%eax
c0107fd0:	5d                   	pop    %ebp
c0107fd1:	c3                   	ret    

c0107fd2 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107fd2:	55                   	push   %ebp
c0107fd3:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107fd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fd8:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107fdb:	5d                   	pop    %ebp
c0107fdc:	c3                   	ret    

c0107fdd <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107fdd:	55                   	push   %ebp
c0107fde:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107fe0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107fe6:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107fe9:	5d                   	pop    %ebp
c0107fea:	c3                   	ret    

c0107feb <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107feb:	55                   	push   %ebp
c0107fec:	89 e5                	mov    %esp,%ebp
c0107fee:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107ff1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ff4:	c1 e8 0c             	shr    $0xc,%eax
c0107ff7:	89 c2                	mov    %eax,%edx
c0107ff9:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c0107ffe:	39 c2                	cmp    %eax,%edx
c0108000:	72 1c                	jb     c010801e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0108002:	c7 44 24 08 f0 72 11 	movl   $0xc01172f0,0x8(%esp)
c0108009:	c0 
c010800a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0108011:	00 
c0108012:	c7 04 24 0f 73 11 c0 	movl   $0xc011730f,(%esp)
c0108019:	e8 c0 8e ff ff       	call   c0100ede <__panic>
    }
    return &pages[PPN(pa)];
c010801e:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c0108023:	8b 55 08             	mov    0x8(%ebp),%edx
c0108026:	c1 ea 0c             	shr    $0xc,%edx
c0108029:	c1 e2 05             	shl    $0x5,%edx
c010802c:	01 d0                	add    %edx,%eax
}
c010802e:	c9                   	leave  
c010802f:	c3                   	ret    

c0108030 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0108030:	55                   	push   %ebp
c0108031:	89 e5                	mov    %esp,%ebp
c0108033:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0108036:	8b 45 08             	mov    0x8(%ebp),%eax
c0108039:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010803e:	89 04 24             	mov    %eax,(%esp)
c0108041:	e8 a5 ff ff ff       	call   c0107feb <pa2page>
}
c0108046:	c9                   	leave  
c0108047:	c3                   	ret    

c0108048 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0108048:	55                   	push   %ebp
c0108049:	89 e5                	mov    %esp,%ebp
c010804b:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c010804e:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0108055:	e8 55 cd ff ff       	call   c0104daf <kmalloc>
c010805a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c010805d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108061:	0f 84 81 00 00 00    	je     c01080e8 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0108067:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010806a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010806d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108070:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108073:	89 50 04             	mov    %edx,0x4(%eax)
c0108076:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108079:	8b 50 04             	mov    0x4(%eax),%edx
c010807c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010807f:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0108081:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108084:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c010808b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0108095:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108098:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c010809f:	a1 2c 30 15 c0       	mov    0xc015302c,%eax
c01080a4:	85 c0                	test   %eax,%eax
c01080a6:	74 0d                	je     c01080b5 <mm_create+0x6d>
c01080a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080ab:	89 04 24             	mov    %eax,(%esp)
c01080ae:	e8 9c ee ff ff       	call   c0106f4f <swap_init_mm>
c01080b3:	eb 0a                	jmp    c01080bf <mm_create+0x77>
        else mm->sm_priv = NULL;
c01080b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01080bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01080c6:	00 
c01080c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080ca:	89 04 24             	mov    %eax,(%esp)
c01080cd:	e8 0b ff ff ff       	call   c0107fdd <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c01080d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080d5:	83 c0 1c             	add    $0x1c,%eax
c01080d8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01080df:	00 
c01080e0:	89 04 24             	mov    %eax,(%esp)
c01080e3:	e8 87 1b 00 00       	call   c0109c6f <sem_init>
    }    
    return mm;
c01080e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01080eb:	c9                   	leave  
c01080ec:	c3                   	ret    

c01080ed <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01080ed:	55                   	push   %ebp
c01080ee:	89 e5                	mov    %esp,%ebp
c01080f0:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01080f3:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01080fa:	e8 b0 cc ff ff       	call   c0104daf <kmalloc>
c01080ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108102:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108106:	74 1b                	je     c0108123 <vma_create+0x36>
        vma->vm_start = vm_start;
c0108108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010810b:	8b 55 08             	mov    0x8(%ebp),%edx
c010810e:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0108111:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108114:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108117:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010811a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010811d:	8b 55 10             	mov    0x10(%ebp),%edx
c0108120:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0108123:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108126:	c9                   	leave  
c0108127:	c3                   	ret    

c0108128 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0108128:	55                   	push   %ebp
c0108129:	89 e5                	mov    %esp,%ebp
c010812b:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c010812e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0108135:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108139:	0f 84 95 00 00 00    	je     c01081d4 <find_vma+0xac>
        vma = mm->mmap_cache;
c010813f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108142:	8b 40 08             	mov    0x8(%eax),%eax
c0108145:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0108148:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010814c:	74 16                	je     c0108164 <find_vma+0x3c>
c010814e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108151:	8b 40 04             	mov    0x4(%eax),%eax
c0108154:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108157:	77 0b                	ja     c0108164 <find_vma+0x3c>
c0108159:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010815c:	8b 40 08             	mov    0x8(%eax),%eax
c010815f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108162:	77 61                	ja     c01081c5 <find_vma+0x9d>
                bool found = 0;
c0108164:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c010816b:	8b 45 08             	mov    0x8(%ebp),%eax
c010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108171:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108174:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0108177:	eb 28                	jmp    c01081a1 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0108179:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010817c:	83 e8 10             	sub    $0x10,%eax
c010817f:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108182:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108185:	8b 40 04             	mov    0x4(%eax),%eax
c0108188:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010818b:	77 14                	ja     c01081a1 <find_vma+0x79>
c010818d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108190:	8b 40 08             	mov    0x8(%eax),%eax
c0108193:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108196:	76 09                	jbe    c01081a1 <find_vma+0x79>
                        found = 1;
c0108198:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010819f:	eb 17                	jmp    c01081b8 <find_vma+0x90>
c01081a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01081a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081aa:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01081ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01081b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081b3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01081b6:	75 c1                	jne    c0108179 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01081b8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01081bc:	75 07                	jne    c01081c5 <find_vma+0x9d>
                    vma = NULL;
c01081be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01081c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01081c9:	74 09                	je     c01081d4 <find_vma+0xac>
            mm->mmap_cache = vma;
c01081cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01081ce:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01081d1:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01081d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01081d7:	c9                   	leave  
c01081d8:	c3                   	ret    

c01081d9 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01081d9:	55                   	push   %ebp
c01081da:	89 e5                	mov    %esp,%ebp
c01081dc:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c01081df:	8b 45 08             	mov    0x8(%ebp),%eax
c01081e2:	8b 50 04             	mov    0x4(%eax),%edx
c01081e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01081e8:	8b 40 08             	mov    0x8(%eax),%eax
c01081eb:	39 c2                	cmp    %eax,%edx
c01081ed:	72 24                	jb     c0108213 <check_vma_overlap+0x3a>
c01081ef:	c7 44 24 0c 1d 73 11 	movl   $0xc011731d,0xc(%esp)
c01081f6:	c0 
c01081f7:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01081fe:	c0 
c01081ff:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108206:	00 
c0108207:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c010820e:	e8 cb 8c ff ff       	call   c0100ede <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108213:	8b 45 08             	mov    0x8(%ebp),%eax
c0108216:	8b 50 08             	mov    0x8(%eax),%edx
c0108219:	8b 45 0c             	mov    0xc(%ebp),%eax
c010821c:	8b 40 04             	mov    0x4(%eax),%eax
c010821f:	39 c2                	cmp    %eax,%edx
c0108221:	76 24                	jbe    c0108247 <check_vma_overlap+0x6e>
c0108223:	c7 44 24 0c 60 73 11 	movl   $0xc0117360,0xc(%esp)
c010822a:	c0 
c010822b:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108232:	c0 
c0108233:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010823a:	00 
c010823b:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108242:	e8 97 8c ff ff       	call   c0100ede <__panic>
    assert(next->vm_start < next->vm_end);
c0108247:	8b 45 0c             	mov    0xc(%ebp),%eax
c010824a:	8b 50 04             	mov    0x4(%eax),%edx
c010824d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108250:	8b 40 08             	mov    0x8(%eax),%eax
c0108253:	39 c2                	cmp    %eax,%edx
c0108255:	72 24                	jb     c010827b <check_vma_overlap+0xa2>
c0108257:	c7 44 24 0c 7f 73 11 	movl   $0xc011737f,0xc(%esp)
c010825e:	c0 
c010825f:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108266:	c0 
c0108267:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010826e:	00 
c010826f:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108276:	e8 63 8c ff ff       	call   c0100ede <__panic>
}
c010827b:	c9                   	leave  
c010827c:	c3                   	ret    

c010827d <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c010827d:	55                   	push   %ebp
c010827e:	89 e5                	mov    %esp,%ebp
c0108280:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0108283:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108286:	8b 50 04             	mov    0x4(%eax),%edx
c0108289:	8b 45 0c             	mov    0xc(%ebp),%eax
c010828c:	8b 40 08             	mov    0x8(%eax),%eax
c010828f:	39 c2                	cmp    %eax,%edx
c0108291:	72 24                	jb     c01082b7 <insert_vma_struct+0x3a>
c0108293:	c7 44 24 0c 9d 73 11 	movl   $0xc011739d,0xc(%esp)
c010829a:	c0 
c010829b:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01082a2:	c0 
c01082a3:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01082aa:	00 
c01082ab:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01082b2:	e8 27 8c ff ff       	call   c0100ede <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01082b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01082ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01082bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01082c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01082c9:	eb 21                	jmp    c01082ec <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01082cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082ce:	83 e8 10             	sub    $0x10,%eax
c01082d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01082d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01082d7:	8b 50 04             	mov    0x4(%eax),%edx
c01082da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082dd:	8b 40 04             	mov    0x4(%eax),%eax
c01082e0:	39 c2                	cmp    %eax,%edx
c01082e2:	76 02                	jbe    c01082e6 <insert_vma_struct+0x69>
                break;
c01082e4:	eb 1d                	jmp    c0108303 <insert_vma_struct+0x86>
            }
            le_prev = le;
c01082e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01082ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01082f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082f5:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01082f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108301:	75 c8                	jne    c01082cb <insert_vma_struct+0x4e>
c0108303:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108306:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108309:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010830c:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c010830f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108312:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108315:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108318:	74 15                	je     c010832f <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010831a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010831d:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108320:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108323:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108327:	89 14 24             	mov    %edx,(%esp)
c010832a:	e8 aa fe ff ff       	call   c01081d9 <check_vma_overlap>
    }
    if (le_next != list) {
c010832f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108332:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108335:	74 15                	je     c010834c <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0108337:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010833a:	83 e8 10             	sub    $0x10,%eax
c010833d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108341:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108344:	89 04 24             	mov    %eax,(%esp)
c0108347:	e8 8d fe ff ff       	call   c01081d9 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c010834c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010834f:	8b 55 08             	mov    0x8(%ebp),%edx
c0108352:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0108354:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108357:	8d 50 10             	lea    0x10(%eax),%edx
c010835a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010835d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108360:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108363:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108366:	8b 40 04             	mov    0x4(%eax),%eax
c0108369:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010836c:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010836f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108372:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108375:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108378:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010837b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010837e:	89 10                	mov    %edx,(%eax)
c0108380:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108383:	8b 10                	mov    (%eax),%edx
c0108385:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108388:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010838b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010838e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108391:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108394:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108397:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010839a:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c010839c:	8b 45 08             	mov    0x8(%ebp),%eax
c010839f:	8b 40 10             	mov    0x10(%eax),%eax
c01083a2:	8d 50 01             	lea    0x1(%eax),%edx
c01083a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01083a8:	89 50 10             	mov    %edx,0x10(%eax)
}
c01083ab:	c9                   	leave  
c01083ac:	c3                   	ret    

c01083ad <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01083ad:	55                   	push   %ebp
c01083ae:	89 e5                	mov    %esp,%ebp
c01083b0:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01083b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01083b6:	89 04 24             	mov    %eax,(%esp)
c01083b9:	e8 14 fc ff ff       	call   c0107fd2 <mm_count>
c01083be:	85 c0                	test   %eax,%eax
c01083c0:	74 24                	je     c01083e6 <mm_destroy+0x39>
c01083c2:	c7 44 24 0c b9 73 11 	movl   $0xc01173b9,0xc(%esp)
c01083c9:	c0 
c01083ca:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01083d1:	c0 
c01083d2:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01083d9:	00 
c01083da:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01083e1:	e8 f8 8a ff ff       	call   c0100ede <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01083e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01083e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01083ec:	eb 36                	jmp    c0108424 <mm_destroy+0x77>
c01083ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01083f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083f7:	8b 40 04             	mov    0x4(%eax),%eax
c01083fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01083fd:	8b 12                	mov    (%edx),%edx
c01083ff:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108402:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108405:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108408:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010840b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010840e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108411:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108414:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108416:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108419:	83 e8 10             	sub    $0x10,%eax
c010841c:	89 04 24             	mov    %eax,(%esp)
c010841f:	e8 a6 c9 ff ff       	call   c0104dca <kfree>
c0108424:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108427:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010842a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010842d:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108430:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108436:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108439:	75 b3                	jne    c01083ee <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c010843b:	8b 45 08             	mov    0x8(%ebp),%eax
c010843e:	89 04 24             	mov    %eax,(%esp)
c0108441:	e8 84 c9 ff ff       	call   c0104dca <kfree>
    mm=NULL;
c0108446:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c010844d:	c9                   	leave  
c010844e:	c3                   	ret    

c010844f <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010844f:	55                   	push   %ebp
c0108450:	89 e5                	mov    %esp,%ebp
c0108452:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108455:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108458:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010845b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010845e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108463:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108466:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c010846d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108470:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108473:	01 c2                	add    %eax,%edx
c0108475:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108478:	01 d0                	add    %edx,%eax
c010847a:	83 e8 01             	sub    $0x1,%eax
c010847d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108480:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108483:	ba 00 00 00 00       	mov    $0x0,%edx
c0108488:	f7 75 e8             	divl   -0x18(%ebp)
c010848b:	89 d0                	mov    %edx,%eax
c010848d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108490:	29 c2                	sub    %eax,%edx
c0108492:	89 d0                	mov    %edx,%eax
c0108494:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108497:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c010849e:	76 11                	jbe    c01084b1 <mm_map+0x62>
c01084a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084a3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01084a6:	73 09                	jae    c01084b1 <mm_map+0x62>
c01084a8:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01084af:	76 0a                	jbe    c01084bb <mm_map+0x6c>
        return -E_INVAL;
c01084b1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01084b6:	e9 ae 00 00 00       	jmp    c0108569 <mm_map+0x11a>
    }

    assert(mm != NULL);
c01084bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084bf:	75 24                	jne    c01084e5 <mm_map+0x96>
c01084c1:	c7 44 24 0c cb 73 11 	movl   $0xc01173cb,0xc(%esp)
c01084c8:	c0 
c01084c9:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01084d0:	c0 
c01084d1:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01084d8:	00 
c01084d9:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01084e0:	e8 f9 89 ff ff       	call   c0100ede <__panic>

    int ret = -E_INVAL;
c01084e5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01084ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01084f6:	89 04 24             	mov    %eax,(%esp)
c01084f9:	e8 2a fc ff ff       	call   c0108128 <find_vma>
c01084fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108501:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108505:	74 0d                	je     c0108514 <mm_map+0xc5>
c0108507:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010850a:	8b 40 04             	mov    0x4(%eax),%eax
c010850d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108510:	73 02                	jae    c0108514 <mm_map+0xc5>
        goto out;
c0108512:	eb 52                	jmp    c0108566 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108514:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010851b:	8b 45 14             	mov    0x14(%ebp),%eax
c010851e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108522:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108525:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108529:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010852c:	89 04 24             	mov    %eax,(%esp)
c010852f:	e8 b9 fb ff ff       	call   c01080ed <vma_create>
c0108534:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108537:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010853b:	75 02                	jne    c010853f <mm_map+0xf0>
        goto out;
c010853d:	eb 27                	jmp    c0108566 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010853f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108542:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108546:	8b 45 08             	mov    0x8(%ebp),%eax
c0108549:	89 04 24             	mov    %eax,(%esp)
c010854c:	e8 2c fd ff ff       	call   c010827d <insert_vma_struct>
    if (vma_store != NULL) {
c0108551:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108555:	74 08                	je     c010855f <mm_map+0x110>
        *vma_store = vma;
c0108557:	8b 45 18             	mov    0x18(%ebp),%eax
c010855a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010855d:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010855f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108566:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108569:	c9                   	leave  
c010856a:	c3                   	ret    

c010856b <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c010856b:	55                   	push   %ebp
c010856c:	89 e5                	mov    %esp,%ebp
c010856e:	56                   	push   %esi
c010856f:	53                   	push   %ebx
c0108570:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0108573:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108577:	74 06                	je     c010857f <dup_mmap+0x14>
c0108579:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010857d:	75 24                	jne    c01085a3 <dup_mmap+0x38>
c010857f:	c7 44 24 0c d6 73 11 	movl   $0xc01173d6,0xc(%esp)
c0108586:	c0 
c0108587:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c010858e:	c0 
c010858f:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108596:	00 
c0108597:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c010859e:	e8 3b 89 ff ff       	call   c0100ede <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01085a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01085a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01085af:	e9 92 00 00 00       	jmp    c0108646 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01085b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b7:	83 e8 10             	sub    $0x10,%eax
c01085ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01085bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085c0:	8b 48 0c             	mov    0xc(%eax),%ecx
c01085c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085c6:	8b 50 08             	mov    0x8(%eax),%edx
c01085c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085cc:	8b 40 04             	mov    0x4(%eax),%eax
c01085cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01085d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01085d7:	89 04 24             	mov    %eax,(%esp)
c01085da:	e8 0e fb ff ff       	call   c01080ed <vma_create>
c01085df:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01085e2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01085e6:	75 07                	jne    c01085ef <dup_mmap+0x84>
            return -E_NO_MEM;
c01085e8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01085ed:	eb 76                	jmp    c0108665 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01085ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01085f9:	89 04 24             	mov    %eax,(%esp)
c01085fc:	e8 7c fc ff ff       	call   c010827d <insert_vma_struct>

        bool share = 0;
c0108601:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108608:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010860b:	8b 58 08             	mov    0x8(%eax),%ebx
c010860e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108611:	8b 48 04             	mov    0x4(%eax),%ecx
c0108614:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108617:	8b 50 0c             	mov    0xc(%eax),%edx
c010861a:	8b 45 08             	mov    0x8(%ebp),%eax
c010861d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108620:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108623:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108627:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010862b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010862f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108633:	89 04 24             	mov    %eax,(%esp)
c0108636:	e8 ba d6 ff ff       	call   c0105cf5 <copy_range>
c010863b:	85 c0                	test   %eax,%eax
c010863d:	74 07                	je     c0108646 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010863f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108644:	eb 1f                	jmp    c0108665 <dup_mmap+0xfa>
c0108646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108649:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010864c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010864f:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108651:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108654:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108657:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010865a:	0f 85 54 ff ff ff    	jne    c01085b4 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0108660:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108665:	83 c4 40             	add    $0x40,%esp
c0108668:	5b                   	pop    %ebx
c0108669:	5e                   	pop    %esi
c010866a:	5d                   	pop    %ebp
c010866b:	c3                   	ret    

c010866c <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c010866c:	55                   	push   %ebp
c010866d:	89 e5                	mov    %esp,%ebp
c010866f:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108672:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108676:	74 0f                	je     c0108687 <exit_mmap+0x1b>
c0108678:	8b 45 08             	mov    0x8(%ebp),%eax
c010867b:	89 04 24             	mov    %eax,(%esp)
c010867e:	e8 4f f9 ff ff       	call   c0107fd2 <mm_count>
c0108683:	85 c0                	test   %eax,%eax
c0108685:	74 24                	je     c01086ab <exit_mmap+0x3f>
c0108687:	c7 44 24 0c f4 73 11 	movl   $0xc01173f4,0xc(%esp)
c010868e:	c0 
c010868f:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108696:	c0 
c0108697:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010869e:	00 
c010869f:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01086a6:	e8 33 88 ff ff       	call   c0100ede <__panic>
    pde_t *pgdir = mm->pgdir;
c01086ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01086ae:	8b 40 0c             	mov    0xc(%eax),%eax
c01086b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01086b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01086b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01086ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01086c0:	eb 28                	jmp    c01086ea <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01086c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086c5:	83 e8 10             	sub    $0x10,%eax
c01086c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01086cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086ce:	8b 50 08             	mov    0x8(%eax),%edx
c01086d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086d4:	8b 40 04             	mov    0x4(%eax),%eax
c01086d7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086e2:	89 04 24             	mov    %eax,(%esp)
c01086e5:	e8 10 d4 ff ff       	call   c0105afa <unmap_range>
c01086ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01086f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01086f3:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01086f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01086ff:	75 c1                	jne    c01086c2 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108701:	eb 28                	jmp    c010872b <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108706:	83 e8 10             	sub    $0x10,%eax
c0108709:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010870c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010870f:	8b 50 08             	mov    0x8(%eax),%edx
c0108712:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108715:	8b 40 04             	mov    0x4(%eax),%eax
c0108718:	89 54 24 08          	mov    %edx,0x8(%esp)
c010871c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108723:	89 04 24             	mov    %eax,(%esp)
c0108726:	e8 c3 d4 ff ff       	call   c0105bee <exit_range>
c010872b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010872e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108731:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108734:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108737:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010873a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010873d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108740:	75 c1                	jne    c0108703 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108742:	c9                   	leave  
c0108743:	c3                   	ret    

c0108744 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108744:	55                   	push   %ebp
c0108745:	89 e5                	mov    %esp,%ebp
c0108747:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c010874a:	8b 45 10             	mov    0x10(%ebp),%eax
c010874d:	8b 55 18             	mov    0x18(%ebp),%edx
c0108750:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108754:	8b 55 14             	mov    0x14(%ebp),%edx
c0108757:	89 54 24 08          	mov    %edx,0x8(%esp)
c010875b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010875f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108762:	89 04 24             	mov    %eax,(%esp)
c0108765:	e8 e5 09 00 00       	call   c010914f <user_mem_check>
c010876a:	85 c0                	test   %eax,%eax
c010876c:	75 07                	jne    c0108775 <copy_from_user+0x31>
        return 0;
c010876e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108773:	eb 1e                	jmp    c0108793 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108775:	8b 45 14             	mov    0x14(%ebp),%eax
c0108778:	89 44 24 08          	mov    %eax,0x8(%esp)
c010877c:	8b 45 10             	mov    0x10(%ebp),%eax
c010877f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108783:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108786:	89 04 24             	mov    %eax,(%esp)
c0108789:	e8 bb cf 00 00       	call   c0115749 <memcpy>
    return 1;
c010878e:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108793:	c9                   	leave  
c0108794:	c3                   	ret    

c0108795 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108795:	55                   	push   %ebp
c0108796:	89 e5                	mov    %esp,%ebp
c0108798:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c010879b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010879e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01087a5:	00 
c01087a6:	8b 55 14             	mov    0x14(%ebp),%edx
c01087a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01087ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01087b4:	89 04 24             	mov    %eax,(%esp)
c01087b7:	e8 93 09 00 00       	call   c010914f <user_mem_check>
c01087bc:	85 c0                	test   %eax,%eax
c01087be:	75 07                	jne    c01087c7 <copy_to_user+0x32>
        return 0;
c01087c0:	b8 00 00 00 00       	mov    $0x0,%eax
c01087c5:	eb 1e                	jmp    c01087e5 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01087c7:	8b 45 14             	mov    0x14(%ebp),%eax
c01087ca:	89 44 24 08          	mov    %eax,0x8(%esp)
c01087ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01087d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01087d8:	89 04 24             	mov    %eax,(%esp)
c01087db:	e8 69 cf 00 00       	call   c0115749 <memcpy>
    return 1;
c01087e0:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01087e5:	c9                   	leave  
c01087e6:	c3                   	ret    

c01087e7 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01087e7:	55                   	push   %ebp
c01087e8:	89 e5                	mov    %esp,%ebp
c01087ea:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01087ed:	e8 02 00 00 00       	call   c01087f4 <check_vmm>
}
c01087f2:	c9                   	leave  
c01087f3:	c3                   	ret    

c01087f4 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01087f4:	55                   	push   %ebp
c01087f5:	89 e5                	mov    %esp,%ebp
c01087f7:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01087fa:	e8 c2 ca ff ff       	call   c01052c1 <nr_free_pages>
c01087ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108802:	e8 13 00 00 00       	call   c010881a <check_vma_struct>
    check_pgfault();
c0108807:	e8 a7 04 00 00       	call   c0108cb3 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c010880c:	c7 04 24 14 74 11 c0 	movl   $0xc0117414,(%esp)
c0108813:	e8 59 7b ff ff       	call   c0100371 <cprintf>
}
c0108818:	c9                   	leave  
c0108819:	c3                   	ret    

c010881a <check_vma_struct>:

static void
check_vma_struct(void) {
c010881a:	55                   	push   %ebp
c010881b:	89 e5                	mov    %esp,%ebp
c010881d:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108820:	e8 9c ca ff ff       	call   c01052c1 <nr_free_pages>
c0108825:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108828:	e8 1b f8 ff ff       	call   c0108048 <mm_create>
c010882d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108830:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108834:	75 24                	jne    c010885a <check_vma_struct+0x40>
c0108836:	c7 44 24 0c cb 73 11 	movl   $0xc01173cb,0xc(%esp)
c010883d:	c0 
c010883e:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108845:	c0 
c0108846:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010884d:	00 
c010884e:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108855:	e8 84 86 ff ff       	call   c0100ede <__panic>

    int step1 = 10, step2 = step1 * 10;
c010885a:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108861:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108864:	89 d0                	mov    %edx,%eax
c0108866:	c1 e0 02             	shl    $0x2,%eax
c0108869:	01 d0                	add    %edx,%eax
c010886b:	01 c0                	add    %eax,%eax
c010886d:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108870:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108873:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108876:	eb 70                	jmp    c01088e8 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108878:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010887b:	89 d0                	mov    %edx,%eax
c010887d:	c1 e0 02             	shl    $0x2,%eax
c0108880:	01 d0                	add    %edx,%eax
c0108882:	83 c0 02             	add    $0x2,%eax
c0108885:	89 c1                	mov    %eax,%ecx
c0108887:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010888a:	89 d0                	mov    %edx,%eax
c010888c:	c1 e0 02             	shl    $0x2,%eax
c010888f:	01 d0                	add    %edx,%eax
c0108891:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108898:	00 
c0108899:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010889d:	89 04 24             	mov    %eax,(%esp)
c01088a0:	e8 48 f8 ff ff       	call   c01080ed <vma_create>
c01088a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01088a8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01088ac:	75 24                	jne    c01088d2 <check_vma_struct+0xb8>
c01088ae:	c7 44 24 0c 2c 74 11 	movl   $0xc011742c,0xc(%esp)
c01088b5:	c0 
c01088b6:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01088bd:	c0 
c01088be:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01088c5:	00 
c01088c6:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01088cd:	e8 0c 86 ff ff       	call   c0100ede <__panic>
        insert_vma_struct(mm, vma);
c01088d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01088d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088dc:	89 04 24             	mov    %eax,(%esp)
c01088df:	e8 99 f9 ff ff       	call   c010827d <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01088e4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01088e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01088ec:	7f 8a                	jg     c0108878 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01088ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088f1:	83 c0 01             	add    $0x1,%eax
c01088f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01088f7:	eb 70                	jmp    c0108969 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01088f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088fc:	89 d0                	mov    %edx,%eax
c01088fe:	c1 e0 02             	shl    $0x2,%eax
c0108901:	01 d0                	add    %edx,%eax
c0108903:	83 c0 02             	add    $0x2,%eax
c0108906:	89 c1                	mov    %eax,%ecx
c0108908:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010890b:	89 d0                	mov    %edx,%eax
c010890d:	c1 e0 02             	shl    $0x2,%eax
c0108910:	01 d0                	add    %edx,%eax
c0108912:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108919:	00 
c010891a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010891e:	89 04 24             	mov    %eax,(%esp)
c0108921:	e8 c7 f7 ff ff       	call   c01080ed <vma_create>
c0108926:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108929:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010892d:	75 24                	jne    c0108953 <check_vma_struct+0x139>
c010892f:	c7 44 24 0c 2c 74 11 	movl   $0xc011742c,0xc(%esp)
c0108936:	c0 
c0108937:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c010893e:	c0 
c010893f:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108946:	00 
c0108947:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c010894e:	e8 8b 85 ff ff       	call   c0100ede <__panic>
        insert_vma_struct(mm, vma);
c0108953:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108956:	89 44 24 04          	mov    %eax,0x4(%esp)
c010895a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010895d:	89 04 24             	mov    %eax,(%esp)
c0108960:	e8 18 f9 ff ff       	call   c010827d <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108965:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010896c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010896f:	7e 88                	jle    c01088f9 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108971:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108974:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108977:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010897a:	8b 40 04             	mov    0x4(%eax),%eax
c010897d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108980:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108987:	e9 97 00 00 00       	jmp    c0108a23 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c010898c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010898f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108992:	75 24                	jne    c01089b8 <check_vma_struct+0x19e>
c0108994:	c7 44 24 0c 38 74 11 	movl   $0xc0117438,0xc(%esp)
c010899b:	c0 
c010899c:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01089a3:	c0 
c01089a4:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01089ab:	00 
c01089ac:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01089b3:	e8 26 85 ff ff       	call   c0100ede <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01089b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01089bb:	83 e8 10             	sub    $0x10,%eax
c01089be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01089c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01089c4:	8b 48 04             	mov    0x4(%eax),%ecx
c01089c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01089ca:	89 d0                	mov    %edx,%eax
c01089cc:	c1 e0 02             	shl    $0x2,%eax
c01089cf:	01 d0                	add    %edx,%eax
c01089d1:	39 c1                	cmp    %eax,%ecx
c01089d3:	75 17                	jne    c01089ec <check_vma_struct+0x1d2>
c01089d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01089d8:	8b 48 08             	mov    0x8(%eax),%ecx
c01089db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01089de:	89 d0                	mov    %edx,%eax
c01089e0:	c1 e0 02             	shl    $0x2,%eax
c01089e3:	01 d0                	add    %edx,%eax
c01089e5:	83 c0 02             	add    $0x2,%eax
c01089e8:	39 c1                	cmp    %eax,%ecx
c01089ea:	74 24                	je     c0108a10 <check_vma_struct+0x1f6>
c01089ec:	c7 44 24 0c 50 74 11 	movl   $0xc0117450,0xc(%esp)
c01089f3:	c0 
c01089f4:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c01089fb:	c0 
c01089fc:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108a03:	00 
c0108a04:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108a0b:	e8 ce 84 ff ff       	call   c0100ede <__panic>
c0108a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108a13:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108a16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108a19:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108a1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108a1f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a26:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108a29:	0f 8e 5d ff ff ff    	jle    c010898c <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108a2f:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108a36:	e9 cd 01 00 00       	jmp    c0108c08 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108a3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a45:	89 04 24             	mov    %eax,(%esp)
c0108a48:	e8 db f6 ff ff       	call   c0108128 <find_vma>
c0108a4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108a50:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108a54:	75 24                	jne    c0108a7a <check_vma_struct+0x260>
c0108a56:	c7 44 24 0c 85 74 11 	movl   $0xc0117485,0xc(%esp)
c0108a5d:	c0 
c0108a5e:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108a65:	c0 
c0108a66:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108a6d:	00 
c0108a6e:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108a75:	e8 64 84 ff ff       	call   c0100ede <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a7d:	83 c0 01             	add    $0x1,%eax
c0108a80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a87:	89 04 24             	mov    %eax,(%esp)
c0108a8a:	e8 99 f6 ff ff       	call   c0108128 <find_vma>
c0108a8f:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108a92:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108a96:	75 24                	jne    c0108abc <check_vma_struct+0x2a2>
c0108a98:	c7 44 24 0c 92 74 11 	movl   $0xc0117492,0xc(%esp)
c0108a9f:	c0 
c0108aa0:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108aa7:	c0 
c0108aa8:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108aaf:	00 
c0108ab0:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108ab7:	e8 22 84 ff ff       	call   c0100ede <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108abf:	83 c0 02             	add    $0x2,%eax
c0108ac2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ac6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ac9:	89 04 24             	mov    %eax,(%esp)
c0108acc:	e8 57 f6 ff ff       	call   c0108128 <find_vma>
c0108ad1:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108ad4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108ad8:	74 24                	je     c0108afe <check_vma_struct+0x2e4>
c0108ada:	c7 44 24 0c 9f 74 11 	movl   $0xc011749f,0xc(%esp)
c0108ae1:	c0 
c0108ae2:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108ae9:	c0 
c0108aea:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108af1:	00 
c0108af2:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108af9:	e8 e0 83 ff ff       	call   c0100ede <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b01:	83 c0 03             	add    $0x3,%eax
c0108b04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b0b:	89 04 24             	mov    %eax,(%esp)
c0108b0e:	e8 15 f6 ff ff       	call   c0108128 <find_vma>
c0108b13:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108b16:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108b1a:	74 24                	je     c0108b40 <check_vma_struct+0x326>
c0108b1c:	c7 44 24 0c ac 74 11 	movl   $0xc01174ac,0xc(%esp)
c0108b23:	c0 
c0108b24:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108b2b:	c0 
c0108b2c:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108b33:	00 
c0108b34:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108b3b:	e8 9e 83 ff ff       	call   c0100ede <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b43:	83 c0 04             	add    $0x4,%eax
c0108b46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b4d:	89 04 24             	mov    %eax,(%esp)
c0108b50:	e8 d3 f5 ff ff       	call   c0108128 <find_vma>
c0108b55:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108b58:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108b5c:	74 24                	je     c0108b82 <check_vma_struct+0x368>
c0108b5e:	c7 44 24 0c b9 74 11 	movl   $0xc01174b9,0xc(%esp)
c0108b65:	c0 
c0108b66:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108b6d:	c0 
c0108b6e:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108b75:	00 
c0108b76:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108b7d:	e8 5c 83 ff ff       	call   c0100ede <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108b82:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b85:	8b 50 04             	mov    0x4(%eax),%edx
c0108b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b8b:	39 c2                	cmp    %eax,%edx
c0108b8d:	75 10                	jne    c0108b9f <check_vma_struct+0x385>
c0108b8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b92:	8b 50 08             	mov    0x8(%eax),%edx
c0108b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b98:	83 c0 02             	add    $0x2,%eax
c0108b9b:	39 c2                	cmp    %eax,%edx
c0108b9d:	74 24                	je     c0108bc3 <check_vma_struct+0x3a9>
c0108b9f:	c7 44 24 0c c8 74 11 	movl   $0xc01174c8,0xc(%esp)
c0108ba6:	c0 
c0108ba7:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108bae:	c0 
c0108baf:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108bb6:	00 
c0108bb7:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108bbe:	e8 1b 83 ff ff       	call   c0100ede <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108bc3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108bc6:	8b 50 04             	mov    0x4(%eax),%edx
c0108bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bcc:	39 c2                	cmp    %eax,%edx
c0108bce:	75 10                	jne    c0108be0 <check_vma_struct+0x3c6>
c0108bd0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108bd3:	8b 50 08             	mov    0x8(%eax),%edx
c0108bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bd9:	83 c0 02             	add    $0x2,%eax
c0108bdc:	39 c2                	cmp    %eax,%edx
c0108bde:	74 24                	je     c0108c04 <check_vma_struct+0x3ea>
c0108be0:	c7 44 24 0c f8 74 11 	movl   $0xc01174f8,0xc(%esp)
c0108be7:	c0 
c0108be8:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108bef:	c0 
c0108bf0:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108bf7:	00 
c0108bf8:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108bff:	e8 da 82 ff ff       	call   c0100ede <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108c04:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108c08:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108c0b:	89 d0                	mov    %edx,%eax
c0108c0d:	c1 e0 02             	shl    $0x2,%eax
c0108c10:	01 d0                	add    %edx,%eax
c0108c12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108c15:	0f 8d 20 fe ff ff    	jge    c0108a3b <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108c1b:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108c22:	eb 70                	jmp    c0108c94 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c27:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c2e:	89 04 24             	mov    %eax,(%esp)
c0108c31:	e8 f2 f4 ff ff       	call   c0108128 <find_vma>
c0108c36:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108c39:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108c3d:	74 27                	je     c0108c66 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108c3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108c42:	8b 50 08             	mov    0x8(%eax),%edx
c0108c45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108c48:	8b 40 04             	mov    0x4(%eax),%eax
c0108c4b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108c4f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c5a:	c7 04 24 28 75 11 c0 	movl   $0xc0117528,(%esp)
c0108c61:	e8 0b 77 ff ff       	call   c0100371 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108c66:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108c6a:	74 24                	je     c0108c90 <check_vma_struct+0x476>
c0108c6c:	c7 44 24 0c 4d 75 11 	movl   $0xc011754d,0xc(%esp)
c0108c73:	c0 
c0108c74:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108c7b:	c0 
c0108c7c:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108c83:	00 
c0108c84:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108c8b:	e8 4e 82 ff ff       	call   c0100ede <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108c90:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c98:	79 8a                	jns    c0108c24 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108c9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c9d:	89 04 24             	mov    %eax,(%esp)
c0108ca0:	e8 08 f7 ff ff       	call   c01083ad <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108ca5:	c7 04 24 64 75 11 c0 	movl   $0xc0117564,(%esp)
c0108cac:	e8 c0 76 ff ff       	call   c0100371 <cprintf>
}
c0108cb1:	c9                   	leave  
c0108cb2:	c3                   	ret    

c0108cb3 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108cb3:	55                   	push   %ebp
c0108cb4:	89 e5                	mov    %esp,%ebp
c0108cb6:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108cb9:	e8 03 c6 ff ff       	call   c01052c1 <nr_free_pages>
c0108cbe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108cc1:	e8 82 f3 ff ff       	call   c0108048 <mm_create>
c0108cc6:	a3 2c 62 15 c0       	mov    %eax,0xc015622c
    assert(check_mm_struct != NULL);
c0108ccb:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c0108cd0:	85 c0                	test   %eax,%eax
c0108cd2:	75 24                	jne    c0108cf8 <check_pgfault+0x45>
c0108cd4:	c7 44 24 0c 83 75 11 	movl   $0xc0117583,0xc(%esp)
c0108cdb:	c0 
c0108cdc:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108ce3:	c0 
c0108ce4:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108ceb:	00 
c0108cec:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108cf3:	e8 e6 81 ff ff       	call   c0100ede <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108cf8:	a1 2c 62 15 c0       	mov    0xc015622c,%eax
c0108cfd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108d00:	8b 15 00 fa 14 c0    	mov    0xc014fa00,%edx
c0108d06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d09:	89 50 0c             	mov    %edx,0xc(%eax)
c0108d0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d0f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108d15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d18:	8b 00                	mov    (%eax),%eax
c0108d1a:	85 c0                	test   %eax,%eax
c0108d1c:	74 24                	je     c0108d42 <check_pgfault+0x8f>
c0108d1e:	c7 44 24 0c 9b 75 11 	movl   $0xc011759b,0xc(%esp)
c0108d25:	c0 
c0108d26:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108d2d:	c0 
c0108d2e:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108d35:	00 
c0108d36:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108d3d:	e8 9c 81 ff ff       	call   c0100ede <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108d42:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108d49:	00 
c0108d4a:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108d51:	00 
c0108d52:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108d59:	e8 8f f3 ff ff       	call   c01080ed <vma_create>
c0108d5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108d61:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108d65:	75 24                	jne    c0108d8b <check_pgfault+0xd8>
c0108d67:	c7 44 24 0c 2c 74 11 	movl   $0xc011742c,0xc(%esp)
c0108d6e:	c0 
c0108d6f:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108d76:	c0 
c0108d77:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108d7e:	00 
c0108d7f:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108d86:	e8 53 81 ff ff       	call   c0100ede <__panic>

    insert_vma_struct(mm, vma);
c0108d8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d95:	89 04 24             	mov    %eax,(%esp)
c0108d98:	e8 e0 f4 ff ff       	call   c010827d <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108d9d:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108da4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108da7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dae:	89 04 24             	mov    %eax,(%esp)
c0108db1:	e8 72 f3 ff ff       	call   c0108128 <find_vma>
c0108db6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108db9:	74 24                	je     c0108ddf <check_pgfault+0x12c>
c0108dbb:	c7 44 24 0c a9 75 11 	movl   $0xc01175a9,0xc(%esp)
c0108dc2:	c0 
c0108dc3:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108dca:	c0 
c0108dcb:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108dd2:	00 
c0108dd3:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108dda:	e8 ff 80 ff ff       	call   c0100ede <__panic>

    int i, sum = 0;
c0108ddf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108de6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108ded:	eb 17                	jmp    c0108e06 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108def:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108df2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108df5:	01 d0                	add    %edx,%eax
c0108df7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108dfa:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dff:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108e02:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108e06:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108e0a:	7e e3                	jle    c0108def <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108e0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108e13:	eb 15                	jmp    c0108e2a <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108e15:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108e18:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108e1b:	01 d0                	add    %edx,%eax
c0108e1d:	0f b6 00             	movzbl (%eax),%eax
c0108e20:	0f be c0             	movsbl %al,%eax
c0108e23:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108e26:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108e2a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108e2e:	7e e5                	jle    c0108e15 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108e30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108e34:	74 24                	je     c0108e5a <check_pgfault+0x1a7>
c0108e36:	c7 44 24 0c c3 75 11 	movl   $0xc01175c3,0xc(%esp)
c0108e3d:	c0 
c0108e3e:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108e45:	c0 
c0108e46:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108e4d:	00 
c0108e4e:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108e55:	e8 84 80 ff ff       	call   c0100ede <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108e5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108e5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108e60:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108e63:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108e68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e6f:	89 04 24             	mov    %eax,(%esp)
c0108e72:	e8 a1 d0 ff ff       	call   c0105f18 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108e77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e7a:	8b 00                	mov    (%eax),%eax
c0108e7c:	89 04 24             	mov    %eax,(%esp)
c0108e7f:	e8 ac f1 ff ff       	call   c0108030 <pde2page>
c0108e84:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108e8b:	00 
c0108e8c:	89 04 24             	mov    %eax,(%esp)
c0108e8f:	e8 fb c3 ff ff       	call   c010528f <free_pages>
    pgdir[0] = 0;
c0108e94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108e9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ea0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108ea7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108eaa:	89 04 24             	mov    %eax,(%esp)
c0108ead:	e8 fb f4 ff ff       	call   c01083ad <mm_destroy>
    check_mm_struct = NULL;
c0108eb2:	c7 05 2c 62 15 c0 00 	movl   $0x0,0xc015622c
c0108eb9:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108ebc:	e8 00 c4 ff ff       	call   c01052c1 <nr_free_pages>
c0108ec1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108ec4:	74 24                	je     c0108eea <check_pgfault+0x237>
c0108ec6:	c7 44 24 0c cc 75 11 	movl   $0xc01175cc,0xc(%esp)
c0108ecd:	c0 
c0108ece:	c7 44 24 08 3b 73 11 	movl   $0xc011733b,0x8(%esp)
c0108ed5:	c0 
c0108ed6:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108edd:	00 
c0108ede:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108ee5:	e8 f4 7f ff ff       	call   c0100ede <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108eea:	c7 04 24 f3 75 11 c0 	movl   $0xc01175f3,(%esp)
c0108ef1:	e8 7b 74 ff ff       	call   c0100371 <cprintf>
}
c0108ef6:	c9                   	leave  
c0108ef7:	c3                   	ret    

c0108ef8 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108ef8:	55                   	push   %ebp
c0108ef9:	89 e5                	mov    %esp,%ebp
c0108efb:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108efe:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108f05:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f0f:	89 04 24             	mov    %eax,(%esp)
c0108f12:	e8 11 f2 ff ff       	call   c0108128 <find_vma>
c0108f17:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108f1a:	a1 38 30 15 c0       	mov    0xc0153038,%eax
c0108f1f:	83 c0 01             	add    $0x1,%eax
c0108f22:	a3 38 30 15 c0       	mov    %eax,0xc0153038
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108f27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108f2b:	74 0b                	je     c0108f38 <do_pgfault+0x40>
c0108f2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f30:	8b 40 04             	mov    0x4(%eax),%eax
c0108f33:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108f36:	76 18                	jbe    c0108f50 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108f38:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f3f:	c7 04 24 10 76 11 c0 	movl   $0xc0117610,(%esp)
c0108f46:	e8 26 74 ff ff       	call   c0100371 <cprintf>
        goto failed;
c0108f4b:	e9 fa 01 00 00       	jmp    c010914a <do_pgfault+0x252>
    }
    //check the error_code
    switch (error_code & 3) {
c0108f50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f53:	83 e0 03             	and    $0x3,%eax
c0108f56:	85 c0                	test   %eax,%eax
c0108f58:	74 36                	je     c0108f90 <do_pgfault+0x98>
c0108f5a:	83 f8 01             	cmp    $0x1,%eax
c0108f5d:	74 20                	je     c0108f7f <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108f5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f62:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f65:	83 e0 02             	and    $0x2,%eax
c0108f68:	85 c0                	test   %eax,%eax
c0108f6a:	75 11                	jne    c0108f7d <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108f6c:	c7 04 24 40 76 11 c0 	movl   $0xc0117640,(%esp)
c0108f73:	e8 f9 73 ff ff       	call   c0100371 <cprintf>
            goto failed;
c0108f78:	e9 cd 01 00 00       	jmp    c010914a <do_pgfault+0x252>
        }
        break;
c0108f7d:	eb 2f                	jmp    c0108fae <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108f7f:	c7 04 24 a0 76 11 c0 	movl   $0xc01176a0,(%esp)
c0108f86:	e8 e6 73 ff ff       	call   c0100371 <cprintf>
        goto failed;
c0108f8b:	e9 ba 01 00 00       	jmp    c010914a <do_pgfault+0x252>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108f90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f93:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f96:	83 e0 05             	and    $0x5,%eax
c0108f99:	85 c0                	test   %eax,%eax
c0108f9b:	75 11                	jne    c0108fae <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108f9d:	c7 04 24 d8 76 11 c0 	movl   $0xc01176d8,(%esp)
c0108fa4:	e8 c8 73 ff ff       	call   c0100371 <cprintf>
            goto failed;
c0108fa9:	e9 9c 01 00 00       	jmp    c010914a <do_pgfault+0x252>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108fae:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108fb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108fb8:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fbb:	83 e0 02             	and    $0x2,%eax
c0108fbe:	85 c0                	test   %eax,%eax
c0108fc0:	74 04                	je     c0108fc6 <do_pgfault+0xce>
        perm |= PTE_W;
c0108fc2:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108fc6:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108fcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108fcf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108fd4:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108fd7:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108fde:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
	if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108fe5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe8:	8b 40 0c             	mov    0xc(%eax),%eax
c0108feb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108ff2:	00 
c0108ff3:	8b 55 10             	mov    0x10(%ebp),%edx
c0108ff6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ffa:	89 04 24             	mov    %eax,(%esp)
c0108ffd:	e8 06 c9 ff ff       	call   c0105908 <get_pte>
c0109002:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109005:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109009:	75 11                	jne    c010901c <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c010900b:	c7 04 24 3b 77 11 c0 	movl   $0xc011773b,(%esp)
c0109012:	e8 5a 73 ff ff       	call   c0100371 <cprintf>
        goto failed;
c0109017:	e9 2e 01 00 00       	jmp    c010914a <do_pgfault+0x252>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c010901c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010901f:	8b 00                	mov    (%eax),%eax
c0109021:	85 c0                	test   %eax,%eax
c0109023:	75 35                	jne    c010905a <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0109025:	8b 45 08             	mov    0x8(%ebp),%eax
c0109028:	8b 40 0c             	mov    0xc(%eax),%eax
c010902b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010902e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109032:	8b 55 10             	mov    0x10(%ebp),%edx
c0109035:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109039:	89 04 24             	mov    %eax,(%esp)
c010903c:	e8 31 d0 ff ff       	call   c0106072 <pgdir_alloc_page>
c0109041:	85 c0                	test   %eax,%eax
c0109043:	0f 85 fa 00 00 00    	jne    c0109143 <do_pgfault+0x24b>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0109049:	c7 04 24 5c 77 11 c0 	movl   $0xc011775c,(%esp)
c0109050:	e8 1c 73 ff ff       	call   c0100371 <cprintf>
            goto failed;
c0109055:	e9 f0 00 00 00       	jmp    c010914a <do_pgfault+0x252>
        }
    }
    else {
        struct Page *page=NULL;
c010905a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0109061:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109064:	8b 00                	mov    (%eax),%eax
c0109066:	89 44 24 08          	mov    %eax,0x8(%esp)
c010906a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010906d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109071:	c7 04 24 83 77 11 c0 	movl   $0xc0117783,(%esp)
c0109078:	e8 f4 72 ff ff       	call   c0100371 <cprintf>
        if (*ptep & PTE_P) {
c010907d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109080:	8b 00                	mov    (%eax),%eax
c0109082:	83 e0 01             	and    $0x1,%eax
c0109085:	85 c0                	test   %eax,%eax
c0109087:	74 1c                	je     c01090a5 <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0109089:	c7 44 24 08 a0 77 11 	movl   $0xc01177a0,0x8(%esp)
c0109090:	c0 
c0109091:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
c0109098:	00 
c0109099:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c01090a0:	e8 39 7e ff ff       	call   c0100ede <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c01090a5:	a1 2c 30 15 c0       	mov    0xc015302c,%eax
c01090aa:	85 c0                	test   %eax,%eax
c01090ac:	74 30                	je     c01090de <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c01090ae:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01090b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01090b5:	8b 45 10             	mov    0x10(%ebp),%eax
c01090b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01090bf:	89 04 24             	mov    %eax,(%esp)
c01090c2:	e8 81 e0 ff ff       	call   c0107148 <swap_in>
c01090c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01090ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01090ce:	74 26                	je     c01090f6 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c01090d0:	c7 04 24 bf 77 11 c0 	movl   $0xc01177bf,(%esp)
c01090d7:	e8 95 72 ff ff       	call   c0100371 <cprintf>
                   goto failed;
c01090dc:	eb 6c                	jmp    c010914a <do_pgfault+0x252>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c01090de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090e1:	8b 00                	mov    (%eax),%eax
c01090e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090e7:	c7 04 24 e0 77 11 c0 	movl   $0xc01177e0,(%esp)
c01090ee:	e8 7e 72 ff ff       	call   c0100371 <cprintf>
            goto failed;
c01090f3:	90                   	nop
c01090f4:	eb 54                	jmp    c010914a <do_pgfault+0x252>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c01090f6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01090f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01090fc:	8b 40 0c             	mov    0xc(%eax),%eax
c01090ff:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109102:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0109106:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0109109:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010910d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109111:	89 04 24             	mov    %eax,(%esp)
c0109114:	e8 43 ce ff ff       	call   c0105f5c <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0109119:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010911c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109123:	00 
c0109124:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109128:	8b 45 10             	mov    0x10(%ebp),%eax
c010912b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010912f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109132:	89 04 24             	mov    %eax,(%esp)
c0109135:	e8 45 de ff ff       	call   c0106f7f <swap_map_swappable>
       page->pra_vaddr = addr;
c010913a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010913d:	8b 55 10             	mov    0x10(%ebp),%edx
c0109140:	89 50 1c             	mov    %edx,0x1c(%eax)
   }
   ret = 0;
c0109143:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010914a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010914d:	c9                   	leave  
c010914e:	c3                   	ret    

c010914f <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010914f:	55                   	push   %ebp
c0109150:	89 e5                	mov    %esp,%ebp
c0109152:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109155:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109159:	0f 84 e0 00 00 00    	je     c010923f <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010915f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0109166:	76 1c                	jbe    c0109184 <user_mem_check+0x35>
c0109168:	8b 45 10             	mov    0x10(%ebp),%eax
c010916b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010916e:	01 d0                	add    %edx,%eax
c0109170:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109173:	76 0f                	jbe    c0109184 <user_mem_check+0x35>
c0109175:	8b 45 10             	mov    0x10(%ebp),%eax
c0109178:	8b 55 0c             	mov    0xc(%ebp),%edx
c010917b:	01 d0                	add    %edx,%eax
c010917d:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0109182:	76 0a                	jbe    c010918e <user_mem_check+0x3f>
            return 0;
c0109184:	b8 00 00 00 00       	mov    $0x0,%eax
c0109189:	e9 e2 00 00 00       	jmp    c0109270 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010918e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109191:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109194:	8b 45 10             	mov    0x10(%ebp),%eax
c0109197:	8b 55 0c             	mov    0xc(%ebp),%edx
c010919a:	01 d0                	add    %edx,%eax
c010919c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010919f:	e9 88 00 00 00       	jmp    c010922c <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01091a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ae:	89 04 24             	mov    %eax,(%esp)
c01091b1:	e8 72 ef ff ff       	call   c0108128 <find_vma>
c01091b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01091bd:	74 0b                	je     c01091ca <user_mem_check+0x7b>
c01091bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091c2:	8b 40 04             	mov    0x4(%eax),%eax
c01091c5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01091c8:	76 0a                	jbe    c01091d4 <user_mem_check+0x85>
                return 0;
c01091ca:	b8 00 00 00 00       	mov    $0x0,%eax
c01091cf:	e9 9c 00 00 00       	jmp    c0109270 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01091d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091d7:	8b 50 0c             	mov    0xc(%eax),%edx
c01091da:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01091de:	74 07                	je     c01091e7 <user_mem_check+0x98>
c01091e0:	b8 02 00 00 00       	mov    $0x2,%eax
c01091e5:	eb 05                	jmp    c01091ec <user_mem_check+0x9d>
c01091e7:	b8 01 00 00 00       	mov    $0x1,%eax
c01091ec:	21 d0                	and    %edx,%eax
c01091ee:	85 c0                	test   %eax,%eax
c01091f0:	75 07                	jne    c01091f9 <user_mem_check+0xaa>
                return 0;
c01091f2:	b8 00 00 00 00       	mov    $0x0,%eax
c01091f7:	eb 77                	jmp    c0109270 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01091f9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01091fd:	74 24                	je     c0109223 <user_mem_check+0xd4>
c01091ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109202:	8b 40 0c             	mov    0xc(%eax),%eax
c0109205:	83 e0 08             	and    $0x8,%eax
c0109208:	85 c0                	test   %eax,%eax
c010920a:	74 17                	je     c0109223 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010920c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010920f:	8b 40 04             	mov    0x4(%eax),%eax
c0109212:	05 00 10 00 00       	add    $0x1000,%eax
c0109217:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010921a:	76 07                	jbe    c0109223 <user_mem_check+0xd4>
                    return 0;
c010921c:	b8 00 00 00 00       	mov    $0x0,%eax
c0109221:	eb 4d                	jmp    c0109270 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109223:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109226:	8b 40 08             	mov    0x8(%eax),%eax
c0109229:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010922c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010922f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109232:	0f 82 6c ff ff ff    	jb     c01091a4 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109238:	b8 01 00 00 00       	mov    $0x1,%eax
c010923d:	eb 31                	jmp    c0109270 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010923f:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109246:	76 23                	jbe    c010926b <user_mem_check+0x11c>
c0109248:	8b 45 10             	mov    0x10(%ebp),%eax
c010924b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010924e:	01 d0                	add    %edx,%eax
c0109250:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109253:	76 16                	jbe    c010926b <user_mem_check+0x11c>
c0109255:	8b 45 10             	mov    0x10(%ebp),%eax
c0109258:	8b 55 0c             	mov    0xc(%ebp),%edx
c010925b:	01 d0                	add    %edx,%eax
c010925d:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0109262:	77 07                	ja     c010926b <user_mem_check+0x11c>
c0109264:	b8 01 00 00 00       	mov    $0x1,%eax
c0109269:	eb 05                	jmp    c0109270 <user_mem_check+0x121>
c010926b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109270:	c9                   	leave  
c0109271:	c3                   	ret    

c0109272 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0109272:	55                   	push   %ebp
c0109273:	89 e5                	mov    %esp,%ebp
c0109275:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0109278:	8b 45 10             	mov    0x10(%ebp),%eax
c010927b:	05 00 10 00 00       	add    $0x1000,%eax
c0109280:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109283:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109286:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010928b:	89 c2                	mov    %eax,%edx
c010928d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109290:	29 c2                	sub    %eax,%edx
c0109292:	89 d0                	mov    %edx,%eax
c0109294:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c0109297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010929a:	3b 45 14             	cmp    0x14(%ebp),%eax
c010929d:	76 06                	jbe    c01092a5 <copy_string+0x33>
            part = maxn;
c010929f:	8b 45 14             	mov    0x14(%ebp),%eax
c01092a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01092a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01092a8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01092af:	00 
c01092b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01092b3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01092b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01092be:	89 04 24             	mov    %eax,(%esp)
c01092c1:	e8 89 fe ff ff       	call   c010914f <user_mem_check>
c01092c6:	85 c0                	test   %eax,%eax
c01092c8:	75 0a                	jne    c01092d4 <copy_string+0x62>
            return 0;
c01092ca:	b8 00 00 00 00       	mov    $0x0,%eax
c01092cf:	e9 86 00 00 00       	jmp    c010935a <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01092d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092db:	8b 45 10             	mov    0x10(%ebp),%eax
c01092de:	89 04 24             	mov    %eax,(%esp)
c01092e1:	e8 53 c0 00 00       	call   c0115339 <strnlen>
c01092e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01092e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01092ef:	73 23                	jae    c0109314 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c01092f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092f4:	83 c0 01             	add    $0x1,%eax
c01092f7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092fb:	8b 45 10             	mov    0x10(%ebp),%eax
c01092fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109302:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109305:	89 04 24             	mov    %eax,(%esp)
c0109308:	e8 3c c4 00 00       	call   c0115749 <memcpy>
            return 1;
c010930d:	b8 01 00 00 00       	mov    $0x1,%eax
c0109312:	eb 46                	jmp    c010935a <copy_string+0xe8>
        }
        if (part == maxn) {
c0109314:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109317:	3b 45 14             	cmp    0x14(%ebp),%eax
c010931a:	75 07                	jne    c0109323 <copy_string+0xb1>
            return 0;
c010931c:	b8 00 00 00 00       	mov    $0x0,%eax
c0109321:	eb 37                	jmp    c010935a <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c0109323:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109326:	89 44 24 08          	mov    %eax,0x8(%esp)
c010932a:	8b 45 10             	mov    0x10(%ebp),%eax
c010932d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109331:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109334:	89 04 24             	mov    %eax,(%esp)
c0109337:	e8 0d c4 00 00       	call   c0115749 <memcpy>
        dst += part, src += part, maxn -= part;
c010933c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010933f:	01 45 0c             	add    %eax,0xc(%ebp)
c0109342:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109345:	01 45 10             	add    %eax,0x10(%ebp)
c0109348:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010934b:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c010934e:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0109355:	e9 3d ff ff ff       	jmp    c0109297 <copy_string+0x25>
}
c010935a:	c9                   	leave  
c010935b:	c3                   	ret    

c010935c <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c010935c:	55                   	push   %ebp
c010935d:	89 e5                	mov    %esp,%ebp
c010935f:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0109362:	8b 45 08             	mov    0x8(%ebp),%eax
c0109365:	8b 04 85 40 62 15 c0 	mov    -0x3fea9dc0(,%eax,4),%eax
c010936c:	83 f8 01             	cmp    $0x1,%eax
c010936f:	0f 85 85 00 00 00    	jne    c01093fa <phi_test_sema+0x9e>
c0109375:	8b 45 08             	mov    0x8(%ebp),%eax
c0109378:	8d 48 04             	lea    0x4(%eax),%ecx
c010937b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109380:	89 c8                	mov    %ecx,%eax
c0109382:	f7 ea                	imul   %edx
c0109384:	d1 fa                	sar    %edx
c0109386:	89 c8                	mov    %ecx,%eax
c0109388:	c1 f8 1f             	sar    $0x1f,%eax
c010938b:	29 c2                	sub    %eax,%edx
c010938d:	89 d0                	mov    %edx,%eax
c010938f:	c1 e0 02             	shl    $0x2,%eax
c0109392:	01 d0                	add    %edx,%eax
c0109394:	29 c1                	sub    %eax,%ecx
c0109396:	89 ca                	mov    %ecx,%edx
c0109398:	8b 04 95 40 62 15 c0 	mov    -0x3fea9dc0(,%edx,4),%eax
c010939f:	83 f8 02             	cmp    $0x2,%eax
c01093a2:	74 56                	je     c01093fa <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01093a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01093a7:	8d 48 01             	lea    0x1(%eax),%ecx
c01093aa:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093af:	89 c8                	mov    %ecx,%eax
c01093b1:	f7 ea                	imul   %edx
c01093b3:	d1 fa                	sar    %edx
c01093b5:	89 c8                	mov    %ecx,%eax
c01093b7:	c1 f8 1f             	sar    $0x1f,%eax
c01093ba:	29 c2                	sub    %eax,%edx
c01093bc:	89 d0                	mov    %edx,%eax
c01093be:	c1 e0 02             	shl    $0x2,%eax
c01093c1:	01 d0                	add    %edx,%eax
c01093c3:	29 c1                	sub    %eax,%ecx
c01093c5:	89 ca                	mov    %ecx,%edx
c01093c7:	8b 04 95 40 62 15 c0 	mov    -0x3fea9dc0(,%edx,4),%eax
c01093ce:	83 f8 02             	cmp    $0x2,%eax
c01093d1:	74 27                	je     c01093fa <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01093d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d6:	c7 04 85 40 62 15 c0 	movl   $0x2,-0x3fea9dc0(,%eax,4)
c01093dd:	02 00 00 00 
        up(&s[i]);
c01093e1:	8b 55 08             	mov    0x8(%ebp),%edx
c01093e4:	89 d0                	mov    %edx,%eax
c01093e6:	01 c0                	add    %eax,%eax
c01093e8:	01 d0                	add    %edx,%eax
c01093ea:	c1 e0 02             	shl    $0x2,%eax
c01093ed:	05 e0 62 15 c0       	add    $0xc01562e0,%eax
c01093f2:	89 04 24             	mov    %eax,(%esp)
c01093f5:	e8 e8 09 00 00       	call   c0109de2 <up>
    }
}
c01093fa:	c9                   	leave  
c01093fb:	c3                   	ret    

c01093fc <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01093fc:	55                   	push   %ebp
c01093fd:	89 e5                	mov    %esp,%ebp
c01093ff:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109402:	c7 04 24 68 62 15 c0 	movl   $0xc0156268,(%esp)
c0109409:	e8 ef 09 00 00       	call   c0109dfd <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c010940e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109411:	c7 04 85 40 62 15 c0 	movl   $0x1,-0x3fea9dc0(,%eax,4)
c0109418:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c010941c:	8b 45 08             	mov    0x8(%ebp),%eax
c010941f:	89 04 24             	mov    %eax,(%esp)
c0109422:	e8 35 ff ff ff       	call   c010935c <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109427:	c7 04 24 68 62 15 c0 	movl   $0xc0156268,(%esp)
c010942e:	e8 af 09 00 00       	call   c0109de2 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109433:	8b 55 08             	mov    0x8(%ebp),%edx
c0109436:	89 d0                	mov    %edx,%eax
c0109438:	01 c0                	add    %eax,%eax
c010943a:	01 d0                	add    %edx,%eax
c010943c:	c1 e0 02             	shl    $0x2,%eax
c010943f:	05 e0 62 15 c0       	add    $0xc01562e0,%eax
c0109444:	89 04 24             	mov    %eax,(%esp)
c0109447:	e8 b1 09 00 00       	call   c0109dfd <down>
}
c010944c:	c9                   	leave  
c010944d:	c3                   	ret    

c010944e <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010944e:	55                   	push   %ebp
c010944f:	89 e5                	mov    %esp,%ebp
c0109451:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109454:	c7 04 24 68 62 15 c0 	movl   $0xc0156268,(%esp)
c010945b:	e8 9d 09 00 00       	call   c0109dfd <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109460:	8b 45 08             	mov    0x8(%ebp),%eax
c0109463:	c7 04 85 40 62 15 c0 	movl   $0x0,-0x3fea9dc0(,%eax,4)
c010946a:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010946e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109471:	8d 48 04             	lea    0x4(%eax),%ecx
c0109474:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109479:	89 c8                	mov    %ecx,%eax
c010947b:	f7 ea                	imul   %edx
c010947d:	d1 fa                	sar    %edx
c010947f:	89 c8                	mov    %ecx,%eax
c0109481:	c1 f8 1f             	sar    $0x1f,%eax
c0109484:	29 c2                	sub    %eax,%edx
c0109486:	89 d0                	mov    %edx,%eax
c0109488:	c1 e0 02             	shl    $0x2,%eax
c010948b:	01 d0                	add    %edx,%eax
c010948d:	29 c1                	sub    %eax,%ecx
c010948f:	89 ca                	mov    %ecx,%edx
c0109491:	89 14 24             	mov    %edx,(%esp)
c0109494:	e8 c3 fe ff ff       	call   c010935c <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109499:	8b 45 08             	mov    0x8(%ebp),%eax
c010949c:	8d 48 01             	lea    0x1(%eax),%ecx
c010949f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094a4:	89 c8                	mov    %ecx,%eax
c01094a6:	f7 ea                	imul   %edx
c01094a8:	d1 fa                	sar    %edx
c01094aa:	89 c8                	mov    %ecx,%eax
c01094ac:	c1 f8 1f             	sar    $0x1f,%eax
c01094af:	29 c2                	sub    %eax,%edx
c01094b1:	89 d0                	mov    %edx,%eax
c01094b3:	c1 e0 02             	shl    $0x2,%eax
c01094b6:	01 d0                	add    %edx,%eax
c01094b8:	29 c1                	sub    %eax,%ecx
c01094ba:	89 ca                	mov    %ecx,%edx
c01094bc:	89 14 24             	mov    %edx,(%esp)
c01094bf:	e8 98 fe ff ff       	call   c010935c <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01094c4:	c7 04 24 68 62 15 c0 	movl   $0xc0156268,(%esp)
c01094cb:	e8 12 09 00 00       	call   c0109de2 <up>
}
c01094d0:	c9                   	leave  
c01094d1:	c3                   	ret    

c01094d2 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01094d2:	55                   	push   %ebp
c01094d3:	89 e5                	mov    %esp,%ebp
c01094d5:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01094d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01094df:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01094e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094ec:	c7 04 24 08 78 11 c0 	movl   $0xc0117808,(%esp)
c01094f3:	e8 79 6e ff ff       	call   c0100371 <cprintf>
    while(iter++<TIMES)
c01094f8:	eb 62                	jmp    c010955c <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01094fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109501:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109504:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109508:	c7 04 24 28 78 11 c0 	movl   $0xc0117828,(%esp)
c010950f:	e8 5d 6e ff ff       	call   c0100371 <cprintf>
        do_sleep(SLEEP_TIME);
c0109514:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010951b:	e8 72 4c 00 00       	call   c010e192 <do_sleep>
        phi_take_forks_sema(i); 
c0109520:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109523:	89 04 24             	mov    %eax,(%esp)
c0109526:	e8 d1 fe ff ff       	call   c01093fc <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010952b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010952e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109532:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109535:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109539:	c7 04 24 58 78 11 c0 	movl   $0xc0117858,(%esp)
c0109540:	e8 2c 6e ff ff       	call   c0100371 <cprintf>
        do_sleep(SLEEP_TIME);
c0109545:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010954c:	e8 41 4c 00 00       	call   c010e192 <do_sleep>
        phi_put_forks_sema(i); 
c0109551:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109554:	89 04 24             	mov    %eax,(%esp)
c0109557:	e8 f2 fe ff ff       	call   c010944e <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c010955c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010955f:	8d 50 01             	lea    0x1(%eax),%edx
c0109562:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109565:	83 f8 03             	cmp    $0x3,%eax
c0109568:	7e 90                	jle    c01094fa <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c010956a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010956d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109571:	c7 04 24 83 78 11 c0 	movl   $0xc0117883,(%esp)
c0109578:	e8 f4 6d ff ff       	call   c0100371 <cprintf>
    return 0;    
c010957d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109582:	c9                   	leave  
c0109583:	c3                   	ret    

c0109584 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0109584:	55                   	push   %ebp
c0109585:	89 e5                	mov    %esp,%ebp
c0109587:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010958a:	8b 45 08             	mov    0x8(%ebp),%eax
c010958d:	8b 04 85 a0 62 15 c0 	mov    -0x3fea9d60(,%eax,4),%eax
c0109594:	83 f8 01             	cmp    $0x1,%eax
c0109597:	0f 85 b5 00 00 00    	jne    c0109652 <phi_test_condvar+0xce>
c010959d:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a0:	8d 48 04             	lea    0x4(%eax),%ecx
c01095a3:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095a8:	89 c8                	mov    %ecx,%eax
c01095aa:	f7 ea                	imul   %edx
c01095ac:	d1 fa                	sar    %edx
c01095ae:	89 c8                	mov    %ecx,%eax
c01095b0:	c1 f8 1f             	sar    $0x1f,%eax
c01095b3:	29 c2                	sub    %eax,%edx
c01095b5:	89 d0                	mov    %edx,%eax
c01095b7:	c1 e0 02             	shl    $0x2,%eax
c01095ba:	01 d0                	add    %edx,%eax
c01095bc:	29 c1                	sub    %eax,%ecx
c01095be:	89 ca                	mov    %ecx,%edx
c01095c0:	8b 04 95 a0 62 15 c0 	mov    -0x3fea9d60(,%edx,4),%eax
c01095c7:	83 f8 02             	cmp    $0x2,%eax
c01095ca:	0f 84 82 00 00 00    	je     c0109652 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01095d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d3:	8d 48 01             	lea    0x1(%eax),%ecx
c01095d6:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095db:	89 c8                	mov    %ecx,%eax
c01095dd:	f7 ea                	imul   %edx
c01095df:	d1 fa                	sar    %edx
c01095e1:	89 c8                	mov    %ecx,%eax
c01095e3:	c1 f8 1f             	sar    $0x1f,%eax
c01095e6:	29 c2                	sub    %eax,%edx
c01095e8:	89 d0                	mov    %edx,%eax
c01095ea:	c1 e0 02             	shl    $0x2,%eax
c01095ed:	01 d0                	add    %edx,%eax
c01095ef:	29 c1                	sub    %eax,%ecx
c01095f1:	89 ca                	mov    %ecx,%edx
c01095f3:	8b 04 95 a0 62 15 c0 	mov    -0x3fea9d60(,%edx,4),%eax
c01095fa:	83 f8 02             	cmp    $0x2,%eax
c01095fd:	74 53                	je     c0109652 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01095ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109602:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109606:	c7 04 24 a0 78 11 c0 	movl   $0xc01178a0,(%esp)
c010960d:	e8 5f 6d ff ff       	call   c0100371 <cprintf>
        state_condvar[i] = EATING ;
c0109612:	8b 45 08             	mov    0x8(%ebp),%eax
c0109615:	c7 04 85 a0 62 15 c0 	movl   $0x2,-0x3fea9d60(,%eax,4)
c010961c:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109620:	8b 45 08             	mov    0x8(%ebp),%eax
c0109623:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109627:	c7 04 24 d4 78 11 c0 	movl   $0xc01178d4,(%esp)
c010962e:	e8 3e 6d ff ff       	call   c0100371 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109633:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109638:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010963b:	8b 55 08             	mov    0x8(%ebp),%edx
c010963e:	89 d0                	mov    %edx,%eax
c0109640:	c1 e0 02             	shl    $0x2,%eax
c0109643:	01 d0                	add    %edx,%eax
c0109645:	c1 e0 02             	shl    $0x2,%eax
c0109648:	01 c8                	add    %ecx,%eax
c010964a:	89 04 24             	mov    %eax,(%esp)
c010964d:	e8 8d 04 00 00       	call   c0109adf <cond_signal>
    }
}
c0109652:	c9                   	leave  
c0109653:	c3                   	ret    

c0109654 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109654:	55                   	push   %ebp
c0109655:	89 e5                	mov    %esp,%ebp
c0109657:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010965a:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010965f:	89 04 24             	mov    %eax,(%esp)
c0109662:	e8 96 07 00 00       	call   c0109dfd <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c0109667:	8b 45 08             	mov    0x8(%ebp),%eax
c010966a:	c7 04 85 a0 62 15 c0 	movl   $0x1,-0x3fea9d60(,%eax,4)
c0109671:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c0109675:	8b 45 08             	mov    0x8(%ebp),%eax
c0109678:	89 04 24             	mov    %eax,(%esp)
c010967b:	e8 04 ff ff ff       	call   c0109584 <phi_test_condvar>
      if (state_condvar[i] != EATING) {
c0109680:	8b 45 08             	mov    0x8(%ebp),%eax
c0109683:	8b 04 85 a0 62 15 c0 	mov    -0x3fea9d60(,%eax,4),%eax
c010968a:	83 f8 02             	cmp    $0x2,%eax
c010968d:	74 32                	je     c01096c1 <phi_take_forks_condvar+0x6d>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c010968f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109692:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109696:	c7 04 24 fc 78 11 c0 	movl   $0xc01178fc,(%esp)
c010969d:	e8 cf 6c ff ff       	call   c0100371 <cprintf>
          cond_wait(&mtp->cv[i]);
c01096a2:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096a7:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01096aa:	8b 55 08             	mov    0x8(%ebp),%edx
c01096ad:	89 d0                	mov    %edx,%eax
c01096af:	c1 e0 02             	shl    $0x2,%eax
c01096b2:	01 d0                	add    %edx,%eax
c01096b4:	c1 e0 02             	shl    $0x2,%eax
c01096b7:	01 c8                	add    %ecx,%eax
c01096b9:	89 04 24             	mov    %eax,(%esp)
c01096bc:	e8 be 04 00 00       	call   c0109b7f <cond_wait>
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01096c1:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096c6:	8b 40 18             	mov    0x18(%eax),%eax
c01096c9:	85 c0                	test   %eax,%eax
c01096cb:	7e 12                	jle    c01096df <phi_take_forks_condvar+0x8b>
         up(&(mtp->next));
c01096cd:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096d2:	83 c0 0c             	add    $0xc,%eax
c01096d5:	89 04 24             	mov    %eax,(%esp)
c01096d8:	e8 05 07 00 00       	call   c0109de2 <up>
c01096dd:	eb 0d                	jmp    c01096ec <phi_take_forks_condvar+0x98>
      else
         up(&(mtp->mutex));
c01096df:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096e4:	89 04 24             	mov    %eax,(%esp)
c01096e7:	e8 f6 06 00 00       	call   c0109de2 <up>
}
c01096ec:	c9                   	leave  
c01096ed:	c3                   	ret    

c01096ee <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01096ee:	55                   	push   %ebp
c01096ef:	89 e5                	mov    %esp,%ebp
c01096f1:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01096f4:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096f9:	89 04 24             	mov    %eax,(%esp)
c01096fc:	e8 fc 06 00 00       	call   c0109dfd <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c0109701:	8b 45 08             	mov    0x8(%ebp),%eax
c0109704:	c7 04 85 a0 62 15 c0 	movl   $0x0,-0x3fea9d60(,%eax,4)
c010970b:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c010970f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109712:	8d 48 04             	lea    0x4(%eax),%ecx
c0109715:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010971a:	89 c8                	mov    %ecx,%eax
c010971c:	f7 ea                	imul   %edx
c010971e:	d1 fa                	sar    %edx
c0109720:	89 c8                	mov    %ecx,%eax
c0109722:	c1 f8 1f             	sar    $0x1f,%eax
c0109725:	29 c2                	sub    %eax,%edx
c0109727:	89 d0                	mov    %edx,%eax
c0109729:	c1 e0 02             	shl    $0x2,%eax
c010972c:	01 d0                	add    %edx,%eax
c010972e:	29 c1                	sub    %eax,%ecx
c0109730:	89 ca                	mov    %ecx,%edx
c0109732:	89 14 24             	mov    %edx,(%esp)
c0109735:	e8 4a fe ff ff       	call   c0109584 <phi_test_condvar>
      phi_test_condvar(RIGHT);
c010973a:	8b 45 08             	mov    0x8(%ebp),%eax
c010973d:	8d 48 01             	lea    0x1(%eax),%ecx
c0109740:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109745:	89 c8                	mov    %ecx,%eax
c0109747:	f7 ea                	imul   %edx
c0109749:	d1 fa                	sar    %edx
c010974b:	89 c8                	mov    %ecx,%eax
c010974d:	c1 f8 1f             	sar    $0x1f,%eax
c0109750:	29 c2                	sub    %eax,%edx
c0109752:	89 d0                	mov    %edx,%eax
c0109754:	c1 e0 02             	shl    $0x2,%eax
c0109757:	01 d0                	add    %edx,%eax
c0109759:	29 c1                	sub    %eax,%ecx
c010975b:	89 ca                	mov    %ecx,%edx
c010975d:	89 14 24             	mov    %edx,(%esp)
c0109760:	e8 1f fe ff ff       	call   c0109584 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0109765:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010976a:	8b 40 18             	mov    0x18(%eax),%eax
c010976d:	85 c0                	test   %eax,%eax
c010976f:	7e 12                	jle    c0109783 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0109771:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109776:	83 c0 0c             	add    $0xc,%eax
c0109779:	89 04 24             	mov    %eax,(%esp)
c010977c:	e8 61 06 00 00       	call   c0109de2 <up>
c0109781:	eb 0d                	jmp    c0109790 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c0109783:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109788:	89 04 24             	mov    %eax,(%esp)
c010978b:	e8 52 06 00 00       	call   c0109de2 <up>
}
c0109790:	c9                   	leave  
c0109791:	c3                   	ret    

c0109792 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109792:	55                   	push   %ebp
c0109793:	89 e5                	mov    %esp,%ebp
c0109795:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109798:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010979f:	8b 45 08             	mov    0x8(%ebp),%eax
c01097a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c01097a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097ac:	c7 04 24 38 79 11 c0 	movl   $0xc0117938,(%esp)
c01097b3:	e8 b9 6b ff ff       	call   c0100371 <cprintf>
    while(iter++<TIMES)
c01097b8:	eb 62                	jmp    c010981c <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01097ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01097c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097c8:	c7 04 24 58 79 11 c0 	movl   $0xc0117958,(%esp)
c01097cf:	e8 9d 6b ff ff       	call   c0100371 <cprintf>
        do_sleep(SLEEP_TIME);
c01097d4:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01097db:	e8 b2 49 00 00       	call   c010e192 <do_sleep>
        phi_take_forks_condvar(i); 
c01097e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097e3:	89 04 24             	mov    %eax,(%esp)
c01097e6:	e8 69 fe ff ff       	call   c0109654 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01097eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097ee:	89 44 24 08          	mov    %eax,0x8(%esp)
c01097f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097f9:	c7 04 24 88 79 11 c0 	movl   $0xc0117988,(%esp)
c0109800:	e8 6c 6b ff ff       	call   c0100371 <cprintf>
        do_sleep(SLEEP_TIME);
c0109805:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010980c:	e8 81 49 00 00       	call   c010e192 <do_sleep>
        phi_put_forks_condvar(i); 
c0109811:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109814:	89 04 24             	mov    %eax,(%esp)
c0109817:	e8 d2 fe ff ff       	call   c01096ee <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010981c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010981f:	8d 50 01             	lea    0x1(%eax),%edx
c0109822:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109825:	83 f8 03             	cmp    $0x3,%eax
c0109828:	7e 90                	jle    c01097ba <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010982a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010982d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109831:	c7 04 24 b8 79 11 c0 	movl   $0xc01179b8,(%esp)
c0109838:	e8 34 6b ff ff       	call   c0100371 <cprintf>
    return 0;    
c010983d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109842:	c9                   	leave  
c0109843:	c3                   	ret    

c0109844 <check_sync>:

void check_sync(void){
c0109844:	55                   	push   %ebp
c0109845:	89 e5                	mov    %esp,%ebp
c0109847:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010984a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109851:	00 
c0109852:	c7 04 24 68 62 15 c0 	movl   $0xc0156268,(%esp)
c0109859:	e8 11 04 00 00       	call   c0109c6f <sem_init>
    for(i=0;i<N;i++){
c010985e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109865:	e9 94 00 00 00       	jmp    c01098fe <check_sync+0xba>
        sem_init(&s[i], 0);
c010986a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010986d:	89 d0                	mov    %edx,%eax
c010986f:	01 c0                	add    %eax,%eax
c0109871:	01 d0                	add    %edx,%eax
c0109873:	c1 e0 02             	shl    $0x2,%eax
c0109876:	05 e0 62 15 c0       	add    $0xc01562e0,%eax
c010987b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109882:	00 
c0109883:	89 04 24             	mov    %eax,(%esp)
c0109886:	e8 e4 03 00 00       	call   c0109c6f <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c010988b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010988e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109895:	00 
c0109896:	89 44 24 04          	mov    %eax,0x4(%esp)
c010989a:	c7 04 24 d2 94 10 c0 	movl   $0xc01094d2,(%esp)
c01098a1:	e8 ee 2d 00 00       	call   c010c694 <kernel_thread>
c01098a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c01098a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01098ad:	7f 1c                	jg     c01098cb <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01098af:	c7 44 24 08 d8 79 11 	movl   $0xc01179d8,0x8(%esp)
c01098b6:	c0 
c01098b7:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01098be:	00 
c01098bf:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c01098c6:	e8 13 76 ff ff       	call   c0100ede <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01098cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098ce:	89 04 24             	mov    %eax,(%esp)
c01098d1:	e8 4a 2d 00 00       	call   c010c620 <find_proc>
c01098d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098d9:	89 04 95 b4 62 15 c0 	mov    %eax,-0x3fea9d4c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01098e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098e3:	8b 04 85 b4 62 15 c0 	mov    -0x3fea9d4c(,%eax,4),%eax
c01098ea:	c7 44 24 04 21 7a 11 	movl   $0xc0117a21,0x4(%esp)
c01098f1:	c0 
c01098f2:	89 04 24             	mov    %eax,(%esp)
c01098f5:	e8 0d 29 00 00       	call   c010c207 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01098fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01098fe:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109902:	0f 8e 62 ff ff ff    	jle    c010986a <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109908:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010990f:	00 
c0109910:	c7 04 24 80 62 15 c0 	movl   $0xc0156280,(%esp)
c0109917:	e8 99 00 00 00       	call   c01099b5 <monitor_init>
    for(i=0;i<N;i++){
c010991c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109923:	e9 81 00 00 00       	jmp    c01099a9 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109928:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010992b:	c7 04 85 a0 62 15 c0 	movl   $0x0,-0x3fea9d60(,%eax,4)
c0109932:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109939:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109940:	00 
c0109941:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109945:	c7 04 24 92 97 10 c0 	movl   $0xc0109792,(%esp)
c010994c:	e8 43 2d 00 00       	call   c010c694 <kernel_thread>
c0109951:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109954:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109958:	7f 1c                	jg     c0109976 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c010995a:	c7 44 24 08 38 7a 11 	movl   $0xc0117a38,0x8(%esp)
c0109961:	c0 
c0109962:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c0109969:	00 
c010996a:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c0109971:	e8 68 75 ff ff       	call   c0100ede <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109976:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109979:	89 04 24             	mov    %eax,(%esp)
c010997c:	e8 9f 2c 00 00       	call   c010c620 <find_proc>
c0109981:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109984:	89 04 95 54 62 15 c0 	mov    %eax,-0x3fea9dac(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c010998b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010998e:	8b 04 85 54 62 15 c0 	mov    -0x3fea9dac(,%eax,4),%eax
c0109995:	c7 44 24 04 68 7a 11 	movl   $0xc0117a68,0x4(%esp)
c010999c:	c0 
c010999d:	89 04 24             	mov    %eax,(%esp)
c01099a0:	e8 62 28 00 00       	call   c010c207 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c01099a5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01099a9:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01099ad:	0f 8e 75 ff ff ff    	jle    c0109928 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01099b3:	c9                   	leave  
c01099b4:	c3                   	ret    

c01099b5 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c01099b5:	55                   	push   %ebp
c01099b6:	89 e5                	mov    %esp,%ebp
c01099b8:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c01099bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01099bf:	75 24                	jne    c01099e5 <monitor_init+0x30>
c01099c1:	c7 44 24 0c 84 7a 11 	movl   $0xc0117a84,0xc(%esp)
c01099c8:	c0 
c01099c9:	c7 44 24 08 8d 7a 11 	movl   $0xc0117a8d,0x8(%esp)
c01099d0:	c0 
c01099d1:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01099d8:	00 
c01099d9:	c7 04 24 a2 7a 11 c0 	movl   $0xc0117aa2,(%esp)
c01099e0:	e8 f9 74 ff ff       	call   c0100ede <__panic>
    mtp->next_count = 0;
c01099e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e8:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01099ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f2:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01099f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109a03:	00 
c0109a04:	89 04 24             	mov    %eax,(%esp)
c0109a07:	e8 63 02 00 00       	call   c0109c6f <sem_init>
    sem_init(&(mtp->next), 0);
c0109a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a0f:	83 c0 0c             	add    $0xc,%eax
c0109a12:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109a19:	00 
c0109a1a:	89 04 24             	mov    %eax,(%esp)
c0109a1d:	e8 4d 02 00 00       	call   c0109c6f <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109a22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a25:	89 d0                	mov    %edx,%eax
c0109a27:	c1 e0 02             	shl    $0x2,%eax
c0109a2a:	01 d0                	add    %edx,%eax
c0109a2c:	c1 e0 02             	shl    $0x2,%eax
c0109a2f:	89 04 24             	mov    %eax,(%esp)
c0109a32:	e8 78 b3 ff ff       	call   c0104daf <kmalloc>
c0109a37:	8b 55 08             	mov    0x8(%ebp),%edx
c0109a3a:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109a3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a40:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109a43:	85 c0                	test   %eax,%eax
c0109a45:	75 24                	jne    c0109a6b <monitor_init+0xb6>
c0109a47:	c7 44 24 0c b6 7a 11 	movl   $0xc0117ab6,0xc(%esp)
c0109a4e:	c0 
c0109a4f:	c7 44 24 08 8d 7a 11 	movl   $0xc0117a8d,0x8(%esp)
c0109a56:	c0 
c0109a57:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109a5e:	00 
c0109a5f:	c7 04 24 a2 7a 11 c0 	movl   $0xc0117aa2,(%esp)
c0109a66:	e8 73 74 ff ff       	call   c0100ede <__panic>
    for(i=0; i<num_cv; i++){
c0109a6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109a72:	eb 61                	jmp    c0109ad5 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109a74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a77:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109a7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109a7d:	89 d0                	mov    %edx,%eax
c0109a7f:	c1 e0 02             	shl    $0x2,%eax
c0109a82:	01 d0                	add    %edx,%eax
c0109a84:	c1 e0 02             	shl    $0x2,%eax
c0109a87:	01 c8                	add    %ecx,%eax
c0109a89:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109a90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a93:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109a96:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109a99:	89 d0                	mov    %edx,%eax
c0109a9b:	c1 e0 02             	shl    $0x2,%eax
c0109a9e:	01 d0                	add    %edx,%eax
c0109aa0:	c1 e0 02             	shl    $0x2,%eax
c0109aa3:	01 c8                	add    %ecx,%eax
c0109aa5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109aac:	00 
c0109aad:	89 04 24             	mov    %eax,(%esp)
c0109ab0:	e8 ba 01 00 00       	call   c0109c6f <sem_init>
        mtp->cv[i].owner=mtp;
c0109ab5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab8:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109abb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109abe:	89 d0                	mov    %edx,%eax
c0109ac0:	c1 e0 02             	shl    $0x2,%eax
c0109ac3:	01 d0                	add    %edx,%eax
c0109ac5:	c1 e0 02             	shl    $0x2,%eax
c0109ac8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109acb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ace:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109ad1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ad8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109adb:	72 97                	jb     c0109a74 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109add:	c9                   	leave  
c0109ade:	c3                   	ret    

c0109adf <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c0109adf:	55                   	push   %ebp
c0109ae0:	89 e5                	mov    %esp,%ebp
c0109ae2:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109ae5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae8:	8b 40 10             	mov    0x10(%eax),%eax
c0109aeb:	8b 50 18             	mov    0x18(%eax),%edx
c0109aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af1:	8b 40 0c             	mov    0xc(%eax),%eax
c0109af4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109af8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109afc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b03:	c7 04 24 c4 7a 11 c0 	movl   $0xc0117ac4,(%esp)
c0109b0a:	e8 62 68 ff ff       	call   c0100371 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c0109b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b12:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b15:	85 c0                	test   %eax,%eax
c0109b17:	7e 3a                	jle    c0109b53 <cond_signal+0x74>
        cvp->owner->next_count ++;
c0109b19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1c:	8b 40 10             	mov    0x10(%eax),%eax
c0109b1f:	8b 50 18             	mov    0x18(%eax),%edx
c0109b22:	83 c2 01             	add    $0x1,%edx
c0109b25:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c0109b28:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b2b:	89 04 24             	mov    %eax,(%esp)
c0109b2e:	e8 af 02 00 00       	call   c0109de2 <up>
        down(&(cvp->owner->next));
c0109b33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b36:	8b 40 10             	mov    0x10(%eax),%eax
c0109b39:	83 c0 0c             	add    $0xc,%eax
c0109b3c:	89 04 24             	mov    %eax,(%esp)
c0109b3f:	e8 b9 02 00 00       	call   c0109dfd <down>
        cvp->owner->next_count --;
c0109b44:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b47:	8b 40 10             	mov    0x10(%eax),%eax
c0109b4a:	8b 50 18             	mov    0x18(%eax),%edx
c0109b4d:	83 ea 01             	sub    $0x1,%edx
c0109b50:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109b53:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b56:	8b 40 10             	mov    0x10(%eax),%eax
c0109b59:	8b 50 18             	mov    0x18(%eax),%edx
c0109b5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b5f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b62:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b66:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b71:	c7 04 24 0c 7b 11 c0 	movl   $0xc0117b0c,(%esp)
c0109b78:	e8 f4 67 ff ff       	call   c0100371 <cprintf>
}
c0109b7d:	c9                   	leave  
c0109b7e:	c3                   	ret    

c0109b7f <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109b7f:	55                   	push   %ebp
c0109b80:	89 e5                	mov    %esp,%ebp
c0109b82:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109b85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b88:	8b 40 10             	mov    0x10(%eax),%eax
c0109b8b:	8b 50 18             	mov    0x18(%eax),%edx
c0109b8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b91:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b94:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b98:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ba3:	c7 04 24 50 7b 11 c0 	movl   $0xc0117b50,(%esp)
c0109baa:	e8 c2 67 ff ff       	call   c0100371 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109baf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb2:	8b 40 0c             	mov    0xc(%eax),%eax
c0109bb5:	8d 50 01             	lea    0x1(%eax),%edx
c0109bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bbb:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109bbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc1:	8b 40 10             	mov    0x10(%eax),%eax
c0109bc4:	8b 40 18             	mov    0x18(%eax),%eax
c0109bc7:	85 c0                	test   %eax,%eax
c0109bc9:	7e 13                	jle    c0109bde <cond_wait+0x5f>
         up(&(cvp->owner->next));
c0109bcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bce:	8b 40 10             	mov    0x10(%eax),%eax
c0109bd1:	83 c0 0c             	add    $0xc,%eax
c0109bd4:	89 04 24             	mov    %eax,(%esp)
c0109bd7:	e8 06 02 00 00       	call   c0109de2 <up>
c0109bdc:	eb 0e                	jmp    c0109bec <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c0109bde:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be1:	8b 40 10             	mov    0x10(%eax),%eax
c0109be4:	89 04 24             	mov    %eax,(%esp)
c0109be7:	e8 f6 01 00 00       	call   c0109de2 <up>
      down(&(cvp->sem));
c0109bec:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bef:	89 04 24             	mov    %eax,(%esp)
c0109bf2:	e8 06 02 00 00       	call   c0109dfd <down>
      cvp->count --;
c0109bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bfa:	8b 40 0c             	mov    0xc(%eax),%eax
c0109bfd:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c03:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109c06:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c09:	8b 40 10             	mov    0x10(%eax),%eax
c0109c0c:	8b 50 18             	mov    0x18(%eax),%edx
c0109c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c12:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c15:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c19:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c20:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c24:	c7 04 24 94 7b 11 c0 	movl   $0xc0117b94,(%esp)
c0109c2b:	e8 41 67 ff ff       	call   c0100371 <cprintf>
}
c0109c30:	c9                   	leave  
c0109c31:	c3                   	ret    

c0109c32 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109c32:	55                   	push   %ebp
c0109c33:	89 e5                	mov    %esp,%ebp
c0109c35:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109c38:	9c                   	pushf  
c0109c39:	58                   	pop    %eax
c0109c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109c40:	25 00 02 00 00       	and    $0x200,%eax
c0109c45:	85 c0                	test   %eax,%eax
c0109c47:	74 0c                	je     c0109c55 <__intr_save+0x23>
        intr_disable();
c0109c49:	e8 03 85 ff ff       	call   c0102151 <intr_disable>
        return 1;
c0109c4e:	b8 01 00 00 00       	mov    $0x1,%eax
c0109c53:	eb 05                	jmp    c0109c5a <__intr_save+0x28>
    }
    return 0;
c0109c55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c5a:	c9                   	leave  
c0109c5b:	c3                   	ret    

c0109c5c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109c5c:	55                   	push   %ebp
c0109c5d:	89 e5                	mov    %esp,%ebp
c0109c5f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109c62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109c66:	74 05                	je     c0109c6d <__intr_restore+0x11>
        intr_enable();
c0109c68:	e8 de 84 ff ff       	call   c010214b <intr_enable>
    }
}
c0109c6d:	c9                   	leave  
c0109c6e:	c3                   	ret    

c0109c6f <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109c6f:	55                   	push   %ebp
c0109c70:	89 e5                	mov    %esp,%ebp
c0109c72:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109c75:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c78:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109c7b:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109c7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c80:	83 c0 04             	add    $0x4,%eax
c0109c83:	89 04 24             	mov    %eax,(%esp)
c0109c86:	e8 33 02 00 00       	call   c0109ebe <wait_queue_init>
}
c0109c8b:	c9                   	leave  
c0109c8c:	c3                   	ret    

c0109c8d <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109c8d:	55                   	push   %ebp
c0109c8e:	89 e5                	mov    %esp,%ebp
c0109c90:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109c93:	e8 9a ff ff ff       	call   c0109c32 <__intr_save>
c0109c98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c9e:	83 c0 04             	add    $0x4,%eax
c0109ca1:	89 04 24             	mov    %eax,(%esp)
c0109ca4:	e8 69 04 00 00       	call   c010a112 <wait_queue_first>
c0109ca9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109cac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109cb0:	75 0f                	jne    c0109cc1 <__up+0x34>
            sem->value ++;
c0109cb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb5:	8b 00                	mov    (%eax),%eax
c0109cb7:	8d 50 01             	lea    0x1(%eax),%edx
c0109cba:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cbd:	89 10                	mov    %edx,(%eax)
c0109cbf:	eb 58                	jmp    c0109d19 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cc4:	8b 00                	mov    (%eax),%eax
c0109cc6:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109ccc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ccf:	74 24                	je     c0109cf5 <__up+0x68>
c0109cd1:	c7 44 24 0c d8 7b 11 	movl   $0xc0117bd8,0xc(%esp)
c0109cd8:	c0 
c0109cd9:	c7 44 24 08 fd 7b 11 	movl   $0xc0117bfd,0x8(%esp)
c0109ce0:	c0 
c0109ce1:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109ce8:	00 
c0109ce9:	c7 04 24 12 7c 11 c0 	movl   $0xc0117c12,(%esp)
c0109cf0:	e8 e9 71 ff ff       	call   c0100ede <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109cf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf8:	8d 50 04             	lea    0x4(%eax),%edx
c0109cfb:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109d02:	00 
c0109d03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d06:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d11:	89 14 24             	mov    %edx,(%esp)
c0109d14:	e8 95 04 00 00       	call   c010a1ae <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d1c:	89 04 24             	mov    %eax,(%esp)
c0109d1f:	e8 38 ff ff ff       	call   c0109c5c <__intr_restore>
}
c0109d24:	c9                   	leave  
c0109d25:	c3                   	ret    

c0109d26 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109d26:	55                   	push   %ebp
c0109d27:	89 e5                	mov    %esp,%ebp
c0109d29:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109d2c:	e8 01 ff ff ff       	call   c0109c32 <__intr_save>
c0109d31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d37:	8b 00                	mov    (%eax),%eax
c0109d39:	85 c0                	test   %eax,%eax
c0109d3b:	7e 22                	jle    c0109d5f <__down+0x39>
        sem->value --;
c0109d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d40:	8b 00                	mov    (%eax),%eax
c0109d42:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d45:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d48:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d4d:	89 04 24             	mov    %eax,(%esp)
c0109d50:	e8 07 ff ff ff       	call   c0109c5c <__intr_restore>
        return 0;
c0109d55:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d5a:	e9 81 00 00 00       	jmp    c0109de0 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109d5f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109d65:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d68:	8d 50 04             	lea    0x4(%eax),%edx
c0109d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d6e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d79:	89 14 24             	mov    %edx,(%esp)
c0109d7c:	e8 34 05 00 00       	call   c010a2b5 <wait_current_set>
    local_intr_restore(intr_flag);
c0109d81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d84:	89 04 24             	mov    %eax,(%esp)
c0109d87:	e8 d0 fe ff ff       	call   c0109c5c <__intr_restore>

    schedule();
c0109d8c:	e8 11 4a 00 00       	call   c010e7a2 <schedule>

    local_intr_save(intr_flag);
c0109d91:	e8 9c fe ff ff       	call   c0109c32 <__intr_save>
c0109d96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d9c:	89 04 24             	mov    %eax,(%esp)
c0109d9f:	e8 e2 03 00 00       	call   c010a186 <wait_in_queue>
c0109da4:	85 c0                	test   %eax,%eax
c0109da6:	74 15                	je     c0109dbd <__down+0x97>
c0109da8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dab:	8d 50 04             	lea    0x4(%eax),%edx
c0109dae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109db1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109db5:	89 14 24             	mov    %edx,(%esp)
c0109db8:	e8 c4 01 00 00       	call   c0109f81 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dc0:	89 04 24             	mov    %eax,(%esp)
c0109dc3:	e8 94 fe ff ff       	call   c0109c5c <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109dc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dcb:	8b 40 04             	mov    0x4(%eax),%eax
c0109dce:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109dd1:	74 08                	je     c0109ddb <__down+0xb5>
        return wait->wakeup_flags;
c0109dd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dd6:	8b 40 04             	mov    0x4(%eax),%eax
c0109dd9:	eb 05                	jmp    c0109de0 <__down+0xba>
    }
    return 0;
c0109ddb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109de0:	c9                   	leave  
c0109de1:	c3                   	ret    

c0109de2 <up>:

void
up(semaphore_t *sem) {
c0109de2:	55                   	push   %ebp
c0109de3:	89 e5                	mov    %esp,%ebp
c0109de5:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109de8:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109def:	00 
c0109df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109df3:	89 04 24             	mov    %eax,(%esp)
c0109df6:	e8 92 fe ff ff       	call   c0109c8d <__up>
}
c0109dfb:	c9                   	leave  
c0109dfc:	c3                   	ret    

c0109dfd <down>:

void
down(semaphore_t *sem) {
c0109dfd:	55                   	push   %ebp
c0109dfe:	89 e5                	mov    %esp,%ebp
c0109e00:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109e03:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109e0a:	00 
c0109e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e0e:	89 04 24             	mov    %eax,(%esp)
c0109e11:	e8 10 ff ff ff       	call   c0109d26 <__down>
c0109e16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109e19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e1d:	74 24                	je     c0109e43 <down+0x46>
c0109e1f:	c7 44 24 0c 22 7c 11 	movl   $0xc0117c22,0xc(%esp)
c0109e26:	c0 
c0109e27:	c7 44 24 08 fd 7b 11 	movl   $0xc0117bfd,0x8(%esp)
c0109e2e:	c0 
c0109e2f:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109e36:	00 
c0109e37:	c7 04 24 12 7c 11 c0 	movl   $0xc0117c12,(%esp)
c0109e3e:	e8 9b 70 ff ff       	call   c0100ede <__panic>
}
c0109e43:	c9                   	leave  
c0109e44:	c3                   	ret    

c0109e45 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109e45:	55                   	push   %ebp
c0109e46:	89 e5                	mov    %esp,%ebp
c0109e48:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109e4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109e52:	e8 db fd ff ff       	call   c0109c32 <__intr_save>
c0109e57:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109e5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e5d:	8b 00                	mov    (%eax),%eax
c0109e5f:	85 c0                	test   %eax,%eax
c0109e61:	7e 14                	jle    c0109e77 <try_down+0x32>
        sem->value --, ret = 1;
c0109e63:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e66:	8b 00                	mov    (%eax),%eax
c0109e68:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109e6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e6e:	89 10                	mov    %edx,(%eax)
c0109e70:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e7a:	89 04 24             	mov    %eax,(%esp)
c0109e7d:	e8 da fd ff ff       	call   c0109c5c <__intr_restore>
    return ret;
c0109e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109e85:	c9                   	leave  
c0109e86:	c3                   	ret    

c0109e87 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109e87:	55                   	push   %ebp
c0109e88:	89 e5                	mov    %esp,%ebp
c0109e8a:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109e8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e90:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109e93:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e98:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109e9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea2:	83 c0 0c             	add    $0xc,%eax
c0109ea5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109ea8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109eab:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109eae:	89 50 04             	mov    %edx,0x4(%eax)
c0109eb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109eb4:	8b 50 04             	mov    0x4(%eax),%edx
c0109eb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109eba:	89 10                	mov    %edx,(%eax)
}
c0109ebc:	c9                   	leave  
c0109ebd:	c3                   	ret    

c0109ebe <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109ebe:	55                   	push   %ebp
c0109ebf:	89 e5                	mov    %esp,%ebp
c0109ec1:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ecd:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109ed0:	89 50 04             	mov    %edx,0x4(%eax)
c0109ed3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ed6:	8b 50 04             	mov    0x4(%eax),%edx
c0109ed9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109edc:	89 10                	mov    %edx,(%eax)
}
c0109ede:	c9                   	leave  
c0109edf:	c3                   	ret    

c0109ee0 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109ee0:	55                   	push   %ebp
c0109ee1:	89 e5                	mov    %esp,%ebp
c0109ee3:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ee9:	83 c0 0c             	add    $0xc,%eax
c0109eec:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ef2:	8b 40 04             	mov    0x4(%eax),%eax
c0109ef5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109ef8:	0f 94 c0             	sete   %al
c0109efb:	0f b6 c0             	movzbl %al,%eax
c0109efe:	85 c0                	test   %eax,%eax
c0109f00:	74 09                	je     c0109f0b <wait_queue_add+0x2b>
c0109f02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f05:	8b 00                	mov    (%eax),%eax
c0109f07:	85 c0                	test   %eax,%eax
c0109f09:	75 24                	jne    c0109f2f <wait_queue_add+0x4f>
c0109f0b:	c7 44 24 0c 30 7c 11 	movl   $0xc0117c30,0xc(%esp)
c0109f12:	c0 
c0109f13:	c7 44 24 08 65 7c 11 	movl   $0xc0117c65,0x8(%esp)
c0109f1a:	c0 
c0109f1b:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109f22:	00 
c0109f23:	c7 04 24 7a 7c 11 c0 	movl   $0xc0117c7a,(%esp)
c0109f2a:	e8 af 6f ff ff       	call   c0100ede <__panic>
    wait->wait_queue = queue;
c0109f2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f32:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f35:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109f38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f3b:	8d 50 0c             	lea    0xc(%eax),%edx
c0109f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f41:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109f44:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109f47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f4a:	8b 00                	mov    (%eax),%eax
c0109f4c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f4f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109f52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109f55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f58:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109f5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f5e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109f61:	89 10                	mov    %edx,(%eax)
c0109f63:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f66:	8b 10                	mov    (%eax),%edx
c0109f68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109f6b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109f6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f71:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109f74:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f7a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109f7d:	89 10                	mov    %edx,(%eax)
}
c0109f7f:	c9                   	leave  
c0109f80:	c3                   	ret    

c0109f81 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109f81:	55                   	push   %ebp
c0109f82:	89 e5                	mov    %esp,%ebp
c0109f84:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109f87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f8a:	83 c0 0c             	add    $0xc,%eax
c0109f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f93:	8b 40 04             	mov    0x4(%eax),%eax
c0109f96:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109f99:	0f 94 c0             	sete   %al
c0109f9c:	0f b6 c0             	movzbl %al,%eax
c0109f9f:	85 c0                	test   %eax,%eax
c0109fa1:	75 0b                	jne    c0109fae <wait_queue_del+0x2d>
c0109fa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fa6:	8b 40 08             	mov    0x8(%eax),%eax
c0109fa9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109fac:	74 24                	je     c0109fd2 <wait_queue_del+0x51>
c0109fae:	c7 44 24 0c 8c 7c 11 	movl   $0xc0117c8c,0xc(%esp)
c0109fb5:	c0 
c0109fb6:	c7 44 24 08 65 7c 11 	movl   $0xc0117c65,0x8(%esp)
c0109fbd:	c0 
c0109fbe:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109fc5:	00 
c0109fc6:	c7 04 24 7a 7c 11 c0 	movl   $0xc0117c7a,(%esp)
c0109fcd:	e8 0c 6f ff ff       	call   c0100ede <__panic>
    list_del_init(&(wait->wait_link));
c0109fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd5:	83 c0 0c             	add    $0xc,%eax
c0109fd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109fdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fde:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109fe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fe4:	8b 40 04             	mov    0x4(%eax),%eax
c0109fe7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109fea:	8b 12                	mov    (%edx),%edx
c0109fec:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109fef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109ff2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ff5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109ff8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109ffb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ffe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a001:	89 10                	mov    %edx,(%eax)
c010a003:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a006:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a009:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a00c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a00f:	89 50 04             	mov    %edx,0x4(%eax)
c010a012:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a015:	8b 50 04             	mov    0x4(%eax),%edx
c010a018:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a01b:	89 10                	mov    %edx,(%eax)
}
c010a01d:	c9                   	leave  
c010a01e:	c3                   	ret    

c010a01f <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010a01f:	55                   	push   %ebp
c010a020:	89 e5                	mov    %esp,%ebp
c010a022:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a025:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a028:	83 c0 0c             	add    $0xc,%eax
c010a02b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a02e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a031:	8b 40 04             	mov    0x4(%eax),%eax
c010a034:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a037:	0f 94 c0             	sete   %al
c010a03a:	0f b6 c0             	movzbl %al,%eax
c010a03d:	85 c0                	test   %eax,%eax
c010a03f:	75 0b                	jne    c010a04c <wait_queue_next+0x2d>
c010a041:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a044:	8b 40 08             	mov    0x8(%eax),%eax
c010a047:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a04a:	74 24                	je     c010a070 <wait_queue_next+0x51>
c010a04c:	c7 44 24 0c 8c 7c 11 	movl   $0xc0117c8c,0xc(%esp)
c010a053:	c0 
c010a054:	c7 44 24 08 65 7c 11 	movl   $0xc0117c65,0x8(%esp)
c010a05b:	c0 
c010a05c:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c010a063:	00 
c010a064:	c7 04 24 7a 7c 11 c0 	movl   $0xc0117c7a,(%esp)
c010a06b:	e8 6e 6e ff ff       	call   c0100ede <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010a070:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a073:	83 c0 0c             	add    $0xc,%eax
c010a076:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a079:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a07c:	8b 40 04             	mov    0x4(%eax),%eax
c010a07f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a082:	8b 45 08             	mov    0x8(%ebp),%eax
c010a085:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a088:	74 08                	je     c010a092 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c010a08a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a08d:	83 e8 0c             	sub    $0xc,%eax
c010a090:	eb 05                	jmp    c010a097 <wait_queue_next+0x78>
    }
    return NULL;
c010a092:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a097:	c9                   	leave  
c010a098:	c3                   	ret    

c010a099 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c010a099:	55                   	push   %ebp
c010a09a:	89 e5                	mov    %esp,%ebp
c010a09c:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a09f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0a2:	83 c0 0c             	add    $0xc,%eax
c010a0a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a0a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0ab:	8b 40 04             	mov    0x4(%eax),%eax
c010a0ae:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a0b1:	0f 94 c0             	sete   %al
c010a0b4:	0f b6 c0             	movzbl %al,%eax
c010a0b7:	85 c0                	test   %eax,%eax
c010a0b9:	75 0b                	jne    c010a0c6 <wait_queue_prev+0x2d>
c010a0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0be:	8b 40 08             	mov    0x8(%eax),%eax
c010a0c1:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a0c4:	74 24                	je     c010a0ea <wait_queue_prev+0x51>
c010a0c6:	c7 44 24 0c 8c 7c 11 	movl   $0xc0117c8c,0xc(%esp)
c010a0cd:	c0 
c010a0ce:	c7 44 24 08 65 7c 11 	movl   $0xc0117c65,0x8(%esp)
c010a0d5:	c0 
c010a0d6:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010a0dd:	00 
c010a0de:	c7 04 24 7a 7c 11 c0 	movl   $0xc0117c7a,(%esp)
c010a0e5:	e8 f4 6d ff ff       	call   c0100ede <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a0ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0ed:	83 c0 0c             	add    $0xc,%eax
c010a0f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a0f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0f6:	8b 00                	mov    (%eax),%eax
c010a0f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a0fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a101:	74 08                	je     c010a10b <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a103:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a106:	83 e8 0c             	sub    $0xc,%eax
c010a109:	eb 05                	jmp    c010a110 <wait_queue_prev+0x77>
    }
    return NULL;
c010a10b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a110:	c9                   	leave  
c010a111:	c3                   	ret    

c010a112 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a112:	55                   	push   %ebp
c010a113:	89 e5                	mov    %esp,%ebp
c010a115:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a118:	8b 45 08             	mov    0x8(%ebp),%eax
c010a11b:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a11e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a121:	8b 40 04             	mov    0x4(%eax),%eax
c010a124:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a127:	8b 45 08             	mov    0x8(%ebp),%eax
c010a12a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a12d:	74 08                	je     c010a137 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a12f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a132:	83 e8 0c             	sub    $0xc,%eax
c010a135:	eb 05                	jmp    c010a13c <wait_queue_first+0x2a>
    }
    return NULL;
c010a137:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a13c:	c9                   	leave  
c010a13d:	c3                   	ret    

c010a13e <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a13e:	55                   	push   %ebp
c010a13f:	89 e5                	mov    %esp,%ebp
c010a141:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a144:	8b 45 08             	mov    0x8(%ebp),%eax
c010a147:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a14a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a14d:	8b 00                	mov    (%eax),%eax
c010a14f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a152:	8b 45 08             	mov    0x8(%ebp),%eax
c010a155:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a158:	74 08                	je     c010a162 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a15a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a15d:	83 e8 0c             	sub    $0xc,%eax
c010a160:	eb 05                	jmp    c010a167 <wait_queue_last+0x29>
    }
    return NULL;
c010a162:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a167:	c9                   	leave  
c010a168:	c3                   	ret    

c010a169 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a169:	55                   	push   %ebp
c010a16a:	89 e5                	mov    %esp,%ebp
c010a16c:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a16f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a172:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a175:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a178:	8b 40 04             	mov    0x4(%eax),%eax
c010a17b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a17e:	0f 94 c0             	sete   %al
c010a181:	0f b6 c0             	movzbl %al,%eax
}
c010a184:	c9                   	leave  
c010a185:	c3                   	ret    

c010a186 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a186:	55                   	push   %ebp
c010a187:	89 e5                	mov    %esp,%ebp
c010a189:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a18c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a18f:	83 c0 0c             	add    $0xc,%eax
c010a192:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a195:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a198:	8b 40 04             	mov    0x4(%eax),%eax
c010a19b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a19e:	0f 94 c0             	sete   %al
c010a1a1:	0f b6 c0             	movzbl %al,%eax
c010a1a4:	85 c0                	test   %eax,%eax
c010a1a6:	0f 94 c0             	sete   %al
c010a1a9:	0f b6 c0             	movzbl %al,%eax
}
c010a1ac:	c9                   	leave  
c010a1ad:	c3                   	ret    

c010a1ae <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a1ae:	55                   	push   %ebp
c010a1af:	89 e5                	mov    %esp,%ebp
c010a1b1:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a1b4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a1b8:	74 12                	je     c010a1cc <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c4:	89 04 24             	mov    %eax,(%esp)
c010a1c7:	e8 b5 fd ff ff       	call   c0109f81 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a1cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1cf:	8b 55 10             	mov    0x10(%ebp),%edx
c010a1d2:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a1d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1d8:	8b 00                	mov    (%eax),%eax
c010a1da:	89 04 24             	mov    %eax,(%esp)
c010a1dd:	e8 24 45 00 00       	call   c010e706 <wakeup_proc>
}
c010a1e2:	c9                   	leave  
c010a1e3:	c3                   	ret    

c010a1e4 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a1e4:	55                   	push   %ebp
c010a1e5:	89 e5                	mov    %esp,%ebp
c010a1e7:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a1ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ed:	89 04 24             	mov    %eax,(%esp)
c010a1f0:	e8 1d ff ff ff       	call   c010a112 <wait_queue_first>
c010a1f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1fc:	74 20                	je     c010a21e <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a1fe:	8b 45 10             	mov    0x10(%ebp),%eax
c010a201:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a205:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a208:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a20c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a20f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a213:	8b 45 08             	mov    0x8(%ebp),%eax
c010a216:	89 04 24             	mov    %eax,(%esp)
c010a219:	e8 90 ff ff ff       	call   c010a1ae <wakeup_wait>
    }
}
c010a21e:	c9                   	leave  
c010a21f:	c3                   	ret    

c010a220 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a220:	55                   	push   %ebp
c010a221:	89 e5                	mov    %esp,%ebp
c010a223:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a226:	8b 45 08             	mov    0x8(%ebp),%eax
c010a229:	89 04 24             	mov    %eax,(%esp)
c010a22c:	e8 e1 fe ff ff       	call   c010a112 <wait_queue_first>
c010a231:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a234:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a238:	74 79                	je     c010a2b3 <wakeup_queue+0x93>
        if (del) {
c010a23a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a23e:	74 37                	je     c010a277 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a240:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a247:	00 
c010a248:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a24b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a24f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a252:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a256:	8b 45 08             	mov    0x8(%ebp),%eax
c010a259:	89 04 24             	mov    %eax,(%esp)
c010a25c:	e8 4d ff ff ff       	call   c010a1ae <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a261:	8b 45 08             	mov    0x8(%ebp),%eax
c010a264:	89 04 24             	mov    %eax,(%esp)
c010a267:	e8 a6 fe ff ff       	call   c010a112 <wait_queue_first>
c010a26c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a26f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a273:	75 cb                	jne    c010a240 <wakeup_queue+0x20>
c010a275:	eb 3c                	jmp    c010a2b3 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a277:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a27e:	00 
c010a27f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a282:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a286:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a289:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a28d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a290:	89 04 24             	mov    %eax,(%esp)
c010a293:	e8 16 ff ff ff       	call   c010a1ae <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a298:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a29b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a29f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a2:	89 04 24             	mov    %eax,(%esp)
c010a2a5:	e8 75 fd ff ff       	call   c010a01f <wait_queue_next>
c010a2aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2b1:	75 c4                	jne    c010a277 <wakeup_queue+0x57>
        }
    }
}
c010a2b3:	c9                   	leave  
c010a2b4:	c3                   	ret    

c010a2b5 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a2b5:	55                   	push   %ebp
c010a2b6:	89 e5                	mov    %esp,%ebp
c010a2b8:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a2bb:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010a2c0:	85 c0                	test   %eax,%eax
c010a2c2:	75 24                	jne    c010a2e8 <wait_current_set+0x33>
c010a2c4:	c7 44 24 0c c9 7c 11 	movl   $0xc0117cc9,0xc(%esp)
c010a2cb:	c0 
c010a2cc:	c7 44 24 08 65 7c 11 	movl   $0xc0117c65,0x8(%esp)
c010a2d3:	c0 
c010a2d4:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a2db:	00 
c010a2dc:	c7 04 24 7a 7c 11 c0 	movl   $0xc0117c7a,(%esp)
c010a2e3:	e8 f6 6b ff ff       	call   c0100ede <__panic>
    wait_init(wait, current);
c010a2e8:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010a2ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2f4:	89 04 24             	mov    %eax,(%esp)
c010a2f7:	e8 8b fb ff ff       	call   c0109e87 <wait_init>
    current->state = PROC_SLEEPING;
c010a2fc:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010a301:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a307:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010a30c:	8b 55 10             	mov    0x10(%ebp),%edx
c010a30f:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a315:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a318:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a31c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31f:	89 04 24             	mov    %eax,(%esp)
c010a322:	e8 b9 fb ff ff       	call   c0109ee0 <wait_queue_add>
}
c010a327:	c9                   	leave  
c010a328:	c3                   	ret    

c010a329 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a329:	55                   	push   %ebp
c010a32a:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a32c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32f:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a332:	5d                   	pop    %ebp
c010a333:	c3                   	ret    

c010a334 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a334:	55                   	push   %ebp
c010a335:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a337:	8b 45 08             	mov    0x8(%ebp),%eax
c010a33a:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a33d:	5d                   	pop    %ebp
c010a33e:	c3                   	ret    

c010a33f <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a33f:	55                   	push   %ebp
c010a340:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a342:	8b 45 08             	mov    0x8(%ebp),%eax
c010a345:	8b 40 18             	mov    0x18(%eax),%eax
c010a348:	8d 50 01             	lea    0x1(%eax),%edx
c010a34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34e:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a351:	8b 45 08             	mov    0x8(%ebp),%eax
c010a354:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a357:	5d                   	pop    %ebp
c010a358:	c3                   	ret    

c010a359 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a359:	55                   	push   %ebp
c010a35a:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a35c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a35f:	8b 40 18             	mov    0x18(%eax),%eax
c010a362:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a365:	8b 45 08             	mov    0x8(%ebp),%eax
c010a368:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a36b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a36e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a371:	5d                   	pop    %ebp
c010a372:	c3                   	ret    

c010a373 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a373:	55                   	push   %ebp
c010a374:	89 e5                	mov    %esp,%ebp
c010a376:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a379:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010a37e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a384:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a387:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a38b:	74 0f                	je     c010a39c <get_fd_array+0x29>
c010a38d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a390:	89 04 24             	mov    %eax,(%esp)
c010a393:	e8 91 ff ff ff       	call   c010a329 <files_count>
c010a398:	85 c0                	test   %eax,%eax
c010a39a:	7f 24                	jg     c010a3c0 <get_fd_array+0x4d>
c010a39c:	c7 44 24 0c dc 7c 11 	movl   $0xc0117cdc,0xc(%esp)
c010a3a3:	c0 
c010a3a4:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a3ab:	c0 
c010a3ac:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a3b3:	00 
c010a3b4:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a3bb:	e8 1e 6b ff ff       	call   c0100ede <__panic>
    return filesp->fd_array;
c010a3c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3c3:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a3c6:	c9                   	leave  
c010a3c7:	c3                   	ret    

c010a3c8 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a3c8:	55                   	push   %ebp
c010a3c9:	89 e5                	mov    %esp,%ebp
c010a3cb:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a3ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a3d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a3db:	eb 24                	jmp    c010a401 <fd_array_init+0x39>
        file->open_count = 0;
c010a3dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a3e0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a3e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a3ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a3f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a3f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a3f6:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a3f9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a3fd:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a401:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a404:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a409:	76 d2                	jbe    c010a3dd <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a40b:	c9                   	leave  
c010a40c:	c3                   	ret    

c010a40d <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a40d:	55                   	push   %ebp
c010a40e:	89 e5                	mov    %esp,%ebp
c010a410:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a413:	e8 5b ff ff ff       	call   c010a373 <get_fd_array>
c010a418:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a41b:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a422:	75 30                	jne    c010a454 <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a424:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a42b:	eb 13                	jmp    c010a440 <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a42d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a430:	8b 00                	mov    (%eax),%eax
c010a432:	85 c0                	test   %eax,%eax
c010a434:	75 02                	jne    c010a438 <fd_array_alloc+0x2b>
                goto found;
c010a436:	eb 59                	jmp    c010a491 <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a438:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a43c:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a440:	8b 45 08             	mov    0x8(%ebp),%eax
c010a443:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a448:	76 e3                	jbe    c010a42d <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a44a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a44f:	e9 90 00 00 00       	jmp    c010a4e4 <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a454:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a458:	78 30                	js     c010a48a <fd_array_alloc+0x7d>
c010a45a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a45d:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a462:	77 26                	ja     c010a48a <fd_array_alloc+0x7d>
            file += fd;
c010a464:	8b 45 08             	mov    0x8(%ebp),%eax
c010a467:	c1 e0 02             	shl    $0x2,%eax
c010a46a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a471:	29 c2                	sub    %eax,%edx
c010a473:	89 d0                	mov    %edx,%eax
c010a475:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a478:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a47b:	8b 00                	mov    (%eax),%eax
c010a47d:	85 c0                	test   %eax,%eax
c010a47f:	75 02                	jne    c010a483 <fd_array_alloc+0x76>
                goto found;
c010a481:	eb 0e                	jmp    c010a491 <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a483:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a488:	eb 5a                	jmp    c010a4e4 <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a48a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a48f:	eb 53                	jmp    c010a4e4 <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a491:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a494:	89 04 24             	mov    %eax,(%esp)
c010a497:	e8 98 fe ff ff       	call   c010a334 <fopen_count>
c010a49c:	85 c0                	test   %eax,%eax
c010a49e:	74 24                	je     c010a4c4 <fd_array_alloc+0xb7>
c010a4a0:	c7 44 24 0c 2a 7d 11 	movl   $0xc0117d2a,0xc(%esp)
c010a4a7:	c0 
c010a4a8:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a4af:	c0 
c010a4b0:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a4b7:	00 
c010a4b8:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a4bf:	e8 1a 6a ff ff       	call   c0100ede <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a4c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4c7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a4cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a4d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4da:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a4dd:	89 10                	mov    %edx,(%eax)
    return 0;
c010a4df:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a4e4:	c9                   	leave  
c010a4e5:	c3                   	ret    

c010a4e6 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a4e6:	55                   	push   %ebp
c010a4e7:	89 e5                	mov    %esp,%ebp
c010a4e9:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a4ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ef:	8b 00                	mov    (%eax),%eax
c010a4f1:	83 f8 01             	cmp    $0x1,%eax
c010a4f4:	74 2e                	je     c010a524 <fd_array_free+0x3e>
c010a4f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4f9:	8b 00                	mov    (%eax),%eax
c010a4fb:	83 f8 03             	cmp    $0x3,%eax
c010a4fe:	74 24                	je     c010a524 <fd_array_free+0x3e>
c010a500:	c7 44 24 0c 44 7d 11 	movl   $0xc0117d44,0xc(%esp)
c010a507:	c0 
c010a508:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a50f:	c0 
c010a510:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a517:	00 
c010a518:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a51f:	e8 ba 69 ff ff       	call   c0100ede <__panic>
    assert(fopen_count(file) == 0);
c010a524:	8b 45 08             	mov    0x8(%ebp),%eax
c010a527:	89 04 24             	mov    %eax,(%esp)
c010a52a:	e8 05 fe ff ff       	call   c010a334 <fopen_count>
c010a52f:	85 c0                	test   %eax,%eax
c010a531:	74 24                	je     c010a557 <fd_array_free+0x71>
c010a533:	c7 44 24 0c 2a 7d 11 	movl   $0xc0117d2a,0xc(%esp)
c010a53a:	c0 
c010a53b:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a542:	c0 
c010a543:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a54a:	00 
c010a54b:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a552:	e8 87 69 ff ff       	call   c0100ede <__panic>
    if (file->status == FD_CLOSED) {
c010a557:	8b 45 08             	mov    0x8(%ebp),%eax
c010a55a:	8b 00                	mov    (%eax),%eax
c010a55c:	83 f8 03             	cmp    $0x3,%eax
c010a55f:	75 0e                	jne    c010a56f <fd_array_free+0x89>
        vfs_close(file->node);
c010a561:	8b 45 08             	mov    0x8(%ebp),%eax
c010a564:	8b 40 14             	mov    0x14(%eax),%eax
c010a567:	89 04 24             	mov    %eax,(%esp)
c010a56a:	e8 69 5c 00 00       	call   c01101d8 <vfs_close>
    }
    file->status = FD_NONE;
c010a56f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a572:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a578:	c9                   	leave  
c010a579:	c3                   	ret    

c010a57a <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a57a:	55                   	push   %ebp
c010a57b:	89 e5                	mov    %esp,%ebp
c010a57d:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a580:	8b 45 08             	mov    0x8(%ebp),%eax
c010a583:	8b 00                	mov    (%eax),%eax
c010a585:	83 f8 02             	cmp    $0x2,%eax
c010a588:	74 24                	je     c010a5ae <fd_array_acquire+0x34>
c010a58a:	c7 44 24 0c 79 7d 11 	movl   $0xc0117d79,0xc(%esp)
c010a591:	c0 
c010a592:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a599:	c0 
c010a59a:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a5a1:	00 
c010a5a2:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a5a9:	e8 30 69 ff ff       	call   c0100ede <__panic>
    fopen_count_inc(file);
c010a5ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b1:	89 04 24             	mov    %eax,(%esp)
c010a5b4:	e8 86 fd ff ff       	call   c010a33f <fopen_count_inc>
}
c010a5b9:	c9                   	leave  
c010a5ba:	c3                   	ret    

c010a5bb <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a5bb:	55                   	push   %ebp
c010a5bc:	89 e5                	mov    %esp,%ebp
c010a5be:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a5c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5c4:	8b 00                	mov    (%eax),%eax
c010a5c6:	83 f8 02             	cmp    $0x2,%eax
c010a5c9:	74 2e                	je     c010a5f9 <fd_array_release+0x3e>
c010a5cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ce:	8b 00                	mov    (%eax),%eax
c010a5d0:	83 f8 03             	cmp    $0x3,%eax
c010a5d3:	74 24                	je     c010a5f9 <fd_array_release+0x3e>
c010a5d5:	c7 44 24 0c 94 7d 11 	movl   $0xc0117d94,0xc(%esp)
c010a5dc:	c0 
c010a5dd:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a5e4:	c0 
c010a5e5:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a5ec:	00 
c010a5ed:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a5f4:	e8 e5 68 ff ff       	call   c0100ede <__panic>
    assert(fopen_count(file) > 0);
c010a5f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5fc:	89 04 24             	mov    %eax,(%esp)
c010a5ff:	e8 30 fd ff ff       	call   c010a334 <fopen_count>
c010a604:	85 c0                	test   %eax,%eax
c010a606:	7f 24                	jg     c010a62c <fd_array_release+0x71>
c010a608:	c7 44 24 0c cb 7d 11 	movl   $0xc0117dcb,0xc(%esp)
c010a60f:	c0 
c010a610:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a617:	c0 
c010a618:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a61f:	00 
c010a620:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a627:	e8 b2 68 ff ff       	call   c0100ede <__panic>
    if (fopen_count_dec(file) == 0) {
c010a62c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a62f:	89 04 24             	mov    %eax,(%esp)
c010a632:	e8 22 fd ff ff       	call   c010a359 <fopen_count_dec>
c010a637:	85 c0                	test   %eax,%eax
c010a639:	75 0b                	jne    c010a646 <fd_array_release+0x8b>
        fd_array_free(file);
c010a63b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a63e:	89 04 24             	mov    %eax,(%esp)
c010a641:	e8 a0 fe ff ff       	call   c010a4e6 <fd_array_free>
    }
}
c010a646:	c9                   	leave  
c010a647:	c3                   	ret    

c010a648 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a648:	55                   	push   %ebp
c010a649:	89 e5                	mov    %esp,%ebp
c010a64b:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a64e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a651:	8b 00                	mov    (%eax),%eax
c010a653:	83 f8 01             	cmp    $0x1,%eax
c010a656:	75 0a                	jne    c010a662 <fd_array_open+0x1a>
c010a658:	8b 45 08             	mov    0x8(%ebp),%eax
c010a65b:	8b 40 14             	mov    0x14(%eax),%eax
c010a65e:	85 c0                	test   %eax,%eax
c010a660:	75 24                	jne    c010a686 <fd_array_open+0x3e>
c010a662:	c7 44 24 0c e4 7d 11 	movl   $0xc0117de4,0xc(%esp)
c010a669:	c0 
c010a66a:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a671:	c0 
c010a672:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a679:	00 
c010a67a:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a681:	e8 58 68 ff ff       	call   c0100ede <__panic>
    file->status = FD_OPENED;
c010a686:	8b 45 08             	mov    0x8(%ebp),%eax
c010a689:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a68f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a692:	89 04 24             	mov    %eax,(%esp)
c010a695:	e8 a5 fc ff ff       	call   c010a33f <fopen_count_inc>
}
c010a69a:	c9                   	leave  
c010a69b:	c3                   	ret    

c010a69c <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a69c:	55                   	push   %ebp
c010a69d:	89 e5                	mov    %esp,%ebp
c010a69f:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a6a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a5:	8b 00                	mov    (%eax),%eax
c010a6a7:	83 f8 02             	cmp    $0x2,%eax
c010a6aa:	74 24                	je     c010a6d0 <fd_array_close+0x34>
c010a6ac:	c7 44 24 0c 79 7d 11 	movl   $0xc0117d79,0xc(%esp)
c010a6b3:	c0 
c010a6b4:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a6bb:	c0 
c010a6bc:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a6c3:	00 
c010a6c4:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a6cb:	e8 0e 68 ff ff       	call   c0100ede <__panic>
    assert(fopen_count(file) > 0);
c010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d3:	89 04 24             	mov    %eax,(%esp)
c010a6d6:	e8 59 fc ff ff       	call   c010a334 <fopen_count>
c010a6db:	85 c0                	test   %eax,%eax
c010a6dd:	7f 24                	jg     c010a703 <fd_array_close+0x67>
c010a6df:	c7 44 24 0c cb 7d 11 	movl   $0xc0117dcb,0xc(%esp)
c010a6e6:	c0 
c010a6e7:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a6ee:	c0 
c010a6ef:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a6f6:	00 
c010a6f7:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a6fe:	e8 db 67 ff ff       	call   c0100ede <__panic>
    file->status = FD_CLOSED;
c010a703:	8b 45 08             	mov    0x8(%ebp),%eax
c010a706:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a70c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a70f:	89 04 24             	mov    %eax,(%esp)
c010a712:	e8 42 fc ff ff       	call   c010a359 <fopen_count_dec>
c010a717:	85 c0                	test   %eax,%eax
c010a719:	75 0b                	jne    c010a726 <fd_array_close+0x8a>
        fd_array_free(file);
c010a71b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a71e:	89 04 24             	mov    %eax,(%esp)
c010a721:	e8 c0 fd ff ff       	call   c010a4e6 <fd_array_free>
    }
}
c010a726:	c9                   	leave  
c010a727:	c3                   	ret    

c010a728 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a728:	55                   	push   %ebp
c010a729:	89 e5                	mov    %esp,%ebp
c010a72b:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a72e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a731:	8b 00                	mov    (%eax),%eax
c010a733:	83 f8 01             	cmp    $0x1,%eax
c010a736:	75 0a                	jne    c010a742 <fd_array_dup+0x1a>
c010a738:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a73b:	8b 00                	mov    (%eax),%eax
c010a73d:	83 f8 02             	cmp    $0x2,%eax
c010a740:	74 24                	je     c010a766 <fd_array_dup+0x3e>
c010a742:	c7 44 24 0c 14 7e 11 	movl   $0xc0117e14,0xc(%esp)
c010a749:	c0 
c010a74a:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a751:	c0 
c010a752:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a759:	00 
c010a75a:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a761:	e8 78 67 ff ff       	call   c0100ede <__panic>
    to->pos = from->pos;
c010a766:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a769:	8b 50 10             	mov    0x10(%eax),%edx
c010a76c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a76f:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a772:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a775:	8b 50 04             	mov    0x4(%eax),%edx
c010a778:	8b 45 08             	mov    0x8(%ebp),%eax
c010a77b:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a77e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a781:	8b 50 08             	mov    0x8(%eax),%edx
c010a784:	8b 45 08             	mov    0x8(%ebp),%eax
c010a787:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a78a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a78d:	8b 40 14             	mov    0x14(%eax),%eax
c010a790:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a796:	89 04 24             	mov    %eax,(%esp)
c010a799:	e8 69 4a 00 00       	call   c010f207 <inode_ref_inc>
c010a79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7a1:	89 04 24             	mov    %eax,(%esp)
c010a7a4:	e8 65 4b 00 00       	call   c010f30e <inode_open_inc>
    to->node = node;
c010a7a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a7af:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a7b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7b5:	89 04 24             	mov    %eax,(%esp)
c010a7b8:	e8 8b fe ff ff       	call   c010a648 <fd_array_open>
}
c010a7bd:	c9                   	leave  
c010a7be:	c3                   	ret    

c010a7bf <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a7bf:	55                   	push   %ebp
c010a7c0:	89 e5                	mov    %esp,%ebp
c010a7c2:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a7c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a7c9:	78 4b                	js     c010a816 <fd2file+0x57>
c010a7cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ce:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a7d3:	77 41                	ja     c010a816 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a7d5:	e8 99 fb ff ff       	call   c010a373 <get_fd_array>
c010a7da:	89 c2                	mov    %eax,%edx
c010a7dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7df:	c1 e0 02             	shl    $0x2,%eax
c010a7e2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a7e9:	29 c1                	sub    %eax,%ecx
c010a7eb:	89 c8                	mov    %ecx,%eax
c010a7ed:	01 d0                	add    %edx,%eax
c010a7ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a7f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7f5:	8b 00                	mov    (%eax),%eax
c010a7f7:	83 f8 02             	cmp    $0x2,%eax
c010a7fa:	75 1a                	jne    c010a816 <fd2file+0x57>
c010a7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ff:	8b 40 0c             	mov    0xc(%eax),%eax
c010a802:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a805:	75 0f                	jne    c010a816 <fd2file+0x57>
            *file_store = file;
c010a807:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a80a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a80d:	89 10                	mov    %edx,(%eax)
            return 0;
c010a80f:	b8 00 00 00 00       	mov    $0x0,%eax
c010a814:	eb 05                	jmp    c010a81b <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a816:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a81b:	c9                   	leave  
c010a81c:	c3                   	ret    

c010a81d <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a81d:	55                   	push   %ebp
c010a81e:	89 e5                	mov    %esp,%ebp
c010a820:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a823:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a826:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a82a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82d:	89 04 24             	mov    %eax,(%esp)
c010a830:	e8 8a ff ff ff       	call   c010a7bf <fd2file>
c010a835:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a838:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a83c:	74 07                	je     c010a845 <file_testfd+0x28>
        return 0;
c010a83e:	b8 00 00 00 00       	mov    $0x0,%eax
c010a843:	eb 33                	jmp    c010a878 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a845:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a849:	74 11                	je     c010a85c <file_testfd+0x3f>
c010a84b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a84e:	8b 40 04             	mov    0x4(%eax),%eax
c010a851:	85 c0                	test   %eax,%eax
c010a853:	75 07                	jne    c010a85c <file_testfd+0x3f>
        return 0;
c010a855:	b8 00 00 00 00       	mov    $0x0,%eax
c010a85a:	eb 1c                	jmp    c010a878 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a85c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a860:	74 11                	je     c010a873 <file_testfd+0x56>
c010a862:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a865:	8b 40 08             	mov    0x8(%eax),%eax
c010a868:	85 c0                	test   %eax,%eax
c010a86a:	75 07                	jne    c010a873 <file_testfd+0x56>
        return 0;
c010a86c:	b8 00 00 00 00       	mov    $0x0,%eax
c010a871:	eb 05                	jmp    c010a878 <file_testfd+0x5b>
    }
    return 1;
c010a873:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a878:	c9                   	leave  
c010a879:	c3                   	ret    

c010a87a <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a87a:	55                   	push   %ebp
c010a87b:	89 e5                	mov    %esp,%ebp
c010a87d:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a887:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a88e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a891:	83 e0 03             	and    $0x3,%eax
c010a894:	83 f8 01             	cmp    $0x1,%eax
c010a897:	74 15                	je     c010a8ae <file_open+0x34>
c010a899:	83 f8 01             	cmp    $0x1,%eax
c010a89c:	72 07                	jb     c010a8a5 <file_open+0x2b>
c010a89e:	83 f8 02             	cmp    $0x2,%eax
c010a8a1:	74 14                	je     c010a8b7 <file_open+0x3d>
c010a8a3:	eb 21                	jmp    c010a8c6 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a8a5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a8ac:	eb 22                	jmp    c010a8d0 <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a8ae:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a8b5:	eb 19                	jmp    c010a8d0 <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a8b7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a8be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a8c4:	eb 0a                	jmp    c010a8d0 <file_open+0x56>
    default:
        return -E_INVAL;
c010a8c6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a8cb:	e9 45 01 00 00       	jmp    c010aa15 <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a8d0:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a8d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8d7:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a8de:	e8 2a fb ff ff       	call   c010a40d <fd_array_alloc>
c010a8e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8ea:	74 08                	je     c010a8f4 <file_open+0x7a>
        return ret;
c010a8ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8ef:	e9 21 01 00 00       	jmp    c010aa15 <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a8f4:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a8f7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a8fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a8fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a902:	8b 45 08             	mov    0x8(%ebp),%eax
c010a905:	89 04 24             	mov    %eax,(%esp)
c010a908:	e8 db 55 00 00       	call   c010fee8 <vfs_open>
c010a90d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a910:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a914:	74 13                	je     c010a929 <file_open+0xaf>
        fd_array_free(file);
c010a916:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a919:	89 04 24             	mov    %eax,(%esp)
c010a91c:	e8 c5 fb ff ff       	call   c010a4e6 <fd_array_free>
        return ret;
c010a921:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a924:	e9 ec 00 00 00       	jmp    c010aa15 <file_open+0x19b>
    }

    file->pos = 0;
c010a929:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a92c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a933:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a936:	83 e0 20             	and    $0x20,%eax
c010a939:	85 c0                	test   %eax,%eax
c010a93b:	0f 84 a8 00 00 00    	je     c010a9e9 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a941:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a944:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a947:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a94a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a94d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a951:	74 17                	je     c010a96a <file_open+0xf0>
c010a953:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a956:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a959:	85 c0                	test   %eax,%eax
c010a95b:	74 0d                	je     c010a96a <file_open+0xf0>
c010a95d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a960:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a963:	8b 40 14             	mov    0x14(%eax),%eax
c010a966:	85 c0                	test   %eax,%eax
c010a968:	75 24                	jne    c010a98e <file_open+0x114>
c010a96a:	c7 44 24 0c 48 7e 11 	movl   $0xc0117e48,0xc(%esp)
c010a971:	c0 
c010a972:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010a979:	c0 
c010a97a:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a981:	00 
c010a982:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010a989:	e8 50 65 ff ff       	call   c0100ede <__panic>
c010a98e:	c7 44 24 04 96 7e 11 	movl   $0xc0117e96,0x4(%esp)
c010a995:	c0 
c010a996:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a999:	89 04 24             	mov    %eax,(%esp)
c010a99c:	e8 6e 4a 00 00       	call   c010f40f <inode_check>
c010a9a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9a4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9a7:	8b 40 14             	mov    0x14(%eax),%eax
c010a9aa:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a9ad:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a9b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a9b4:	89 14 24             	mov    %edx,(%esp)
c010a9b7:	ff d0                	call   *%eax
c010a9b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a9bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a9c0:	74 1b                	je     c010a9dd <file_open+0x163>
            vfs_close(node);
c010a9c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a9c5:	89 04 24             	mov    %eax,(%esp)
c010a9c8:	e8 0b 58 00 00       	call   c01101d8 <vfs_close>
            fd_array_free(file);
c010a9cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a9d0:	89 04 24             	mov    %eax,(%esp)
c010a9d3:	e8 0e fb ff ff       	call   c010a4e6 <fd_array_free>
            return ret;
c010a9d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9db:	eb 38                	jmp    c010aa15 <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010a9dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a9e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9e3:	8b 52 0c             	mov    0xc(%edx),%edx
c010a9e6:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a9e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a9ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a9ef:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a9f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a9f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a9f8:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a9fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a9fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa01:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010aa04:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa07:	89 04 24             	mov    %eax,(%esp)
c010aa0a:	e8 39 fc ff ff       	call   c010a648 <fd_array_open>
    return file->fd;
c010aa0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa12:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010aa15:	c9                   	leave  
c010aa16:	c3                   	ret    

c010aa17 <file_close>:

// close file
int
file_close(int fd) {
c010aa17:	55                   	push   %ebp
c010aa18:	89 e5                	mov    %esp,%ebp
c010aa1a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa1d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010aa20:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa24:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa27:	89 04 24             	mov    %eax,(%esp)
c010aa2a:	e8 90 fd ff ff       	call   c010a7bf <fd2file>
c010aa2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa36:	74 05                	je     c010aa3d <file_close+0x26>
        return ret;
c010aa38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa3b:	eb 10                	jmp    c010aa4d <file_close+0x36>
    }
    fd_array_close(file);
c010aa3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa40:	89 04 24             	mov    %eax,(%esp)
c010aa43:	e8 54 fc ff ff       	call   c010a69c <fd_array_close>
    return 0;
c010aa48:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa4d:	c9                   	leave  
c010aa4e:	c3                   	ret    

c010aa4f <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010aa4f:	55                   	push   %ebp
c010aa50:	89 e5                	mov    %esp,%ebp
c010aa52:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aa55:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa5e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aa61:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa65:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa68:	89 04 24             	mov    %eax,(%esp)
c010aa6b:	e8 4f fd ff ff       	call   c010a7bf <fd2file>
c010aa70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa77:	74 08                	je     c010aa81 <file_read+0x32>
        return ret;
c010aa79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa7c:	e9 06 01 00 00       	jmp    c010ab87 <file_read+0x138>
    }
    if (!file->readable) {
c010aa81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa84:	8b 40 04             	mov    0x4(%eax),%eax
c010aa87:	85 c0                	test   %eax,%eax
c010aa89:	75 0a                	jne    c010aa95 <file_read+0x46>
        return -E_INVAL;
c010aa8b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aa90:	e9 f2 00 00 00       	jmp    c010ab87 <file_read+0x138>
    }
    fd_array_acquire(file);
c010aa95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa98:	89 04 24             	mov    %eax,(%esp)
c010aa9b:	e8 da fa ff ff       	call   c010a57a <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010aaa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaa3:	8b 40 10             	mov    0x10(%eax),%eax
c010aaa6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aaaa:	8b 45 10             	mov    0x10(%ebp),%eax
c010aaad:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aab1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aab4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aab8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aabb:	89 04 24             	mov    %eax,(%esp)
c010aabe:	e8 81 09 00 00       	call   c010b444 <iobuf_init>
c010aac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010aac6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aac9:	8b 40 14             	mov    0x14(%eax),%eax
c010aacc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aacf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aad3:	74 17                	je     c010aaec <file_read+0x9d>
c010aad5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aad8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aadb:	85 c0                	test   %eax,%eax
c010aadd:	74 0d                	je     c010aaec <file_read+0x9d>
c010aadf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aae2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aae5:	8b 40 0c             	mov    0xc(%eax),%eax
c010aae8:	85 c0                	test   %eax,%eax
c010aaea:	75 24                	jne    c010ab10 <file_read+0xc1>
c010aaec:	c7 44 24 0c 9c 7e 11 	movl   $0xc0117e9c,0xc(%esp)
c010aaf3:	c0 
c010aaf4:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010aafb:	c0 
c010aafc:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010ab03:	00 
c010ab04:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010ab0b:	e8 ce 63 ff ff       	call   c0100ede <__panic>
c010ab10:	c7 44 24 04 e9 7e 11 	movl   $0xc0117ee9,0x4(%esp)
c010ab17:	c0 
c010ab18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab1b:	89 04 24             	mov    %eax,(%esp)
c010ab1e:	e8 ec 48 00 00       	call   c010f40f <inode_check>
c010ab23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab26:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab29:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab2c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab2f:	8b 52 14             	mov    0x14(%edx),%edx
c010ab32:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ab35:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ab39:	89 14 24             	mov    %edx,(%esp)
c010ab3c:	ff d0                	call   *%eax
c010ab3e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010ab41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab44:	8b 50 08             	mov    0x8(%eax),%edx
c010ab47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab4a:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab4d:	29 c2                	sub    %eax,%edx
c010ab4f:	89 d0                	mov    %edx,%eax
c010ab51:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010ab54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab57:	8b 00                	mov    (%eax),%eax
c010ab59:	83 f8 02             	cmp    $0x2,%eax
c010ab5c:	75 13                	jne    c010ab71 <file_read+0x122>
        file->pos += copied;
c010ab5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab64:	8b 52 10             	mov    0x10(%edx),%edx
c010ab67:	89 d1                	mov    %edx,%ecx
c010ab69:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab6c:	01 ca                	add    %ecx,%edx
c010ab6e:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010ab71:	8b 45 14             	mov    0x14(%ebp),%eax
c010ab74:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab77:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010ab79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab7c:	89 04 24             	mov    %eax,(%esp)
c010ab7f:	e8 37 fa ff ff       	call   c010a5bb <fd_array_release>
    return ret;
c010ab84:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ab87:	c9                   	leave  
c010ab88:	c3                   	ret    

c010ab89 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010ab89:	55                   	push   %ebp
c010ab8a:	89 e5                	mov    %esp,%ebp
c010ab8c:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010ab8f:	8b 45 14             	mov    0x14(%ebp),%eax
c010ab92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010ab98:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010ab9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aba2:	89 04 24             	mov    %eax,(%esp)
c010aba5:	e8 15 fc ff ff       	call   c010a7bf <fd2file>
c010abaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abb1:	74 08                	je     c010abbb <file_write+0x32>
        return ret;
c010abb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abb6:	e9 06 01 00 00       	jmp    c010acc1 <file_write+0x138>
    }
    if (!file->writable) {
c010abbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abbe:	8b 40 08             	mov    0x8(%eax),%eax
c010abc1:	85 c0                	test   %eax,%eax
c010abc3:	75 0a                	jne    c010abcf <file_write+0x46>
        return -E_INVAL;
c010abc5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010abca:	e9 f2 00 00 00       	jmp    c010acc1 <file_write+0x138>
    }
    fd_array_acquire(file);
c010abcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abd2:	89 04 24             	mov    %eax,(%esp)
c010abd5:	e8 a0 f9 ff ff       	call   c010a57a <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010abda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abdd:	8b 40 10             	mov    0x10(%eax),%eax
c010abe0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010abe4:	8b 45 10             	mov    0x10(%ebp),%eax
c010abe7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010abeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abee:	89 44 24 04          	mov    %eax,0x4(%esp)
c010abf2:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010abf5:	89 04 24             	mov    %eax,(%esp)
c010abf8:	e8 47 08 00 00       	call   c010b444 <iobuf_init>
c010abfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010ac00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac03:	8b 40 14             	mov    0x14(%eax),%eax
c010ac06:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac09:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac0d:	74 17                	je     c010ac26 <file_write+0x9d>
c010ac0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac12:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac15:	85 c0                	test   %eax,%eax
c010ac17:	74 0d                	je     c010ac26 <file_write+0x9d>
c010ac19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac1c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac1f:	8b 40 10             	mov    0x10(%eax),%eax
c010ac22:	85 c0                	test   %eax,%eax
c010ac24:	75 24                	jne    c010ac4a <file_write+0xc1>
c010ac26:	c7 44 24 0c f0 7e 11 	movl   $0xc0117ef0,0xc(%esp)
c010ac2d:	c0 
c010ac2e:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010ac35:	c0 
c010ac36:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010ac3d:	00 
c010ac3e:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010ac45:	e8 94 62 ff ff       	call   c0100ede <__panic>
c010ac4a:	c7 44 24 04 3e 7f 11 	movl   $0xc0117f3e,0x4(%esp)
c010ac51:	c0 
c010ac52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac55:	89 04 24             	mov    %eax,(%esp)
c010ac58:	e8 b2 47 00 00       	call   c010f40f <inode_check>
c010ac5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac60:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac63:	8b 40 10             	mov    0x10(%eax),%eax
c010ac66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ac69:	8b 52 14             	mov    0x14(%edx),%edx
c010ac6c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ac6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ac73:	89 14 24             	mov    %edx,(%esp)
c010ac76:	ff d0                	call   *%eax
c010ac78:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010ac7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac7e:	8b 50 08             	mov    0x8(%eax),%edx
c010ac81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac84:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac87:	29 c2                	sub    %eax,%edx
c010ac89:	89 d0                	mov    %edx,%eax
c010ac8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010ac8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac91:	8b 00                	mov    (%eax),%eax
c010ac93:	83 f8 02             	cmp    $0x2,%eax
c010ac96:	75 13                	jne    c010acab <file_write+0x122>
        file->pos += copied;
c010ac98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac9b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ac9e:	8b 52 10             	mov    0x10(%edx),%edx
c010aca1:	89 d1                	mov    %edx,%ecx
c010aca3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aca6:	01 ca                	add    %ecx,%edx
c010aca8:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010acab:	8b 45 14             	mov    0x14(%ebp),%eax
c010acae:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010acb1:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010acb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010acb6:	89 04 24             	mov    %eax,(%esp)
c010acb9:	e8 fd f8 ff ff       	call   c010a5bb <fd_array_release>
    return ret;
c010acbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010acc1:	c9                   	leave  
c010acc2:	c3                   	ret    

c010acc3 <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010acc3:	55                   	push   %ebp
c010acc4:	89 e5                	mov    %esp,%ebp
c010acc6:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010acc9:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010accc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010accf:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010acd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acd6:	8b 45 08             	mov    0x8(%ebp),%eax
c010acd9:	89 04 24             	mov    %eax,(%esp)
c010acdc:	e8 de fa ff ff       	call   c010a7bf <fd2file>
c010ace1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ace4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ace8:	74 08                	je     c010acf2 <file_seek+0x2f>
        return ret;
c010acea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aced:	e9 72 01 00 00       	jmp    c010ae64 <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010acf2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010acf5:	89 04 24             	mov    %eax,(%esp)
c010acf8:	e8 7d f8 ff ff       	call   c010a57a <fd_array_acquire>

    switch (whence) {
c010acfd:	8b 45 10             	mov    0x10(%ebp),%eax
c010ad00:	83 f8 01             	cmp    $0x1,%eax
c010ad03:	74 12                	je     c010ad17 <file_seek+0x54>
c010ad05:	83 f8 02             	cmp    $0x2,%eax
c010ad08:	74 1b                	je     c010ad25 <file_seek+0x62>
c010ad0a:	85 c0                	test   %eax,%eax
c010ad0c:	0f 84 af 00 00 00    	je     c010adc1 <file_seek+0xfe>
c010ad12:	e9 a1 00 00 00       	jmp    c010adb8 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ad17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad1a:	8b 40 10             	mov    0x10(%eax),%eax
c010ad1d:	01 45 0c             	add    %eax,0xc(%ebp)
c010ad20:	e9 9d 00 00 00       	jmp    c010adc2 <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ad25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad28:	8b 40 14             	mov    0x14(%eax),%eax
c010ad2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ad2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ad32:	74 17                	je     c010ad4b <file_seek+0x88>
c010ad34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad37:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad3a:	85 c0                	test   %eax,%eax
c010ad3c:	74 0d                	je     c010ad4b <file_seek+0x88>
c010ad3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad41:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad44:	8b 40 14             	mov    0x14(%eax),%eax
c010ad47:	85 c0                	test   %eax,%eax
c010ad49:	75 24                	jne    c010ad6f <file_seek+0xac>
c010ad4b:	c7 44 24 0c 48 7e 11 	movl   $0xc0117e48,0xc(%esp)
c010ad52:	c0 
c010ad53:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010ad5a:	c0 
c010ad5b:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010ad62:	00 
c010ad63:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010ad6a:	e8 6f 61 ff ff       	call   c0100ede <__panic>
c010ad6f:	c7 44 24 04 96 7e 11 	movl   $0xc0117e96,0x4(%esp)
c010ad76:	c0 
c010ad77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad7a:	89 04 24             	mov    %eax,(%esp)
c010ad7d:	e8 8d 46 00 00       	call   c010f40f <inode_check>
c010ad82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad85:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad88:	8b 40 14             	mov    0x14(%eax),%eax
c010ad8b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ad8e:	8b 52 14             	mov    0x14(%edx),%edx
c010ad91:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ad94:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ad98:	89 14 24             	mov    %edx,(%esp)
c010ad9b:	ff d0                	call   *%eax
c010ad9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ada0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ada4:	75 10                	jne    c010adb6 <file_seek+0xf3>
            pos += stat->st_size;
c010ada6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ada9:	8b 50 0c             	mov    0xc(%eax),%edx
c010adac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adaf:	01 d0                	add    %edx,%eax
c010adb1:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010adb4:	eb 0c                	jmp    c010adc2 <file_seek+0xff>
c010adb6:	eb 0a                	jmp    c010adc2 <file_seek+0xff>
    default: ret = -E_INVAL;
c010adb8:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010adbf:	eb 01                	jmp    c010adc2 <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010adc1:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010adc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adc6:	0f 85 8a 00 00 00    	jne    c010ae56 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010adcc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010adcf:	8b 40 14             	mov    0x14(%eax),%eax
c010add2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010add5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010add9:	74 17                	je     c010adf2 <file_seek+0x12f>
c010addb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010adde:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ade1:	85 c0                	test   %eax,%eax
c010ade3:	74 0d                	je     c010adf2 <file_seek+0x12f>
c010ade5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ade8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adeb:	8b 40 2c             	mov    0x2c(%eax),%eax
c010adee:	85 c0                	test   %eax,%eax
c010adf0:	75 24                	jne    c010ae16 <file_seek+0x153>
c010adf2:	c7 44 24 0c 44 7f 11 	movl   $0xc0117f44,0xc(%esp)
c010adf9:	c0 
c010adfa:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010ae01:	c0 
c010ae02:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010ae09:	00 
c010ae0a:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010ae11:	e8 c8 60 ff ff       	call   c0100ede <__panic>
c010ae16:	c7 44 24 04 94 7f 11 	movl   $0xc0117f94,0x4(%esp)
c010ae1d:	c0 
c010ae1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae21:	89 04 24             	mov    %eax,(%esp)
c010ae24:	e8 e6 45 00 00       	call   c010f40f <inode_check>
c010ae29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae2f:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ae32:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ae35:	8b 52 14             	mov    0x14(%edx),%edx
c010ae38:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae3b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ae3f:	89 14 24             	mov    %edx,(%esp)
c010ae42:	ff d0                	call   *%eax
c010ae44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae4b:	75 09                	jne    c010ae56 <file_seek+0x193>
            file->pos = pos;
c010ae4d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae50:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae53:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ae56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae59:	89 04 24             	mov    %eax,(%esp)
c010ae5c:	e8 5a f7 ff ff       	call   c010a5bb <fd_array_release>
    return ret;
c010ae61:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ae64:	c9                   	leave  
c010ae65:	c3                   	ret    

c010ae66 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ae66:	55                   	push   %ebp
c010ae67:	89 e5                	mov    %esp,%ebp
c010ae69:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ae6c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ae6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae73:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae76:	89 04 24             	mov    %eax,(%esp)
c010ae79:	e8 41 f9 ff ff       	call   c010a7bf <fd2file>
c010ae7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae85:	74 08                	je     c010ae8f <file_fstat+0x29>
        return ret;
c010ae87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae8a:	e9 94 00 00 00       	jmp    c010af23 <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010ae8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae92:	89 04 24             	mov    %eax,(%esp)
c010ae95:	e8 e0 f6 ff ff       	call   c010a57a <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010ae9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae9d:	8b 40 14             	mov    0x14(%eax),%eax
c010aea0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aea3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aea7:	74 17                	je     c010aec0 <file_fstat+0x5a>
c010aea9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeac:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aeaf:	85 c0                	test   %eax,%eax
c010aeb1:	74 0d                	je     c010aec0 <file_fstat+0x5a>
c010aeb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeb6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aeb9:	8b 40 14             	mov    0x14(%eax),%eax
c010aebc:	85 c0                	test   %eax,%eax
c010aebe:	75 24                	jne    c010aee4 <file_fstat+0x7e>
c010aec0:	c7 44 24 0c 48 7e 11 	movl   $0xc0117e48,0xc(%esp)
c010aec7:	c0 
c010aec8:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010aecf:	c0 
c010aed0:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010aed7:	00 
c010aed8:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010aedf:	e8 fa 5f ff ff       	call   c0100ede <__panic>
c010aee4:	c7 44 24 04 96 7e 11 	movl   $0xc0117e96,0x4(%esp)
c010aeeb:	c0 
c010aeec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeef:	89 04 24             	mov    %eax,(%esp)
c010aef2:	e8 18 45 00 00       	call   c010f40f <inode_check>
c010aef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aefa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aefd:	8b 40 14             	mov    0x14(%eax),%eax
c010af00:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010af03:	8b 52 14             	mov    0x14(%edx),%edx
c010af06:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010af09:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010af0d:	89 14 24             	mov    %edx,(%esp)
c010af10:	ff d0                	call   *%eax
c010af12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010af15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af18:	89 04 24             	mov    %eax,(%esp)
c010af1b:	e8 9b f6 ff ff       	call   c010a5bb <fd_array_release>
    return ret;
c010af20:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010af23:	c9                   	leave  
c010af24:	c3                   	ret    

c010af25 <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010af25:	55                   	push   %ebp
c010af26:	89 e5                	mov    %esp,%ebp
c010af28:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010af2b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010af2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af32:	8b 45 08             	mov    0x8(%ebp),%eax
c010af35:	89 04 24             	mov    %eax,(%esp)
c010af38:	e8 82 f8 ff ff       	call   c010a7bf <fd2file>
c010af3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af44:	74 08                	je     c010af4e <file_fsync+0x29>
        return ret;
c010af46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af49:	e9 8d 00 00 00       	jmp    c010afdb <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010af4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af51:	89 04 24             	mov    %eax,(%esp)
c010af54:	e8 21 f6 ff ff       	call   c010a57a <fd_array_acquire>
    ret = vop_fsync(file->node);
c010af59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af5c:	8b 40 14             	mov    0x14(%eax),%eax
c010af5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010af62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af66:	74 17                	je     c010af7f <file_fsync+0x5a>
c010af68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af6b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af6e:	85 c0                	test   %eax,%eax
c010af70:	74 0d                	je     c010af7f <file_fsync+0x5a>
c010af72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af75:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af78:	8b 40 18             	mov    0x18(%eax),%eax
c010af7b:	85 c0                	test   %eax,%eax
c010af7d:	75 24                	jne    c010afa3 <file_fsync+0x7e>
c010af7f:	c7 44 24 0c 9c 7f 11 	movl   $0xc0117f9c,0xc(%esp)
c010af86:	c0 
c010af87:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010af8e:	c0 
c010af8f:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010af96:	00 
c010af97:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010af9e:	e8 3b 5f ff ff       	call   c0100ede <__panic>
c010afa3:	c7 44 24 04 ea 7f 11 	movl   $0xc0117fea,0x4(%esp)
c010afaa:	c0 
c010afab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afae:	89 04 24             	mov    %eax,(%esp)
c010afb1:	e8 59 44 00 00       	call   c010f40f <inode_check>
c010afb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afb9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010afbc:	8b 40 18             	mov    0x18(%eax),%eax
c010afbf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010afc2:	8b 52 14             	mov    0x14(%edx),%edx
c010afc5:	89 14 24             	mov    %edx,(%esp)
c010afc8:	ff d0                	call   *%eax
c010afca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010afcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afd0:	89 04 24             	mov    %eax,(%esp)
c010afd3:	e8 e3 f5 ff ff       	call   c010a5bb <fd_array_release>
    return ret;
c010afd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010afdb:	c9                   	leave  
c010afdc:	c3                   	ret    

c010afdd <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010afdd:	55                   	push   %ebp
c010afde:	89 e5                	mov    %esp,%ebp
c010afe0:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010afe3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010afe6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010afea:	8b 45 08             	mov    0x8(%ebp),%eax
c010afed:	89 04 24             	mov    %eax,(%esp)
c010aff0:	e8 ca f7 ff ff       	call   c010a7bf <fd2file>
c010aff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010affc:	74 08                	je     c010b006 <file_getdirentry+0x29>
        return ret;
c010affe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b001:	e9 e3 00 00 00       	jmp    c010b0e9 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010b006:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b009:	89 04 24             	mov    %eax,(%esp)
c010b00c:	e8 69 f5 ff ff       	call   c010a57a <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010b011:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b014:	8b 00                	mov    (%eax),%eax
c010b016:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b019:	83 c2 04             	add    $0x4,%edx
c010b01c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b020:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010b027:	00 
c010b028:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b02c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b02f:	89 04 24             	mov    %eax,(%esp)
c010b032:	e8 0d 04 00 00       	call   c010b444 <iobuf_init>
c010b037:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010b03a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b03d:	8b 40 14             	mov    0x14(%eax),%eax
c010b040:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b043:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b047:	74 17                	je     c010b060 <file_getdirentry+0x83>
c010b049:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b04c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b04f:	85 c0                	test   %eax,%eax
c010b051:	74 0d                	je     c010b060 <file_getdirentry+0x83>
c010b053:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b056:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b059:	8b 40 20             	mov    0x20(%eax),%eax
c010b05c:	85 c0                	test   %eax,%eax
c010b05e:	75 24                	jne    c010b084 <file_getdirentry+0xa7>
c010b060:	c7 44 24 0c f0 7f 11 	movl   $0xc0117ff0,0xc(%esp)
c010b067:	c0 
c010b068:	c7 44 24 08 06 7d 11 	movl   $0xc0117d06,0x8(%esp)
c010b06f:	c0 
c010b070:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010b077:	00 
c010b078:	c7 04 24 1b 7d 11 c0 	movl   $0xc0117d1b,(%esp)
c010b07f:	e8 5a 5e ff ff       	call   c0100ede <__panic>
c010b084:	c7 44 24 04 44 80 11 	movl   $0xc0118044,0x4(%esp)
c010b08b:	c0 
c010b08c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b08f:	89 04 24             	mov    %eax,(%esp)
c010b092:	e8 78 43 00 00       	call   c010f40f <inode_check>
c010b097:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b09a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b09d:	8b 40 20             	mov    0x20(%eax),%eax
c010b0a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b0a3:	8b 52 14             	mov    0x14(%edx),%edx
c010b0a6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b0a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b0ad:	89 14 24             	mov    %edx,(%esp)
c010b0b0:	ff d0                	call   *%eax
c010b0b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0b9:	75 20                	jne    c010b0db <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010b0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0be:	8b 00                	mov    (%eax),%eax
c010b0c0:	89 c2                	mov    %eax,%edx
c010b0c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0c5:	8b 48 08             	mov    0x8(%eax),%ecx
c010b0c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0cb:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0ce:	29 c1                	sub    %eax,%ecx
c010b0d0:	89 c8                	mov    %ecx,%eax
c010b0d2:	01 d0                	add    %edx,%eax
c010b0d4:	89 c2                	mov    %eax,%edx
c010b0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0d9:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010b0db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0de:	89 04 24             	mov    %eax,(%esp)
c010b0e1:	e8 d5 f4 ff ff       	call   c010a5bb <fd_array_release>
    return ret;
c010b0e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b0e9:	c9                   	leave  
c010b0ea:	c3                   	ret    

c010b0eb <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010b0eb:	55                   	push   %ebp
c010b0ec:	89 e5                	mov    %esp,%ebp
c010b0ee:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010b0f1:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b0f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b0f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0fb:	89 04 24             	mov    %eax,(%esp)
c010b0fe:	e8 bc f6 ff ff       	call   c010a7bf <fd2file>
c010b103:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b10a:	74 05                	je     c010b111 <file_dup+0x26>
        return ret;
c010b10c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b10f:	eb 38                	jmp    c010b149 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010b111:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b114:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b118:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b11b:	89 04 24             	mov    %eax,(%esp)
c010b11e:	e8 ea f2 ff ff       	call   c010a40d <fd_array_alloc>
c010b123:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b126:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b12a:	74 05                	je     c010b131 <file_dup+0x46>
        return ret;
c010b12c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b12f:	eb 18                	jmp    c010b149 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010b131:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b134:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b137:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b13b:	89 04 24             	mov    %eax,(%esp)
c010b13e:	e8 e5 f5 ff ff       	call   c010a728 <fd_array_dup>
    return file2->fd;
c010b143:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b146:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b149:	c9                   	leave  
c010b14a:	c3                   	ret    

c010b14b <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b14b:	55                   	push   %ebp
c010b14c:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b14e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b151:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b154:	5d                   	pop    %ebp
c010b155:	c3                   	ret    

c010b156 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b156:	55                   	push   %ebp
c010b157:	89 e5                	mov    %esp,%ebp
c010b159:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b15c:	e8 ca 43 00 00       	call   c010f52b <vfs_init>
    dev_init();
c010b161:	e8 07 5b 00 00       	call   c0110c6d <dev_init>
    sfs_init();
c010b166:	e8 c4 68 00 00       	call   c0111a2f <sfs_init>
}
c010b16b:	c9                   	leave  
c010b16c:	c3                   	ret    

c010b16d <fs_cleanup>:

void
fs_cleanup(void) {
c010b16d:	55                   	push   %ebp
c010b16e:	89 e5                	mov    %esp,%ebp
c010b170:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b173:	e8 6c 45 00 00       	call   c010f6e4 <vfs_cleanup>
}
c010b178:	c9                   	leave  
c010b179:	c3                   	ret    

c010b17a <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b17a:	55                   	push   %ebp
c010b17b:	89 e5                	mov    %esp,%ebp
c010b17d:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010b180:	8b 45 08             	mov    0x8(%ebp),%eax
c010b183:	83 c0 0c             	add    $0xc,%eax
c010b186:	89 04 24             	mov    %eax,(%esp)
c010b189:	e8 6f ec ff ff       	call   c0109dfd <down>
}
c010b18e:	c9                   	leave  
c010b18f:	c3                   	ret    

c010b190 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b190:	55                   	push   %ebp
c010b191:	89 e5                	mov    %esp,%ebp
c010b193:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010b196:	8b 45 08             	mov    0x8(%ebp),%eax
c010b199:	83 c0 0c             	add    $0xc,%eax
c010b19c:	89 04 24             	mov    %eax,(%esp)
c010b19f:	e8 3e ec ff ff       	call   c0109de2 <up>
}
c010b1a4:	c9                   	leave  
c010b1a5:	c3                   	ret    

c010b1a6 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b1a6:	55                   	push   %ebp
c010b1a7:	89 e5                	mov    %esp,%ebp
c010b1a9:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b1ac:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b1b3:	e8 f7 9b ff ff       	call   c0104daf <kmalloc>
c010b1b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b1bf:	74 43                	je     c010b204 <files_create+0x5e>
        filesp->pwd = NULL;
c010b1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b1ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1cd:	8d 50 18             	lea    0x18(%eax),%edx
c010b1d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1d3:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b1d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1d9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b1e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1e3:	83 c0 0c             	add    $0xc,%eax
c010b1e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b1ed:	00 
c010b1ee:	89 04 24             	mov    %eax,(%esp)
c010b1f1:	e8 79 ea ff ff       	call   c0109c6f <sem_init>
        fd_array_init(filesp->fd_array);
c010b1f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1f9:	8b 40 04             	mov    0x4(%eax),%eax
c010b1fc:	89 04 24             	mov    %eax,(%esp)
c010b1ff:	e8 c4 f1 ff ff       	call   c010a3c8 <fd_array_init>
    }
    return filesp;
c010b204:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b207:	c9                   	leave  
c010b208:	c3                   	ret    

c010b209 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b209:	55                   	push   %ebp
c010b20a:	89 e5                	mov    %esp,%ebp
c010b20c:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b20f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b213:	74 0f                	je     c010b224 <files_destroy+0x1b>
c010b215:	8b 45 08             	mov    0x8(%ebp),%eax
c010b218:	89 04 24             	mov    %eax,(%esp)
c010b21b:	e8 2b ff ff ff       	call   c010b14b <files_count>
c010b220:	85 c0                	test   %eax,%eax
c010b222:	74 24                	je     c010b248 <files_destroy+0x3f>
c010b224:	c7 44 24 0c 50 80 11 	movl   $0xc0118050,0xc(%esp)
c010b22b:	c0 
c010b22c:	c7 44 24 08 7b 80 11 	movl   $0xc011807b,0x8(%esp)
c010b233:	c0 
c010b234:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b23b:	00 
c010b23c:	c7 04 24 90 80 11 c0 	movl   $0xc0118090,(%esp)
c010b243:	e8 96 5c ff ff       	call   c0100ede <__panic>
    if (filesp->pwd != NULL) {
c010b248:	8b 45 08             	mov    0x8(%ebp),%eax
c010b24b:	8b 00                	mov    (%eax),%eax
c010b24d:	85 c0                	test   %eax,%eax
c010b24f:	74 0d                	je     c010b25e <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010b251:	8b 45 08             	mov    0x8(%ebp),%eax
c010b254:	8b 00                	mov    (%eax),%eax
c010b256:	89 04 24             	mov    %eax,(%esp)
c010b259:	e8 c3 3f 00 00       	call   c010f221 <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b25e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b261:	8b 40 04             	mov    0x4(%eax),%eax
c010b264:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b267:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b26e:	eb 4a                	jmp    c010b2ba <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010b270:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b273:	8b 00                	mov    (%eax),%eax
c010b275:	83 f8 02             	cmp    $0x2,%eax
c010b278:	75 0b                	jne    c010b285 <files_destroy+0x7c>
            fd_array_close(file);
c010b27a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b27d:	89 04 24             	mov    %eax,(%esp)
c010b280:	e8 17 f4 ff ff       	call   c010a69c <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b285:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b288:	8b 00                	mov    (%eax),%eax
c010b28a:	85 c0                	test   %eax,%eax
c010b28c:	74 24                	je     c010b2b2 <files_destroy+0xa9>
c010b28e:	c7 44 24 0c 9d 80 11 	movl   $0xc011809d,0xc(%esp)
c010b295:	c0 
c010b296:	c7 44 24 08 7b 80 11 	movl   $0xc011807b,0x8(%esp)
c010b29d:	c0 
c010b29e:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b2a5:	00 
c010b2a6:	c7 04 24 90 80 11 c0 	movl   $0xc0118090,(%esp)
c010b2ad:	e8 2c 5c ff ff       	call   c0100ede <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b2b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b2b6:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b2ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2bd:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b2c2:	76 ac                	jbe    c010b270 <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b2c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2c7:	89 04 24             	mov    %eax,(%esp)
c010b2ca:	e8 fb 9a ff ff       	call   c0104dca <kfree>
}
c010b2cf:	c9                   	leave  
c010b2d0:	c3                   	ret    

c010b2d1 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b2d1:	55                   	push   %ebp
c010b2d2:	89 e5                	mov    %esp,%ebp
c010b2d4:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b2d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b2db:	74 0f                	je     c010b2ec <files_closeall+0x1b>
c010b2dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2e0:	89 04 24             	mov    %eax,(%esp)
c010b2e3:	e8 63 fe ff ff       	call   c010b14b <files_count>
c010b2e8:	85 c0                	test   %eax,%eax
c010b2ea:	7f 24                	jg     c010b310 <files_closeall+0x3f>
c010b2ec:	c7 44 24 0c b8 80 11 	movl   $0xc01180b8,0xc(%esp)
c010b2f3:	c0 
c010b2f4:	c7 44 24 08 7b 80 11 	movl   $0xc011807b,0x8(%esp)
c010b2fb:	c0 
c010b2fc:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b303:	00 
c010b304:	c7 04 24 90 80 11 c0 	movl   $0xc0118090,(%esp)
c010b30b:	e8 ce 5b ff ff       	call   c0100ede <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b310:	8b 45 08             	mov    0x8(%ebp),%eax
c010b313:	8b 40 04             	mov    0x4(%eax),%eax
c010b316:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b319:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b320:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b324:	eb 1d                	jmp    c010b343 <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010b326:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b329:	8b 00                	mov    (%eax),%eax
c010b32b:	83 f8 02             	cmp    $0x2,%eax
c010b32e:	75 0b                	jne    c010b33b <files_closeall+0x6a>
            fd_array_close(file);
c010b330:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b333:	89 04 24             	mov    %eax,(%esp)
c010b336:	e8 61 f3 ff ff       	call   c010a69c <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b33b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b33f:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b343:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b346:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b34b:	76 d9                	jbe    c010b326 <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b34d:	c9                   	leave  
c010b34e:	c3                   	ret    

c010b34f <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010b34f:	55                   	push   %ebp
c010b350:	89 e5                	mov    %esp,%ebp
c010b352:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_files]\n");
    assert(to != NULL && from != NULL);
c010b355:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b359:	74 06                	je     c010b361 <dup_files+0x12>
c010b35b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b35f:	75 24                	jne    c010b385 <dup_files+0x36>
c010b361:	c7 44 24 0c e2 80 11 	movl   $0xc01180e2,0xc(%esp)
c010b368:	c0 
c010b369:	c7 44 24 08 7b 80 11 	movl   $0xc011807b,0x8(%esp)
c010b370:	c0 
c010b371:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b378:	00 
c010b379:	c7 04 24 90 80 11 c0 	movl   $0xc0118090,(%esp)
c010b380:	e8 59 5b ff ff       	call   c0100ede <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b385:	8b 45 08             	mov    0x8(%ebp),%eax
c010b388:	89 04 24             	mov    %eax,(%esp)
c010b38b:	e8 bb fd ff ff       	call   c010b14b <files_count>
c010b390:	85 c0                	test   %eax,%eax
c010b392:	75 0f                	jne    c010b3a3 <dup_files+0x54>
c010b394:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b397:	89 04 24             	mov    %eax,(%esp)
c010b39a:	e8 ac fd ff ff       	call   c010b14b <files_count>
c010b39f:	85 c0                	test   %eax,%eax
c010b3a1:	7f 24                	jg     c010b3c7 <dup_files+0x78>
c010b3a3:	c7 44 24 0c 00 81 11 	movl   $0xc0118100,0xc(%esp)
c010b3aa:	c0 
c010b3ab:	c7 44 24 08 7b 80 11 	movl   $0xc011807b,0x8(%esp)
c010b3b2:	c0 
c010b3b3:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b3ba:	00 
c010b3bb:	c7 04 24 90 80 11 c0 	movl   $0xc0118090,(%esp)
c010b3c2:	e8 17 5b ff ff       	call   c0100ede <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b3c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3ca:	8b 10                	mov    (%eax),%edx
c010b3cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3cf:	89 10                	mov    %edx,(%eax)
c010b3d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d4:	8b 00                	mov    (%eax),%eax
c010b3d6:	85 c0                	test   %eax,%eax
c010b3d8:	74 0d                	je     c010b3e7 <dup_files+0x98>
        vop_ref_inc(to->pwd);
c010b3da:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3dd:	8b 00                	mov    (%eax),%eax
c010b3df:	89 04 24             	mov    %eax,(%esp)
c010b3e2:	e8 20 3e 00 00       	call   c010f207 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b3e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3ea:	8b 40 04             	mov    0x4(%eax),%eax
c010b3ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b3f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3f3:	8b 40 04             	mov    0x4(%eax),%eax
c010b3f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b3f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b400:	eb 31                	jmp    c010b433 <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c010b402:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b405:	8b 00                	mov    (%eax),%eax
c010b407:	83 f8 02             	cmp    $0x2,%eax
c010b40a:	75 1b                	jne    c010b427 <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b40c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b40f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b415:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b418:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b41c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b41f:	89 04 24             	mov    %eax,(%esp)
c010b422:	e8 01 f3 ff ff       	call   c010a728 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b427:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b42b:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b42f:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b433:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b436:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b43b:	76 c5                	jbe    c010b402 <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b43d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b442:	c9                   	leave  
c010b443:	c3                   	ret    

c010b444 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b444:	55                   	push   %ebp
c010b445:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b447:	8b 45 08             	mov    0x8(%ebp),%eax
c010b44a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b44d:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b44f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b452:	8b 55 14             	mov    0x14(%ebp),%edx
c010b455:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b458:	8b 45 08             	mov    0x8(%ebp),%eax
c010b45b:	8b 55 10             	mov    0x10(%ebp),%edx
c010b45e:	89 50 0c             	mov    %edx,0xc(%eax)
c010b461:	8b 45 08             	mov    0x8(%ebp),%eax
c010b464:	8b 50 0c             	mov    0xc(%eax),%edx
c010b467:	8b 45 08             	mov    0x8(%ebp),%eax
c010b46a:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b46d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b470:	5d                   	pop    %ebp
c010b471:	c3                   	ret    

c010b472 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b472:	55                   	push   %ebp
c010b473:	89 e5                	mov    %esp,%ebp
c010b475:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b478:	8b 45 08             	mov    0x8(%ebp),%eax
c010b47b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b47e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b481:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b484:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b487:	76 06                	jbe    c010b48f <iobuf_move+0x1d>
        alen = len;
c010b489:	8b 45 10             	mov    0x10(%ebp),%eax
c010b48c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b48f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b493:	74 57                	je     c010b4ec <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b495:	8b 45 08             	mov    0x8(%ebp),%eax
c010b498:	8b 00                	mov    (%eax),%eax
c010b49a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b49d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b4a3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b4a7:	74 12                	je     c010b4bb <iobuf_move+0x49>
            void *tmp = src;
c010b4a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b4af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b4b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b4bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4be:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b4c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4cc:	89 04 24             	mov    %eax,(%esp)
c010b4cf:	e8 d2 a1 00 00       	call   c01156a6 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b4d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4db:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4de:	89 04 24             	mov    %eax,(%esp)
c010b4e1:	e8 a1 00 00 00       	call   c010b587 <iobuf_skip>
c010b4e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4e9:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b4ec:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b4f0:	74 08                	je     c010b4fa <iobuf_move+0x88>
        *copiedp = alen;
c010b4f2:	8b 45 18             	mov    0x18(%ebp),%eax
c010b4f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b4f8:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b4fa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b4fe:	75 07                	jne    c010b507 <iobuf_move+0x95>
c010b500:	b8 00 00 00 00       	mov    $0x0,%eax
c010b505:	eb 05                	jmp    c010b50c <iobuf_move+0x9a>
c010b507:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b50c:	c9                   	leave  
c010b50d:	c3                   	ret    

c010b50e <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b50e:	55                   	push   %ebp
c010b50f:	89 e5                	mov    %esp,%ebp
c010b511:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b514:	8b 45 08             	mov    0x8(%ebp),%eax
c010b517:	8b 40 0c             	mov    0xc(%eax),%eax
c010b51a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b51d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b520:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b523:	76 06                	jbe    c010b52b <iobuf_move_zeros+0x1d>
        alen = len;
c010b525:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b528:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b52b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b52f:	74 34                	je     c010b565 <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b531:	8b 45 08             	mov    0x8(%ebp),%eax
c010b534:	8b 00                	mov    (%eax),%eax
c010b536:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b539:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b53d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b544:	00 
c010b545:	89 04 24             	mov    %eax,(%esp)
c010b548:	e8 1a a1 00 00       	call   c0115667 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b54d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b550:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b554:	8b 45 08             	mov    0x8(%ebp),%eax
c010b557:	89 04 24             	mov    %eax,(%esp)
c010b55a:	e8 28 00 00 00       	call   c010b587 <iobuf_skip>
c010b55f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b562:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b565:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b569:	74 08                	je     c010b573 <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b56b:	8b 45 10             	mov    0x10(%ebp),%eax
c010b56e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b571:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b573:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b577:	75 07                	jne    c010b580 <iobuf_move_zeros+0x72>
c010b579:	b8 00 00 00 00       	mov    $0x0,%eax
c010b57e:	eb 05                	jmp    c010b585 <iobuf_move_zeros+0x77>
c010b580:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b585:	c9                   	leave  
c010b586:	c3                   	ret    

c010b587 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b587:	55                   	push   %ebp
c010b588:	89 e5                	mov    %esp,%ebp
c010b58a:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b58d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b590:	8b 40 0c             	mov    0xc(%eax),%eax
c010b593:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b596:	73 24                	jae    c010b5bc <iobuf_skip+0x35>
c010b598:	c7 44 24 0c 2e 81 11 	movl   $0xc011812e,0xc(%esp)
c010b59f:	c0 
c010b5a0:	c7 44 24 08 41 81 11 	movl   $0xc0118141,0x8(%esp)
c010b5a7:	c0 
c010b5a8:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b5af:	00 
c010b5b0:	c7 04 24 56 81 11 c0 	movl   $0xc0118156,(%esp)
c010b5b7:	e8 22 59 ff ff       	call   c0100ede <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b5bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5bf:	8b 10                	mov    (%eax),%edx
c010b5c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5c4:	01 c2                	add    %eax,%edx
c010b5c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5c9:	89 10                	mov    %edx,(%eax)
c010b5cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5ce:	8b 40 04             	mov    0x4(%eax),%eax
c010b5d1:	89 c2                	mov    %eax,%edx
c010b5d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5d6:	01 d0                	add    %edx,%eax
c010b5d8:	89 c2                	mov    %eax,%edx
c010b5da:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5dd:	89 50 04             	mov    %edx,0x4(%eax)
c010b5e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e3:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5e6:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b5e9:	89 c2                	mov    %eax,%edx
c010b5eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5ee:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b5f1:	c9                   	leave  
c010b5f2:	c3                   	ret    

c010b5f3 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b5f3:	55                   	push   %ebp
c010b5f4:	89 e5                	mov    %esp,%ebp
c010b5f6:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b5f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5fd:	74 25                	je     c010b624 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b5ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b602:	83 c0 1c             	add    $0x1c,%eax
c010b605:	89 04 24             	mov    %eax,(%esp)
c010b608:	e8 f0 e7 ff ff       	call   c0109dfd <down>
        if (current != NULL) {
c010b60d:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010b612:	85 c0                	test   %eax,%eax
c010b614:	74 0e                	je     c010b624 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b616:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010b61b:	8b 50 04             	mov    0x4(%eax),%edx
c010b61e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b621:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b624:	c9                   	leave  
c010b625:	c3                   	ret    

c010b626 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b626:	55                   	push   %ebp
c010b627:	89 e5                	mov    %esp,%ebp
c010b629:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b62c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b630:	74 18                	je     c010b64a <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b632:	8b 45 08             	mov    0x8(%ebp),%eax
c010b635:	83 c0 1c             	add    $0x1c,%eax
c010b638:	89 04 24             	mov    %eax,(%esp)
c010b63b:	e8 a2 e7 ff ff       	call   c0109de2 <up>
        mm->locked_by = 0;
c010b640:	8b 45 08             	mov    0x8(%ebp),%eax
c010b643:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b64a:	c9                   	leave  
c010b64b:	c3                   	ret    

c010b64c <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b64c:	55                   	push   %ebp
c010b64d:	89 e5                	mov    %esp,%ebp
c010b64f:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b652:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010b657:	8b 40 18             	mov    0x18(%eax),%eax
c010b65a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b65d:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b664:	e8 46 97 ff ff       	call   c0104daf <kmalloc>
c010b669:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b66c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b670:	75 07                	jne    c010b679 <copy_path+0x2d>
        return -E_NO_MEM;
c010b672:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b677:	eb 66                	jmp    c010b6df <copy_path+0x93>
    }
    lock_mm(mm);
c010b679:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b67c:	89 04 24             	mov    %eax,(%esp)
c010b67f:	e8 6f ff ff ff       	call   c010b5f3 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b684:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b68b:	00 
c010b68c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b68f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b693:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b696:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b69a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b69d:	89 04 24             	mov    %eax,(%esp)
c010b6a0:	e8 cd db ff ff       	call   c0109272 <copy_string>
c010b6a5:	85 c0                	test   %eax,%eax
c010b6a7:	75 1e                	jne    c010b6c7 <copy_path+0x7b>
        unlock_mm(mm);
c010b6a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6ac:	89 04 24             	mov    %eax,(%esp)
c010b6af:	e8 72 ff ff ff       	call   c010b626 <unlock_mm>
        goto failed_cleanup;
c010b6b4:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b6b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6b8:	89 04 24             	mov    %eax,(%esp)
c010b6bb:	e8 0a 97 ff ff       	call   c0104dca <kfree>
    return -E_INVAL;
c010b6c0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b6c5:	eb 18                	jmp    c010b6df <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b6c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6ca:	89 04 24             	mov    %eax,(%esp)
c010b6cd:	e8 54 ff ff ff       	call   c010b626 <unlock_mm>
    *to = buffer;
c010b6d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b6d8:	89 10                	mov    %edx,(%eax)
    return 0;
c010b6da:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b6df:	c9                   	leave  
c010b6e0:	c3                   	ret    

c010b6e1 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b6e1:	55                   	push   %ebp
c010b6e2:	89 e5                	mov    %esp,%ebp
c010b6e4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b6e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6ee:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b6f1:	89 04 24             	mov    %eax,(%esp)
c010b6f4:	e8 53 ff ff ff       	call   c010b64c <copy_path>
c010b6f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b6fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b700:	74 05                	je     c010b707 <sysfile_open+0x26>
        return ret;
c010b702:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b705:	eb 23                	jmp    c010b72a <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b707:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b70a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b70d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b711:	89 04 24             	mov    %eax,(%esp)
c010b714:	e8 61 f1 ff ff       	call   c010a87a <file_open>
c010b719:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b71c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b71f:	89 04 24             	mov    %eax,(%esp)
c010b722:	e8 a3 96 ff ff       	call   c0104dca <kfree>
    return ret;
c010b727:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b72a:	c9                   	leave  
c010b72b:	c3                   	ret    

c010b72c <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b72c:	55                   	push   %ebp
c010b72d:	89 e5                	mov    %esp,%ebp
c010b72f:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b732:	8b 45 08             	mov    0x8(%ebp),%eax
c010b735:	89 04 24             	mov    %eax,(%esp)
c010b738:	e8 da f2 ff ff       	call   c010aa17 <file_close>
}
c010b73d:	c9                   	leave  
c010b73e:	c3                   	ret    

c010b73f <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b73f:	55                   	push   %ebp
c010b740:	89 e5                	mov    %esp,%ebp
c010b742:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b745:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010b74a:	8b 40 18             	mov    0x18(%eax),%eax
c010b74d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b750:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b754:	75 0a                	jne    c010b760 <sysfile_read+0x21>
        return 0;
c010b756:	b8 00 00 00 00       	mov    $0x0,%eax
c010b75b:	e9 55 01 00 00       	jmp    c010b8b5 <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b760:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b767:	00 
c010b768:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b76f:	00 
c010b770:	8b 45 08             	mov    0x8(%ebp),%eax
c010b773:	89 04 24             	mov    %eax,(%esp)
c010b776:	e8 a2 f0 ff ff       	call   c010a81d <file_testfd>
c010b77b:	85 c0                	test   %eax,%eax
c010b77d:	75 0a                	jne    c010b789 <sysfile_read+0x4a>
        return -E_INVAL;
c010b77f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b784:	e9 2c 01 00 00       	jmp    c010b8b5 <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b789:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b790:	e8 1a 96 ff ff       	call   c0104daf <kmalloc>
c010b795:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b798:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b79c:	75 0a                	jne    c010b7a8 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b79e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b7a3:	e9 0d 01 00 00       	jmp    c010b8b5 <sysfile_read+0x176>
    }

    int ret = 0;
c010b7a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b7af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b7b6:	e9 d7 00 00 00       	jmp    c010b892 <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b7bb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b7c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7c5:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b7c8:	76 06                	jbe    c010b7d0 <sysfile_read+0x91>
            alen = len;
c010b7ca:	8b 45 10             	mov    0x10(%ebp),%eax
c010b7cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b7d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7d3:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b7d6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b7da:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7e8:	89 04 24             	mov    %eax,(%esp)
c010b7eb:	e8 5f f2 ff ff       	call   c010aa4f <file_read>
c010b7f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b7f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7f6:	85 c0                	test   %eax,%eax
c010b7f8:	0f 84 87 00 00 00    	je     c010b885 <sysfile_read+0x146>
            lock_mm(mm);
c010b7fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b801:	89 04 24             	mov    %eax,(%esp)
c010b804:	e8 ea fd ff ff       	call   c010b5f3 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b809:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b80c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b810:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b813:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b817:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b81a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b81e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b821:	89 04 24             	mov    %eax,(%esp)
c010b824:	e8 6c cf ff ff       	call   c0108795 <copy_to_user>
c010b829:	85 c0                	test   %eax,%eax
c010b82b:	74 40                	je     c010b86d <sysfile_read+0x12e>
                    assert(len >= alen);
c010b82d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b830:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b833:	73 24                	jae    c010b859 <sysfile_read+0x11a>
c010b835:	c7 44 24 0c 66 81 11 	movl   $0xc0118166,0xc(%esp)
c010b83c:	c0 
c010b83d:	c7 44 24 08 72 81 11 	movl   $0xc0118172,0x8(%esp)
c010b844:	c0 
c010b845:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b84c:	00 
c010b84d:	c7 04 24 87 81 11 c0 	movl   $0xc0118187,(%esp)
c010b854:	e8 85 56 ff ff       	call   c0100ede <__panic>
                    base += alen, len -= alen, copied += alen;
c010b859:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b85c:	01 45 0c             	add    %eax,0xc(%ebp)
c010b85f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b862:	29 45 10             	sub    %eax,0x10(%ebp)
c010b865:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b868:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b86b:	eb 0d                	jmp    c010b87a <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b86d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b871:	75 07                	jne    c010b87a <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b873:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b87a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b87d:	89 04 24             	mov    %eax,(%esp)
c010b880:	e8 a1 fd ff ff       	call   c010b626 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b885:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b889:	75 11                	jne    c010b89c <sysfile_read+0x15d>
c010b88b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b88e:	85 c0                	test   %eax,%eax
c010b890:	74 0a                	je     c010b89c <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b892:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b896:	0f 85 1f ff ff ff    	jne    c010b7bb <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b89c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b89f:	89 04 24             	mov    %eax,(%esp)
c010b8a2:	e8 23 95 ff ff       	call   c0104dca <kfree>
    if (copied != 0) {
c010b8a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8ab:	74 05                	je     c010b8b2 <sysfile_read+0x173>
        return copied;
c010b8ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8b0:	eb 03                	jmp    c010b8b5 <sysfile_read+0x176>
    }
    return ret;
c010b8b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b8b5:	c9                   	leave  
c010b8b6:	c3                   	ret    

c010b8b7 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b8b7:	55                   	push   %ebp
c010b8b8:	89 e5                	mov    %esp,%ebp
c010b8ba:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b8bd:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010b8c2:	8b 40 18             	mov    0x18(%eax),%eax
c010b8c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b8c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b8cc:	75 0a                	jne    c010b8d8 <sysfile_write+0x21>
        return 0;
c010b8ce:	b8 00 00 00 00       	mov    $0x0,%eax
c010b8d3:	e9 57 01 00 00       	jmp    c010ba2f <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b8d8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b8df:	00 
c010b8e0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b8e7:	00 
c010b8e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8eb:	89 04 24             	mov    %eax,(%esp)
c010b8ee:	e8 2a ef ff ff       	call   c010a81d <file_testfd>
c010b8f3:	85 c0                	test   %eax,%eax
c010b8f5:	75 0a                	jne    c010b901 <sysfile_write+0x4a>
        return -E_INVAL;
c010b8f7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b8fc:	e9 2e 01 00 00       	jmp    c010ba2f <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b901:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b908:	e8 a2 94 ff ff       	call   c0104daf <kmalloc>
c010b90d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b910:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b914:	75 0a                	jne    c010b920 <sysfile_write+0x69>
        return -E_NO_MEM;
c010b916:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b91b:	e9 0f 01 00 00       	jmp    c010ba2f <sysfile_write+0x178>
    }

    int ret = 0;
c010b920:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b927:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b92e:	e9 d9 00 00 00       	jmp    c010ba0c <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b933:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b93a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b93d:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b940:	76 06                	jbe    c010b948 <sysfile_write+0x91>
            alen = len;
c010b942:	8b 45 10             	mov    0x10(%ebp),%eax
c010b945:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b948:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b94b:	89 04 24             	mov    %eax,(%esp)
c010b94e:	e8 a0 fc ff ff       	call   c010b5f3 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b953:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b956:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b95d:	00 
c010b95e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b962:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b965:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b969:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b96c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b970:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b973:	89 04 24             	mov    %eax,(%esp)
c010b976:	e8 c9 cd ff ff       	call   c0108744 <copy_from_user>
c010b97b:	85 c0                	test   %eax,%eax
c010b97d:	75 07                	jne    c010b986 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b97f:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b986:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b989:	89 04 24             	mov    %eax,(%esp)
c010b98c:	e8 95 fc ff ff       	call   c010b626 <unlock_mm>
        if (ret == 0) {
c010b991:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b995:	75 68                	jne    c010b9ff <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b997:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b99a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b99d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b9a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b9a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b9a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9af:	89 04 24             	mov    %eax,(%esp)
c010b9b2:	e8 d2 f1 ff ff       	call   c010ab89 <file_write>
c010b9b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b9ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9bd:	85 c0                	test   %eax,%eax
c010b9bf:	74 3e                	je     c010b9ff <sysfile_write+0x148>
                assert(len >= alen);
c010b9c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9c4:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b9c7:	73 24                	jae    c010b9ed <sysfile_write+0x136>
c010b9c9:	c7 44 24 0c 66 81 11 	movl   $0xc0118166,0xc(%esp)
c010b9d0:	c0 
c010b9d1:	c7 44 24 08 72 81 11 	movl   $0xc0118172,0x8(%esp)
c010b9d8:	c0 
c010b9d9:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010b9e0:	00 
c010b9e1:	c7 04 24 87 81 11 c0 	movl   $0xc0118187,(%esp)
c010b9e8:	e8 f1 54 ff ff       	call   c0100ede <__panic>
                base += alen, len -= alen, copied += alen;
c010b9ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9f0:	01 45 0c             	add    %eax,0xc(%ebp)
c010b9f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9f6:	29 45 10             	sub    %eax,0x10(%ebp)
c010b9f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9fc:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b9ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba03:	75 11                	jne    c010ba16 <sysfile_write+0x15f>
c010ba05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba08:	85 c0                	test   %eax,%eax
c010ba0a:	74 0a                	je     c010ba16 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010ba0c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ba10:	0f 85 1d ff ff ff    	jne    c010b933 <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010ba16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba19:	89 04 24             	mov    %eax,(%esp)
c010ba1c:	e8 a9 93 ff ff       	call   c0104dca <kfree>
    if (copied != 0) {
c010ba21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ba25:	74 05                	je     c010ba2c <sysfile_write+0x175>
        return copied;
c010ba27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba2a:	eb 03                	jmp    c010ba2f <sysfile_write+0x178>
    }
    return ret;
c010ba2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba2f:	c9                   	leave  
c010ba30:	c3                   	ret    

c010ba31 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010ba31:	55                   	push   %ebp
c010ba32:	89 e5                	mov    %esp,%ebp
c010ba34:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010ba37:	8b 45 10             	mov    0x10(%ebp),%eax
c010ba3a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba41:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba45:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba48:	89 04 24             	mov    %eax,(%esp)
c010ba4b:	e8 73 f2 ff ff       	call   c010acc3 <file_seek>
}
c010ba50:	c9                   	leave  
c010ba51:	c3                   	ret    

c010ba52 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010ba52:	55                   	push   %ebp
c010ba53:	89 e5                	mov    %esp,%ebp
c010ba55:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010ba58:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ba5d:	8b 40 18             	mov    0x18(%eax),%eax
c010ba60:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010ba63:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010ba66:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010ba69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba70:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba73:	89 04 24             	mov    %eax,(%esp)
c010ba76:	e8 eb f3 ff ff       	call   c010ae66 <file_fstat>
c010ba7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba82:	74 05                	je     c010ba89 <sysfile_fstat+0x37>
        return ret;
c010ba84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba87:	eb 45                	jmp    c010bace <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010ba89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba8c:	89 04 24             	mov    %eax,(%esp)
c010ba8f:	e8 5f fb ff ff       	call   c010b5f3 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010ba94:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010ba9b:	00 
c010ba9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010baa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010baa6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baad:	89 04 24             	mov    %eax,(%esp)
c010bab0:	e8 e0 cc ff ff       	call   c0108795 <copy_to_user>
c010bab5:	85 c0                	test   %eax,%eax
c010bab7:	75 07                	jne    c010bac0 <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010bab9:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bac3:	89 04 24             	mov    %eax,(%esp)
c010bac6:	e8 5b fb ff ff       	call   c010b626 <unlock_mm>
    return ret;
c010bacb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bace:	c9                   	leave  
c010bacf:	c3                   	ret    

c010bad0 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010bad0:	55                   	push   %ebp
c010bad1:	89 e5                	mov    %esp,%ebp
c010bad3:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010bad6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bad9:	89 04 24             	mov    %eax,(%esp)
c010badc:	e8 44 f4 ff ff       	call   c010af25 <file_fsync>
}
c010bae1:	c9                   	leave  
c010bae2:	c3                   	ret    

c010bae3 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010bae3:	55                   	push   %ebp
c010bae4:	89 e5                	mov    %esp,%ebp
c010bae6:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bae9:	8b 45 08             	mov    0x8(%ebp),%eax
c010baec:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baf0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010baf3:	89 04 24             	mov    %eax,(%esp)
c010baf6:	e8 51 fb ff ff       	call   c010b64c <copy_path>
c010bafb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bafe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb02:	74 05                	je     c010bb09 <sysfile_chdir+0x26>
        return ret;
c010bb04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb07:	eb 1c                	jmp    c010bb25 <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010bb09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb0c:	89 04 24             	mov    %eax,(%esp)
c010bb0f:	e8 7a 4b 00 00       	call   c011068e <vfs_chdir>
c010bb14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bb17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb1a:	89 04 24             	mov    %eax,(%esp)
c010bb1d:	e8 a8 92 ff ff       	call   c0104dca <kfree>
    return ret;
c010bb22:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb25:	c9                   	leave  
c010bb26:	c3                   	ret    

c010bb27 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010bb27:	55                   	push   %ebp
c010bb28:	89 e5                	mov    %esp,%ebp
c010bb2a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bb2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb30:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb34:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bb37:	89 04 24             	mov    %eax,(%esp)
c010bb3a:	e8 0d fb ff ff       	call   c010b64c <copy_path>
c010bb3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb46:	74 05                	je     c010bb4d <sysfile_link+0x26>
        return ret;
c010bb48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb4b:	eb 59                	jmp    c010bba6 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bb4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb50:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb54:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bb57:	89 04 24             	mov    %eax,(%esp)
c010bb5a:	e8 ed fa ff ff       	call   c010b64c <copy_path>
c010bb5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb66:	74 10                	je     c010bb78 <sysfile_link+0x51>
        kfree(old_path);
c010bb68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb6b:	89 04 24             	mov    %eax,(%esp)
c010bb6e:	e8 57 92 ff ff       	call   c0104dca <kfree>
        return ret;
c010bb73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb76:	eb 2e                	jmp    c010bba6 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010bb78:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb7e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb82:	89 04 24             	mov    %eax,(%esp)
c010bb85:	e8 85 46 00 00       	call   c011020f <vfs_link>
c010bb8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bb8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb90:	89 04 24             	mov    %eax,(%esp)
c010bb93:	e8 32 92 ff ff       	call   c0104dca <kfree>
c010bb98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb9b:	89 04 24             	mov    %eax,(%esp)
c010bb9e:	e8 27 92 ff ff       	call   c0104dca <kfree>
    return ret;
c010bba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bba6:	c9                   	leave  
c010bba7:	c3                   	ret    

c010bba8 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010bba8:	55                   	push   %ebp
c010bba9:	89 e5                	mov    %esp,%ebp
c010bbab:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bbae:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbb5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bbb8:	89 04 24             	mov    %eax,(%esp)
c010bbbb:	e8 8c fa ff ff       	call   c010b64c <copy_path>
c010bbc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbc7:	74 05                	je     c010bbce <sysfile_rename+0x26>
        return ret;
c010bbc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbcc:	eb 59                	jmp    c010bc27 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bbce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbd1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbd5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bbd8:	89 04 24             	mov    %eax,(%esp)
c010bbdb:	e8 6c fa ff ff       	call   c010b64c <copy_path>
c010bbe0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbe3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbe7:	74 10                	je     c010bbf9 <sysfile_rename+0x51>
        kfree(old_path);
c010bbe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbec:	89 04 24             	mov    %eax,(%esp)
c010bbef:	e8 d6 91 ff ff       	call   c0104dca <kfree>
        return ret;
c010bbf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbf7:	eb 2e                	jmp    c010bc27 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010bbf9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bbfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbff:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bc03:	89 04 24             	mov    %eax,(%esp)
c010bc06:	e8 fa 45 00 00       	call   c0110205 <vfs_rename>
c010bc0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bc0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc11:	89 04 24             	mov    %eax,(%esp)
c010bc14:	e8 b1 91 ff ff       	call   c0104dca <kfree>
c010bc19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc1c:	89 04 24             	mov    %eax,(%esp)
c010bc1f:	e8 a6 91 ff ff       	call   c0104dca <kfree>
    return ret;
c010bc24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc27:	c9                   	leave  
c010bc28:	c3                   	ret    

c010bc29 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010bc29:	55                   	push   %ebp
c010bc2a:	89 e5                	mov    %esp,%ebp
c010bc2c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bc2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc32:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc36:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bc39:	89 04 24             	mov    %eax,(%esp)
c010bc3c:	e8 0b fa ff ff       	call   c010b64c <copy_path>
c010bc41:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc48:	74 05                	je     c010bc4f <sysfile_unlink+0x26>
        return ret;
c010bc4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc4d:	eb 1c                	jmp    c010bc6b <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010bc4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc52:	89 04 24             	mov    %eax,(%esp)
c010bc55:	e8 a1 45 00 00       	call   c01101fb <vfs_unlink>
c010bc5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bc5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc60:	89 04 24             	mov    %eax,(%esp)
c010bc63:	e8 62 91 ff ff       	call   c0104dca <kfree>
    return ret;
c010bc68:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc6b:	c9                   	leave  
c010bc6c:	c3                   	ret    

c010bc6d <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010bc6d:	55                   	push   %ebp
c010bc6e:	89 e5                	mov    %esp,%ebp
c010bc70:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bc73:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010bc78:	8b 40 18             	mov    0x18(%eax),%eax
c010bc7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010bc7e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bc82:	75 07                	jne    c010bc8b <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010bc84:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bc89:	eb 77                	jmp    c010bd02 <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010bc8b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010bc92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc95:	89 04 24             	mov    %eax,(%esp)
c010bc98:	e8 56 f9 ff ff       	call   c010b5f3 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bc9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bca0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bca7:	00 
c010bca8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bcab:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bcaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcb6:	89 04 24             	mov    %eax,(%esp)
c010bcb9:	e8 91 d4 ff ff       	call   c010914f <user_mem_check>
c010bcbe:	85 c0                	test   %eax,%eax
c010bcc0:	74 32                	je     c010bcf4 <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010bcc2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bcc9:	00 
c010bcca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bccd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bcd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcd8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bcdb:	89 04 24             	mov    %eax,(%esp)
c010bcde:	e8 61 f7 ff ff       	call   c010b444 <iobuf_init>
c010bce3:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bce6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bce9:	89 04 24             	mov    %eax,(%esp)
c010bcec:	e8 dc 49 00 00       	call   c01106cd <vfs_getcwd>
c010bcf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bcf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcf7:	89 04 24             	mov    %eax,(%esp)
c010bcfa:	e8 27 f9 ff ff       	call   c010b626 <unlock_mm>
    return ret;
c010bcff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bd02:	c9                   	leave  
c010bd03:	c3                   	ret    

c010bd04 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bd04:	55                   	push   %ebp
c010bd05:	89 e5                	mov    %esp,%ebp
c010bd07:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bd0a:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010bd0f:	8b 40 18             	mov    0x18(%eax),%eax
c010bd12:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bd15:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bd1c:	e8 8e 90 ff ff       	call   c0104daf <kmalloc>
c010bd21:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bd24:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bd28:	75 0a                	jne    c010bd34 <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bd2a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bd2f:	e9 c2 00 00 00       	jmp    c010bdf6 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bd34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bd3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd3e:	89 04 24             	mov    %eax,(%esp)
c010bd41:	e8 ad f8 ff ff       	call   c010b5f3 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bd46:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bd49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd4c:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bd53:	00 
c010bd54:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bd5b:	00 
c010bd5c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bd60:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd67:	89 04 24             	mov    %eax,(%esp)
c010bd6a:	e8 d5 c9 ff ff       	call   c0108744 <copy_from_user>
c010bd6f:	85 c0                	test   %eax,%eax
c010bd71:	75 07                	jne    c010bd7a <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bd73:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bd7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd7d:	89 04 24             	mov    %eax,(%esp)
c010bd80:	e8 a1 f8 ff ff       	call   c010b626 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bd85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd89:	75 5d                	jne    c010bde8 <sysfile_getdirentry+0xe4>
c010bd8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd92:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd95:	89 04 24             	mov    %eax,(%esp)
c010bd98:	e8 40 f2 ff ff       	call   c010afdd <file_getdirentry>
c010bd9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bda0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bda4:	75 42                	jne    c010bde8 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bda6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bda9:	89 04 24             	mov    %eax,(%esp)
c010bdac:	e8 42 f8 ff ff       	call   c010b5f3 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bdb1:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bdb8:	00 
c010bdb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bdbc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bdc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdc3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bdc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bdca:	89 04 24             	mov    %eax,(%esp)
c010bdcd:	e8 c3 c9 ff ff       	call   c0108795 <copy_to_user>
c010bdd2:	85 c0                	test   %eax,%eax
c010bdd4:	75 07                	jne    c010bddd <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bdd6:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bde0:	89 04 24             	mov    %eax,(%esp)
c010bde3:	e8 3e f8 ff ff       	call   c010b626 <unlock_mm>

out:
    kfree(direntp);
c010bde8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bdeb:	89 04 24             	mov    %eax,(%esp)
c010bdee:	e8 d7 8f ff ff       	call   c0104dca <kfree>
    return ret;
c010bdf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bdf6:	c9                   	leave  
c010bdf7:	c3                   	ret    

c010bdf8 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bdf8:	55                   	push   %ebp
c010bdf9:	89 e5                	mov    %esp,%ebp
c010bdfb:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bdfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be01:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be05:	8b 45 08             	mov    0x8(%ebp),%eax
c010be08:	89 04 24             	mov    %eax,(%esp)
c010be0b:	e8 db f2 ff ff       	call   c010b0eb <file_dup>
}
c010be10:	c9                   	leave  
c010be11:	c3                   	ret    

c010be12 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010be12:	55                   	push   %ebp
c010be13:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010be15:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010be1a:	5d                   	pop    %ebp
c010be1b:	c3                   	ret    

c010be1c <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010be1c:	55                   	push   %ebp
c010be1d:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010be1f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010be24:	5d                   	pop    %ebp
c010be25:	c3                   	ret    

c010be26 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010be26:	52                   	push   %edx
    call *%ebx              # call fn
c010be27:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010be29:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010be2a:	e8 2d 0e 00 00       	call   c010cc5c <do_exit>

c010be2f <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010be2f:	55                   	push   %ebp
c010be30:	89 e5                	mov    %esp,%ebp
c010be32:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010be35:	8b 55 10             	mov    0x10(%ebp),%edx
c010be38:	8b 45 08             	mov    0x8(%ebp),%eax
c010be3b:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010be3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010be40:	8b 55 0c             	mov    0xc(%ebp),%edx
c010be43:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010be46:	8b 45 08             	mov    0x8(%ebp),%eax
c010be49:	83 c0 08             	add    $0x8,%eax
c010be4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010be4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010be52:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010be55:	89 50 04             	mov    %edx,0x4(%eax)
c010be58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010be5b:	8b 50 04             	mov    0x4(%eax),%edx
c010be5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010be61:	89 10                	mov    %edx,(%eax)
    return timer;
c010be63:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010be66:	c9                   	leave  
c010be67:	c3                   	ret    

c010be68 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010be68:	55                   	push   %ebp
c010be69:	89 e5                	mov    %esp,%ebp
c010be6b:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010be6e:	9c                   	pushf  
c010be6f:	58                   	pop    %eax
c010be70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010be73:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010be76:	25 00 02 00 00       	and    $0x200,%eax
c010be7b:	85 c0                	test   %eax,%eax
c010be7d:	74 0c                	je     c010be8b <__intr_save+0x23>
        intr_disable();
c010be7f:	e8 cd 62 ff ff       	call   c0102151 <intr_disable>
        return 1;
c010be84:	b8 01 00 00 00       	mov    $0x1,%eax
c010be89:	eb 05                	jmp    c010be90 <__intr_save+0x28>
    }
    return 0;
c010be8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be90:	c9                   	leave  
c010be91:	c3                   	ret    

c010be92 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010be92:	55                   	push   %ebp
c010be93:	89 e5                	mov    %esp,%ebp
c010be95:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010be98:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be9c:	74 05                	je     c010bea3 <__intr_restore+0x11>
        intr_enable();
c010be9e:	e8 a8 62 ff ff       	call   c010214b <intr_enable>
    }
}
c010bea3:	c9                   	leave  
c010bea4:	c3                   	ret    

c010bea5 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010bea5:	55                   	push   %ebp
c010bea6:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bea8:	8b 55 08             	mov    0x8(%ebp),%edx
c010beab:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c010beb0:	29 c2                	sub    %eax,%edx
c010beb2:	89 d0                	mov    %edx,%eax
c010beb4:	c1 f8 05             	sar    $0x5,%eax
}
c010beb7:	5d                   	pop    %ebp
c010beb8:	c3                   	ret    

c010beb9 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010beb9:	55                   	push   %ebp
c010beba:	89 e5                	mov    %esp,%ebp
c010bebc:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bebf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec2:	89 04 24             	mov    %eax,(%esp)
c010bec5:	e8 db ff ff ff       	call   c010bea5 <page2ppn>
c010beca:	c1 e0 0c             	shl    $0xc,%eax
}
c010becd:	c9                   	leave  
c010bece:	c3                   	ret    

c010becf <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010becf:	55                   	push   %ebp
c010bed0:	89 e5                	mov    %esp,%ebp
c010bed2:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bed5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bed8:	c1 e8 0c             	shr    $0xc,%eax
c010bedb:	89 c2                	mov    %eax,%edx
c010bedd:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010bee2:	39 c2                	cmp    %eax,%edx
c010bee4:	72 1c                	jb     c010bf02 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bee6:	c7 44 24 08 9c 81 11 	movl   $0xc011819c,0x8(%esp)
c010beed:	c0 
c010beee:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bef5:	00 
c010bef6:	c7 04 24 bb 81 11 c0 	movl   $0xc01181bb,(%esp)
c010befd:	e8 dc 4f ff ff       	call   c0100ede <__panic>
    }
    return &pages[PPN(pa)];
c010bf02:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c010bf07:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf0a:	c1 ea 0c             	shr    $0xc,%edx
c010bf0d:	c1 e2 05             	shl    $0x5,%edx
c010bf10:	01 d0                	add    %edx,%eax
}
c010bf12:	c9                   	leave  
c010bf13:	c3                   	ret    

c010bf14 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bf14:	55                   	push   %ebp
c010bf15:	89 e5                	mov    %esp,%ebp
c010bf17:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bf1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf1d:	89 04 24             	mov    %eax,(%esp)
c010bf20:	e8 94 ff ff ff       	call   c010beb9 <page2pa>
c010bf25:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf2b:	c1 e8 0c             	shr    $0xc,%eax
c010bf2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf31:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010bf36:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bf39:	72 23                	jb     c010bf5e <page2kva+0x4a>
c010bf3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf3e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf42:	c7 44 24 08 cc 81 11 	movl   $0xc01181cc,0x8(%esp)
c010bf49:	c0 
c010bf4a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bf51:	00 
c010bf52:	c7 04 24 bb 81 11 c0 	movl   $0xc01181bb,(%esp)
c010bf59:	e8 80 4f ff ff       	call   c0100ede <__panic>
c010bf5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf61:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bf66:	c9                   	leave  
c010bf67:	c3                   	ret    

c010bf68 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bf68:	55                   	push   %ebp
c010bf69:	89 e5                	mov    %esp,%ebp
c010bf6b:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bf6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf74:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bf7b:	77 23                	ja     c010bfa0 <kva2page+0x38>
c010bf7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf80:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf84:	c7 44 24 08 f0 81 11 	movl   $0xc01181f0,0x8(%esp)
c010bf8b:	c0 
c010bf8c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bf93:	00 
c010bf94:	c7 04 24 bb 81 11 c0 	movl   $0xc01181bb,(%esp)
c010bf9b:	e8 3e 4f ff ff       	call   c0100ede <__panic>
c010bfa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfa3:	05 00 00 00 40       	add    $0x40000000,%eax
c010bfa8:	89 04 24             	mov    %eax,(%esp)
c010bfab:	e8 1f ff ff ff       	call   c010becf <pa2page>
}
c010bfb0:	c9                   	leave  
c010bfb1:	c3                   	ret    

c010bfb2 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010bfb2:	55                   	push   %ebp
c010bfb3:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010bfb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb8:	8b 40 18             	mov    0x18(%eax),%eax
c010bfbb:	8d 50 01             	lea    0x1(%eax),%edx
c010bfbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfc1:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bfc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfc7:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bfca:	5d                   	pop    %ebp
c010bfcb:	c3                   	ret    

c010bfcc <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010bfcc:	55                   	push   %ebp
c010bfcd:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010bfcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd2:	8b 40 18             	mov    0x18(%eax),%eax
c010bfd5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bfd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfdb:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bfde:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfe1:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bfe4:	5d                   	pop    %ebp
c010bfe5:	c3                   	ret    

c010bfe6 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010bfe6:	55                   	push   %ebp
c010bfe7:	89 e5                	mov    %esp,%ebp
c010bfe9:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bfec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bff0:	74 25                	je     c010c017 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010bff2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bff5:	83 c0 1c             	add    $0x1c,%eax
c010bff8:	89 04 24             	mov    %eax,(%esp)
c010bffb:	e8 fd dd ff ff       	call   c0109dfd <down>
        if (current != NULL) {
c010c000:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010c005:	85 c0                	test   %eax,%eax
c010c007:	74 0e                	je     c010c017 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010c009:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010c00e:	8b 50 04             	mov    0x4(%eax),%edx
c010c011:	8b 45 08             	mov    0x8(%ebp),%eax
c010c014:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010c017:	c9                   	leave  
c010c018:	c3                   	ret    

c010c019 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010c019:	55                   	push   %ebp
c010c01a:	89 e5                	mov    %esp,%ebp
c010c01c:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010c01f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c023:	74 18                	je     c010c03d <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010c025:	8b 45 08             	mov    0x8(%ebp),%eax
c010c028:	83 c0 1c             	add    $0x1c,%eax
c010c02b:	89 04 24             	mov    %eax,(%esp)
c010c02e:	e8 af dd ff ff       	call   c0109de2 <up>
        mm->locked_by = 0;
c010c033:	8b 45 08             	mov    0x8(%ebp),%eax
c010c036:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010c03d:	c9                   	leave  
c010c03e:	c3                   	ret    

c010c03f <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010c03f:	55                   	push   %ebp
c010c040:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010c042:	8b 45 08             	mov    0x8(%ebp),%eax
c010c045:	8b 40 08             	mov    0x8(%eax),%eax
c010c048:	8d 50 01             	lea    0x1(%eax),%edx
c010c04b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c04e:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c051:	8b 45 08             	mov    0x8(%ebp),%eax
c010c054:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c057:	5d                   	pop    %ebp
c010c058:	c3                   	ret    

c010c059 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010c059:	55                   	push   %ebp
c010c05a:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010c05c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05f:	8b 40 08             	mov    0x8(%eax),%eax
c010c062:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c065:	8b 45 08             	mov    0x8(%ebp),%eax
c010c068:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c06b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c06e:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c071:	5d                   	pop    %ebp
c010c072:	c3                   	ret    

c010c073 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010c073:	55                   	push   %ebp
c010c074:	89 e5                	mov    %esp,%ebp
c010c076:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010c079:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010c080:	e8 2a 8d ff ff       	call   c0104daf <kmalloc>
c010c085:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010c088:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c08c:	0f 84 70 01 00 00    	je     c010c202 <alloc_proc+0x18f>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010c092:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c095:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010c09b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c09e:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010c0a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0a8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010c0af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0b2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010c0b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0bc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010c0c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0c6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010c0cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0d0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010c0d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0da:	83 c0 1c             	add    $0x1c,%eax
c010c0dd:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010c0e4:	00 
c010c0e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0ec:	00 
c010c0ed:	89 04 24             	mov    %eax,(%esp)
c010c0f0:	e8 72 95 00 00       	call   c0115667 <memset>
        proc->tf = NULL;
c010c0f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0f8:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010c0ff:	8b 15 44 61 15 c0    	mov    0xc0156144,%edx
c010c105:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c108:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010c10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c10e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010c115:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c118:	83 c0 48             	add    $0x48,%eax
c010c11b:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c122:	00 
c010c123:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c12a:	00 
c010c12b:	89 04 24             	mov    %eax,(%esp)
c010c12e:	e8 34 95 00 00       	call   c0115667 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
	proc->wait_state = 0;
c010c133:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c136:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c13d:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010c140:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c143:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c14a:	00 00 00 
c010c14d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c150:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010c156:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c159:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c15f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c162:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010c168:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c16b:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->rq = NULL;
c010c171:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c174:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010c17b:	00 00 00 
        list_init(&(proc->run_link));
c010c17e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c181:	05 a4 00 00 00       	add    $0xa4,%eax
c010c186:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c189:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c18c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c18f:	89 50 04             	mov    %edx,0x4(%eax)
c010c192:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c195:	8b 50 04             	mov    0x4(%eax),%edx
c010c198:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c19b:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010c19d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1a0:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010c1a7:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010c1aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1ad:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010c1b4:	00 00 00 
c010c1b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1ba:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010c1c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1c3:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010c1c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1cc:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010c1d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1d5:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010c1db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1de:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010c1e5:	00 00 00 
        proc->lab6_priority = 0;
c010c1e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1eb:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c1f2:	00 00 00 
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
		proc->filesp = NULL;
c010c1f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1f8:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c1ff:	00 00 00 
    }
    return proc;
c010c202:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c205:	c9                   	leave  
c010c206:	c3                   	ret    

c010c207 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c207:	55                   	push   %ebp
c010c208:	89 e5                	mov    %esp,%ebp
c010c20a:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c20d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c210:	83 c0 48             	add    $0x48,%eax
c010c213:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c21a:	00 
c010c21b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c222:	00 
c010c223:	89 04 24             	mov    %eax,(%esp)
c010c226:	e8 3c 94 00 00       	call   c0115667 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c22b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c22e:	8d 50 48             	lea    0x48(%eax),%edx
c010c231:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c238:	00 
c010c239:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c23c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c240:	89 14 24             	mov    %edx,(%esp)
c010c243:	e8 01 95 00 00       	call   c0115749 <memcpy>
}
c010c248:	c9                   	leave  
c010c249:	c3                   	ret    

c010c24a <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c24a:	55                   	push   %ebp
c010c24b:	89 e5                	mov    %esp,%ebp
c010c24d:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c250:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c257:	00 
c010c258:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c25f:	00 
c010c260:	c7 04 24 80 50 15 c0 	movl   $0xc0155080,(%esp)
c010c267:	e8 fb 93 00 00       	call   c0115667 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c26c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c26f:	83 c0 48             	add    $0x48,%eax
c010c272:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c279:	00 
c010c27a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c27e:	c7 04 24 80 50 15 c0 	movl   $0xc0155080,(%esp)
c010c285:	e8 bf 94 00 00       	call   c0115749 <memcpy>
}
c010c28a:	c9                   	leave  
c010c28b:	c3                   	ret    

c010c28c <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c28c:	55                   	push   %ebp
c010c28d:	89 e5                	mov    %esp,%ebp
c010c28f:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c292:	8b 45 08             	mov    0x8(%ebp),%eax
c010c295:	83 c0 7c             	add    $0x7c,%eax
c010c298:	c7 45 fc 1c 63 15 c0 	movl   $0xc015631c,-0x4(%ebp)
c010c29f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c2a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c2a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c2ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c2ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2b1:	8b 40 04             	mov    0x4(%eax),%eax
c010c2b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c2b7:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c2ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2bd:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c2c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c2c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c2c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c2c9:	89 10                	mov    %edx,(%eax)
c010c2cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c2ce:	8b 10                	mov    (%eax),%edx
c010c2d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2d3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c2d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2d9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c2dc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c2df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2e2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c2e5:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c2e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ea:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c2f1:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f7:	8b 40 14             	mov    0x14(%eax),%eax
c010c2fa:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c300:	8b 45 08             	mov    0x8(%ebp),%eax
c010c303:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c309:	8b 45 08             	mov    0x8(%ebp),%eax
c010c30c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c312:	85 c0                	test   %eax,%eax
c010c314:	74 12                	je     c010c328 <set_links+0x9c>
        proc->optr->yptr = proc;
c010c316:	8b 45 08             	mov    0x8(%ebp),%eax
c010c319:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c31f:	8b 55 08             	mov    0x8(%ebp),%edx
c010c322:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c328:	8b 45 08             	mov    0x8(%ebp),%eax
c010c32b:	8b 40 14             	mov    0x14(%eax),%eax
c010c32e:	8b 55 08             	mov    0x8(%ebp),%edx
c010c331:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c337:	a1 60 50 15 c0       	mov    0xc0155060,%eax
c010c33c:	83 c0 01             	add    $0x1,%eax
c010c33f:	a3 60 50 15 c0       	mov    %eax,0xc0155060
}
c010c344:	c9                   	leave  
c010c345:	c3                   	ret    

c010c346 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c346:	55                   	push   %ebp
c010c347:	89 e5                	mov    %esp,%ebp
c010c349:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c34c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c34f:	83 c0 7c             	add    $0x7c,%eax
c010c352:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c355:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c358:	8b 40 04             	mov    0x4(%eax),%eax
c010c35b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c35e:	8b 12                	mov    (%edx),%edx
c010c360:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c363:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c366:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c369:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c36c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c36f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c372:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c375:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c377:	8b 45 08             	mov    0x8(%ebp),%eax
c010c37a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c380:	85 c0                	test   %eax,%eax
c010c382:	74 18                	je     c010c39c <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c384:	8b 45 08             	mov    0x8(%ebp),%eax
c010c387:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c38d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c390:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c396:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c39c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c39f:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c3a5:	85 c0                	test   %eax,%eax
c010c3a7:	74 1a                	je     c010c3c3 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c3a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ac:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c3b2:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3b5:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c3bb:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c3c1:	eb 15                	jmp    c010c3d8 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3c6:	8b 40 14             	mov    0x14(%eax),%eax
c010c3c9:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3cc:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c3d2:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c3d8:	a1 60 50 15 c0       	mov    0xc0155060,%eax
c010c3dd:	83 e8 01             	sub    $0x1,%eax
c010c3e0:	a3 60 50 15 c0       	mov    %eax,0xc0155060
}
c010c3e5:	c9                   	leave  
c010c3e6:	c3                   	ret    

c010c3e7 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c3e7:	55                   	push   %ebp
c010c3e8:	89 e5                	mov    %esp,%ebp
c010c3ea:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c3ed:	c7 45 f8 1c 63 15 c0 	movl   $0xc015631c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c3f4:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3f9:	83 c0 01             	add    $0x1,%eax
c010c3fc:	a3 84 fa 14 c0       	mov    %eax,0xc014fa84
c010c401:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c406:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c40b:	7e 0c                	jle    c010c419 <get_pid+0x32>
        last_pid = 1;
c010c40d:	c7 05 84 fa 14 c0 01 	movl   $0x1,0xc014fa84
c010c414:	00 00 00 
        goto inside;
c010c417:	eb 13                	jmp    c010c42c <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c419:	8b 15 84 fa 14 c0    	mov    0xc014fa84,%edx
c010c41f:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c424:	39 c2                	cmp    %eax,%edx
c010c426:	0f 8c ac 00 00 00    	jl     c010c4d8 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c42c:	c7 05 88 fa 14 c0 00 	movl   $0x2000,0xc014fa88
c010c433:	20 00 00 
    repeat:
        le = list;
c010c436:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c439:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c43c:	eb 7f                	jmp    c010c4bd <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c43e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c441:	83 e8 7c             	sub    $0x7c,%eax
c010c444:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c447:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c44a:	8b 50 04             	mov    0x4(%eax),%edx
c010c44d:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c452:	39 c2                	cmp    %eax,%edx
c010c454:	75 3e                	jne    c010c494 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c456:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c45b:	83 c0 01             	add    $0x1,%eax
c010c45e:	a3 84 fa 14 c0       	mov    %eax,0xc014fa84
c010c463:	8b 15 84 fa 14 c0    	mov    0xc014fa84,%edx
c010c469:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c46e:	39 c2                	cmp    %eax,%edx
c010c470:	7c 4b                	jl     c010c4bd <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c472:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c477:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c47c:	7e 0a                	jle    c010c488 <get_pid+0xa1>
                        last_pid = 1;
c010c47e:	c7 05 84 fa 14 c0 01 	movl   $0x1,0xc014fa84
c010c485:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c488:	c7 05 88 fa 14 c0 00 	movl   $0x2000,0xc014fa88
c010c48f:	20 00 00 
                    goto repeat;
c010c492:	eb a2                	jmp    c010c436 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c494:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c497:	8b 50 04             	mov    0x4(%eax),%edx
c010c49a:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c49f:	39 c2                	cmp    %eax,%edx
c010c4a1:	7e 1a                	jle    c010c4bd <get_pid+0xd6>
c010c4a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4a6:	8b 50 04             	mov    0x4(%eax),%edx
c010c4a9:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c4ae:	39 c2                	cmp    %eax,%edx
c010c4b0:	7d 0b                	jge    c010c4bd <get_pid+0xd6>
                next_safe = proc->pid;
c010c4b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4b5:	8b 40 04             	mov    0x4(%eax),%eax
c010c4b8:	a3 88 fa 14 c0       	mov    %eax,0xc014fa88
c010c4bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c4c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4c6:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c4c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c4cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4cf:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c4d2:	0f 85 66 ff ff ff    	jne    c010c43e <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c4d8:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
}
c010c4dd:	c9                   	leave  
c010c4de:	c3                   	ret    

c010c4df <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c4df:	55                   	push   %ebp
c010c4e0:	89 e5                	mov    %esp,%ebp
c010c4e2:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c4e5:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010c4ea:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c4ed:	74 63                	je     c010c552 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c4ef:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010c4f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c4fd:	e8 66 f9 ff ff       	call   c010be68 <__intr_save>
c010c502:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c505:	8b 45 08             	mov    0x8(%ebp),%eax
c010c508:	a3 48 30 15 c0       	mov    %eax,0xc0153048
            load_esp0(next->kstack + KSTACKSIZE);
c010c50d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c510:	8b 40 0c             	mov    0xc(%eax),%eax
c010c513:	05 00 20 00 00       	add    $0x2000,%eax
c010c518:	89 04 24             	mov    %eax,(%esp)
c010c51b:	e8 b6 8b ff ff       	call   c01050d6 <load_esp0>
            lcr3(next->cr3);
c010c520:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c523:	8b 40 40             	mov    0x40(%eax),%eax
c010c526:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c529:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c52c:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c52f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c532:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c535:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c538:	83 c0 1c             	add    $0x1c,%eax
c010c53b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c53f:	89 04 24             	mov    %eax,(%esp)
c010c542:	e8 cb 1c 00 00       	call   c010e212 <switch_to>
        }
        local_intr_restore(intr_flag);
c010c547:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c54a:	89 04 24             	mov    %eax,(%esp)
c010c54d:	e8 40 f9 ff ff       	call   c010be92 <__intr_restore>
    }
}
c010c552:	c9                   	leave  
c010c553:	c3                   	ret    

c010c554 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c554:	55                   	push   %ebp
c010c555:	89 e5                	mov    %esp,%ebp
c010c557:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c55a:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010c55f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c562:	89 04 24             	mov    %eax,(%esp)
c010c565:	e8 df 65 ff ff       	call   c0102b49 <forkrets>
}
c010c56a:	c9                   	leave  
c010c56b:	c3                   	ret    

c010c56c <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c56c:	55                   	push   %ebp
c010c56d:	89 e5                	mov    %esp,%ebp
c010c56f:	53                   	push   %ebx
c010c570:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c573:	8b 45 08             	mov    0x8(%ebp),%eax
c010c576:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c57c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c57f:	8b 40 04             	mov    0x4(%eax),%eax
c010c582:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c589:	00 
c010c58a:	89 04 24             	mov    %eax,(%esp)
c010c58d:	e8 7b 85 00 00       	call   c0114b0d <hash32>
c010c592:	c1 e0 03             	shl    $0x3,%eax
c010c595:	05 60 30 15 c0       	add    $0xc0153060,%eax
c010c59a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c59d:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c5a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c5a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c5ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5af:	8b 40 04             	mov    0x4(%eax),%eax
c010c5b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c5b5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c5b8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c5bb:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c5be:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c5c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c5c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c5c7:	89 10                	mov    %edx,(%eax)
c010c5c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c5cc:	8b 10                	mov    (%eax),%edx
c010c5ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c5d1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c5d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c5da:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c5dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c5e3:	89 10                	mov    %edx,(%eax)
}
c010c5e5:	83 c4 34             	add    $0x34,%esp
c010c5e8:	5b                   	pop    %ebx
c010c5e9:	5d                   	pop    %ebp
c010c5ea:	c3                   	ret    

c010c5eb <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c5eb:	55                   	push   %ebp
c010c5ec:	89 e5                	mov    %esp,%ebp
c010c5ee:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c5f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5f4:	05 84 00 00 00       	add    $0x84,%eax
c010c5f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c5fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5ff:	8b 40 04             	mov    0x4(%eax),%eax
c010c602:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c605:	8b 12                	mov    (%edx),%edx
c010c607:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c60a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c60d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c610:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c613:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c619:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c61c:	89 10                	mov    %edx,(%eax)
}
c010c61e:	c9                   	leave  
c010c61f:	c3                   	ret    

c010c620 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c620:	55                   	push   %ebp
c010c621:	89 e5                	mov    %esp,%ebp
c010c623:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c626:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c62a:	7e 61                	jle    c010c68d <find_proc+0x6d>
c010c62c:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c633:	7f 58                	jg     c010c68d <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c635:	8b 45 08             	mov    0x8(%ebp),%eax
c010c638:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c63f:	00 
c010c640:	89 04 24             	mov    %eax,(%esp)
c010c643:	e8 c5 84 00 00       	call   c0114b0d <hash32>
c010c648:	c1 e0 03             	shl    $0x3,%eax
c010c64b:	05 60 30 15 c0       	add    $0xc0153060,%eax
c010c650:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c653:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c656:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c659:	eb 1b                	jmp    c010c676 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c65b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c65e:	2d 84 00 00 00       	sub    $0x84,%eax
c010c663:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c666:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c669:	8b 40 04             	mov    0x4(%eax),%eax
c010c66c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c66f:	75 05                	jne    c010c676 <find_proc+0x56>
                return proc;
c010c671:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c674:	eb 1c                	jmp    c010c692 <find_proc+0x72>
c010c676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c679:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c67c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c67f:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c682:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c685:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c688:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c68b:	75 ce                	jne    c010c65b <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c68d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c692:	c9                   	leave  
c010c693:	c3                   	ret    

c010c694 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c694:	55                   	push   %ebp
c010c695:	89 e5                	mov    %esp,%ebp
c010c697:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c69a:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c6a1:	00 
c010c6a2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c6a9:	00 
c010c6aa:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c6ad:	89 04 24             	mov    %eax,(%esp)
c010c6b0:	e8 b2 8f 00 00       	call   c0115667 <memset>
    tf.tf_cs = KERNEL_CS;
c010c6b5:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c6bb:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c6c1:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c6c5:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c6c9:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c6cd:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c6d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c6d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6da:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c6dd:	b8 26 be 10 c0       	mov    $0xc010be26,%eax
c010c6e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c6e5:	8b 45 10             	mov    0x10(%ebp),%eax
c010c6e8:	80 cc 01             	or     $0x1,%ah
c010c6eb:	89 c2                	mov    %eax,%edx
c010c6ed:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c6f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c6f4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c6fb:	00 
c010c6fc:	89 14 24             	mov    %edx,(%esp)
c010c6ff:	e8 0e 04 00 00       	call   c010cb12 <do_fork>
}
c010c704:	c9                   	leave  
c010c705:	c3                   	ret    

c010c706 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c706:	55                   	push   %ebp
c010c707:	89 e5                	mov    %esp,%ebp
c010c709:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c70c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c713:	e8 0c 8b ff ff       	call   c0105224 <alloc_pages>
c010c718:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c71b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c71f:	74 1a                	je     c010c73b <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c721:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c724:	89 04 24             	mov    %eax,(%esp)
c010c727:	e8 e8 f7 ff ff       	call   c010bf14 <page2kva>
c010c72c:	89 c2                	mov    %eax,%edx
c010c72e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c731:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c734:	b8 00 00 00 00       	mov    $0x0,%eax
c010c739:	eb 05                	jmp    c010c740 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c73b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c740:	c9                   	leave  
c010c741:	c3                   	ret    

c010c742 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c742:	55                   	push   %ebp
c010c743:	89 e5                	mov    %esp,%ebp
c010c745:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c748:	8b 45 08             	mov    0x8(%ebp),%eax
c010c74b:	8b 40 0c             	mov    0xc(%eax),%eax
c010c74e:	89 04 24             	mov    %eax,(%esp)
c010c751:	e8 12 f8 ff ff       	call   c010bf68 <kva2page>
c010c756:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c75d:	00 
c010c75e:	89 04 24             	mov    %eax,(%esp)
c010c761:	e8 29 8b ff ff       	call   c010528f <free_pages>
}
c010c766:	c9                   	leave  
c010c767:	c3                   	ret    

c010c768 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c768:	55                   	push   %ebp
c010c769:	89 e5                	mov    %esp,%ebp
c010c76b:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c76e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c775:	e8 aa 8a ff ff       	call   c0105224 <alloc_pages>
c010c77a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c77d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c781:	75 0a                	jne    c010c78d <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c783:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c788:	e9 80 00 00 00       	jmp    c010c80d <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c78d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c790:	89 04 24             	mov    %eax,(%esp)
c010c793:	e8 7c f7 ff ff       	call   c010bf14 <page2kva>
c010c798:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c79b:	a1 00 fa 14 c0       	mov    0xc014fa00,%eax
c010c7a0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c7a7:	00 
c010c7a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7af:	89 04 24             	mov    %eax,(%esp)
c010c7b2:	e8 92 8f 00 00       	call   c0115749 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c7b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7ba:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c7c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c7c6:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c7cd:	77 23                	ja     c010c7f2 <setup_pgdir+0x8a>
c010c7cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7d2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c7d6:	c7 44 24 08 f0 81 11 	movl   $0xc01181f0,0x8(%esp)
c010c7dd:	c0 
c010c7de:	c7 44 24 04 43 01 00 	movl   $0x143,0x4(%esp)
c010c7e5:	00 
c010c7e6:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010c7ed:	e8 ec 46 ff ff       	call   c0100ede <__panic>
c010c7f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7f5:	05 00 00 00 40       	add    $0x40000000,%eax
c010c7fa:	83 c8 03             	or     $0x3,%eax
c010c7fd:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c7ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010c802:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c805:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c808:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c80d:	c9                   	leave  
c010c80e:	c3                   	ret    

c010c80f <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c80f:	55                   	push   %ebp
c010c810:	89 e5                	mov    %esp,%ebp
c010c812:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c815:	8b 45 08             	mov    0x8(%ebp),%eax
c010c818:	8b 40 0c             	mov    0xc(%eax),%eax
c010c81b:	89 04 24             	mov    %eax,(%esp)
c010c81e:	e8 45 f7 ff ff       	call   c010bf68 <kva2page>
c010c823:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c82a:	00 
c010c82b:	89 04 24             	mov    %eax,(%esp)
c010c82e:	e8 5c 8a ff ff       	call   c010528f <free_pages>
}
c010c833:	c9                   	leave  
c010c834:	c3                   	ret    

c010c835 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c835:	55                   	push   %ebp
c010c836:	89 e5                	mov    %esp,%ebp
c010c838:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c83b:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010c840:	8b 40 18             	mov    0x18(%eax),%eax
c010c843:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c846:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c84a:	75 0a                	jne    c010c856 <copy_mm+0x21>
        return 0;
c010c84c:	b8 00 00 00 00       	mov    $0x0,%eax
c010c851:	e9 f9 00 00 00       	jmp    c010c94f <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c856:	8b 45 08             	mov    0x8(%ebp),%eax
c010c859:	25 00 01 00 00       	and    $0x100,%eax
c010c85e:	85 c0                	test   %eax,%eax
c010c860:	74 08                	je     c010c86a <copy_mm+0x35>
        mm = oldmm;
c010c862:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c865:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c868:	eb 78                	jmp    c010c8e2 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c86a:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c871:	e8 d2 b7 ff ff       	call   c0108048 <mm_create>
c010c876:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c879:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c87d:	75 05                	jne    c010c884 <copy_mm+0x4f>
        goto bad_mm;
c010c87f:	e9 c8 00 00 00       	jmp    c010c94c <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c887:	89 04 24             	mov    %eax,(%esp)
c010c88a:	e8 d9 fe ff ff       	call   c010c768 <setup_pgdir>
c010c88f:	85 c0                	test   %eax,%eax
c010c891:	74 05                	je     c010c898 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c893:	e9 a9 00 00 00       	jmp    c010c941 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c898:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c89b:	89 04 24             	mov    %eax,(%esp)
c010c89e:	e8 43 f7 ff ff       	call   c010bfe6 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c8a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8ad:	89 04 24             	mov    %eax,(%esp)
c010c8b0:	e8 b6 bc ff ff       	call   c010856b <dup_mmap>
c010c8b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c8b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8bb:	89 04 24             	mov    %eax,(%esp)
c010c8be:	e8 56 f7 ff ff       	call   c010c019 <unlock_mm>

    if (ret != 0) {
c010c8c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c8c7:	74 19                	je     c010c8e2 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c8c9:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c8ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8cd:	89 04 24             	mov    %eax,(%esp)
c010c8d0:	e8 97 bd ff ff       	call   c010866c <exit_mmap>
    put_pgdir(mm);
c010c8d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8d8:	89 04 24             	mov    %eax,(%esp)
c010c8db:	e8 2f ff ff ff       	call   c010c80f <put_pgdir>
c010c8e0:	eb 5f                	jmp    c010c941 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8e5:	89 04 24             	mov    %eax,(%esp)
c010c8e8:	e8 c5 f6 ff ff       	call   c010bfb2 <mm_count_inc>
    proc->mm = mm;
c010c8ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c8f3:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c8f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f9:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c8ff:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c906:	77 23                	ja     c010c92b <copy_mm+0xf6>
c010c908:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c90b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c90f:	c7 44 24 08 f0 81 11 	movl   $0xc01181f0,0x8(%esp)
c010c916:	c0 
c010c917:	c7 44 24 04 72 01 00 	movl   $0x172,0x4(%esp)
c010c91e:	00 
c010c91f:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010c926:	e8 b3 45 ff ff       	call   c0100ede <__panic>
c010c92b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c92e:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c934:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c937:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c93a:	b8 00 00 00 00       	mov    $0x0,%eax
c010c93f:	eb 0e                	jmp    c010c94f <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c941:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c944:	89 04 24             	mov    %eax,(%esp)
c010c947:	e8 61 ba ff ff       	call   c01083ad <mm_destroy>
bad_mm:
    return ret;
c010c94c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c94f:	c9                   	leave  
c010c950:	c3                   	ret    

c010c951 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c951:	55                   	push   %ebp
c010c952:	89 e5                	mov    %esp,%ebp
c010c954:	57                   	push   %edi
c010c955:	56                   	push   %esi
c010c956:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c957:	8b 45 08             	mov    0x8(%ebp),%eax
c010c95a:	8b 40 0c             	mov    0xc(%eax),%eax
c010c95d:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c962:	89 c2                	mov    %eax,%edx
c010c964:	8b 45 08             	mov    0x8(%ebp),%eax
c010c967:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c96a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c96d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c970:	8b 55 10             	mov    0x10(%ebp),%edx
c010c973:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c978:	89 c1                	mov    %eax,%ecx
c010c97a:	83 e1 01             	and    $0x1,%ecx
c010c97d:	85 c9                	test   %ecx,%ecx
c010c97f:	74 0e                	je     c010c98f <copy_thread+0x3e>
c010c981:	0f b6 0a             	movzbl (%edx),%ecx
c010c984:	88 08                	mov    %cl,(%eax)
c010c986:	83 c0 01             	add    $0x1,%eax
c010c989:	83 c2 01             	add    $0x1,%edx
c010c98c:	83 eb 01             	sub    $0x1,%ebx
c010c98f:	89 c1                	mov    %eax,%ecx
c010c991:	83 e1 02             	and    $0x2,%ecx
c010c994:	85 c9                	test   %ecx,%ecx
c010c996:	74 0f                	je     c010c9a7 <copy_thread+0x56>
c010c998:	0f b7 0a             	movzwl (%edx),%ecx
c010c99b:	66 89 08             	mov    %cx,(%eax)
c010c99e:	83 c0 02             	add    $0x2,%eax
c010c9a1:	83 c2 02             	add    $0x2,%edx
c010c9a4:	83 eb 02             	sub    $0x2,%ebx
c010c9a7:	89 d9                	mov    %ebx,%ecx
c010c9a9:	c1 e9 02             	shr    $0x2,%ecx
c010c9ac:	89 c7                	mov    %eax,%edi
c010c9ae:	89 d6                	mov    %edx,%esi
c010c9b0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c9b2:	89 f2                	mov    %esi,%edx
c010c9b4:	89 f8                	mov    %edi,%eax
c010c9b6:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c9bb:	89 de                	mov    %ebx,%esi
c010c9bd:	83 e6 02             	and    $0x2,%esi
c010c9c0:	85 f6                	test   %esi,%esi
c010c9c2:	74 0b                	je     c010c9cf <copy_thread+0x7e>
c010c9c4:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c9c8:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c9cc:	83 c1 02             	add    $0x2,%ecx
c010c9cf:	83 e3 01             	and    $0x1,%ebx
c010c9d2:	85 db                	test   %ebx,%ebx
c010c9d4:	74 07                	je     c010c9dd <copy_thread+0x8c>
c010c9d6:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c9da:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c9dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9e0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c9e3:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c9ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c9f0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c9f3:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c9f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9f9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c9fc:	8b 55 08             	mov    0x8(%ebp),%edx
c010c9ff:	8b 52 3c             	mov    0x3c(%edx),%edx
c010ca02:	8b 52 40             	mov    0x40(%edx),%edx
c010ca05:	80 ce 02             	or     $0x2,%dh
c010ca08:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010ca0b:	ba 54 c5 10 c0       	mov    $0xc010c554,%edx
c010ca10:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca13:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010ca16:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca19:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ca1c:	89 c2                	mov    %eax,%edx
c010ca1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca21:	89 50 20             	mov    %edx,0x20(%eax)
}
c010ca24:	5b                   	pop    %ebx
c010ca25:	5e                   	pop    %esi
c010ca26:	5f                   	pop    %edi
c010ca27:	5d                   	pop    %ebp
c010ca28:	c3                   	ret    

c010ca29 <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010ca29:	55                   	push   %ebp
c010ca2a:	89 e5                	mov    %esp,%ebp
c010ca2c:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010ca2f:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ca34:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ca3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010ca3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ca41:	75 24                	jne    c010ca67 <copy_files+0x3e>
c010ca43:	c7 44 24 0c 28 82 11 	movl   $0xc0118228,0xc(%esp)
c010ca4a:	c0 
c010ca4b:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010ca52:	c0 
c010ca53:	c7 44 24 04 90 01 00 	movl   $0x190,0x4(%esp)
c010ca5a:	00 
c010ca5b:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010ca62:	e8 77 44 ff ff       	call   c0100ede <__panic>

    if (clone_flags & CLONE_FS) {
c010ca67:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca6a:	25 00 08 00 00       	and    $0x800,%eax
c010ca6f:	85 c0                	test   %eax,%eax
c010ca71:	74 08                	je     c010ca7b <copy_files+0x52>
        filesp = old_filesp;
c010ca73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca76:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010ca79:	eb 40                	jmp    c010cabb <copy_files+0x92>
    }

    int ret = -E_NO_MEM;
c010ca7b:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010ca82:	e8 1f e7 ff ff       	call   c010b1a6 <files_create>
c010ca87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ca8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca8e:	75 02                	jne    c010ca92 <copy_files+0x69>
        goto bad_files_struct;
c010ca90:	eb 47                	jmp    c010cad9 <copy_files+0xb0>
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010ca92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca9c:	89 04 24             	mov    %eax,(%esp)
c010ca9f:	e8 ab e8 ff ff       	call   c010b34f <dup_files>
c010caa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010caa7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010caab:	74 0e                	je     c010cabb <copy_files+0x92>
        goto bad_dup_cleanup_fs;
c010caad:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010caae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cab1:	89 04 24             	mov    %eax,(%esp)
c010cab4:	e8 50 e7 ff ff       	call   c010b209 <files_destroy>
c010cab9:	eb 1e                	jmp    c010cad9 <copy_files+0xb0>
    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010cabb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cabe:	89 04 24             	mov    %eax,(%esp)
c010cac1:	e8 79 f5 ff ff       	call   c010c03f <files_count_inc>
    proc->filesp = filesp;
c010cac6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cac9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cacc:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010cad2:	b8 00 00 00 00       	mov    $0x0,%eax
c010cad7:	eb 03                	jmp    c010cadc <copy_files+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010cad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010cadc:	c9                   	leave  
c010cadd:	c3                   	ret    

c010cade <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010cade:	55                   	push   %ebp
c010cadf:	89 e5                	mov    %esp,%ebp
c010cae1:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010cae4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cae7:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010caed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010caf0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010caf4:	74 1a                	je     c010cb10 <put_files+0x32>
        if (files_count_dec(filesp) == 0) {
c010caf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caf9:	89 04 24             	mov    %eax,(%esp)
c010cafc:	e8 58 f5 ff ff       	call   c010c059 <files_count_dec>
c010cb01:	85 c0                	test   %eax,%eax
c010cb03:	75 0b                	jne    c010cb10 <put_files+0x32>
            files_destroy(filesp);
c010cb05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb08:	89 04 24             	mov    %eax,(%esp)
c010cb0b:	e8 f9 e6 ff ff       	call   c010b209 <files_destroy>
        }
    }
}
c010cb10:	c9                   	leave  
c010cb11:	c3                   	ret    

c010cb12 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010cb12:	55                   	push   %ebp
c010cb13:	89 e5                	mov    %esp,%ebp
c010cb15:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010cb18:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010cb1f:	a1 60 50 15 c0       	mov    0xc0155060,%eax
c010cb24:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010cb29:	7e 05                	jle    c010cb30 <do_fork+0x1e>
        goto fork_out;
c010cb2b:	e9 0d 01 00 00       	jmp    c010cc3d <do_fork+0x12b>
    }
    ret = -E_NO_MEM;
c010cb30:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	if((proc=alloc_proc())==NULL){
c010cb37:	e8 37 f5 ff ff       	call   c010c073 <alloc_proc>
c010cb3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cb43:	75 05                	jne    c010cb4a <do_fork+0x38>
		goto fork_out;
c010cb45:	e9 f3 00 00 00       	jmp    c010cc3d <do_fork+0x12b>
	}
	proc->parent = current;
c010cb4a:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010cb50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb53:	89 50 14             	mov    %edx,0x14(%eax)
	assert(current->wait_state == 0);
c010cb56:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cb5b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cb61:	85 c0                	test   %eax,%eax
c010cb63:	74 24                	je     c010cb89 <do_fork+0x77>
c010cb65:	c7 44 24 0c 50 82 11 	movl   $0xc0118250,0xc(%esp)
c010cb6c:	c0 
c010cb6d:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010cb74:	c0 
c010cb75:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c010cb7c:	00 
c010cb7d:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010cb84:	e8 55 43 ff ff       	call   c0100ede <__panic>

    if (setup_kstack(proc) != 0) {
c010cb89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb8c:	89 04 24             	mov    %eax,(%esp)
c010cb8f:	e8 72 fb ff ff       	call   c010c706 <setup_kstack>
c010cb94:	85 c0                	test   %eax,%eax
c010cb96:	74 05                	je     c010cb9d <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010cb98:	e9 b0 00 00 00       	jmp    c010cc4d <do_fork+0x13b>
    }
    if (copy_files(clone_flags, proc) != 0) {
c010cb9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cba0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cba4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cba7:	89 04 24             	mov    %eax,(%esp)
c010cbaa:	e8 7a fe ff ff       	call   c010ca29 <copy_files>
c010cbaf:	85 c0                	test   %eax,%eax
c010cbb1:	74 05                	je     c010cbb8 <do_fork+0xa6>
        goto bad_fork_cleanup_kstack;
c010cbb3:	e9 8a 00 00 00       	jmp    c010cc42 <do_fork+0x130>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010cbb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbc2:	89 04 24             	mov    %eax,(%esp)
c010cbc5:	e8 6b fc ff ff       	call   c010c835 <copy_mm>
c010cbca:	85 c0                	test   %eax,%eax
c010cbcc:	74 0e                	je     c010cbdc <do_fork+0xca>
        goto bad_fork_cleanup_fs;
c010cbce:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
c010cbcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbd2:	89 04 24             	mov    %eax,(%esp)
c010cbd5:	e8 04 ff ff ff       	call   c010cade <put_files>
c010cbda:	eb 66                	jmp    c010cc42 <do_fork+0x130>
        goto bad_fork_cleanup_kstack;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_fs;
    }
    copy_thread(proc, stack, tf);
c010cbdc:	8b 45 10             	mov    0x10(%ebp),%eax
c010cbdf:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cbe3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbe6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbed:	89 04 24             	mov    %eax,(%esp)
c010cbf0:	e8 5c fd ff ff       	call   c010c951 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010cbf5:	e8 6e f2 ff ff       	call   c010be68 <__intr_save>
c010cbfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010cbfd:	e8 e5 f7 ff ff       	call   c010c3e7 <get_pid>
c010cc02:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cc05:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010cc08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc0b:	89 04 24             	mov    %eax,(%esp)
c010cc0e:	e8 59 f9 ff ff       	call   c010c56c <hash_proc>
        //list_add(&proc_list, &(proc->list_link));
        //nr_process ++;
		set_links(proc);
c010cc13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc16:	89 04 24             	mov    %eax,(%esp)
c010cc19:	e8 6e f6 ff ff       	call   c010c28c <set_links>
    }
    local_intr_restore(intr_flag);
c010cc1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc21:	89 04 24             	mov    %eax,(%esp)
c010cc24:	e8 69 f2 ff ff       	call   c010be92 <__intr_restore>

    wakeup_proc(proc);
c010cc29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc2c:	89 04 24             	mov    %eax,(%esp)
c010cc2f:	e8 d2 1a 00 00       	call   c010e706 <wakeup_proc>

    ret = proc->pid;
c010cc34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc37:	8b 40 04             	mov    0x4(%eax),%eax
c010cc3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010cc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc40:	eb 18                	jmp    c010cc5a <do_fork+0x148>

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010cc42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc45:	89 04 24             	mov    %eax,(%esp)
c010cc48:	e8 f5 fa ff ff       	call   c010c742 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010cc4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc50:	89 04 24             	mov    %eax,(%esp)
c010cc53:	e8 72 81 ff ff       	call   c0104dca <kfree>
    goto fork_out;
c010cc58:	eb e3                	jmp    c010cc3d <do_fork+0x12b>
}
c010cc5a:	c9                   	leave  
c010cc5b:	c3                   	ret    

c010cc5c <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cc5c:	55                   	push   %ebp
c010cc5d:	89 e5                	mov    %esp,%ebp
c010cc5f:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cc62:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010cc68:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010cc6d:	39 c2                	cmp    %eax,%edx
c010cc6f:	75 1c                	jne    c010cc8d <do_exit+0x31>
        panic("idleproc exit.\n");
c010cc71:	c7 44 24 08 69 82 11 	movl   $0xc0118269,0x8(%esp)
c010cc78:	c0 
c010cc79:	c7 44 24 04 17 02 00 	movl   $0x217,0x4(%esp)
c010cc80:	00 
c010cc81:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010cc88:	e8 51 42 ff ff       	call   c0100ede <__panic>
    }
    if (current == initproc) {
c010cc8d:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010cc93:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010cc98:	39 c2                	cmp    %eax,%edx
c010cc9a:	75 1c                	jne    c010ccb8 <do_exit+0x5c>
        panic("initproc exit.\n");
c010cc9c:	c7 44 24 08 79 82 11 	movl   $0xc0118279,0x8(%esp)
c010cca3:	c0 
c010cca4:	c7 44 24 04 1a 02 00 	movl   $0x21a,0x4(%esp)
c010ccab:	00 
c010ccac:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010ccb3:	e8 26 42 ff ff       	call   c0100ede <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010ccb8:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ccbd:	8b 40 18             	mov    0x18(%eax),%eax
c010ccc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010ccc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ccc7:	74 4a                	je     c010cd13 <do_exit+0xb7>
        lcr3(boot_cr3);
c010ccc9:	a1 44 61 15 c0       	mov    0xc0156144,%eax
c010ccce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ccd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ccd4:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010ccd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccda:	89 04 24             	mov    %eax,(%esp)
c010ccdd:	e8 ea f2 ff ff       	call   c010bfcc <mm_count_dec>
c010cce2:	85 c0                	test   %eax,%eax
c010cce4:	75 21                	jne    c010cd07 <do_exit+0xab>
            exit_mmap(mm);
c010cce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cce9:	89 04 24             	mov    %eax,(%esp)
c010ccec:	e8 7b b9 ff ff       	call   c010866c <exit_mmap>
            put_pgdir(mm);
c010ccf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccf4:	89 04 24             	mov    %eax,(%esp)
c010ccf7:	e8 13 fb ff ff       	call   c010c80f <put_pgdir>
            mm_destroy(mm);
c010ccfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccff:	89 04 24             	mov    %eax,(%esp)
c010cd02:	e8 a6 b6 ff ff       	call   c01083ad <mm_destroy>
        }
        current->mm = NULL;
c010cd07:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd0c:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010cd13:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd18:	89 04 24             	mov    %eax,(%esp)
c010cd1b:	e8 be fd ff ff       	call   c010cade <put_files>
    current->state = PROC_ZOMBIE;
c010cd20:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd25:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cd2b:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd30:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd33:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cd39:	e8 2a f1 ff ff       	call   c010be68 <__intr_save>
c010cd3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cd41:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd46:	8b 40 14             	mov    0x14(%eax),%eax
c010cd49:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cd4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd4f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cd55:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cd5a:	75 10                	jne    c010cd6c <do_exit+0x110>
            wakeup_proc(proc);
c010cd5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd5f:	89 04 24             	mov    %eax,(%esp)
c010cd62:	e8 9f 19 00 00       	call   c010e706 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010cd67:	e9 ac 00 00 00       	jmp    c010ce18 <do_exit+0x1bc>
c010cd6c:	e9 a7 00 00 00       	jmp    c010ce18 <do_exit+0x1bc>
            proc = current->cptr;
c010cd71:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd76:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010cd7f:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cd84:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd87:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010cd8d:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010cd93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd96:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cd9d:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cda0:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010cda5:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cdab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdae:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cdb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdb7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cdbd:	85 c0                	test   %eax,%eax
c010cdbf:	74 14                	je     c010cdd5 <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010cdc1:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010cdc6:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cdcc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cdcf:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cdd5:	8b 15 44 30 15 c0    	mov    0xc0153044,%edx
c010cddb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdde:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cde1:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010cde6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cde9:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cdef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdf2:	8b 00                	mov    (%eax),%eax
c010cdf4:	83 f8 03             	cmp    $0x3,%eax
c010cdf7:	75 1f                	jne    c010ce18 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010cdf9:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010cdfe:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ce04:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ce09:	75 0d                	jne    c010ce18 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010ce0b:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010ce10:	89 04 24             	mov    %eax,(%esp)
c010ce13:	e8 ee 18 00 00       	call   c010e706 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010ce18:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ce1d:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ce23:	85 c0                	test   %eax,%eax
c010ce25:	0f 85 46 ff ff ff    	jne    c010cd71 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010ce2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce2e:	89 04 24             	mov    %eax,(%esp)
c010ce31:	e8 5c f0 ff ff       	call   c010be92 <__intr_restore>
    
    schedule();
c010ce36:	e8 67 19 00 00       	call   c010e7a2 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010ce3b:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ce40:	8b 40 04             	mov    0x4(%eax),%eax
c010ce43:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ce47:	c7 44 24 08 8c 82 11 	movl   $0xc011828c,0x8(%esp)
c010ce4e:	c0 
c010ce4f:	c7 44 24 04 47 02 00 	movl   $0x247,0x4(%esp)
c010ce56:	00 
c010ce57:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010ce5e:	e8 7b 40 ff ff       	call   c0100ede <__panic>

c010ce63 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010ce63:	55                   	push   %ebp
c010ce64:	89 e5                	mov    %esp,%ebp
c010ce66:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010ce69:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ce70:	00 
c010ce71:	8b 45 14             	mov    0x14(%ebp),%eax
c010ce74:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce78:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce7b:	89 04 24             	mov    %eax,(%esp)
c010ce7e:	e8 ae eb ff ff       	call   c010ba31 <sysfile_seek>
c010ce83:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce8a:	74 05                	je     c010ce91 <load_icode_read+0x2e>
        return ret;
c010ce8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce8f:	eb 38                	jmp    c010cec9 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010ce91:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce94:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ce98:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cea2:	89 04 24             	mov    %eax,(%esp)
c010cea5:	e8 95 e8 ff ff       	call   c010b73f <sysfile_read>
c010ceaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ceb0:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ceb3:	74 0f                	je     c010cec4 <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010ceb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010ceba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cebe:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010cec2:	eb 05                	jmp    c010cec9 <load_icode_read+0x66>
    }
    return 0;
c010cec4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cec9:	c9                   	leave  
c010ceca:	c3                   	ret    

c010cecb <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010cecb:	55                   	push   %ebp
c010cecc:	89 e5                	mov    %esp,%ebp
c010cece:	53                   	push   %ebx
c010cecf:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010ced5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ced9:	78 06                	js     c010cee1 <load_icode+0x16>
c010cedb:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010cedf:	7e 24                	jle    c010cf05 <load_icode+0x3a>
c010cee1:	c7 44 24 0c ac 82 11 	movl   $0xc01182ac,0xc(%esp)
c010cee8:	c0 
c010cee9:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010cef0:	c0 
c010cef1:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
c010cef8:	00 
c010cef9:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010cf00:	e8 d9 3f ff ff       	call   c0100ede <__panic>

    if (current->mm != NULL) {
c010cf05:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010cf0a:	8b 40 18             	mov    0x18(%eax),%eax
c010cf0d:	85 c0                	test   %eax,%eax
c010cf0f:	74 1c                	je     c010cf2d <load_icode+0x62>
        panic("load_icode: current->mm must be empty.\n");
c010cf11:	c7 44 24 08 d4 82 11 	movl   $0xc01182d4,0x8(%esp)
c010cf18:	c0 
c010cf19:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
c010cf20:	00 
c010cf21:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010cf28:	e8 b1 3f ff ff       	call   c0100ede <__panic>
    }

    int ret = -E_NO_MEM;
c010cf2d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c010cf34:	e8 0f b1 ff ff       	call   c0108048 <mm_create>
c010cf39:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010cf3c:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010cf40:	75 06                	jne    c010cf48 <load_icode+0x7d>
        goto bad_mm;
c010cf42:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010cf43:	e9 85 07 00 00       	jmp    c010d6cd <load_icode+0x802>
    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010cf48:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cf4b:	89 04 24             	mov    %eax,(%esp)
c010cf4e:	e8 15 f8 ff ff       	call   c010c768 <setup_pgdir>
c010cf53:	85 c0                	test   %eax,%eax
c010cf55:	74 05                	je     c010cf5c <load_icode+0x91>
        goto bad_pgdir_cleanup_mm;
c010cf57:	e9 8c 07 00 00       	jmp    c010d6e8 <load_icode+0x81d>
    }

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
c010cf5c:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010cf62:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010cf65:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cf6c:	00 
c010cf6d:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010cf74:	00 
c010cf75:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf78:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf7f:	89 04 24             	mov    %eax,(%esp)
c010cf82:	e8 dc fe ff ff       	call   c010ce63 <load_icode_read>
c010cf87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf8e:	74 05                	je     c010cf95 <load_icode+0xca>
        goto bad_elf_cleanup_pgdir;
c010cf90:	e9 48 07 00 00       	jmp    c010d6dd <load_icode+0x812>
    }

    if (elf->e_magic != ELF_MAGIC) {
c010cf95:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf98:	8b 00                	mov    (%eax),%eax
c010cf9a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cf9f:	74 0c                	je     c010cfad <load_icode+0xe2>
        ret = -E_INVAL_ELF;
c010cfa1:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010cfa8:	e9 30 07 00 00       	jmp    c010d6dd <load_icode+0x812>
    }

    struct proghdr __ph, *ph = &__ph;
c010cfad:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010cfb3:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010cfb6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010cfbd:	e9 76 03 00 00       	jmp    c010d338 <load_icode+0x46d>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010cfc2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cfc5:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cfc8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cfcb:	c1 e2 05             	shl    $0x5,%edx
c010cfce:	01 d0                	add    %edx,%eax
c010cfd0:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010cfd3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cfd6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cfda:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010cfe1:	00 
c010cfe2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfe5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfe9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfec:	89 04 24             	mov    %eax,(%esp)
c010cfef:	e8 6f fe ff ff       	call   c010ce63 <load_icode_read>
c010cff4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cff7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cffb:	74 05                	je     c010d002 <load_icode+0x137>
            goto bad_cleanup_mmap;
c010cffd:	e9 d0 06 00 00       	jmp    c010d6d2 <load_icode+0x807>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010d002:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d005:	8b 00                	mov    (%eax),%eax
c010d007:	83 f8 01             	cmp    $0x1,%eax
c010d00a:	74 05                	je     c010d011 <load_icode+0x146>
            continue ;
c010d00c:	e9 23 03 00 00       	jmp    c010d334 <load_icode+0x469>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010d011:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d014:	8b 50 10             	mov    0x10(%eax),%edx
c010d017:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d01a:	8b 40 14             	mov    0x14(%eax),%eax
c010d01d:	39 c2                	cmp    %eax,%edx
c010d01f:	76 0c                	jbe    c010d02d <load_icode+0x162>
            ret = -E_INVAL_ELF;
c010d021:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010d028:	e9 a5 06 00 00       	jmp    c010d6d2 <load_icode+0x807>
        }
        if (ph->p_filesz == 0) {
c010d02d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d030:	8b 40 10             	mov    0x10(%eax),%eax
c010d033:	85 c0                	test   %eax,%eax
c010d035:	75 05                	jne    c010d03c <load_icode+0x171>
            continue ;
c010d037:	e9 f8 02 00 00       	jmp    c010d334 <load_icode+0x469>
        }
        vm_flags = 0, perm = PTE_U;
c010d03c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010d043:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010d04a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d04d:	8b 40 18             	mov    0x18(%eax),%eax
c010d050:	83 e0 01             	and    $0x1,%eax
c010d053:	85 c0                	test   %eax,%eax
c010d055:	74 04                	je     c010d05b <load_icode+0x190>
c010d057:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010d05b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d05e:	8b 40 18             	mov    0x18(%eax),%eax
c010d061:	83 e0 02             	and    $0x2,%eax
c010d064:	85 c0                	test   %eax,%eax
c010d066:	74 04                	je     c010d06c <load_icode+0x1a1>
c010d068:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010d06c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d06f:	8b 40 18             	mov    0x18(%eax),%eax
c010d072:	83 e0 04             	and    $0x4,%eax
c010d075:	85 c0                	test   %eax,%eax
c010d077:	74 04                	je     c010d07d <load_icode+0x1b2>
c010d079:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010d07d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d080:	83 e0 02             	and    $0x2,%eax
c010d083:	85 c0                	test   %eax,%eax
c010d085:	74 04                	je     c010d08b <load_icode+0x1c0>
c010d087:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010d08b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d08e:	8b 50 14             	mov    0x14(%eax),%edx
c010d091:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d094:	8b 40 08             	mov    0x8(%eax),%eax
c010d097:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d09e:	00 
c010d09f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d0a2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010d0a6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0ae:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d0b1:	89 04 24             	mov    %eax,(%esp)
c010d0b4:	e8 96 b3 ff ff       	call   c010844f <mm_map>
c010d0b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d0bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d0c0:	74 05                	je     c010d0c7 <load_icode+0x1fc>
            goto bad_cleanup_mmap;
c010d0c2:	e9 0b 06 00 00       	jmp    c010d6d2 <load_icode+0x807>
        }
        off_t offset = ph->p_offset;
c010d0c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0ca:	8b 40 04             	mov    0x4(%eax),%eax
c010d0cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010d0d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0d3:	8b 40 08             	mov    0x8(%eax),%eax
c010d0d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d0d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010d0df:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010d0e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d0e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010d0ea:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c010d0f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0f4:	8b 50 08             	mov    0x8(%eax),%edx
c010d0f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0fa:	8b 40 10             	mov    0x10(%eax),%eax
c010d0fd:	01 d0                	add    %edx,%eax
c010d0ff:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010d102:	e9 b1 00 00 00       	jmp    c010d1b8 <load_icode+0x2ed>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d107:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d10a:	8b 40 0c             	mov    0xc(%eax),%eax
c010d10d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d110:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d114:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d117:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d11b:	89 04 24             	mov    %eax,(%esp)
c010d11e:	e8 4f 8f ff ff       	call   c0106072 <pgdir_alloc_page>
c010d123:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d126:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d12a:	75 0c                	jne    c010d138 <load_icode+0x26d>
                ret = -E_NO_MEM;
c010d12c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d133:	e9 9a 05 00 00       	jmp    c010d6d2 <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d138:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d13b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d13e:	29 c2                	sub    %eax,%edx
c010d140:	89 d0                	mov    %edx,%eax
c010d142:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d145:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d14a:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d14d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d150:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d157:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d15a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d15d:	73 0d                	jae    c010d16c <load_icode+0x2a1>
                size -= la - end;
c010d15f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d162:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d165:	29 c2                	sub    %eax,%edx
c010d167:	89 d0                	mov    %edx,%eax
c010d169:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010d16c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d16f:	89 04 24             	mov    %eax,(%esp)
c010d172:	e8 9d ed ff ff       	call   c010bf14 <page2kva>
c010d177:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d17a:	01 c2                	add    %eax,%edx
c010d17c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d17f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d183:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d186:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d18a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d18e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d191:	89 04 24             	mov    %eax,(%esp)
c010d194:	e8 ca fc ff ff       	call   c010ce63 <load_icode_read>
c010d199:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d19c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d1a0:	74 05                	je     c010d1a7 <load_icode+0x2dc>
                goto bad_cleanup_mmap;
c010d1a2:	e9 2b 05 00 00       	jmp    c010d6d2 <load_icode+0x807>
            }
            start += size, offset += size;
c010d1a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1aa:	01 45 d8             	add    %eax,-0x28(%ebp)
c010d1ad:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d1b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1b3:	01 d0                	add    %edx,%eax
c010d1b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010d1b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1bb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d1be:	0f 82 43 ff ff ff    	jb     c010d107 <load_icode+0x23c>
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
        }
        end = ph->p_va + ph->p_memsz;
c010d1c4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d1c7:	8b 50 08             	mov    0x8(%eax),%edx
c010d1ca:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d1cd:	8b 40 14             	mov    0x14(%eax),%eax
c010d1d0:	01 d0                	add    %edx,%eax
c010d1d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        if (start < la) {
c010d1d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1d8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1db:	0f 83 b0 00 00 00    	jae    c010d291 <load_icode+0x3c6>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010d1e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1e4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d1e7:	75 05                	jne    c010d1ee <load_icode+0x323>
                continue ;
c010d1e9:	e9 46 01 00 00       	jmp    c010d334 <load_icode+0x469>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d1ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1f1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d1f4:	29 c2                	sub    %eax,%edx
c010d1f6:	89 d0                	mov    %edx,%eax
c010d1f8:	05 00 10 00 00       	add    $0x1000,%eax
c010d1fd:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d200:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d205:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d208:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d20b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d20e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d211:	73 0d                	jae    c010d220 <load_icode+0x355>
                size -= la - end;
c010d213:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d216:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d219:	29 c2                	sub    %eax,%edx
c010d21b:	89 d0                	mov    %edx,%eax
c010d21d:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d220:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d223:	89 04 24             	mov    %eax,(%esp)
c010d226:	e8 e9 ec ff ff       	call   c010bf14 <page2kva>
c010d22b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d22e:	01 c2                	add    %eax,%edx
c010d230:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d233:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d237:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d23e:	00 
c010d23f:	89 14 24             	mov    %edx,(%esp)
c010d242:	e8 20 84 00 00       	call   c0115667 <memset>
            start += size;
c010d247:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d24a:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d24d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d250:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d253:	73 08                	jae    c010d25d <load_icode+0x392>
c010d255:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d258:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d25b:	74 34                	je     c010d291 <load_icode+0x3c6>
c010d25d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d260:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d263:	72 08                	jb     c010d26d <load_icode+0x3a2>
c010d265:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d268:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d26b:	74 24                	je     c010d291 <load_icode+0x3c6>
c010d26d:	c7 44 24 0c fc 82 11 	movl   $0xc01182fc,0xc(%esp)
c010d274:	c0 
c010d275:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010d27c:	c0 
c010d27d:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c010d284:	00 
c010d285:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d28c:	e8 4d 3c ff ff       	call   c0100ede <__panic>
        }
        while (start < end) {
c010d291:	e9 92 00 00 00       	jmp    c010d328 <load_icode+0x45d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d296:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d299:	8b 40 0c             	mov    0xc(%eax),%eax
c010d29c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d29f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d2a3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d2a6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d2aa:	89 04 24             	mov    %eax,(%esp)
c010d2ad:	e8 c0 8d ff ff       	call   c0106072 <pgdir_alloc_page>
c010d2b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d2b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d2b9:	75 0c                	jne    c010d2c7 <load_icode+0x3fc>
                ret = -E_NO_MEM;
c010d2bb:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d2c2:	e9 0b 04 00 00       	jmp    c010d6d2 <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d2c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d2ca:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d2cd:	29 c2                	sub    %eax,%edx
c010d2cf:	89 d0                	mov    %edx,%eax
c010d2d1:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d2d4:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d2d9:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d2dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d2df:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d2e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d2e9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d2ec:	73 0d                	jae    c010d2fb <load_icode+0x430>
                size -= la - end;
c010d2ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d2f1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d2f4:	29 c2                	sub    %eax,%edx
c010d2f6:	89 d0                	mov    %edx,%eax
c010d2f8:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d2fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2fe:	89 04 24             	mov    %eax,(%esp)
c010d301:	e8 0e ec ff ff       	call   c010bf14 <page2kva>
c010d306:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d309:	01 c2                	add    %eax,%edx
c010d30b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d30e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d312:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d319:	00 
c010d31a:	89 14 24             	mov    %edx,(%esp)
c010d31d:	e8 45 83 00 00       	call   c0115667 <memset>
            start += size;
c010d322:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d325:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d328:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d32b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d32e:	0f 82 62 ff ff ff    	jb     c010d296 <load_icode+0x3cb>
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d334:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d338:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d33b:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d33f:	0f b7 c0             	movzwl %ax,%eax
c010d342:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d345:	0f 87 77 fc ff ff    	ja     c010cfc2 <load_icode+0xf7>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010d34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d34e:	89 04 24             	mov    %eax,(%esp)
c010d351:	e8 d6 e3 ff ff       	call   c010b72c <sysfile_close>

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d356:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d35d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d364:	00 
c010d365:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d368:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d36c:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d373:	00 
c010d374:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d37b:	af 
c010d37c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d37f:	89 04 24             	mov    %eax,(%esp)
c010d382:	e8 c8 b0 ff ff       	call   c010844f <mm_map>
c010d387:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d38a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d38e:	74 05                	je     c010d395 <load_icode+0x4ca>
        goto bad_cleanup_mmap;
c010d390:	e9 3d 03 00 00       	jmp    c010d6d2 <load_icode+0x807>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d395:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d398:	8b 40 0c             	mov    0xc(%eax),%eax
c010d39b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d3a2:	00 
c010d3a3:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d3aa:	af 
c010d3ab:	89 04 24             	mov    %eax,(%esp)
c010d3ae:	e8 bf 8c ff ff       	call   c0106072 <pgdir_alloc_page>
c010d3b3:	85 c0                	test   %eax,%eax
c010d3b5:	75 24                	jne    c010d3db <load_icode+0x510>
c010d3b7:	c7 44 24 0c 38 83 11 	movl   $0xc0118338,0xc(%esp)
c010d3be:	c0 
c010d3bf:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010d3c6:	c0 
c010d3c7:	c7 44 24 04 de 02 00 	movl   $0x2de,0x4(%esp)
c010d3ce:	00 
c010d3cf:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d3d6:	e8 03 3b ff ff       	call   c0100ede <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d3db:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d3de:	8b 40 0c             	mov    0xc(%eax),%eax
c010d3e1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d3e8:	00 
c010d3e9:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d3f0:	af 
c010d3f1:	89 04 24             	mov    %eax,(%esp)
c010d3f4:	e8 79 8c ff ff       	call   c0106072 <pgdir_alloc_page>
c010d3f9:	85 c0                	test   %eax,%eax
c010d3fb:	75 24                	jne    c010d421 <load_icode+0x556>
c010d3fd:	c7 44 24 0c 7c 83 11 	movl   $0xc011837c,0xc(%esp)
c010d404:	c0 
c010d405:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010d40c:	c0 
c010d40d:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
c010d414:	00 
c010d415:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d41c:	e8 bd 3a ff ff       	call   c0100ede <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d421:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d424:	8b 40 0c             	mov    0xc(%eax),%eax
c010d427:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d42e:	00 
c010d42f:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d436:	af 
c010d437:	89 04 24             	mov    %eax,(%esp)
c010d43a:	e8 33 8c ff ff       	call   c0106072 <pgdir_alloc_page>
c010d43f:	85 c0                	test   %eax,%eax
c010d441:	75 24                	jne    c010d467 <load_icode+0x59c>
c010d443:	c7 44 24 0c c0 83 11 	movl   $0xc01183c0,0xc(%esp)
c010d44a:	c0 
c010d44b:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010d452:	c0 
c010d453:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
c010d45a:	00 
c010d45b:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d462:	e8 77 3a ff ff       	call   c0100ede <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d467:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d46a:	8b 40 0c             	mov    0xc(%eax),%eax
c010d46d:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d474:	00 
c010d475:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d47c:	af 
c010d47d:	89 04 24             	mov    %eax,(%esp)
c010d480:	e8 ed 8b ff ff       	call   c0106072 <pgdir_alloc_page>
c010d485:	85 c0                	test   %eax,%eax
c010d487:	75 24                	jne    c010d4ad <load_icode+0x5e2>
c010d489:	c7 44 24 0c 04 84 11 	movl   $0xc0118404,0xc(%esp)
c010d490:	c0 
c010d491:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010d498:	c0 
c010d499:	c7 44 24 04 e1 02 00 	movl   $0x2e1,0x4(%esp)
c010d4a0:	00 
c010d4a1:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d4a8:	e8 31 3a ff ff       	call   c0100ede <__panic>
    
    mm_count_inc(mm);
c010d4ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d4b0:	89 04 24             	mov    %eax,(%esp)
c010d4b3:	e8 fa ea ff ff       	call   c010bfb2 <mm_count_inc>
    current->mm = mm;
c010d4b8:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d4bd:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d4c0:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d4c3:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d4c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d4cb:	8b 52 0c             	mov    0xc(%edx),%edx
c010d4ce:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d4d1:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d4d8:	77 23                	ja     c010d4fd <load_icode+0x632>
c010d4da:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d4dd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d4e1:	c7 44 24 08 f0 81 11 	movl   $0xc01181f0,0x8(%esp)
c010d4e8:	c0 
c010d4e9:	c7 44 24 04 e5 02 00 	movl   $0x2e5,0x4(%esp)
c010d4f0:	00 
c010d4f1:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d4f8:	e8 e1 39 ff ff       	call   c0100ede <__panic>
c010d4fd:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d500:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d506:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d509:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d50c:	8b 40 0c             	mov    0xc(%eax),%eax
c010d50f:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d512:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d519:	77 23                	ja     c010d53e <load_icode+0x673>
c010d51b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d51e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d522:	c7 44 24 08 f0 81 11 	movl   $0xc01181f0,0x8(%esp)
c010d529:	c0 
c010d52a:	c7 44 24 04 e6 02 00 	movl   $0x2e6,0x4(%esp)
c010d531:	00 
c010d532:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010d539:	e8 a0 39 ff ff       	call   c0100ede <__panic>
c010d53e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d541:	05 00 00 00 40       	add    $0x40000000,%eax
c010d546:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d549:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d54c:	0f 22 d8             	mov    %eax,%cr3

    //setup argc, argv
    uint32_t argv_size=0, i;
c010d54f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d556:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d55d:	eb 30                	jmp    c010d58f <load_icode+0x6c4>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d55f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d562:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d569:	8b 45 10             	mov    0x10(%ebp),%eax
c010d56c:	01 d0                	add    %edx,%eax
c010d56e:	8b 00                	mov    (%eax),%eax
c010d570:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d577:	00 
c010d578:	89 04 24             	mov    %eax,(%esp)
c010d57b:	e8 b9 7d 00 00       	call   c0115339 <strnlen>
c010d580:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d583:	01 d0                	add    %edx,%eax
c010d585:	83 c0 01             	add    $0x1,%eax
c010d588:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //setup argc, argv
    uint32_t argv_size=0, i;
    for (i = 0; i < argc; i ++) {
c010d58b:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d58f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d592:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d595:	77 c8                	ja     c010d55f <load_icode+0x694>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010d597:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d59a:	c1 e8 02             	shr    $0x2,%eax
c010d59d:	89 c2                	mov    %eax,%edx
c010d59f:	b8 00 00 00 00       	mov    $0x0,%eax
c010d5a4:	29 d0                	sub    %edx,%eax
c010d5a6:	c1 e0 02             	shl    $0x2,%eax
c010d5a9:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d5ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010d5b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5bb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d5be:	29 d0                	sub    %edx,%eax
c010d5c0:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    argv_size = 0;
c010d5c3:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d5ca:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d5d1:	eb 67                	jmp    c010d63a <load_icode+0x76f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010d5d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d5d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5dd:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d5e0:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d5e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d5e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5ed:	8b 45 10             	mov    0x10(%ebp),%eax
c010d5f0:	01 d0                	add    %edx,%eax
c010d5f2:	8b 10                	mov    (%eax),%edx
c010d5f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d5f7:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d5fa:	01 c8                	add    %ecx,%eax
c010d5fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d600:	89 04 24             	mov    %eax,(%esp)
c010d603:	e8 88 7d 00 00       	call   c0115390 <strcpy>
c010d608:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d60a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d60d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d614:	8b 45 10             	mov    0x10(%ebp),%eax
c010d617:	01 d0                	add    %edx,%eax
c010d619:	8b 00                	mov    (%eax),%eax
c010d61b:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d622:	00 
c010d623:	89 04 24             	mov    %eax,(%esp)
c010d626:	e8 0e 7d 00 00       	call   c0115339 <strnlen>
c010d62b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d62e:	01 d0                	add    %edx,%eax
c010d630:	83 c0 01             	add    $0x1,%eax
c010d633:	89 45 d0             	mov    %eax,-0x30(%ebp)

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
    
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c010d636:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d63a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d63d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d640:	77 91                	ja     c010d5d3 <load_icode+0x708>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }
    
    stacktop = (uintptr_t)uargv - sizeof(int);
c010d642:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d645:	83 e8 04             	sub    $0x4,%eax
c010d648:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010d64b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d64e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d651:	89 10                	mov    %edx,(%eax)
    
    struct trapframe *tf = current->tf;
c010d653:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d658:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d65b:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d65e:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d665:	00 
c010d666:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d66d:	00 
c010d66e:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d671:	89 04 24             	mov    %eax,(%esp)
c010d674:	e8 ee 7f 00 00       	call   c0115667 <memset>
    tf->tf_cs = USER_CS;
c010d679:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d67c:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d682:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d685:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d68b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d68e:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d692:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d695:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d699:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d69c:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d6a0:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d6a3:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d6a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d6aa:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d6ad:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d6b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d6b3:	8b 50 18             	mov    0x18(%eax),%edx
c010d6b6:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d6b9:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d6bc:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d6bf:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d6c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010d6cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6d0:	eb 23                	jmp    c010d6f5 <load_icode+0x82a>
bad_cleanup_mmap:
    exit_mmap(mm);
c010d6d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d6d5:	89 04 24             	mov    %eax,(%esp)
c010d6d8:	e8 8f af ff ff       	call   c010866c <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d6dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d6e0:	89 04 24             	mov    %eax,(%esp)
c010d6e3:	e8 27 f1 ff ff       	call   c010c80f <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d6e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d6eb:	89 04 24             	mov    %eax,(%esp)
c010d6ee:	e8 ba ac ff ff       	call   c01083ad <mm_destroy>
bad_mm:
    goto out;
c010d6f3:	eb d8                	jmp    c010d6cd <load_icode+0x802>
}
c010d6f5:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d6fb:	5b                   	pop    %ebx
c010d6fc:	5d                   	pop    %ebp
c010d6fd:	c3                   	ret    

c010d6fe <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d6fe:	55                   	push   %ebp
c010d6ff:	89 e5                	mov    %esp,%ebp
c010d701:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d704:	eb 1d                	jmp    c010d723 <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d706:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d70a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d70d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d714:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d717:	01 d0                	add    %edx,%eax
c010d719:	8b 00                	mov    (%eax),%eax
c010d71b:	89 04 24             	mov    %eax,(%esp)
c010d71e:	e8 a7 76 ff ff       	call   c0104dca <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d723:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d727:	7f dd                	jg     c010d706 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d729:	c9                   	leave  
c010d72a:	c3                   	ret    

c010d72b <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d72b:	55                   	push   %ebp
c010d72c:	89 e5                	mov    %esp,%ebp
c010d72e:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d731:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d738:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d73b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d742:	8b 45 14             	mov    0x14(%ebp),%eax
c010d745:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d74c:	00 
c010d74d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d751:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d755:	8b 45 08             	mov    0x8(%ebp),%eax
c010d758:	89 04 24             	mov    %eax,(%esp)
c010d75b:	e8 ef b9 ff ff       	call   c010914f <user_mem_check>
c010d760:	85 c0                	test   %eax,%eax
c010d762:	75 08                	jne    c010d76c <copy_kargv+0x41>
        return ret;
c010d764:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d767:	e9 a4 00 00 00       	jmp    c010d810 <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d76c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d773:	eb 77                	jmp    c010d7ec <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d775:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d77c:	e8 2e 76 ff ff       	call   c0104daf <kmalloc>
c010d781:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d784:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d788:	75 0a                	jne    c010d794 <copy_kargv+0x69>
            goto failed_nomem;
c010d78a:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d78b:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d792:	eb 67                	jmp    c010d7fb <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d794:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d797:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d79e:	8b 45 14             	mov    0x14(%ebp),%eax
c010d7a1:	01 d0                	add    %edx,%eax
c010d7a3:	8b 00                	mov    (%eax),%eax
c010d7a5:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d7ac:	00 
c010d7ad:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d7b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7bb:	89 04 24             	mov    %eax,(%esp)
c010d7be:	e8 af ba ff ff       	call   c0109272 <copy_string>
c010d7c3:	85 c0                	test   %eax,%eax
c010d7c5:	75 0d                	jne    c010d7d4 <copy_kargv+0xa9>
            kfree(buffer);
c010d7c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d7ca:	89 04 24             	mov    %eax,(%esp)
c010d7cd:	e8 f8 75 ff ff       	call   c0104dca <kfree>
            goto failed_cleanup;
c010d7d2:	eb 27                	jmp    c010d7fb <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d7d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7d7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d7de:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7e1:	01 c2                	add    %eax,%edx
c010d7e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d7e6:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d7e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d7ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d7f2:	7c 81                	jl     c010d775 <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d7f4:	b8 00 00 00 00       	mov    $0x0,%eax
c010d7f9:	eb 15                	jmp    c010d810 <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d7fb:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d802:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d805:	89 04 24             	mov    %eax,(%esp)
c010d808:	e8 f1 fe ff ff       	call   c010d6fe <put_kargv>
    return ret;
c010d80d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d810:	c9                   	leave  
c010d811:	c3                   	ret    

c010d812 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d812:	55                   	push   %ebp
c010d813:	89 e5                	mov    %esp,%ebp
c010d815:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d81b:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d820:	8b 40 18             	mov    0x18(%eax),%eax
c010d823:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d826:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d82a:	7e 06                	jle    c010d832 <do_execve+0x20>
c010d82c:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d830:	7e 0a                	jle    c010d83c <do_execve+0x2a>
        return -E_INVAL;
c010d832:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d837:	e9 11 02 00 00       	jmp    c010da4d <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d83c:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d843:	00 
c010d844:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d84b:	00 
c010d84c:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d84f:	89 04 24             	mov    %eax,(%esp)
c010d852:	e8 10 7e 00 00       	call   c0115667 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d857:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d85e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d861:	89 04 24             	mov    %eax,(%esp)
c010d864:	e8 7d e7 ff ff       	call   c010bfe6 <lock_mm>
    if (name == NULL) {
c010d869:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d86d:	75 29                	jne    c010d898 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d86f:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d874:	8b 40 04             	mov    0x4(%eax),%eax
c010d877:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d87b:	c7 44 24 08 47 84 11 	movl   $0xc0118447,0x8(%esp)
c010d882:	c0 
c010d883:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d88a:	00 
c010d88b:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d88e:	89 04 24             	mov    %eax,(%esp)
c010d891:	e8 03 79 00 00       	call   c0115199 <snprintf>
c010d896:	eb 38                	jmp    c010d8d0 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d898:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d89f:	00 
c010d8a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8a3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d8a7:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d8aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8b1:	89 04 24             	mov    %eax,(%esp)
c010d8b4:	e8 b9 b9 ff ff       	call   c0109272 <copy_string>
c010d8b9:	85 c0                	test   %eax,%eax
c010d8bb:	75 13                	jne    c010d8d0 <do_execve+0xbe>
            unlock_mm(mm);
c010d8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8c0:	89 04 24             	mov    %eax,(%esp)
c010d8c3:	e8 51 e7 ff ff       	call   c010c019 <unlock_mm>
            return ret;
c010d8c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8cb:	e9 7d 01 00 00       	jmp    c010da4d <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d8d0:	8b 45 10             	mov    0x10(%ebp),%eax
c010d8d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d8d7:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d8dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d8e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8eb:	89 04 24             	mov    %eax,(%esp)
c010d8ee:	e8 38 fe ff ff       	call   c010d72b <copy_kargv>
c010d8f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8fa:	74 13                	je     c010d90f <do_execve+0xfd>
        unlock_mm(mm);
c010d8fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8ff:	89 04 24             	mov    %eax,(%esp)
c010d902:	e8 12 e7 ff ff       	call   c010c019 <unlock_mm>
        return ret;
c010d907:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d90a:	e9 3e 01 00 00       	jmp    c010da4d <do_execve+0x23b>
    }
    path = argv[0];
c010d90f:	8b 45 10             	mov    0x10(%ebp),%eax
c010d912:	8b 00                	mov    (%eax),%eax
c010d914:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d917:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d91a:	89 04 24             	mov    %eax,(%esp)
c010d91d:	e8 f7 e6 ff ff       	call   c010c019 <unlock_mm>
    files_closeall(current->filesp);
c010d922:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d927:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d92d:	89 04 24             	mov    %eax,(%esp)
c010d930:	e8 9c d9 ff ff       	call   c010b2d1 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d935:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d93c:	00 
c010d93d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d940:	89 04 24             	mov    %eax,(%esp)
c010d943:	e8 99 dd ff ff       	call   c010b6e1 <sysfile_open>
c010d948:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d94b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d94e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d951:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d955:	79 05                	jns    c010d95c <do_execve+0x14a>
        goto execve_exit;
c010d957:	e9 ae 00 00 00       	jmp    c010da0a <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d95c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d960:	74 4a                	je     c010d9ac <do_execve+0x19a>
        lcr3(boot_cr3);
c010d962:	a1 44 61 15 c0       	mov    0xc0156144,%eax
c010d967:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d96a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d96d:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d970:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d973:	89 04 24             	mov    %eax,(%esp)
c010d976:	e8 51 e6 ff ff       	call   c010bfcc <mm_count_dec>
c010d97b:	85 c0                	test   %eax,%eax
c010d97d:	75 21                	jne    c010d9a0 <do_execve+0x18e>
            exit_mmap(mm);
c010d97f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d982:	89 04 24             	mov    %eax,(%esp)
c010d985:	e8 e2 ac ff ff       	call   c010866c <exit_mmap>
            put_pgdir(mm);
c010d98a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d98d:	89 04 24             	mov    %eax,(%esp)
c010d990:	e8 7a ee ff ff       	call   c010c80f <put_pgdir>
            mm_destroy(mm);
c010d995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d998:	89 04 24             	mov    %eax,(%esp)
c010d99b:	e8 0d aa ff ff       	call   c01083ad <mm_destroy>
        }
        current->mm = NULL;
c010d9a0:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d9a5:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d9ac:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d9b3:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d9b9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d9bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d9c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9c7:	89 04 24             	mov    %eax,(%esp)
c010d9ca:	e8 fc f4 ff ff       	call   c010cecb <load_icode>
c010d9cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d9d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d9d6:	74 02                	je     c010d9da <do_execve+0x1c8>
        goto execve_exit;
c010d9d8:	eb 30                	jmp    c010da0a <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d9da:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d9e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d9e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9e7:	89 04 24             	mov    %eax,(%esp)
c010d9ea:	e8 0f fd ff ff       	call   c010d6fe <put_kargv>
    set_proc_name(current, local_name);
c010d9ef:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010d9f4:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d9f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d9fb:	89 04 24             	mov    %eax,(%esp)
c010d9fe:	e8 04 e8 ff ff       	call   c010c207 <set_proc_name>
    return 0;
c010da03:	b8 00 00 00 00       	mov    $0x0,%eax
c010da08:	eb 43                	jmp    c010da4d <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010da0a:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010da10:	89 44 24 04          	mov    %eax,0x4(%esp)
c010da14:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da17:	89 04 24             	mov    %eax,(%esp)
c010da1a:	e8 df fc ff ff       	call   c010d6fe <put_kargv>
    do_exit(ret);
c010da1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da22:	89 04 24             	mov    %eax,(%esp)
c010da25:	e8 32 f2 ff ff       	call   c010cc5c <do_exit>
    panic("already exit: %e.\n", ret);
c010da2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010da31:	c7 44 24 08 51 84 11 	movl   $0xc0118451,0x8(%esp)
c010da38:	c0 
c010da39:	c7 44 24 04 6d 03 00 	movl   $0x36d,0x4(%esp)
c010da40:	00 
c010da41:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010da48:	e8 91 34 ff ff       	call   c0100ede <__panic>
}
c010da4d:	c9                   	leave  
c010da4e:	c3                   	ret    

c010da4f <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010da4f:	55                   	push   %ebp
c010da50:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010da52:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010da57:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010da5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010da63:	5d                   	pop    %ebp
c010da64:	c3                   	ret    

c010da65 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010da65:	55                   	push   %ebp
c010da66:	89 e5                	mov    %esp,%ebp
c010da68:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010da6b:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010da70:	8b 40 18             	mov    0x18(%eax),%eax
c010da73:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010da76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010da7a:	74 30                	je     c010daac <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010da7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da7f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010da86:	00 
c010da87:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010da8e:	00 
c010da8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010da93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da96:	89 04 24             	mov    %eax,(%esp)
c010da99:	e8 b1 b6 ff ff       	call   c010914f <user_mem_check>
c010da9e:	85 c0                	test   %eax,%eax
c010daa0:	75 0a                	jne    c010daac <do_wait+0x47>
            return -E_INVAL;
c010daa2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010daa7:	e9 57 01 00 00       	jmp    c010dc03 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010daac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010dab3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dab7:	74 39                	je     c010daf2 <do_wait+0x8d>
        proc = find_proc(pid);
c010dab9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dabc:	89 04 24             	mov    %eax,(%esp)
c010dabf:	e8 5c eb ff ff       	call   c010c620 <find_proc>
c010dac4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010dac7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dacb:	74 5a                	je     c010db27 <do_wait+0xc2>
c010dacd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dad0:	8b 50 14             	mov    0x14(%eax),%edx
c010dad3:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010dad8:	39 c2                	cmp    %eax,%edx
c010dada:	75 4b                	jne    c010db27 <do_wait+0xc2>
            haskid = 1;
c010dadc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010dae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dae6:	8b 00                	mov    (%eax),%eax
c010dae8:	83 f8 03             	cmp    $0x3,%eax
c010daeb:	75 3a                	jne    c010db27 <do_wait+0xc2>
                goto found;
c010daed:	e9 89 00 00 00       	jmp    c010db7b <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010daf2:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010daf7:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dafd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010db00:	eb 1f                	jmp    c010db21 <do_wait+0xbc>
            haskid = 1;
c010db02:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010db09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db0c:	8b 00                	mov    (%eax),%eax
c010db0e:	83 f8 03             	cmp    $0x3,%eax
c010db11:	75 02                	jne    c010db15 <do_wait+0xb0>
                goto found;
c010db13:	eb 66                	jmp    c010db7b <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010db15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db18:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010db1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010db21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010db25:	75 db                	jne    c010db02 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010db27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010db2b:	74 44                	je     c010db71 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010db2d:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010db32:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010db38:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010db3d:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010db44:	00 00 80 
        schedule();
c010db47:	e8 56 0c 00 00       	call   c010e7a2 <schedule>
        if (current->flags & PF_EXITING) {
c010db4c:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010db51:	8b 40 44             	mov    0x44(%eax),%eax
c010db54:	83 e0 01             	and    $0x1,%eax
c010db57:	85 c0                	test   %eax,%eax
c010db59:	74 11                	je     c010db6c <do_wait+0x107>
            do_exit(-E_KILLED);
c010db5b:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010db62:	e8 f5 f0 ff ff       	call   c010cc5c <do_exit>
        }
        goto repeat;
c010db67:	e9 40 ff ff ff       	jmp    c010daac <do_wait+0x47>
c010db6c:	e9 3b ff ff ff       	jmp    c010daac <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010db71:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010db76:	e9 88 00 00 00       	jmp    c010dc03 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010db7b:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010db80:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010db83:	74 0a                	je     c010db8f <do_wait+0x12a>
c010db85:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010db8a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010db8d:	75 1c                	jne    c010dbab <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010db8f:	c7 44 24 08 64 84 11 	movl   $0xc0118464,0x8(%esp)
c010db96:	c0 
c010db97:	c7 44 24 04 a6 03 00 	movl   $0x3a6,0x4(%esp)
c010db9e:	00 
c010db9f:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010dba6:	e8 33 33 ff ff       	call   c0100ede <__panic>
    }
    if (code_store != NULL) {
c010dbab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dbaf:	74 0e                	je     c010dbbf <do_wait+0x15a>
        *code_store = proc->exit_code;
c010dbb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbb4:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010dbba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dbbd:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010dbbf:	e8 a4 e2 ff ff       	call   c010be68 <__intr_save>
c010dbc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010dbc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbca:	89 04 24             	mov    %eax,(%esp)
c010dbcd:	e8 19 ea ff ff       	call   c010c5eb <unhash_proc>
        remove_links(proc);
c010dbd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbd5:	89 04 24             	mov    %eax,(%esp)
c010dbd8:	e8 69 e7 ff ff       	call   c010c346 <remove_links>
    }
    local_intr_restore(intr_flag);
c010dbdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dbe0:	89 04 24             	mov    %eax,(%esp)
c010dbe3:	e8 aa e2 ff ff       	call   c010be92 <__intr_restore>
    put_kstack(proc);
c010dbe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbeb:	89 04 24             	mov    %eax,(%esp)
c010dbee:	e8 4f eb ff ff       	call   c010c742 <put_kstack>
    kfree(proc);
c010dbf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbf6:	89 04 24             	mov    %eax,(%esp)
c010dbf9:	e8 cc 71 ff ff       	call   c0104dca <kfree>
    return 0;
c010dbfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dc03:	c9                   	leave  
c010dc04:	c3                   	ret    

c010dc05 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010dc05:	55                   	push   %ebp
c010dc06:	89 e5                	mov    %esp,%ebp
c010dc08:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010dc0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc0e:	89 04 24             	mov    %eax,(%esp)
c010dc11:	e8 0a ea ff ff       	call   c010c620 <find_proc>
c010dc16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dc19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dc1d:	74 44                	je     c010dc63 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010dc1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc22:	8b 40 44             	mov    0x44(%eax),%eax
c010dc25:	83 e0 01             	and    $0x1,%eax
c010dc28:	85 c0                	test   %eax,%eax
c010dc2a:	75 30                	jne    c010dc5c <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010dc2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc2f:	8b 40 44             	mov    0x44(%eax),%eax
c010dc32:	83 c8 01             	or     $0x1,%eax
c010dc35:	89 c2                	mov    %eax,%edx
c010dc37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc3a:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010dc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc40:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dc46:	85 c0                	test   %eax,%eax
c010dc48:	79 0b                	jns    c010dc55 <do_kill+0x50>
                wakeup_proc(proc);
c010dc4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc4d:	89 04 24             	mov    %eax,(%esp)
c010dc50:	e8 b1 0a 00 00       	call   c010e706 <wakeup_proc>
            }
            return 0;
c010dc55:	b8 00 00 00 00       	mov    $0x0,%eax
c010dc5a:	eb 0c                	jmp    c010dc68 <do_kill+0x63>
        }
        return -E_KILLED;
c010dc5c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010dc61:	eb 05                	jmp    c010dc68 <do_kill+0x63>
    }
    return -E_INVAL;
c010dc63:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010dc68:	c9                   	leave  
c010dc69:	c3                   	ret    

c010dc6a <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010dc6a:	55                   	push   %ebp
c010dc6b:	89 e5                	mov    %esp,%ebp
c010dc6d:	53                   	push   %ebx
c010dc6e:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010dc71:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010dc78:	eb 04                	jmp    c010dc7e <kernel_execve+0x14>
        argc ++;
c010dc7a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010dc7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dc81:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dc88:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc8b:	01 d0                	add    %edx,%eax
c010dc8d:	8b 00                	mov    (%eax),%eax
c010dc8f:	85 c0                	test   %eax,%eax
c010dc91:	75 e7                	jne    c010dc7a <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010dc93:	b8 04 00 00 00       	mov    $0x4,%eax
c010dc98:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc9b:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010dc9e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010dca1:	cd 80                	int    $0x80
c010dca3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010dca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dca9:	83 c4 10             	add    $0x10,%esp
c010dcac:	5b                   	pop    %ebx
c010dcad:	5d                   	pop    %ebp
c010dcae:	c3                   	ret    

c010dcaf <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010dcaf:	55                   	push   %ebp
c010dcb0:	89 e5                	mov    %esp,%ebp
c010dcb2:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010dcb5:	c7 45 f0 80 84 11 c0 	movl   $0xc0118480,-0x10(%ebp)
c010dcbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dcc3:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010dcc8:	8b 40 04             	mov    0x4(%eax),%eax
c010dccb:	c7 44 24 08 80 84 11 	movl   $0xc0118480,0x8(%esp)
c010dcd2:	c0 
c010dcd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dcd7:	c7 04 24 84 84 11 c0 	movl   $0xc0118484,(%esp)
c010dcde:	e8 8e 26 ff ff       	call   c0100371 <cprintf>
c010dce3:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dce6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dcea:	c7 04 24 80 84 11 c0 	movl   $0xc0118480,(%esp)
c010dcf1:	e8 74 ff ff ff       	call   c010dc6a <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010dcf6:	c7 44 24 08 ab 84 11 	movl   $0xc01184ab,0x8(%esp)
c010dcfd:	c0 
c010dcfe:	c7 44 24 04 f1 03 00 	movl   $0x3f1,0x4(%esp)
c010dd05:	00 
c010dd06:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010dd0d:	e8 cc 31 ff ff       	call   c0100ede <__panic>

c010dd12 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010dd12:	55                   	push   %ebp
c010dd13:	89 e5                	mov    %esp,%ebp
c010dd15:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010dd18:	c7 04 24 c5 84 11 c0 	movl   $0xc01184c5,(%esp)
c010dd1f:	e8 83 18 00 00       	call   c010f5a7 <vfs_set_bootfs>
c010dd24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dd27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dd2b:	74 23                	je     c010dd50 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010dd2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd30:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dd34:	c7 44 24 08 cc 84 11 	movl   $0xc01184cc,0x8(%esp)
c010dd3b:	c0 
c010dd3c:	c7 44 24 04 f9 03 00 	movl   $0x3f9,0x4(%esp)
c010dd43:	00 
c010dd44:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010dd4b:	e8 8e 31 ff ff       	call   c0100ede <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010dd50:	e8 6c 75 ff ff       	call   c01052c1 <nr_free_pages>
c010dd55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010dd58:	e8 35 6f ff ff       	call   c0104c92 <kallocated>
c010dd5d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010dd60:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dd67:	00 
c010dd68:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dd6f:	00 
c010dd70:	c7 04 24 af dc 10 c0 	movl   $0xc010dcaf,(%esp)
c010dd77:	e8 18 e9 ff ff       	call   c010c694 <kernel_thread>
c010dd7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010dd7f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dd83:	7f 1c                	jg     c010dda1 <init_main+0x8f>
        panic("create user_main failed.\n");
c010dd85:	c7 44 24 08 e5 84 11 	movl   $0xc01184e5,0x8(%esp)
c010dd8c:	c0 
c010dd8d:	c7 44 24 04 01 04 00 	movl   $0x401,0x4(%esp)
c010dd94:	00 
c010dd95:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010dd9c:	e8 3d 31 ff ff       	call   c0100ede <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dda1:	e8 9e ba ff ff       	call   c0109844 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dda6:	eb 05                	jmp    c010ddad <init_main+0x9b>
        schedule();
c010dda8:	e8 f5 09 00 00       	call   c010e7a2 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010ddad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ddb4:	00 
c010ddb5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ddbc:	e8 a4 fc ff ff       	call   c010da65 <do_wait>
c010ddc1:	85 c0                	test   %eax,%eax
c010ddc3:	74 e3                	je     c010dda8 <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010ddc5:	e8 a3 d3 ff ff       	call   c010b16d <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010ddca:	c7 04 24 00 85 11 c0 	movl   $0xc0118500,(%esp)
c010ddd1:	e8 9b 25 ff ff       	call   c0100371 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010ddd6:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010dddb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dde1:	85 c0                	test   %eax,%eax
c010dde3:	75 1e                	jne    c010de03 <init_main+0xf1>
c010dde5:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010ddea:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010ddf0:	85 c0                	test   %eax,%eax
c010ddf2:	75 0f                	jne    c010de03 <init_main+0xf1>
c010ddf4:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010ddf9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010ddff:	85 c0                	test   %eax,%eax
c010de01:	74 24                	je     c010de27 <init_main+0x115>
c010de03:	c7 44 24 0c 24 85 11 	movl   $0xc0118524,0xc(%esp)
c010de0a:	c0 
c010de0b:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010de12:	c0 
c010de13:	c7 44 24 04 0d 04 00 	movl   $0x40d,0x4(%esp)
c010de1a:	00 
c010de1b:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010de22:	e8 b7 30 ff ff       	call   c0100ede <__panic>
    assert(nr_process == 2);
c010de27:	a1 60 50 15 c0       	mov    0xc0155060,%eax
c010de2c:	83 f8 02             	cmp    $0x2,%eax
c010de2f:	74 24                	je     c010de55 <init_main+0x143>
c010de31:	c7 44 24 0c 6f 85 11 	movl   $0xc011856f,0xc(%esp)
c010de38:	c0 
c010de39:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010de40:	c0 
c010de41:	c7 44 24 04 0e 04 00 	movl   $0x40e,0x4(%esp)
c010de48:	00 
c010de49:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010de50:	e8 89 30 ff ff       	call   c0100ede <__panic>
c010de55:	c7 45 e4 1c 63 15 c0 	movl   $0xc015631c,-0x1c(%ebp)
c010de5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010de5f:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010de62:	8b 15 44 30 15 c0    	mov    0xc0153044,%edx
c010de68:	83 c2 7c             	add    $0x7c,%edx
c010de6b:	39 d0                	cmp    %edx,%eax
c010de6d:	74 24                	je     c010de93 <init_main+0x181>
c010de6f:	c7 44 24 0c 80 85 11 	movl   $0xc0118580,0xc(%esp)
c010de76:	c0 
c010de77:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010de7e:	c0 
c010de7f:	c7 44 24 04 0f 04 00 	movl   $0x40f,0x4(%esp)
c010de86:	00 
c010de87:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010de8e:	e8 4b 30 ff ff       	call   c0100ede <__panic>
c010de93:	c7 45 e0 1c 63 15 c0 	movl   $0xc015631c,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010de9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010de9d:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010de9f:	8b 15 44 30 15 c0    	mov    0xc0153044,%edx
c010dea5:	83 c2 7c             	add    $0x7c,%edx
c010dea8:	39 d0                	cmp    %edx,%eax
c010deaa:	74 24                	je     c010ded0 <init_main+0x1be>
c010deac:	c7 44 24 0c b0 85 11 	movl   $0xc01185b0,0xc(%esp)
c010deb3:	c0 
c010deb4:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010debb:	c0 
c010debc:	c7 44 24 04 10 04 00 	movl   $0x410,0x4(%esp)
c010dec3:	00 
c010dec4:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010decb:	e8 0e 30 ff ff       	call   c0100ede <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010ded0:	e8 ec 73 ff ff       	call   c01052c1 <nr_free_pages>
c010ded5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ded8:	74 24                	je     c010defe <init_main+0x1ec>
c010deda:	c7 44 24 0c e0 85 11 	movl   $0xc01185e0,0xc(%esp)
c010dee1:	c0 
c010dee2:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010dee9:	c0 
c010deea:	c7 44 24 04 11 04 00 	movl   $0x411,0x4(%esp)
c010def1:	00 
c010def2:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010def9:	e8 e0 2f ff ff       	call   c0100ede <__panic>
    assert(kernel_allocated_store == kallocated());
c010defe:	e8 8f 6d ff ff       	call   c0104c92 <kallocated>
c010df03:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010df06:	74 24                	je     c010df2c <init_main+0x21a>
c010df08:	c7 44 24 0c 08 86 11 	movl   $0xc0118608,0xc(%esp)
c010df0f:	c0 
c010df10:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010df17:	c0 
c010df18:	c7 44 24 04 12 04 00 	movl   $0x412,0x4(%esp)
c010df1f:	00 
c010df20:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010df27:	e8 b2 2f ff ff       	call   c0100ede <__panic>
    cprintf("init check memory pass.\n");
c010df2c:	c7 04 24 2f 86 11 c0 	movl   $0xc011862f,(%esp)
c010df33:	e8 39 24 ff ff       	call   c0100371 <cprintf>
    return 0;
c010df38:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010df3d:	c9                   	leave  
c010df3e:	c3                   	ret    

c010df3f <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010df3f:	55                   	push   %ebp
c010df40:	89 e5                	mov    %esp,%ebp
c010df42:	53                   	push   %ebx
c010df43:	83 ec 24             	sub    $0x24,%esp
c010df46:	c7 45 ec 1c 63 15 c0 	movl   $0xc015631c,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010df4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df50:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010df53:	89 50 04             	mov    %edx,0x4(%eax)
c010df56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df59:	8b 50 04             	mov    0x4(%eax),%edx
c010df5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df5f:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010df61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010df68:	eb 26                	jmp    c010df90 <proc_init+0x51>
        list_init(hash_list + i);
c010df6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df6d:	c1 e0 03             	shl    $0x3,%eax
c010df70:	05 60 30 15 c0       	add    $0xc0153060,%eax
c010df75:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010df78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df7b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010df7e:	89 50 04             	mov    %edx,0x4(%eax)
c010df81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df84:	8b 50 04             	mov    0x4(%eax),%edx
c010df87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df8a:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010df8c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010df90:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010df97:	7e d1                	jle    c010df6a <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010df99:	e8 d5 e0 ff ff       	call   c010c073 <alloc_proc>
c010df9e:	a3 40 30 15 c0       	mov    %eax,0xc0153040
c010dfa3:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010dfa8:	85 c0                	test   %eax,%eax
c010dfaa:	75 1c                	jne    c010dfc8 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010dfac:	c7 44 24 08 48 86 11 	movl   $0xc0118648,0x8(%esp)
c010dfb3:	c0 
c010dfb4:	c7 44 24 04 23 04 00 	movl   $0x423,0x4(%esp)
c010dfbb:	00 
c010dfbc:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010dfc3:	e8 16 2f ff ff       	call   c0100ede <__panic>
    }

    idleproc->pid = 0;
c010dfc8:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010dfcd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010dfd4:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010dfd9:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010dfdf:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010dfe4:	ba 00 d0 14 c0       	mov    $0xc014d000,%edx
c010dfe9:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010dfec:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010dff1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010dff8:	8b 1d 40 30 15 c0    	mov    0xc0153040,%ebx
c010dffe:	e8 a3 d1 ff ff       	call   c010b1a6 <files_create>
c010e003:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010e009:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010e00f:	85 c0                	test   %eax,%eax
c010e011:	75 1c                	jne    c010e02f <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010e013:	c7 44 24 08 60 86 11 	movl   $0xc0118660,0x8(%esp)
c010e01a:	c0 
c010e01b:	c7 44 24 04 2c 04 00 	movl   $0x42c,0x4(%esp)
c010e022:	00 
c010e023:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010e02a:	e8 af 2e ff ff       	call   c0100ede <__panic>
    }
    files_count_inc(idleproc->filesp);
c010e02f:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e034:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010e03a:	89 04 24             	mov    %eax,(%esp)
c010e03d:	e8 fd df ff ff       	call   c010c03f <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010e042:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e047:	c7 44 24 04 82 86 11 	movl   $0xc0118682,0x4(%esp)
c010e04e:	c0 
c010e04f:	89 04 24             	mov    %eax,(%esp)
c010e052:	e8 b0 e1 ff ff       	call   c010c207 <set_proc_name>
    nr_process ++;
c010e057:	a1 60 50 15 c0       	mov    0xc0155060,%eax
c010e05c:	83 c0 01             	add    $0x1,%eax
c010e05f:	a3 60 50 15 c0       	mov    %eax,0xc0155060

    current = idleproc;
c010e064:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e069:	a3 48 30 15 c0       	mov    %eax,0xc0153048

    int pid = kernel_thread(init_main, NULL, 0);
c010e06e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e075:	00 
c010e076:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e07d:	00 
c010e07e:	c7 04 24 12 dd 10 c0 	movl   $0xc010dd12,(%esp)
c010e085:	e8 0a e6 ff ff       	call   c010c694 <kernel_thread>
c010e08a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010e08d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e091:	7f 1c                	jg     c010e0af <proc_init+0x170>
        panic("create init_main failed.\n");
c010e093:	c7 44 24 08 87 86 11 	movl   $0xc0118687,0x8(%esp)
c010e09a:	c0 
c010e09b:	c7 44 24 04 37 04 00 	movl   $0x437,0x4(%esp)
c010e0a2:	00 
c010e0a3:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010e0aa:	e8 2f 2e ff ff       	call   c0100ede <__panic>
    }

    initproc = find_proc(pid);
c010e0af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e0b2:	89 04 24             	mov    %eax,(%esp)
c010e0b5:	e8 66 e5 ff ff       	call   c010c620 <find_proc>
c010e0ba:	a3 44 30 15 c0       	mov    %eax,0xc0153044
    set_proc_name(initproc, "init");
c010e0bf:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e0c4:	c7 44 24 04 a1 86 11 	movl   $0xc01186a1,0x4(%esp)
c010e0cb:	c0 
c010e0cc:	89 04 24             	mov    %eax,(%esp)
c010e0cf:	e8 33 e1 ff ff       	call   c010c207 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010e0d4:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e0d9:	85 c0                	test   %eax,%eax
c010e0db:	74 0c                	je     c010e0e9 <proc_init+0x1aa>
c010e0dd:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e0e2:	8b 40 04             	mov    0x4(%eax),%eax
c010e0e5:	85 c0                	test   %eax,%eax
c010e0e7:	74 24                	je     c010e10d <proc_init+0x1ce>
c010e0e9:	c7 44 24 0c a8 86 11 	movl   $0xc01186a8,0xc(%esp)
c010e0f0:	c0 
c010e0f1:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010e0f8:	c0 
c010e0f9:	c7 44 24 04 3d 04 00 	movl   $0x43d,0x4(%esp)
c010e100:	00 
c010e101:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010e108:	e8 d1 2d ff ff       	call   c0100ede <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010e10d:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e112:	85 c0                	test   %eax,%eax
c010e114:	74 0d                	je     c010e123 <proc_init+0x1e4>
c010e116:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e11b:	8b 40 04             	mov    0x4(%eax),%eax
c010e11e:	83 f8 01             	cmp    $0x1,%eax
c010e121:	74 24                	je     c010e147 <proc_init+0x208>
c010e123:	c7 44 24 0c d0 86 11 	movl   $0xc01186d0,0xc(%esp)
c010e12a:	c0 
c010e12b:	c7 44 24 08 3b 82 11 	movl   $0xc011823b,0x8(%esp)
c010e132:	c0 
c010e133:	c7 44 24 04 3e 04 00 	movl   $0x43e,0x4(%esp)
c010e13a:	00 
c010e13b:	c7 04 24 14 82 11 c0 	movl   $0xc0118214,(%esp)
c010e142:	e8 97 2d ff ff       	call   c0100ede <__panic>
}
c010e147:	83 c4 24             	add    $0x24,%esp
c010e14a:	5b                   	pop    %ebx
c010e14b:	5d                   	pop    %ebp
c010e14c:	c3                   	ret    

c010e14d <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010e14d:	55                   	push   %ebp
c010e14e:	89 e5                	mov    %esp,%ebp
c010e150:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010e153:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e158:	8b 40 10             	mov    0x10(%eax),%eax
c010e15b:	85 c0                	test   %eax,%eax
c010e15d:	74 07                	je     c010e166 <cpu_idle+0x19>
            schedule();
c010e15f:	e8 3e 06 00 00       	call   c010e7a2 <schedule>
        }
    }
c010e164:	eb ed                	jmp    c010e153 <cpu_idle+0x6>
c010e166:	eb eb                	jmp    c010e153 <cpu_idle+0x6>

c010e168 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010e168:	55                   	push   %ebp
c010e169:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010e16b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e16f:	75 11                	jne    c010e182 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010e171:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e176:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010e17d:	00 00 00 
c010e180:	eb 0e                	jmp    c010e190 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010e182:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e187:	8b 55 08             	mov    0x8(%ebp),%edx
c010e18a:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010e190:	5d                   	pop    %ebp
c010e191:	c3                   	ret    

c010e192 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010e192:	55                   	push   %ebp
c010e193:	89 e5                	mov    %esp,%ebp
c010e195:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010e198:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e19c:	75 07                	jne    c010e1a5 <do_sleep+0x13>
        return 0;
c010e19e:	b8 00 00 00 00       	mov    $0x0,%eax
c010e1a3:	eb 6b                	jmp    c010e210 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010e1a5:	e8 be dc ff ff       	call   c010be68 <__intr_save>
c010e1aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010e1ad:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1b0:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e1b5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e1b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1bd:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010e1c0:	89 04 24             	mov    %eax,(%esp)
c010e1c3:	e8 67 dc ff ff       	call   c010be2f <timer_init>
c010e1c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010e1cb:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e1d0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010e1d6:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e1db:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010e1e2:	00 00 80 
    add_timer(timer);
c010e1e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e1e8:	89 04 24             	mov    %eax,(%esp)
c010e1eb:	e8 3d 06 00 00       	call   c010e82d <add_timer>
    local_intr_restore(intr_flag);
c010e1f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1f3:	89 04 24             	mov    %eax,(%esp)
c010e1f6:	e8 97 dc ff ff       	call   c010be92 <__intr_restore>

    schedule();
c010e1fb:	e8 a2 05 00 00       	call   c010e7a2 <schedule>

    del_timer(timer);
c010e200:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e203:	89 04 24             	mov    %eax,(%esp)
c010e206:	e8 60 07 00 00       	call   c010e96b <del_timer>
    return 0;
c010e20b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e210:	c9                   	leave  
c010e211:	c3                   	ret    

c010e212 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010e212:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010e216:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010e218:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010e21b:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010e21e:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010e221:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010e224:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010e227:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010e22a:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010e22d:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010e231:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010e234:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010e237:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010e23a:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010e23d:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010e240:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010e243:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e246:	ff 30                	pushl  (%eax)

    ret
c010e248:	c3                   	ret    

c010e249 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e249:	55                   	push   %ebp
c010e24a:	89 e5                	mov    %esp,%ebp
c010e24c:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e24f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e253:	75 08                	jne    c010e25d <skew_heap_merge+0x14>
c010e255:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e258:	e9 bd 00 00 00       	jmp    c010e31a <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e25d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e261:	75 08                	jne    c010e26b <skew_heap_merge+0x22>
c010e263:	8b 45 08             	mov    0x8(%ebp),%eax
c010e266:	e9 af 00 00 00       	jmp    c010e31a <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e26b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e26e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e272:	8b 45 08             	mov    0x8(%ebp),%eax
c010e275:	89 04 24             	mov    %eax,(%esp)
c010e278:	8b 45 10             	mov    0x10(%ebp),%eax
c010e27b:	ff d0                	call   *%eax
c010e27d:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e280:	75 4d                	jne    c010e2cf <skew_heap_merge+0x86>
     {
          r = a->left;
c010e282:	8b 45 08             	mov    0x8(%ebp),%eax
c010e285:	8b 40 04             	mov    0x4(%eax),%eax
c010e288:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e28b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e28e:	8b 40 08             	mov    0x8(%eax),%eax
c010e291:	8b 55 10             	mov    0x10(%ebp),%edx
c010e294:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e298:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e29b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e29f:	89 04 24             	mov    %eax,(%esp)
c010e2a2:	e8 a2 ff ff ff       	call   c010e249 <skew_heap_merge>
c010e2a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e2aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e2b0:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e2b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e2b9:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e2bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e2c0:	74 08                	je     c010e2ca <skew_heap_merge+0x81>
c010e2c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2c5:	8b 55 08             	mov    0x8(%ebp),%edx
c010e2c8:	89 10                	mov    %edx,(%eax)

          return a;
c010e2ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2cd:	eb 4b                	jmp    c010e31a <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e2cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2d2:	8b 40 04             	mov    0x4(%eax),%eax
c010e2d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e2d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2db:	8b 40 08             	mov    0x8(%eax),%eax
c010e2de:	8b 55 10             	mov    0x10(%ebp),%edx
c010e2e1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e2e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e2e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2ec:	89 04 24             	mov    %eax,(%esp)
c010e2ef:	e8 55 ff ff ff       	call   c010e249 <skew_heap_merge>
c010e2f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e2f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e2fd:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e300:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e303:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e306:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e309:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e30d:	74 08                	je     c010e317 <skew_heap_merge+0xce>
c010e30f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e312:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e315:	89 10                	mov    %edx,(%eax)

          return b;
c010e317:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e31a:	c9                   	leave  
c010e31b:	c3                   	ret    

c010e31c <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e31c:	55                   	push   %ebp
c010e31d:	89 e5                	mov    %esp,%ebp
c010e31f:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e322:	8b 45 08             	mov    0x8(%ebp),%eax
c010e325:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e32a:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e32d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e330:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e335:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e338:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e33b:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e341:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e344:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e34a:	29 c2                	sub    %eax,%edx
c010e34c:	89 d0                	mov    %edx,%eax
c010e34e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e355:	7e 07                	jle    c010e35e <proc_stride_comp_f+0x42>
c010e357:	b8 01 00 00 00       	mov    $0x1,%eax
c010e35c:	eb 12                	jmp    c010e370 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e35e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e362:	75 07                	jne    c010e36b <proc_stride_comp_f+0x4f>
c010e364:	b8 00 00 00 00       	mov    $0x0,%eax
c010e369:	eb 05                	jmp    c010e370 <proc_stride_comp_f+0x54>
     else return -1;
c010e36b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e370:	c9                   	leave  
c010e371:	c3                   	ret    

c010e372 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e372:	55                   	push   %ebp
c010e373:	89 e5                	mov    %esp,%ebp
c010e375:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list));
c010e378:	8b 45 08             	mov    0x8(%ebp),%eax
c010e37b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e37e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e381:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e384:	89 50 04             	mov    %edx,0x4(%eax)
c010e387:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e38a:	8b 50 04             	mov    0x4(%eax),%edx
c010e38d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e390:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010e392:	8b 45 08             	mov    0x8(%ebp),%eax
c010e395:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010e39c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e39f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e3a6:	c9                   	leave  
c010e3a7:	c3                   	ret    

c010e3a8 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e3a8:	55                   	push   %ebp
c010e3a9:	89 e5                	mov    %esp,%ebp
c010e3ab:	83 ec 28             	sub    $0x28,%esp
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e3ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3b1:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e3b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3ba:	8b 40 10             	mov    0x10(%eax),%eax
c010e3bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e3c0:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e3c3:	c7 45 ec 1c e3 10 c0 	movl   $0xc010e31c,-0x14(%ebp)
c010e3ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e3d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e3d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3dc:	8b 10                	mov    (%eax),%edx
c010e3de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3e1:	89 50 08             	mov    %edx,0x8(%eax)
c010e3e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3e7:	8b 50 08             	mov    0x8(%eax),%edx
c010e3ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3ed:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e3f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e3f3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e3f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e3fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e401:	89 04 24             	mov    %eax,(%esp)
c010e404:	e8 40 fe ff ff       	call   c010e249 <skew_heap_merge>
c010e409:	89 c2                	mov    %eax,%edx
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e40b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e40e:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e411:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e414:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e41a:	85 c0                	test   %eax,%eax
c010e41c:	74 13                	je     c010e431 <stride_enqueue+0x89>
c010e41e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e421:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e427:	8b 45 08             	mov    0x8(%ebp),%eax
c010e42a:	8b 40 0c             	mov    0xc(%eax),%eax
c010e42d:	39 c2                	cmp    %eax,%edx
c010e42f:	7e 0f                	jle    c010e440 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010e431:	8b 45 08             	mov    0x8(%ebp),%eax
c010e434:	8b 50 0c             	mov    0xc(%eax),%edx
c010e437:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e43a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010e440:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e443:	8b 55 08             	mov    0x8(%ebp),%edx
c010e446:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010e44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e44f:	8b 40 08             	mov    0x8(%eax),%eax
c010e452:	8d 50 01             	lea    0x1(%eax),%edx
c010e455:	8b 45 08             	mov    0x8(%ebp),%eax
c010e458:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e45b:	c9                   	leave  
c010e45c:	c3                   	ret    

c010e45d <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e45d:	55                   	push   %ebp
c010e45e:	89 e5                	mov    %esp,%ebp
c010e460:	83 ec 38             	sub    $0x38,%esp
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e463:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e466:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e46c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e46f:	8b 40 10             	mov    0x10(%eax),%eax
c010e472:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e475:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e478:	c7 45 ec 1c e3 10 c0 	movl   $0xc010e31c,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e47f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e482:	8b 00                	mov    (%eax),%eax
c010e484:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e487:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e48a:	8b 50 08             	mov    0x8(%eax),%edx
c010e48d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e490:	8b 40 04             	mov    0x4(%eax),%eax
c010e493:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e496:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e49a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e49e:	89 04 24             	mov    %eax,(%esp)
c010e4a1:	e8 a3 fd ff ff       	call   c010e249 <skew_heap_merge>
c010e4a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e4a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e4ad:	74 08                	je     c010e4b7 <stride_dequeue+0x5a>
c010e4af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e4b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e4b5:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e4b7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e4bb:	74 24                	je     c010e4e1 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e4bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e4c0:	8b 40 04             	mov    0x4(%eax),%eax
c010e4c3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e4c6:	75 0b                	jne    c010e4d3 <stride_dequeue+0x76>
               p->left = rep;
c010e4c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e4cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e4ce:	89 50 04             	mov    %edx,0x4(%eax)
c010e4d1:	eb 09                	jmp    c010e4dc <stride_dequeue+0x7f>
          else p->right = rep;
c010e4d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e4d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e4d9:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e4dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4df:	eb 03                	jmp    c010e4e4 <stride_dequeue+0x87>
     }
     else return rep;
c010e4e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e4e4:	89 c2                	mov    %eax,%edx
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e4e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4e9:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010e4ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4ef:	8b 40 08             	mov    0x8(%eax),%eax
c010e4f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e4f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4f8:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e4fb:	c9                   	leave  
c010e4fc:	c3                   	ret    

c010e4fd <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e4fd:	55                   	push   %ebp
c010e4fe:	89 e5                	mov    %esp,%ebp
c010e500:	53                   	push   %ebx
c010e501:	83 ec 10             	sub    $0x10,%esp
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010e504:	8b 45 08             	mov    0x8(%ebp),%eax
c010e507:	8b 40 10             	mov    0x10(%eax),%eax
c010e50a:	85 c0                	test   %eax,%eax
c010e50c:	75 07                	jne    c010e515 <stride_pick_next+0x18>
c010e50e:	b8 00 00 00 00       	mov    $0x0,%eax
c010e513:	eb 62                	jmp    c010e577 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e515:	8b 45 08             	mov    0x8(%ebp),%eax
c010e518:	8b 40 10             	mov    0x10(%eax),%eax
c010e51b:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e520:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010e523:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e526:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e52c:	85 c0                	test   %eax,%eax
c010e52e:	75 1a                	jne    c010e54a <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010e530:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e533:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e539:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e53f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e542:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e548:	eb 2a                	jmp    c010e574 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010e54a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e54d:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e553:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e556:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e55c:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e561:	ba 00 00 00 00       	mov    $0x0,%edx
c010e566:	f7 f3                	div    %ebx
c010e568:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e56b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e56e:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010e574:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010e577:	83 c4 10             	add    $0x10,%esp
c010e57a:	5b                   	pop    %ebx
c010e57b:	5d                   	pop    %ebp
c010e57c:	c3                   	ret    

c010e57d <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e57d:	55                   	push   %ebp
c010e57e:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010e580:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e583:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e589:	85 c0                	test   %eax,%eax
c010e58b:	7e 15                	jle    c010e5a2 <stride_proc_tick+0x25>
          proc->time_slice --;
c010e58d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e590:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e596:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e599:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e59c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010e5a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5a5:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e5ab:	85 c0                	test   %eax,%eax
c010e5ad:	75 0a                	jne    c010e5b9 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010e5af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5b2:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010e5b9:	5d                   	pop    %ebp
c010e5ba:	c3                   	ret    

c010e5bb <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e5bb:	55                   	push   %ebp
c010e5bc:	89 e5                	mov    %esp,%ebp
c010e5be:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e5c1:	9c                   	pushf  
c010e5c2:	58                   	pop    %eax
c010e5c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e5c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e5c9:	25 00 02 00 00       	and    $0x200,%eax
c010e5ce:	85 c0                	test   %eax,%eax
c010e5d0:	74 0c                	je     c010e5de <__intr_save+0x23>
        intr_disable();
c010e5d2:	e8 7a 3b ff ff       	call   c0102151 <intr_disable>
        return 1;
c010e5d7:	b8 01 00 00 00       	mov    $0x1,%eax
c010e5dc:	eb 05                	jmp    c010e5e3 <__intr_save+0x28>
    }
    return 0;
c010e5de:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e5e3:	c9                   	leave  
c010e5e4:	c3                   	ret    

c010e5e5 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e5e5:	55                   	push   %ebp
c010e5e6:	89 e5                	mov    %esp,%ebp
c010e5e8:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e5eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e5ef:	74 05                	je     c010e5f6 <__intr_restore+0x11>
        intr_enable();
c010e5f1:	e8 55 3b ff ff       	call   c010214b <intr_enable>
    }
}
c010e5f6:	c9                   	leave  
c010e5f7:	c3                   	ret    

c010e5f8 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e5f8:	55                   	push   %ebp
c010e5f9:	89 e5                	mov    %esp,%ebp
c010e5fb:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e5fe:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e603:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e606:	74 1a                	je     c010e622 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e608:	a1 bc 50 15 c0       	mov    0xc01550bc,%eax
c010e60d:	8b 40 08             	mov    0x8(%eax),%eax
c010e610:	8b 15 c0 50 15 c0    	mov    0xc01550c0,%edx
c010e616:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e619:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e61d:	89 14 24             	mov    %edx,(%esp)
c010e620:	ff d0                	call   *%eax
    }
}
c010e622:	c9                   	leave  
c010e623:	c3                   	ret    

c010e624 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e624:	55                   	push   %ebp
c010e625:	89 e5                	mov    %esp,%ebp
c010e627:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e62a:	a1 bc 50 15 c0       	mov    0xc01550bc,%eax
c010e62f:	8b 40 0c             	mov    0xc(%eax),%eax
c010e632:	8b 15 c0 50 15 c0    	mov    0xc01550c0,%edx
c010e638:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e63b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e63f:	89 14 24             	mov    %edx,(%esp)
c010e642:	ff d0                	call   *%eax
}
c010e644:	c9                   	leave  
c010e645:	c3                   	ret    

c010e646 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e646:	55                   	push   %ebp
c010e647:	89 e5                	mov    %esp,%ebp
c010e649:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e64c:	a1 bc 50 15 c0       	mov    0xc01550bc,%eax
c010e651:	8b 40 10             	mov    0x10(%eax),%eax
c010e654:	8b 15 c0 50 15 c0    	mov    0xc01550c0,%edx
c010e65a:	89 14 24             	mov    %edx,(%esp)
c010e65d:	ff d0                	call   *%eax
}
c010e65f:	c9                   	leave  
c010e660:	c3                   	ret    

c010e661 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e661:	55                   	push   %ebp
c010e662:	89 e5                	mov    %esp,%ebp
c010e664:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e667:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e66c:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e66f:	74 1c                	je     c010e68d <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e671:	a1 bc 50 15 c0       	mov    0xc01550bc,%eax
c010e676:	8b 40 14             	mov    0x14(%eax),%eax
c010e679:	8b 15 c0 50 15 c0    	mov    0xc01550c0,%edx
c010e67f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e682:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e686:	89 14 24             	mov    %edx,(%esp)
c010e689:	ff d0                	call   *%eax
c010e68b:	eb 0a                	jmp    c010e697 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e68d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e690:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e697:	c9                   	leave  
c010e698:	c3                   	ret    

c010e699 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e699:	55                   	push   %ebp
c010e69a:	89 e5                	mov    %esp,%ebp
c010e69c:	83 ec 28             	sub    $0x28,%esp
c010e69f:	c7 45 f4 b4 50 15 c0 	movl   $0xc01550b4,-0xc(%ebp)
c010e6a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e6ac:	89 50 04             	mov    %edx,0x4(%eax)
c010e6af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6b2:	8b 50 04             	mov    0x4(%eax),%edx
c010e6b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6b8:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e6ba:	c7 05 bc 50 15 c0 8c 	movl   $0xc014fa8c,0xc01550bc
c010e6c1:	fa 14 c0 

    rq = &__rq;
c010e6c4:	c7 05 c0 50 15 c0 c4 	movl   $0xc01550c4,0xc01550c0
c010e6cb:	50 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010e6ce:	a1 c0 50 15 c0       	mov    0xc01550c0,%eax
c010e6d3:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010e6da:	a1 bc 50 15 c0       	mov    0xc01550bc,%eax
c010e6df:	8b 40 04             	mov    0x4(%eax),%eax
c010e6e2:	8b 15 c0 50 15 c0    	mov    0xc01550c0,%edx
c010e6e8:	89 14 24             	mov    %edx,(%esp)
c010e6eb:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e6ed:	a1 bc 50 15 c0       	mov    0xc01550bc,%eax
c010e6f2:	8b 00                	mov    (%eax),%eax
c010e6f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e6f8:	c7 04 24 08 87 11 c0 	movl   $0xc0118708,(%esp)
c010e6ff:	e8 6d 1c ff ff       	call   c0100371 <cprintf>
}
c010e704:	c9                   	leave  
c010e705:	c3                   	ret    

c010e706 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e706:	55                   	push   %ebp
c010e707:	89 e5                	mov    %esp,%ebp
c010e709:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e70c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e70f:	8b 00                	mov    (%eax),%eax
c010e711:	83 f8 03             	cmp    $0x3,%eax
c010e714:	75 24                	jne    c010e73a <wakeup_proc+0x34>
c010e716:	c7 44 24 0c 19 87 11 	movl   $0xc0118719,0xc(%esp)
c010e71d:	c0 
c010e71e:	c7 44 24 08 34 87 11 	movl   $0xc0118734,0x8(%esp)
c010e725:	c0 
c010e726:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010e72d:	00 
c010e72e:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010e735:	e8 a4 27 ff ff       	call   c0100ede <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e73a:	e8 7c fe ff ff       	call   c010e5bb <__intr_save>
c010e73f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e742:	8b 45 08             	mov    0x8(%ebp),%eax
c010e745:	8b 00                	mov    (%eax),%eax
c010e747:	83 f8 02             	cmp    $0x2,%eax
c010e74a:	74 2d                	je     c010e779 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e74c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e74f:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e755:	8b 45 08             	mov    0x8(%ebp),%eax
c010e758:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e75f:	00 00 00 
            if (proc != current) {
c010e762:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e767:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e76a:	74 29                	je     c010e795 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e76c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e76f:	89 04 24             	mov    %eax,(%esp)
c010e772:	e8 81 fe ff ff       	call   c010e5f8 <sched_class_enqueue>
c010e777:	eb 1c                	jmp    c010e795 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e779:	c7 44 24 08 5f 87 11 	movl   $0xc011875f,0x8(%esp)
c010e780:	c0 
c010e781:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010e788:	00 
c010e789:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010e790:	e8 c6 27 ff ff       	call   c0100f5b <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e798:	89 04 24             	mov    %eax,(%esp)
c010e79b:	e8 45 fe ff ff       	call   c010e5e5 <__intr_restore>
}
c010e7a0:	c9                   	leave  
c010e7a1:	c3                   	ret    

c010e7a2 <schedule>:

void
schedule(void) {
c010e7a2:	55                   	push   %ebp
c010e7a3:	89 e5                	mov    %esp,%ebp
c010e7a5:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e7a8:	e8 0e fe ff ff       	call   c010e5bb <__intr_save>
c010e7ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e7b0:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e7b5:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e7bc:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e7c1:	8b 00                	mov    (%eax),%eax
c010e7c3:	83 f8 02             	cmp    $0x2,%eax
c010e7c6:	75 0d                	jne    c010e7d5 <schedule+0x33>
            sched_class_enqueue(current);
c010e7c8:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e7cd:	89 04 24             	mov    %eax,(%esp)
c010e7d0:	e8 23 fe ff ff       	call   c010e5f8 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e7d5:	e8 6c fe ff ff       	call   c010e646 <sched_class_pick_next>
c010e7da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e7dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e7e1:	74 0b                	je     c010e7ee <schedule+0x4c>
            sched_class_dequeue(next);
c010e7e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7e6:	89 04 24             	mov    %eax,(%esp)
c010e7e9:	e8 36 fe ff ff       	call   c010e624 <sched_class_dequeue>
        }
        if (next == NULL) {
c010e7ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e7f2:	75 08                	jne    c010e7fc <schedule+0x5a>
            next = idleproc;
c010e7f4:	a1 40 30 15 c0       	mov    0xc0153040,%eax
c010e7f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7ff:	8b 40 08             	mov    0x8(%eax),%eax
c010e802:	8d 50 01             	lea    0x1(%eax),%edx
c010e805:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e808:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e80b:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e810:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e813:	74 0b                	je     c010e820 <schedule+0x7e>
            proc_run(next);
c010e815:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e818:	89 04 24             	mov    %eax,(%esp)
c010e81b:	e8 bf dc ff ff       	call   c010c4df <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e820:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e823:	89 04 24             	mov    %eax,(%esp)
c010e826:	e8 ba fd ff ff       	call   c010e5e5 <__intr_restore>
}
c010e82b:	c9                   	leave  
c010e82c:	c3                   	ret    

c010e82d <add_timer>:

void
add_timer(timer_t *timer) {
c010e82d:	55                   	push   %ebp
c010e82e:	89 e5                	mov    %esp,%ebp
c010e830:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e833:	e8 83 fd ff ff       	call   c010e5bb <__intr_save>
c010e838:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e83b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e83e:	8b 00                	mov    (%eax),%eax
c010e840:	85 c0                	test   %eax,%eax
c010e842:	74 0a                	je     c010e84e <add_timer+0x21>
c010e844:	8b 45 08             	mov    0x8(%ebp),%eax
c010e847:	8b 40 04             	mov    0x4(%eax),%eax
c010e84a:	85 c0                	test   %eax,%eax
c010e84c:	75 24                	jne    c010e872 <add_timer+0x45>
c010e84e:	c7 44 24 0c 7c 87 11 	movl   $0xc011877c,0xc(%esp)
c010e855:	c0 
c010e856:	c7 44 24 08 34 87 11 	movl   $0xc0118734,0x8(%esp)
c010e85d:	c0 
c010e85e:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e865:	00 
c010e866:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010e86d:	e8 6c 26 ff ff       	call   c0100ede <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e872:	8b 45 08             	mov    0x8(%ebp),%eax
c010e875:	83 c0 08             	add    $0x8,%eax
c010e878:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e87b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e87e:	8b 40 04             	mov    0x4(%eax),%eax
c010e881:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e884:	0f 94 c0             	sete   %al
c010e887:	0f b6 c0             	movzbl %al,%eax
c010e88a:	85 c0                	test   %eax,%eax
c010e88c:	75 24                	jne    c010e8b2 <add_timer+0x85>
c010e88e:	c7 44 24 0c a8 87 11 	movl   $0xc01187a8,0xc(%esp)
c010e895:	c0 
c010e896:	c7 44 24 08 34 87 11 	movl   $0xc0118734,0x8(%esp)
c010e89d:	c0 
c010e89e:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e8a5:	00 
c010e8a6:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010e8ad:	e8 2c 26 ff ff       	call   c0100ede <__panic>
c010e8b2:	c7 45 e4 b4 50 15 c0 	movl   $0xc01550b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e8b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e8bc:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e8bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e8c2:	eb 4a                	jmp    c010e90e <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e8c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8c7:	83 e8 08             	sub    $0x8,%eax
c010e8ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e8cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8d0:	8b 10                	mov    (%eax),%edx
c010e8d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8d5:	8b 00                	mov    (%eax),%eax
c010e8d7:	39 c2                	cmp    %eax,%edx
c010e8d9:	73 13                	jae    c010e8ee <add_timer+0xc1>
                next->expires -= timer->expires;
c010e8db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8de:	8b 10                	mov    (%eax),%edx
c010e8e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8e3:	8b 00                	mov    (%eax),%eax
c010e8e5:	29 c2                	sub    %eax,%edx
c010e8e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8ea:	89 10                	mov    %edx,(%eax)
                break;
c010e8ec:	eb 29                	jmp    c010e917 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e8ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8f1:	8b 10                	mov    (%eax),%edx
c010e8f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8f6:	8b 00                	mov    (%eax),%eax
c010e8f8:	29 c2                	sub    %eax,%edx
c010e8fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8fd:	89 10                	mov    %edx,(%eax)
c010e8ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e902:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e905:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e908:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e90b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e90e:	81 7d f4 b4 50 15 c0 	cmpl   $0xc01550b4,-0xc(%ebp)
c010e915:	75 ad                	jne    c010e8c4 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e917:	8b 45 08             	mov    0x8(%ebp),%eax
c010e91a:	8d 50 08             	lea    0x8(%eax),%edx
c010e91d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e920:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e923:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e926:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e929:	8b 00                	mov    (%eax),%eax
c010e92b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e92e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e931:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e934:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e937:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e93a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e93d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e940:	89 10                	mov    %edx,(%eax)
c010e942:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e945:	8b 10                	mov    (%eax),%edx
c010e947:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e94a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e94d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e950:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e953:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e956:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e959:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e95c:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e95e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e961:	89 04 24             	mov    %eax,(%esp)
c010e964:	e8 7c fc ff ff       	call   c010e5e5 <__intr_restore>
}
c010e969:	c9                   	leave  
c010e96a:	c3                   	ret    

c010e96b <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010e96b:	55                   	push   %ebp
c010e96c:	89 e5                	mov    %esp,%ebp
c010e96e:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e971:	e8 45 fc ff ff       	call   c010e5bb <__intr_save>
c010e976:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e979:	8b 45 08             	mov    0x8(%ebp),%eax
c010e97c:	83 c0 08             	add    $0x8,%eax
c010e97f:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e982:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e985:	8b 40 04             	mov    0x4(%eax),%eax
c010e988:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e98b:	0f 94 c0             	sete   %al
c010e98e:	0f b6 c0             	movzbl %al,%eax
c010e991:	85 c0                	test   %eax,%eax
c010e993:	0f 85 89 00 00 00    	jne    c010ea22 <del_timer+0xb7>
            if (timer->expires != 0) {
c010e999:	8b 45 08             	mov    0x8(%ebp),%eax
c010e99c:	8b 00                	mov    (%eax),%eax
c010e99e:	85 c0                	test   %eax,%eax
c010e9a0:	74 35                	je     c010e9d7 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e9a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9a5:	83 c0 08             	add    $0x8,%eax
c010e9a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e9ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e9ae:	8b 40 04             	mov    0x4(%eax),%eax
c010e9b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e9b4:	81 7d f0 b4 50 15 c0 	cmpl   $0xc01550b4,-0x10(%ebp)
c010e9bb:	74 1a                	je     c010e9d7 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e9bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9c0:	83 e8 08             	sub    $0x8,%eax
c010e9c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e9c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e9c9:	8b 10                	mov    (%eax),%edx
c010e9cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9ce:	8b 00                	mov    (%eax),%eax
c010e9d0:	01 c2                	add    %eax,%edx
c010e9d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e9d5:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e9d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9da:	83 c0 08             	add    $0x8,%eax
c010e9dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e9e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e9e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e9e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e9e9:	8b 40 04             	mov    0x4(%eax),%eax
c010e9ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e9ef:	8b 12                	mov    (%edx),%edx
c010e9f1:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e9f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e9f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e9fa:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e9fd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ea00:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ea03:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ea06:	89 10                	mov    %edx,(%eax)
c010ea08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ea0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ea0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ea11:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ea14:	89 50 04             	mov    %edx,0x4(%eax)
c010ea17:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ea1a:	8b 50 04             	mov    0x4(%eax),%edx
c010ea1d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ea20:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010ea22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea25:	89 04 24             	mov    %eax,(%esp)
c010ea28:	e8 b8 fb ff ff       	call   c010e5e5 <__intr_restore>
}
c010ea2d:	c9                   	leave  
c010ea2e:	c3                   	ret    

c010ea2f <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010ea2f:	55                   	push   %ebp
c010ea30:	89 e5                	mov    %esp,%ebp
c010ea32:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ea35:	e8 81 fb ff ff       	call   c010e5bb <__intr_save>
c010ea3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ea3d:	c7 45 e4 b4 50 15 c0 	movl   $0xc01550b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ea44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ea47:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010ea4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010ea4d:	81 7d f4 b4 50 15 c0 	cmpl   $0xc01550b4,-0xc(%ebp)
c010ea54:	0f 84 fb 00 00 00    	je     c010eb55 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010ea5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea5d:	83 e8 08             	sub    $0x8,%eax
c010ea60:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010ea63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea66:	8b 00                	mov    (%eax),%eax
c010ea68:	85 c0                	test   %eax,%eax
c010ea6a:	75 24                	jne    c010ea90 <run_timer_list+0x61>
c010ea6c:	c7 44 24 0c c9 87 11 	movl   $0xc01187c9,0xc(%esp)
c010ea73:	c0 
c010ea74:	c7 44 24 08 34 87 11 	movl   $0xc0118734,0x8(%esp)
c010ea7b:	c0 
c010ea7c:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010ea83:	00 
c010ea84:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010ea8b:	e8 4e 24 ff ff       	call   c0100ede <__panic>
            timer->expires --;
c010ea90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea93:	8b 00                	mov    (%eax),%eax
c010ea95:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ea98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea9b:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010ea9d:	e9 a6 00 00 00       	jmp    c010eb48 <run_timer_list+0x119>
c010eaa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eaa5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010eaa8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eaab:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010eaae:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010eab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eab4:	8b 40 04             	mov    0x4(%eax),%eax
c010eab7:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010eaba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eabd:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010eac3:	85 c0                	test   %eax,%eax
c010eac5:	74 31                	je     c010eaf8 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010eac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eaca:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ead0:	85 c0                	test   %eax,%eax
c010ead2:	78 4a                	js     c010eb1e <run_timer_list+0xef>
c010ead4:	c7 44 24 0c e0 87 11 	movl   $0xc01187e0,0xc(%esp)
c010eadb:	c0 
c010eadc:	c7 44 24 08 34 87 11 	movl   $0xc0118734,0x8(%esp)
c010eae3:	c0 
c010eae4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010eaeb:	00 
c010eaec:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010eaf3:	e8 e6 23 ff ff       	call   c0100ede <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010eaf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eafb:	8b 40 04             	mov    0x4(%eax),%eax
c010eafe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010eb02:	c7 44 24 08 04 88 11 	movl   $0xc0118804,0x8(%esp)
c010eb09:	c0 
c010eb0a:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010eb11:	00 
c010eb12:	c7 04 24 49 87 11 c0 	movl   $0xc0118749,(%esp)
c010eb19:	e8 3d 24 ff ff       	call   c0100f5b <__warn>
                }
                wakeup_proc(proc);
c010eb1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb21:	89 04 24             	mov    %eax,(%esp)
c010eb24:	e8 dd fb ff ff       	call   c010e706 <wakeup_proc>
                del_timer(timer);
c010eb29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb2c:	89 04 24             	mov    %eax,(%esp)
c010eb2f:	e8 37 fe ff ff       	call   c010e96b <del_timer>
                if (le == &timer_list) {
c010eb34:	81 7d f4 b4 50 15 c0 	cmpl   $0xc01550b4,-0xc(%ebp)
c010eb3b:	75 02                	jne    c010eb3f <run_timer_list+0x110>
                    break;
c010eb3d:	eb 16                	jmp    c010eb55 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010eb3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb42:	83 e8 08             	sub    $0x8,%eax
c010eb45:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010eb48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb4b:	8b 00                	mov    (%eax),%eax
c010eb4d:	85 c0                	test   %eax,%eax
c010eb4f:	0f 84 4d ff ff ff    	je     c010eaa2 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010eb55:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010eb5a:	89 04 24             	mov    %eax,(%esp)
c010eb5d:	e8 ff fa ff ff       	call   c010e661 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010eb62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb65:	89 04 24             	mov    %eax,(%esp)
c010eb68:	e8 78 fa ff ff       	call   c010e5e5 <__intr_restore>
}
c010eb6d:	c9                   	leave  
c010eb6e:	c3                   	ret    

c010eb6f <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010eb6f:	55                   	push   %ebp
c010eb70:	89 e5                	mov    %esp,%ebp
c010eb72:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010eb75:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb78:	8b 00                	mov    (%eax),%eax
c010eb7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010eb7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb80:	89 04 24             	mov    %eax,(%esp)
c010eb83:	e8 d4 e0 ff ff       	call   c010cc5c <do_exit>
}
c010eb88:	c9                   	leave  
c010eb89:	c3                   	ret    

c010eb8a <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010eb8a:	55                   	push   %ebp
c010eb8b:	89 e5                	mov    %esp,%ebp
c010eb8d:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010eb90:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010eb95:	8b 40 3c             	mov    0x3c(%eax),%eax
c010eb98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010eb9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb9e:	8b 40 44             	mov    0x44(%eax),%eax
c010eba1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010eba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eba7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebb2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ebb9:	e8 54 df ff ff       	call   c010cb12 <do_fork>
}
c010ebbe:	c9                   	leave  
c010ebbf:	c3                   	ret    

c010ebc0 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ebc0:	55                   	push   %ebp
c010ebc1:	89 e5                	mov    %esp,%ebp
c010ebc3:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ebc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebc9:	8b 00                	mov    (%eax),%eax
c010ebcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ebce:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebd1:	83 c0 04             	add    $0x4,%eax
c010ebd4:	8b 00                	mov    (%eax),%eax
c010ebd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ebd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebe3:	89 04 24             	mov    %eax,(%esp)
c010ebe6:	e8 7a ee ff ff       	call   c010da65 <do_wait>
}
c010ebeb:	c9                   	leave  
c010ebec:	c3                   	ret    

c010ebed <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ebed:	55                   	push   %ebp
c010ebee:	89 e5                	mov    %esp,%ebp
c010ebf0:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010ebf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebf6:	8b 00                	mov    (%eax),%eax
c010ebf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010ebfb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebfe:	83 c0 04             	add    $0x4,%eax
c010ec01:	8b 00                	mov    (%eax),%eax
c010ec03:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010ec06:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec09:	83 c0 08             	add    $0x8,%eax
c010ec0c:	8b 00                	mov    (%eax),%eax
c010ec0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010ec11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec14:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec22:	89 04 24             	mov    %eax,(%esp)
c010ec25:	e8 e8 eb ff ff       	call   c010d812 <do_execve>
}
c010ec2a:	c9                   	leave  
c010ec2b:	c3                   	ret    

c010ec2c <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ec2c:	55                   	push   %ebp
c010ec2d:	89 e5                	mov    %esp,%ebp
c010ec2f:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ec32:	e8 18 ee ff ff       	call   c010da4f <do_yield>
}
c010ec37:	c9                   	leave  
c010ec38:	c3                   	ret    

c010ec39 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ec39:	55                   	push   %ebp
c010ec3a:	89 e5                	mov    %esp,%ebp
c010ec3c:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ec3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec42:	8b 00                	mov    (%eax),%eax
c010ec44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ec47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec4a:	89 04 24             	mov    %eax,(%esp)
c010ec4d:	e8 b3 ef ff ff       	call   c010dc05 <do_kill>
}
c010ec52:	c9                   	leave  
c010ec53:	c3                   	ret    

c010ec54 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ec54:	55                   	push   %ebp
c010ec55:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ec57:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ec5c:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ec5f:	5d                   	pop    %ebp
c010ec60:	c3                   	ret    

c010ec61 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ec61:	55                   	push   %ebp
c010ec62:	89 e5                	mov    %esp,%ebp
c010ec64:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ec67:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec6a:	8b 00                	mov    (%eax),%eax
c010ec6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ec6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec72:	89 04 24             	mov    %eax,(%esp)
c010ec75:	e8 1d 17 ff ff       	call   c0100397 <cputchar>
    return 0;
c010ec7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec7f:	c9                   	leave  
c010ec80:	c3                   	ret    

c010ec81 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ec81:	55                   	push   %ebp
c010ec82:	89 e5                	mov    %esp,%ebp
c010ec84:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ec87:	e8 2a 80 ff ff       	call   c0106cb6 <print_pgdir>
    return 0;
c010ec8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec91:	c9                   	leave  
c010ec92:	c3                   	ret    

c010ec93 <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010ec93:	55                   	push   %ebp
c010ec94:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ec96:	a1 30 61 15 c0       	mov    0xc0156130,%eax
}
c010ec9b:	5d                   	pop    %ebp
c010ec9c:	c3                   	ret    

c010ec9d <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010ec9d:	55                   	push   %ebp
c010ec9e:	89 e5                	mov    %esp,%ebp
c010eca0:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010eca3:	8b 45 08             	mov    0x8(%ebp),%eax
c010eca6:	8b 00                	mov    (%eax),%eax
c010eca8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ecab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecae:	89 04 24             	mov    %eax,(%esp)
c010ecb1:	e8 b2 f4 ff ff       	call   c010e168 <lab6_set_priority>
    return 0;
c010ecb6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ecbb:	c9                   	leave  
c010ecbc:	c3                   	ret    

c010ecbd <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ecbd:	55                   	push   %ebp
c010ecbe:	89 e5                	mov    %esp,%ebp
c010ecc0:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ecc3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecc6:	8b 00                	mov    (%eax),%eax
c010ecc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010eccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecce:	89 04 24             	mov    %eax,(%esp)
c010ecd1:	e8 bc f4 ff ff       	call   c010e192 <do_sleep>
}
c010ecd6:	c9                   	leave  
c010ecd7:	c3                   	ret    

c010ecd8 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ecd8:	55                   	push   %ebp
c010ecd9:	89 e5                	mov    %esp,%ebp
c010ecdb:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010ecde:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece1:	8b 00                	mov    (%eax),%eax
c010ece3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ece6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece9:	8b 40 04             	mov    0x4(%eax),%eax
c010ecec:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010ecef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ecf2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ecf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecf9:	89 04 24             	mov    %eax,(%esp)
c010ecfc:	e8 e0 c9 ff ff       	call   c010b6e1 <sysfile_open>
}
c010ed01:	c9                   	leave  
c010ed02:	c3                   	ret    

c010ed03 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ed03:	55                   	push   %ebp
c010ed04:	89 e5                	mov    %esp,%ebp
c010ed06:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed09:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed0c:	8b 00                	mov    (%eax),%eax
c010ed0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010ed11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed14:	89 04 24             	mov    %eax,(%esp)
c010ed17:	e8 10 ca ff ff       	call   c010b72c <sysfile_close>
}
c010ed1c:	c9                   	leave  
c010ed1d:	c3                   	ret    

c010ed1e <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ed1e:	55                   	push   %ebp
c010ed1f:	89 e5                	mov    %esp,%ebp
c010ed21:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed24:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed27:	8b 00                	mov    (%eax),%eax
c010ed29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed2f:	83 c0 04             	add    $0x4,%eax
c010ed32:	8b 00                	mov    (%eax),%eax
c010ed34:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed3a:	8b 40 08             	mov    0x8(%eax),%eax
c010ed3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010ed40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed43:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed51:	89 04 24             	mov    %eax,(%esp)
c010ed54:	e8 e6 c9 ff ff       	call   c010b73f <sysfile_read>
}
c010ed59:	c9                   	leave  
c010ed5a:	c3                   	ret    

c010ed5b <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010ed5b:	55                   	push   %ebp
c010ed5c:	89 e5                	mov    %esp,%ebp
c010ed5e:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed61:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed64:	8b 00                	mov    (%eax),%eax
c010ed66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed69:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed6c:	83 c0 04             	add    $0x4,%eax
c010ed6f:	8b 00                	mov    (%eax),%eax
c010ed71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed74:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed77:	8b 40 08             	mov    0x8(%eax),%eax
c010ed7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010ed7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed80:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed8e:	89 04 24             	mov    %eax,(%esp)
c010ed91:	e8 21 cb ff ff       	call   c010b8b7 <sysfile_write>
}
c010ed96:	c9                   	leave  
c010ed97:	c3                   	ret    

c010ed98 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010ed98:	55                   	push   %ebp
c010ed99:	89 e5                	mov    %esp,%ebp
c010ed9b:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed9e:	8b 45 08             	mov    0x8(%ebp),%eax
c010eda1:	8b 00                	mov    (%eax),%eax
c010eda3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010eda6:	8b 45 08             	mov    0x8(%ebp),%eax
c010eda9:	83 c0 04             	add    $0x4,%eax
c010edac:	8b 00                	mov    (%eax),%eax
c010edae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010edb1:	8b 45 08             	mov    0x8(%ebp),%eax
c010edb4:	83 c0 08             	add    $0x8,%eax
c010edb7:	8b 00                	mov    (%eax),%eax
c010edb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010edbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010edbf:	89 44 24 08          	mov    %eax,0x8(%esp)
c010edc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edcd:	89 04 24             	mov    %eax,(%esp)
c010edd0:	e8 5c cc ff ff       	call   c010ba31 <sysfile_seek>
}
c010edd5:	c9                   	leave  
c010edd6:	c3                   	ret    

c010edd7 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010edd7:	55                   	push   %ebp
c010edd8:	89 e5                	mov    %esp,%ebp
c010edda:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eddd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ede0:	8b 00                	mov    (%eax),%eax
c010ede2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010ede5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ede8:	83 c0 04             	add    $0x4,%eax
c010edeb:	8b 00                	mov    (%eax),%eax
c010eded:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010edf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edf3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edfa:	89 04 24             	mov    %eax,(%esp)
c010edfd:	e8 50 cc ff ff       	call   c010ba52 <sysfile_fstat>
}
c010ee02:	c9                   	leave  
c010ee03:	c3                   	ret    

c010ee04 <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010ee04:	55                   	push   %ebp
c010ee05:	89 e5                	mov    %esp,%ebp
c010ee07:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee0d:	8b 00                	mov    (%eax),%eax
c010ee0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010ee12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee15:	89 04 24             	mov    %eax,(%esp)
c010ee18:	e8 b3 cc ff ff       	call   c010bad0 <sysfile_fsync>
}
c010ee1d:	c9                   	leave  
c010ee1e:	c3                   	ret    

c010ee1f <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ee1f:	55                   	push   %ebp
c010ee20:	89 e5                	mov    %esp,%ebp
c010ee22:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ee25:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee28:	8b 00                	mov    (%eax),%eax
c010ee2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ee2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee30:	8b 40 04             	mov    0x4(%eax),%eax
c010ee33:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010ee36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee39:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee40:	89 04 24             	mov    %eax,(%esp)
c010ee43:	e8 25 ce ff ff       	call   c010bc6d <sysfile_getcwd>
}
c010ee48:	c9                   	leave  
c010ee49:	c3                   	ret    

c010ee4a <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ee4a:	55                   	push   %ebp
c010ee4b:	89 e5                	mov    %esp,%ebp
c010ee4d:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee50:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee53:	8b 00                	mov    (%eax),%eax
c010ee55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ee58:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee5b:	83 c0 04             	add    $0x4,%eax
c010ee5e:	8b 00                	mov    (%eax),%eax
c010ee60:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ee63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee6d:	89 04 24             	mov    %eax,(%esp)
c010ee70:	e8 8f ce ff ff       	call   c010bd04 <sysfile_getdirentry>
}
c010ee75:	c9                   	leave  
c010ee76:	c3                   	ret    

c010ee77 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ee77:	55                   	push   %ebp
c010ee78:	89 e5                	mov    %esp,%ebp
c010ee7a:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ee7d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee80:	8b 00                	mov    (%eax),%eax
c010ee82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ee85:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee88:	83 c0 04             	add    $0x4,%eax
c010ee8b:	8b 00                	mov    (%eax),%eax
c010ee8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ee90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee93:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee9a:	89 04 24             	mov    %eax,(%esp)
c010ee9d:	e8 56 cf ff ff       	call   c010bdf8 <sysfile_dup>
}
c010eea2:	c9                   	leave  
c010eea3:	c3                   	ret    

c010eea4 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010eea4:	55                   	push   %ebp
c010eea5:	89 e5                	mov    %esp,%ebp
c010eea7:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010eeaa:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010eeaf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010eeb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010eeb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb8:	8b 40 1c             	mov    0x1c(%eax),%eax
c010eebb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010eebe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010eec2:	78 60                	js     c010ef24 <syscall+0x80>
c010eec4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eec7:	3d ff 00 00 00       	cmp    $0xff,%eax
c010eecc:	77 56                	ja     c010ef24 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010eece:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eed1:	8b 04 85 c0 fa 14 c0 	mov    -0x3feb0540(,%eax,4),%eax
c010eed8:	85 c0                	test   %eax,%eax
c010eeda:	74 48                	je     c010ef24 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010eedc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eedf:	8b 40 14             	mov    0x14(%eax),%eax
c010eee2:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010eee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eee8:	8b 40 18             	mov    0x18(%eax),%eax
c010eeeb:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010eeee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eef1:	8b 40 10             	mov    0x10(%eax),%eax
c010eef4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010eef7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eefa:	8b 00                	mov    (%eax),%eax
c010eefc:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010eeff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef02:	8b 40 04             	mov    0x4(%eax),%eax
c010ef05:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ef08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef0b:	8b 04 85 c0 fa 14 c0 	mov    -0x3feb0540(,%eax,4),%eax
c010ef12:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ef15:	89 14 24             	mov    %edx,(%esp)
c010ef18:	ff d0                	call   *%eax
c010ef1a:	89 c2                	mov    %eax,%edx
c010ef1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef1f:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ef22:	eb 46                	jmp    c010ef6a <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ef24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef27:	89 04 24             	mov    %eax,(%esp)
c010ef2a:	e8 ba 35 ff ff       	call   c01024e9 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ef2f:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ef34:	8d 50 48             	lea    0x48(%eax),%edx
c010ef37:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010ef3c:	8b 40 04             	mov    0x4(%eax),%eax
c010ef3f:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ef43:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ef47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef4a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef4e:	c7 44 24 08 24 88 11 	movl   $0xc0118824,0x8(%esp)
c010ef55:	c0 
c010ef56:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010ef5d:	00 
c010ef5e:	c7 04 24 50 88 11 c0 	movl   $0xc0118850,(%esp)
c010ef65:	e8 74 1f ff ff       	call   c0100ede <__panic>
            num, current->pid, current->name);
}
c010ef6a:	c9                   	leave  
c010ef6b:	c3                   	ret    

c010ef6c <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ef6c:	55                   	push   %ebp
c010ef6d:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ef6f:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef72:	a1 48 61 15 c0       	mov    0xc0156148,%eax
c010ef77:	29 c2                	sub    %eax,%edx
c010ef79:	89 d0                	mov    %edx,%eax
c010ef7b:	c1 f8 05             	sar    $0x5,%eax
}
c010ef7e:	5d                   	pop    %ebp
c010ef7f:	c3                   	ret    

c010ef80 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ef80:	55                   	push   %ebp
c010ef81:	89 e5                	mov    %esp,%ebp
c010ef83:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ef86:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef89:	89 04 24             	mov    %eax,(%esp)
c010ef8c:	e8 db ff ff ff       	call   c010ef6c <page2ppn>
c010ef91:	c1 e0 0c             	shl    $0xc,%eax
}
c010ef94:	c9                   	leave  
c010ef95:	c3                   	ret    

c010ef96 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ef96:	55                   	push   %ebp
c010ef97:	89 e5                	mov    %esp,%ebp
c010ef99:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ef9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef9f:	89 04 24             	mov    %eax,(%esp)
c010efa2:	e8 d9 ff ff ff       	call   c010ef80 <page2pa>
c010efa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010efaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efad:	c1 e8 0c             	shr    $0xc,%eax
c010efb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010efb3:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010efb8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010efbb:	72 23                	jb     c010efe0 <page2kva+0x4a>
c010efbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efc0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010efc4:	c7 44 24 08 68 88 11 	movl   $0xc0118868,0x8(%esp)
c010efcb:	c0 
c010efcc:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010efd3:	00 
c010efd4:	c7 04 24 8b 88 11 c0 	movl   $0xc011888b,(%esp)
c010efdb:	e8 fe 1e ff ff       	call   c0100ede <__panic>
c010efe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efe3:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010efe8:	c9                   	leave  
c010efe9:	c3                   	ret    

c010efea <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010efea:	55                   	push   %ebp
c010efeb:	89 e5                	mov    %esp,%ebp
c010efed:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010eff0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010eff7:	e8 4d 2c ff ff       	call   c0101c49 <ide_device_valid>
c010effc:	85 c0                	test   %eax,%eax
c010effe:	75 1c                	jne    c010f01c <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010f000:	c7 44 24 08 99 88 11 	movl   $0xc0118899,0x8(%esp)
c010f007:	c0 
c010f008:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010f00f:	00 
c010f010:	c7 04 24 b3 88 11 c0 	movl   $0xc01188b3,(%esp)
c010f017:	e8 c2 1e ff ff       	call   c0100ede <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010f01c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f023:	e8 60 2c ff ff       	call   c0101c88 <ide_device_size>
c010f028:	c1 e8 03             	shr    $0x3,%eax
c010f02b:	a3 fc 61 15 c0       	mov    %eax,0xc01561fc
}
c010f030:	c9                   	leave  
c010f031:	c3                   	ret    

c010f032 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010f032:	55                   	push   %ebp
c010f033:	89 e5                	mov    %esp,%ebp
c010f035:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f038:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f03b:	89 04 24             	mov    %eax,(%esp)
c010f03e:	e8 53 ff ff ff       	call   c010ef96 <page2kva>
c010f043:	8b 55 08             	mov    0x8(%ebp),%edx
c010f046:	c1 ea 08             	shr    $0x8,%edx
c010f049:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f04c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f050:	74 0b                	je     c010f05d <swapfs_read+0x2b>
c010f052:	8b 15 fc 61 15 c0    	mov    0xc01561fc,%edx
c010f058:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f05b:	72 23                	jb     c010f080 <swapfs_read+0x4e>
c010f05d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f060:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f064:	c7 44 24 08 c9 88 11 	movl   $0xc01188c9,0x8(%esp)
c010f06b:	c0 
c010f06c:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010f073:	00 
c010f074:	c7 04 24 b3 88 11 c0 	movl   $0xc01188b3,(%esp)
c010f07b:	e8 5e 1e ff ff       	call   c0100ede <__panic>
c010f080:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f083:	c1 e2 03             	shl    $0x3,%edx
c010f086:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f08d:	00 
c010f08e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f092:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f096:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f09d:	e8 25 2c ff ff       	call   c0101cc7 <ide_read_secs>
}
c010f0a2:	c9                   	leave  
c010f0a3:	c3                   	ret    

c010f0a4 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010f0a4:	55                   	push   %ebp
c010f0a5:	89 e5                	mov    %esp,%ebp
c010f0a7:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f0aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0ad:	89 04 24             	mov    %eax,(%esp)
c010f0b0:	e8 e1 fe ff ff       	call   c010ef96 <page2kva>
c010f0b5:	8b 55 08             	mov    0x8(%ebp),%edx
c010f0b8:	c1 ea 08             	shr    $0x8,%edx
c010f0bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f0be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f0c2:	74 0b                	je     c010f0cf <swapfs_write+0x2b>
c010f0c4:	8b 15 fc 61 15 c0    	mov    0xc01561fc,%edx
c010f0ca:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f0cd:	72 23                	jb     c010f0f2 <swapfs_write+0x4e>
c010f0cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0d2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f0d6:	c7 44 24 08 c9 88 11 	movl   $0xc01188c9,0x8(%esp)
c010f0dd:	c0 
c010f0de:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010f0e5:	00 
c010f0e6:	c7 04 24 b3 88 11 c0 	movl   $0xc01188b3,(%esp)
c010f0ed:	e8 ec 1d ff ff       	call   c0100ede <__panic>
c010f0f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f0f5:	c1 e2 03             	shl    $0x3,%edx
c010f0f8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f0ff:	00 
c010f100:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f104:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f108:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f10f:	e8 f5 2d ff ff       	call   c0101f09 <ide_write_secs>
}
c010f114:	c9                   	leave  
c010f115:	c3                   	ret    

c010f116 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f116:	55                   	push   %ebp
c010f117:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f119:	8b 45 08             	mov    0x8(%ebp),%eax
c010f11c:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f11f:	5d                   	pop    %ebp
c010f120:	c3                   	ret    

c010f121 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010f121:	55                   	push   %ebp
c010f122:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f124:	8b 45 08             	mov    0x8(%ebp),%eax
c010f127:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f12a:	5d                   	pop    %ebp
c010f12b:	c3                   	ret    

c010f12c <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f12c:	55                   	push   %ebp
c010f12d:	89 e5                	mov    %esp,%ebp
c010f12f:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f132:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010f139:	e8 71 5c ff ff       	call   c0104daf <kmalloc>
c010f13e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f141:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f145:	74 09                	je     c010f150 <__alloc_inode+0x24>
        node->in_type = type;
c010f147:	8b 55 08             	mov    0x8(%ebp),%edx
c010f14a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f14d:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f150:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f153:	c9                   	leave  
c010f154:	c3                   	ret    

c010f155 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f155:	55                   	push   %ebp
c010f156:	89 e5                	mov    %esp,%ebp
c010f158:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010f15b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f15e:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f165:	8b 45 08             	mov    0x8(%ebp),%eax
c010f168:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f16f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f172:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f175:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f178:	8b 45 08             	mov    0x8(%ebp),%eax
c010f17b:	8b 55 10             	mov    0x10(%ebp),%edx
c010f17e:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f181:	8b 45 08             	mov    0x8(%ebp),%eax
c010f184:	89 04 24             	mov    %eax,(%esp)
c010f187:	e8 7b 00 00 00       	call   c010f207 <inode_ref_inc>
}
c010f18c:	c9                   	leave  
c010f18d:	c3                   	ret    

c010f18e <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f18e:	55                   	push   %ebp
c010f18f:	89 e5                	mov    %esp,%ebp
c010f191:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010f194:	8b 45 08             	mov    0x8(%ebp),%eax
c010f197:	89 04 24             	mov    %eax,(%esp)
c010f19a:	e8 77 ff ff ff       	call   c010f116 <inode_ref_count>
c010f19f:	85 c0                	test   %eax,%eax
c010f1a1:	74 24                	je     c010f1c7 <inode_kill+0x39>
c010f1a3:	c7 44 24 0c e8 88 11 	movl   $0xc01188e8,0xc(%esp)
c010f1aa:	c0 
c010f1ab:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f1b2:	c0 
c010f1b3:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010f1ba:	00 
c010f1bb:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f1c2:	e8 17 1d ff ff       	call   c0100ede <__panic>
    assert(inode_open_count(node) == 0);
c010f1c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1ca:	89 04 24             	mov    %eax,(%esp)
c010f1cd:	e8 4f ff ff ff       	call   c010f121 <inode_open_count>
c010f1d2:	85 c0                	test   %eax,%eax
c010f1d4:	74 24                	je     c010f1fa <inode_kill+0x6c>
c010f1d6:	c7 44 24 0c 2c 89 11 	movl   $0xc011892c,0xc(%esp)
c010f1dd:	c0 
c010f1de:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f1e5:	c0 
c010f1e6:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010f1ed:	00 
c010f1ee:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f1f5:	e8 e4 1c ff ff       	call   c0100ede <__panic>
    kfree(node);
c010f1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1fd:	89 04 24             	mov    %eax,(%esp)
c010f200:	e8 c5 5b ff ff       	call   c0104dca <kfree>
}
c010f205:	c9                   	leave  
c010f206:	c3                   	ret    

c010f207 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f207:	55                   	push   %ebp
c010f208:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f20a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f20d:	8b 40 30             	mov    0x30(%eax),%eax
c010f210:	8d 50 01             	lea    0x1(%eax),%edx
c010f213:	8b 45 08             	mov    0x8(%ebp),%eax
c010f216:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f219:	8b 45 08             	mov    0x8(%ebp),%eax
c010f21c:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f21f:	5d                   	pop    %ebp
c010f220:	c3                   	ret    

c010f221 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f221:	55                   	push   %ebp
c010f222:	89 e5                	mov    %esp,%ebp
c010f224:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010f227:	8b 45 08             	mov    0x8(%ebp),%eax
c010f22a:	89 04 24             	mov    %eax,(%esp)
c010f22d:	e8 e4 fe ff ff       	call   c010f116 <inode_ref_count>
c010f232:	85 c0                	test   %eax,%eax
c010f234:	7f 24                	jg     c010f25a <inode_ref_dec+0x39>
c010f236:	c7 44 24 0c 48 89 11 	movl   $0xc0118948,0xc(%esp)
c010f23d:	c0 
c010f23e:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f245:	c0 
c010f246:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010f24d:	00 
c010f24e:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f255:	e8 84 1c ff ff       	call   c0100ede <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f25a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f25d:	8b 40 30             	mov    0x30(%eax),%eax
c010f260:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f263:	8b 45 08             	mov    0x8(%ebp),%eax
c010f266:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f269:	8b 45 08             	mov    0x8(%ebp),%eax
c010f26c:	8b 40 30             	mov    0x30(%eax),%eax
c010f26f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f272:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f276:	0f 85 8d 00 00 00    	jne    c010f309 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f27c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f27f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f286:	74 17                	je     c010f29f <inode_ref_dec+0x7e>
c010f288:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f28b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f28e:	85 c0                	test   %eax,%eax
c010f290:	74 0d                	je     c010f29f <inode_ref_dec+0x7e>
c010f292:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f295:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f298:	8b 40 24             	mov    0x24(%eax),%eax
c010f29b:	85 c0                	test   %eax,%eax
c010f29d:	75 24                	jne    c010f2c3 <inode_ref_dec+0xa2>
c010f29f:	c7 44 24 0c 64 89 11 	movl   $0xc0118964,0xc(%esp)
c010f2a6:	c0 
c010f2a7:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f2ae:	c0 
c010f2af:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010f2b6:	00 
c010f2b7:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f2be:	e8 1b 1c ff ff       	call   c0100ede <__panic>
c010f2c3:	c7 44 24 04 b4 89 11 	movl   $0xc01189b4,0x4(%esp)
c010f2ca:	c0 
c010f2cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2ce:	89 04 24             	mov    %eax,(%esp)
c010f2d1:	e8 39 01 00 00       	call   c010f40f <inode_check>
c010f2d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2d9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f2dc:	8b 40 24             	mov    0x24(%eax),%eax
c010f2df:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2e2:	89 14 24             	mov    %edx,(%esp)
c010f2e5:	ff d0                	call   *%eax
c010f2e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f2ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f2ee:	74 19                	je     c010f309 <inode_ref_dec+0xe8>
c010f2f0:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f2f4:	74 13                	je     c010f309 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f2f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f2f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f2fd:	c7 04 24 bc 89 11 c0 	movl   $0xc01189bc,(%esp)
c010f304:	e8 68 10 ff ff       	call   c0100371 <cprintf>
        }
    }
    return ref_count;
c010f309:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f30c:	c9                   	leave  
c010f30d:	c3                   	ret    

c010f30e <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f30e:	55                   	push   %ebp
c010f30f:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f311:	8b 45 08             	mov    0x8(%ebp),%eax
c010f314:	8b 40 34             	mov    0x34(%eax),%eax
c010f317:	8d 50 01             	lea    0x1(%eax),%edx
c010f31a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f31d:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f320:	8b 45 08             	mov    0x8(%ebp),%eax
c010f323:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f326:	5d                   	pop    %ebp
c010f327:	c3                   	ret    

c010f328 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f328:	55                   	push   %ebp
c010f329:	89 e5                	mov    %esp,%ebp
c010f32b:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f32e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f331:	89 04 24             	mov    %eax,(%esp)
c010f334:	e8 e8 fd ff ff       	call   c010f121 <inode_open_count>
c010f339:	85 c0                	test   %eax,%eax
c010f33b:	7f 24                	jg     c010f361 <inode_open_dec+0x39>
c010f33d:	c7 44 24 0c dc 89 11 	movl   $0xc01189dc,0xc(%esp)
c010f344:	c0 
c010f345:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f34c:	c0 
c010f34d:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010f354:	00 
c010f355:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f35c:	e8 7d 1b ff ff       	call   c0100ede <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f361:	8b 45 08             	mov    0x8(%ebp),%eax
c010f364:	8b 40 34             	mov    0x34(%eax),%eax
c010f367:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f36a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f36d:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f370:	8b 45 08             	mov    0x8(%ebp),%eax
c010f373:	8b 40 34             	mov    0x34(%eax),%eax
c010f376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f379:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f37d:	0f 85 87 00 00 00    	jne    c010f40a <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f383:	8b 45 08             	mov    0x8(%ebp),%eax
c010f386:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f389:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f38d:	74 17                	je     c010f3a6 <inode_open_dec+0x7e>
c010f38f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f392:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f395:	85 c0                	test   %eax,%eax
c010f397:	74 0d                	je     c010f3a6 <inode_open_dec+0x7e>
c010f399:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f39c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f39f:	8b 40 08             	mov    0x8(%eax),%eax
c010f3a2:	85 c0                	test   %eax,%eax
c010f3a4:	75 24                	jne    c010f3ca <inode_open_dec+0xa2>
c010f3a6:	c7 44 24 0c f8 89 11 	movl   $0xc01189f8,0xc(%esp)
c010f3ad:	c0 
c010f3ae:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f3b5:	c0 
c010f3b6:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010f3bd:	00 
c010f3be:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f3c5:	e8 14 1b ff ff       	call   c0100ede <__panic>
c010f3ca:	c7 44 24 04 46 8a 11 	movl   $0xc0118a46,0x4(%esp)
c010f3d1:	c0 
c010f3d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3d5:	89 04 24             	mov    %eax,(%esp)
c010f3d8:	e8 32 00 00 00       	call   c010f40f <inode_check>
c010f3dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3e0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3e3:	8b 40 08             	mov    0x8(%eax),%eax
c010f3e6:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3e9:	89 14 24             	mov    %edx,(%esp)
c010f3ec:	ff d0                	call   *%eax
c010f3ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f3f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f3f5:	74 13                	je     c010f40a <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f3f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f3fe:	c7 04 24 4c 8a 11 c0 	movl   $0xc0118a4c,(%esp)
c010f405:	e8 67 0f ff ff       	call   c0100371 <cprintf>
        }
    }
    return open_count;
c010f40a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f40d:	c9                   	leave  
c010f40e:	c3                   	ret    

c010f40f <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f40f:	55                   	push   %ebp
c010f410:	89 e5                	mov    %esp,%ebp
c010f412:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f415:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f419:	74 0a                	je     c010f425 <inode_check+0x16>
c010f41b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f41e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f421:	85 c0                	test   %eax,%eax
c010f423:	75 24                	jne    c010f449 <inode_check+0x3a>
c010f425:	c7 44 24 0c 6c 8a 11 	movl   $0xc0118a6c,0xc(%esp)
c010f42c:	c0 
c010f42d:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f434:	c0 
c010f435:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010f43c:	00 
c010f43d:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f444:	e8 95 1a ff ff       	call   c0100ede <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f449:	8b 45 08             	mov    0x8(%ebp),%eax
c010f44c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f44f:	8b 00                	mov    (%eax),%eax
c010f451:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f456:	74 24                	je     c010f47c <inode_check+0x6d>
c010f458:	c7 44 24 0c 94 8a 11 	movl   $0xc0118a94,0xc(%esp)
c010f45f:	c0 
c010f460:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f467:	c0 
c010f468:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f46f:	00 
c010f470:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f477:	e8 62 1a ff ff       	call   c0100ede <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f47c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f47f:	89 04 24             	mov    %eax,(%esp)
c010f482:	e8 8f fc ff ff       	call   c010f116 <inode_ref_count>
c010f487:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f48a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f48d:	89 04 24             	mov    %eax,(%esp)
c010f490:	e8 8c fc ff ff       	call   c010f121 <inode_open_count>
c010f495:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f498:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f49b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f49e:	7c 06                	jl     c010f4a6 <inode_check+0x97>
c010f4a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f4a4:	79 24                	jns    c010f4ca <inode_check+0xbb>
c010f4a6:	c7 44 24 0c bc 8a 11 	movl   $0xc0118abc,0xc(%esp)
c010f4ad:	c0 
c010f4ae:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f4b5:	c0 
c010f4b6:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f4bd:	00 
c010f4be:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f4c5:	e8 14 1a ff ff       	call   c0100ede <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f4ca:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f4d1:	7f 09                	jg     c010f4dc <inode_check+0xcd>
c010f4d3:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f4da:	7e 24                	jle    c010f500 <inode_check+0xf1>
c010f4dc:	c7 44 24 0c e8 8a 11 	movl   $0xc0118ae8,0xc(%esp)
c010f4e3:	c0 
c010f4e4:	c7 44 24 08 03 89 11 	movl   $0xc0118903,0x8(%esp)
c010f4eb:	c0 
c010f4ec:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f4f3:	00 
c010f4f4:	c7 04 24 18 89 11 c0 	movl   $0xc0118918,(%esp)
c010f4fb:	e8 de 19 ff ff       	call   c0100ede <__panic>
}
c010f500:	c9                   	leave  
c010f501:	c3                   	ret    

c010f502 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f502:	55                   	push   %ebp
c010f503:	89 e5                	mov    %esp,%ebp
c010f505:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f508:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f50f:	e8 9b 58 ff ff       	call   c0104daf <kmalloc>
c010f514:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f517:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f51b:	74 09                	je     c010f526 <__alloc_fs+0x24>
        fs->fs_type = type;
c010f51d:	8b 55 08             	mov    0x8(%ebp),%edx
c010f520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f523:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f526:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f529:	c9                   	leave  
c010f52a:	c3                   	ret    

c010f52b <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f52b:	55                   	push   %ebp
c010f52c:	89 e5                	mov    %esp,%ebp
c010f52e:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f531:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f538:	00 
c010f539:	c7 04 24 d8 50 15 c0 	movl   $0xc01550d8,(%esp)
c010f540:	e8 2a a7 ff ff       	call   c0109c6f <sem_init>
    vfs_devlist_init();
c010f545:	e8 63 01 00 00       	call   c010f6ad <vfs_devlist_init>
}
c010f54a:	c9                   	leave  
c010f54b:	c3                   	ret    

c010f54c <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f54c:	55                   	push   %ebp
c010f54d:	89 e5                	mov    %esp,%ebp
c010f54f:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f552:	c7 04 24 d8 50 15 c0 	movl   $0xc01550d8,(%esp)
c010f559:	e8 9f a8 ff ff       	call   c0109dfd <down>
}
c010f55e:	c9                   	leave  
c010f55f:	c3                   	ret    

c010f560 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f560:	55                   	push   %ebp
c010f561:	89 e5                	mov    %esp,%ebp
c010f563:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f566:	c7 04 24 d8 50 15 c0 	movl   $0xc01550d8,(%esp)
c010f56d:	e8 70 a8 ff ff       	call   c0109de2 <up>
}
c010f572:	c9                   	leave  
c010f573:	c3                   	ret    

c010f574 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f574:	55                   	push   %ebp
c010f575:	89 e5                	mov    %esp,%ebp
c010f577:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f57a:	e8 cd ff ff ff       	call   c010f54c <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f57f:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010f584:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f587:	8b 45 08             	mov    0x8(%ebp),%eax
c010f58a:	a3 e4 50 15 c0       	mov    %eax,0xc01550e4
    }
    unlock_bootfs();
c010f58f:	e8 cc ff ff ff       	call   c010f560 <unlock_bootfs>
    if (old != NULL) {
c010f594:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f598:	74 0b                	je     c010f5a5 <change_bootfs+0x31>
        vop_ref_dec(old);
c010f59a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f59d:	89 04 24             	mov    %eax,(%esp)
c010f5a0:	e8 7c fc ff ff       	call   c010f221 <inode_ref_dec>
    }
}
c010f5a5:	c9                   	leave  
c010f5a6:	c3                   	ret    

c010f5a7 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f5a7:	55                   	push   %ebp
c010f5a8:	89 e5                	mov    %esp,%ebp
c010f5aa:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f5ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f5b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f5b8:	74 62                	je     c010f61c <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f5ba:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f5c1:	00 
c010f5c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5c5:	89 04 24             	mov    %eax,(%esp)
c010f5c8:	e8 db 5e 00 00       	call   c01154a8 <strchr>
c010f5cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f5d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f5d4:	74 0d                	je     c010f5e3 <vfs_set_bootfs+0x3c>
c010f5d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5d9:	83 c0 01             	add    $0x1,%eax
c010f5dc:	0f b6 00             	movzbl (%eax),%eax
c010f5df:	84 c0                	test   %al,%al
c010f5e1:	74 07                	je     c010f5ea <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f5e3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f5e8:	eb 42                	jmp    c010f62c <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f5ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5ed:	89 04 24             	mov    %eax,(%esp)
c010f5f0:	e8 99 10 00 00       	call   c011068e <vfs_chdir>
c010f5f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f5f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f5fc:	74 05                	je     c010f603 <vfs_set_bootfs+0x5c>
            return ret;
c010f5fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f601:	eb 29                	jmp    c010f62c <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f603:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f606:	89 04 24             	mov    %eax,(%esp)
c010f609:	e8 54 0f 00 00       	call   c0110562 <vfs_get_curdir>
c010f60e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f611:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f615:	74 05                	je     c010f61c <vfs_set_bootfs+0x75>
            return ret;
c010f617:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f61a:	eb 10                	jmp    c010f62c <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f61c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f61f:	89 04 24             	mov    %eax,(%esp)
c010f622:	e8 4d ff ff ff       	call   c010f574 <change_bootfs>
    return 0;
c010f627:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f62c:	c9                   	leave  
c010f62d:	c3                   	ret    

c010f62e <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f62e:	55                   	push   %ebp
c010f62f:	89 e5                	mov    %esp,%ebp
c010f631:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f634:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f63b:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010f640:	85 c0                	test   %eax,%eax
c010f642:	74 25                	je     c010f669 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f644:	e8 03 ff ff ff       	call   c010f54c <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f649:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010f64e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f651:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f655:	74 0d                	je     c010f664 <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f657:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010f65c:	89 04 24             	mov    %eax,(%esp)
c010f65f:	e8 a3 fb ff ff       	call   c010f207 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f664:	e8 f7 fe ff ff       	call   c010f560 <unlock_bootfs>
    }
    if (node == NULL) {
c010f669:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f66d:	75 07                	jne    c010f676 <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f66f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f674:	eb 0d                	jmp    c010f683 <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f676:	8b 45 08             	mov    0x8(%ebp),%eax
c010f679:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f67c:	89 10                	mov    %edx,(%eax)
    return 0;
c010f67e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f683:	c9                   	leave  
c010f684:	c3                   	ret    

c010f685 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f685:	55                   	push   %ebp
c010f686:	89 e5                	mov    %esp,%ebp
c010f688:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f68b:	c7 04 24 f0 50 15 c0 	movl   $0xc01550f0,(%esp)
c010f692:	e8 66 a7 ff ff       	call   c0109dfd <down>
}
c010f697:	c9                   	leave  
c010f698:	c3                   	ret    

c010f699 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f699:	55                   	push   %ebp
c010f69a:	89 e5                	mov    %esp,%ebp
c010f69c:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f69f:	c7 04 24 f0 50 15 c0 	movl   $0xc01550f0,(%esp)
c010f6a6:	e8 37 a7 ff ff       	call   c0109de2 <up>
}
c010f6ab:	c9                   	leave  
c010f6ac:	c3                   	ret    

c010f6ad <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f6ad:	55                   	push   %ebp
c010f6ae:	89 e5                	mov    %esp,%ebp
c010f6b0:	83 ec 28             	sub    $0x28,%esp
c010f6b3:	c7 45 f4 e8 50 15 c0 	movl   $0xc01550e8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f6ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f6c0:	89 50 04             	mov    %edx,0x4(%eax)
c010f6c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6c6:	8b 50 04             	mov    0x4(%eax),%edx
c010f6c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6cc:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f6ce:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f6d5:	00 
c010f6d6:	c7 04 24 f0 50 15 c0 	movl   $0xc01550f0,(%esp)
c010f6dd:	e8 8d a5 ff ff       	call   c0109c6f <sem_init>
}
c010f6e2:	c9                   	leave  
c010f6e3:	c3                   	ret    

c010f6e4 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f6e4:	55                   	push   %ebp
c010f6e5:	89 e5                	mov    %esp,%ebp
c010f6e7:	83 ec 38             	sub    $0x38,%esp
c010f6ea:	c7 45 e8 e8 50 15 c0 	movl   $0xc01550e8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f6f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6f4:	8b 40 04             	mov    0x4(%eax),%eax
c010f6f7:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f6fa:	0f 94 c0             	sete   %al
c010f6fd:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f700:	85 c0                	test   %eax,%eax
c010f702:	75 57                	jne    c010f75b <vfs_cleanup+0x77>
        lock_vdev_list();
c010f704:	e8 7c ff ff ff       	call   c010f685 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f709:	c7 45 f0 e8 50 15 c0 	movl   $0xc01550e8,-0x10(%ebp)
c010f710:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f713:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f716:	eb 27                	jmp    c010f73f <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f71b:	83 e8 10             	sub    $0x10,%eax
c010f71e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f721:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f724:	8b 40 08             	mov    0x8(%eax),%eax
c010f727:	85 c0                	test   %eax,%eax
c010f729:	74 14                	je     c010f73f <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f72b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f72e:	8b 40 08             	mov    0x8(%eax),%eax
c010f731:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f734:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f737:	8b 52 08             	mov    0x8(%edx),%edx
c010f73a:	89 14 24             	mov    %edx,(%esp)
c010f73d:	ff d0                	call   *%eax
c010f73f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f742:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f745:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f748:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f74b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f74e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f751:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f754:	75 c2                	jne    c010f718 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f756:	e8 3e ff ff ff       	call   c010f699 <unlock_vdev_list>
    }
}
c010f75b:	c9                   	leave  
c010f75c:	c3                   	ret    

c010f75d <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f75d:	55                   	push   %ebp
c010f75e:	89 e5                	mov    %esp,%ebp
c010f760:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f763:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f767:	75 24                	jne    c010f78d <vfs_get_root+0x30>
c010f769:	c7 44 24 0c 24 8b 11 	movl   $0xc0118b24,0xc(%esp)
c010f770:	c0 
c010f771:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010f778:	c0 
c010f779:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f780:	00 
c010f781:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010f788:	e8 51 17 ff ff       	call   c0100ede <__panic>
    int ret = -E_NO_DEV;
c010f78d:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f794:	c7 45 e0 e8 50 15 c0 	movl   $0xc01550e8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f79b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f79e:	8b 40 04             	mov    0x4(%eax),%eax
c010f7a1:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f7a4:	0f 94 c0             	sete   %al
c010f7a7:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f7aa:	85 c0                	test   %eax,%eax
c010f7ac:	0f 85 c3 00 00 00    	jne    c010f875 <vfs_get_root+0x118>
        lock_vdev_list();
c010f7b2:	e8 ce fe ff ff       	call   c010f685 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f7b7:	c7 45 e8 e8 50 15 c0 	movl   $0xc01550e8,-0x18(%ebp)
c010f7be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f7c4:	e9 8c 00 00 00       	jmp    c010f855 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f7c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7cc:	83 e8 10             	sub    $0x10,%eax
c010f7cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f7d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7d5:	8b 00                	mov    (%eax),%eax
c010f7d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7db:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7de:	89 04 24             	mov    %eax,(%esp)
c010f7e1:	e8 23 5c 00 00       	call   c0115409 <strcmp>
c010f7e6:	85 c0                	test   %eax,%eax
c010f7e8:	75 6b                	jne    c010f855 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f7ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f7f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7f4:	8b 40 08             	mov    0x8(%eax),%eax
c010f7f7:	85 c0                	test   %eax,%eax
c010f7f9:	74 19                	je     c010f814 <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f7fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7fe:	8b 40 08             	mov    0x8(%eax),%eax
c010f801:	8b 40 74             	mov    0x74(%eax),%eax
c010f804:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f807:	8b 52 08             	mov    0x8(%edx),%edx
c010f80a:	89 14 24             	mov    %edx,(%esp)
c010f80d:	ff d0                	call   *%eax
c010f80f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f812:	eb 21                	jmp    c010f835 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f814:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f817:	8b 40 0c             	mov    0xc(%eax),%eax
c010f81a:	85 c0                	test   %eax,%eax
c010f81c:	75 17                	jne    c010f835 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f81e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f821:	8b 40 04             	mov    0x4(%eax),%eax
c010f824:	89 04 24             	mov    %eax,(%esp)
c010f827:	e8 db f9 ff ff       	call   c010f207 <inode_ref_inc>
                        found = vdev->devnode;
c010f82c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f82f:	8b 40 04             	mov    0x4(%eax),%eax
c010f832:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f835:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f839:	74 11                	je     c010f84c <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f83b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f842:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f845:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f848:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f84a:	eb 24                	jmp    c010f870 <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f84c:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f853:	eb 1b                	jmp    c010f870 <vfs_get_root+0x113>
c010f855:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f858:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f85b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f85e:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f861:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f864:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f867:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f86a:	0f 85 59 ff ff ff    	jne    c010f7c9 <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f870:	e8 24 fe ff ff       	call   c010f699 <unlock_vdev_list>
    }
    return ret;
c010f875:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f878:	c9                   	leave  
c010f879:	c3                   	ret    

c010f87a <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f87a:	55                   	push   %ebp
c010f87b:	89 e5                	mov    %esp,%ebp
c010f87d:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f880:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f884:	75 24                	jne    c010f8aa <vfs_get_devname+0x30>
c010f886:	c7 44 24 0c 5e 8b 11 	movl   $0xc0118b5e,0xc(%esp)
c010f88d:	c0 
c010f88e:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010f895:	c0 
c010f896:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f89d:	00 
c010f89e:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010f8a5:	e8 34 16 ff ff       	call   c0100ede <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f8aa:	c7 45 f0 e8 50 15 c0 	movl   $0xc01550e8,-0x10(%ebp)
c010f8b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f8b7:	eb 1b                	jmp    c010f8d4 <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f8b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8bc:	83 e8 10             	sub    $0x10,%eax
c010f8bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f8c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8c5:	8b 40 08             	mov    0x8(%eax),%eax
c010f8c8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f8cb:	75 07                	jne    c010f8d4 <vfs_get_devname+0x5a>
            return vdev->devname;
c010f8cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8d0:	8b 00                	mov    (%eax),%eax
c010f8d2:	eb 1c                	jmp    c010f8f0 <vfs_get_devname+0x76>
c010f8d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f8da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f8dd:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f8e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f8e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f8e9:	75 ce                	jne    c010f8b9 <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f8eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f8f0:	c9                   	leave  
c010f8f1:	c3                   	ret    

c010f8f2 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f8f2:	55                   	push   %ebp
c010f8f3:	89 e5                	mov    %esp,%ebp
c010f8f5:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f8f8:	c7 45 f0 e8 50 15 c0 	movl   $0xc01550e8,-0x10(%ebp)
c010f8ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f902:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f905:	eb 28                	jmp    c010f92f <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f907:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f90a:	83 e8 10             	sub    $0x10,%eax
c010f90d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f910:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f913:	8b 00                	mov    (%eax),%eax
c010f915:	8b 55 08             	mov    0x8(%ebp),%edx
c010f918:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f91c:	89 04 24             	mov    %eax,(%esp)
c010f91f:	e8 e5 5a 00 00       	call   c0115409 <strcmp>
c010f924:	85 c0                	test   %eax,%eax
c010f926:	75 07                	jne    c010f92f <check_devname_conflict+0x3d>
            return 0;
c010f928:	b8 00 00 00 00       	mov    $0x0,%eax
c010f92d:	eb 1c                	jmp    c010f94b <check_devname_conflict+0x59>
c010f92f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f932:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f935:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f938:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f93b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f93e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f941:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f944:	75 c1                	jne    c010f907 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f946:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f94b:	c9                   	leave  
c010f94c:	c3                   	ret    

c010f94d <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f94d:	55                   	push   %ebp
c010f94e:	89 e5                	mov    %esp,%ebp
c010f950:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f953:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f957:	75 24                	jne    c010f97d <vfs_do_add+0x30>
c010f959:	c7 44 24 0c 24 8b 11 	movl   $0xc0118b24,0xc(%esp)
c010f960:	c0 
c010f961:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010f968:	c0 
c010f969:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f970:	00 
c010f971:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010f978:	e8 61 15 ff ff       	call   c0100ede <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f97d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f981:	75 06                	jne    c010f989 <vfs_do_add+0x3c>
c010f983:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f987:	74 37                	je     c010f9c0 <vfs_do_add+0x73>
c010f989:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f98d:	74 0d                	je     c010f99c <vfs_do_add+0x4f>
c010f98f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f992:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f995:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f99a:	74 24                	je     c010f9c0 <vfs_do_add+0x73>
c010f99c:	c7 44 24 0c 6c 8b 11 	movl   $0xc0118b6c,0xc(%esp)
c010f9a3:	c0 
c010f9a4:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010f9ab:	c0 
c010f9ac:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f9b3:	00 
c010f9b4:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010f9bb:	e8 1e 15 ff ff       	call   c0100ede <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f9c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9c3:	89 04 24             	mov    %eax,(%esp)
c010f9c6:	e8 46 59 00 00       	call   c0115311 <strlen>
c010f9cb:	83 f8 1f             	cmp    $0x1f,%eax
c010f9ce:	76 0a                	jbe    c010f9da <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f9d0:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f9d5:	e9 00 01 00 00       	jmp    c010fada <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f9da:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f9e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9e4:	89 04 24             	mov    %eax,(%esp)
c010f9e7:	e8 26 0a ff ff       	call   c0100412 <strdup>
c010f9ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f9ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f9f3:	75 08                	jne    c010f9fd <vfs_do_add+0xb0>
        return ret;
c010f9f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9f8:	e9 dd 00 00 00       	jmp    c010fada <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f9fd:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010fa04:	e8 a6 53 ff ff       	call   c0104daf <kmalloc>
c010fa09:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fa0c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fa10:	75 05                	jne    c010fa17 <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010fa12:	e9 b5 00 00 00       	jmp    c010facc <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010fa17:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010fa1e:	e8 62 fc ff ff       	call   c010f685 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010fa23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa26:	89 04 24             	mov    %eax,(%esp)
c010fa29:	e8 c4 fe ff ff       	call   c010f8f2 <check_devname_conflict>
c010fa2e:	85 c0                	test   %eax,%eax
c010fa30:	75 16                	jne    c010fa48 <vfs_do_add+0xfb>
        unlock_vdev_list();
c010fa32:	e8 62 fc ff ff       	call   c010f699 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010fa37:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010fa38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa3b:	89 04 24             	mov    %eax,(%esp)
c010fa3e:	e8 87 53 ff ff       	call   c0104dca <kfree>
c010fa43:	e9 84 00 00 00       	jmp    c010facc <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010fa48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fa4e:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010fa50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa53:	8b 55 0c             	mov    0xc(%ebp),%edx
c010fa56:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010fa59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa5c:	8b 55 14             	mov    0x14(%ebp),%edx
c010fa5f:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010fa62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa65:	8b 55 10             	mov    0x10(%ebp),%edx
c010fa68:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010fa6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa6e:	83 c0 10             	add    $0x10,%eax
c010fa71:	c7 45 e8 e8 50 15 c0 	movl   $0xc01550e8,-0x18(%ebp)
c010fa78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fa7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa7e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010fa81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fa84:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010fa87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fa8a:	8b 40 04             	mov    0x4(%eax),%eax
c010fa8d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010fa90:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010fa93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010fa96:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010fa99:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010fa9c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fa9f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010faa2:	89 10                	mov    %edx,(%eax)
c010faa4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010faa7:	8b 10                	mov    (%eax),%edx
c010faa9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010faac:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010faaf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fab2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fab5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010fab8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fabb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fabe:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010fac0:	e8 d4 fb ff ff       	call   c010f699 <unlock_vdev_list>
    return 0;
c010fac5:	b8 00 00 00 00       	mov    $0x0,%eax
c010faca:	eb 0e                	jmp    c010fada <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010facc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010facf:	89 04 24             	mov    %eax,(%esp)
c010fad2:	e8 f3 52 ff ff       	call   c0104dca <kfree>
    return ret;
c010fad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fada:	c9                   	leave  
c010fadb:	c3                   	ret    

c010fadc <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010fadc:	55                   	push   %ebp
c010fadd:	89 e5                	mov    %esp,%ebp
c010fadf:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010fae2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010fae9:	00 
c010faea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010faed:	89 44 24 08          	mov    %eax,0x8(%esp)
c010faf1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010faf8:	00 
c010faf9:	8b 45 08             	mov    0x8(%ebp),%eax
c010fafc:	89 04 24             	mov    %eax,(%esp)
c010faff:	e8 49 fe ff ff       	call   c010f94d <vfs_do_add>
}
c010fb04:	c9                   	leave  
c010fb05:	c3                   	ret    

c010fb06 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010fb06:	55                   	push   %ebp
c010fb07:	89 e5                	mov    %esp,%ebp
c010fb09:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010fb0c:	8b 45 10             	mov    0x10(%ebp),%eax
c010fb0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010fb13:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010fb1a:	00 
c010fb1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb22:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb25:	89 04 24             	mov    %eax,(%esp)
c010fb28:	e8 20 fe ff ff       	call   c010f94d <vfs_do_add>
}
c010fb2d:	c9                   	leave  
c010fb2e:	c3                   	ret    

c010fb2f <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010fb2f:	55                   	push   %ebp
c010fb30:	89 e5                	mov    %esp,%ebp
c010fb32:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010fb35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fb39:	75 24                	jne    c010fb5f <find_mount+0x30>
c010fb3b:	c7 44 24 0c 24 8b 11 	movl   $0xc0118b24,0xc(%esp)
c010fb42:	c0 
c010fb43:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010fb4a:	c0 
c010fb4b:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010fb52:	00 
c010fb53:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010fb5a:	e8 7f 13 ff ff       	call   c0100ede <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010fb5f:	c7 45 f0 e8 50 15 c0 	movl   $0xc01550e8,-0x10(%ebp)
c010fb66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010fb6c:	eb 3a                	jmp    c010fba8 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fb6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb71:	83 e8 10             	sub    $0x10,%eax
c010fb74:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010fb77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fb7a:	8b 40 0c             	mov    0xc(%eax),%eax
c010fb7d:	85 c0                	test   %eax,%eax
c010fb7f:	74 27                	je     c010fba8 <find_mount+0x79>
c010fb81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fb84:	8b 00                	mov    (%eax),%eax
c010fb86:	8b 55 08             	mov    0x8(%ebp),%edx
c010fb89:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fb8d:	89 04 24             	mov    %eax,(%esp)
c010fb90:	e8 74 58 00 00       	call   c0115409 <strcmp>
c010fb95:	85 c0                	test   %eax,%eax
c010fb97:	75 0f                	jne    c010fba8 <find_mount+0x79>
            *vdev_store = vdev;
c010fb99:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb9c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fb9f:	89 10                	mov    %edx,(%eax)
            return 0;
c010fba1:	b8 00 00 00 00       	mov    $0x0,%eax
c010fba6:	eb 1c                	jmp    c010fbc4 <find_mount+0x95>
c010fba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbab:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fbae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fbb1:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010fbb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fbb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fbbd:	75 af                	jne    c010fb6e <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010fbbf:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010fbc4:	c9                   	leave  
c010fbc5:	c3                   	ret    

c010fbc6 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010fbc6:	55                   	push   %ebp
c010fbc7:	89 e5                	mov    %esp,%ebp
c010fbc9:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fbcc:	e8 b4 fa ff ff       	call   c010f685 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fbd1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fbd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbdb:	89 04 24             	mov    %eax,(%esp)
c010fbde:	e8 4c ff ff ff       	call   c010fb2f <find_mount>
c010fbe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fbe6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fbea:	74 05                	je     c010fbf1 <vfs_mount+0x2b>
        goto out;
c010fbec:	e9 f4 00 00 00       	jmp    c010fce5 <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010fbf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fbf4:	8b 40 08             	mov    0x8(%eax),%eax
c010fbf7:	85 c0                	test   %eax,%eax
c010fbf9:	74 0c                	je     c010fc07 <vfs_mount+0x41>
        ret = -E_BUSY;
c010fbfb:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010fc02:	e9 de 00 00 00       	jmp    c010fce5 <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fc07:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc0a:	8b 00                	mov    (%eax),%eax
c010fc0c:	85 c0                	test   %eax,%eax
c010fc0e:	74 0a                	je     c010fc1a <vfs_mount+0x54>
c010fc10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc13:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc16:	85 c0                	test   %eax,%eax
c010fc18:	75 24                	jne    c010fc3e <vfs_mount+0x78>
c010fc1a:	c7 44 24 0c c8 8b 11 	movl   $0xc0118bc8,0xc(%esp)
c010fc21:	c0 
c010fc22:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010fc29:	c0 
c010fc2a:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010fc31:	00 
c010fc32:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010fc39:	e8 a0 12 ff ff       	call   c0100ede <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010fc3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc41:	8b 40 04             	mov    0x4(%eax),%eax
c010fc44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fc47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc4b:	74 0d                	je     c010fc5a <vfs_mount+0x94>
c010fc4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc50:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fc53:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fc58:	74 24                	je     c010fc7e <vfs_mount+0xb8>
c010fc5a:	c7 44 24 0c f4 8b 11 	movl   $0xc0118bf4,0xc(%esp)
c010fc61:	c0 
c010fc62:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010fc69:	c0 
c010fc6a:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010fc71:	00 
c010fc72:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010fc79:	e8 60 12 ff ff       	call   c0100ede <__panic>
c010fc7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc81:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fc84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc87:	83 c0 08             	add    $0x8,%eax
c010fc8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc91:	89 04 24             	mov    %eax,(%esp)
c010fc94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc97:	ff d0                	call   *%eax
c010fc99:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fca0:	75 43                	jne    c010fce5 <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010fca2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fca5:	8b 40 08             	mov    0x8(%eax),%eax
c010fca8:	85 c0                	test   %eax,%eax
c010fcaa:	75 24                	jne    c010fcd0 <vfs_mount+0x10a>
c010fcac:	c7 44 24 0c 27 8c 11 	movl   $0xc0118c27,0xc(%esp)
c010fcb3:	c0 
c010fcb4:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010fcbb:	c0 
c010fcbc:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010fcc3:	00 
c010fcc4:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010fccb:	e8 0e 12 ff ff       	call   c0100ede <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fcd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcd3:	8b 00                	mov    (%eax),%eax
c010fcd5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fcd9:	c7 04 24 38 8c 11 c0 	movl   $0xc0118c38,(%esp)
c010fce0:	e8 8c 06 ff ff       	call   c0100371 <cprintf>
    }

out:
    unlock_vdev_list();
c010fce5:	e8 af f9 ff ff       	call   c010f699 <unlock_vdev_list>
    return ret;
c010fcea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fced:	c9                   	leave  
c010fcee:	c3                   	ret    

c010fcef <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010fcef:	55                   	push   %ebp
c010fcf0:	89 e5                	mov    %esp,%ebp
c010fcf2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fcf5:	e8 8b f9 ff ff       	call   c010f685 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fcfa:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fcfd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd01:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd04:	89 04 24             	mov    %eax,(%esp)
c010fd07:	e8 23 fe ff ff       	call   c010fb2f <find_mount>
c010fd0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd13:	74 05                	je     c010fd1a <vfs_unmount+0x2b>
        goto out;
c010fd15:	e9 a8 00 00 00       	jmp    c010fdc2 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010fd1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd1d:	8b 40 08             	mov    0x8(%eax),%eax
c010fd20:	85 c0                	test   %eax,%eax
c010fd22:	75 0c                	jne    c010fd30 <vfs_unmount+0x41>
        ret = -E_INVAL;
c010fd24:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fd2b:	e9 92 00 00 00       	jmp    c010fdc2 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fd30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd33:	8b 00                	mov    (%eax),%eax
c010fd35:	85 c0                	test   %eax,%eax
c010fd37:	74 0a                	je     c010fd43 <vfs_unmount+0x54>
c010fd39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd3c:	8b 40 0c             	mov    0xc(%eax),%eax
c010fd3f:	85 c0                	test   %eax,%eax
c010fd41:	75 24                	jne    c010fd67 <vfs_unmount+0x78>
c010fd43:	c7 44 24 0c c8 8b 11 	movl   $0xc0118bc8,0xc(%esp)
c010fd4a:	c0 
c010fd4b:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c010fd52:	c0 
c010fd53:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010fd5a:	00 
c010fd5b:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c010fd62:	e8 77 11 ff ff       	call   c0100ede <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fd67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd6a:	8b 40 08             	mov    0x8(%eax),%eax
c010fd6d:	8b 40 70             	mov    0x70(%eax),%eax
c010fd70:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fd73:	8b 52 08             	mov    0x8(%edx),%edx
c010fd76:	89 14 24             	mov    %edx,(%esp)
c010fd79:	ff d0                	call   *%eax
c010fd7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd82:	74 02                	je     c010fd86 <vfs_unmount+0x97>
        goto out;
c010fd84:	eb 3c                	jmp    c010fdc2 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fd86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd89:	8b 40 08             	mov    0x8(%eax),%eax
c010fd8c:	8b 40 78             	mov    0x78(%eax),%eax
c010fd8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fd92:	8b 52 08             	mov    0x8(%edx),%edx
c010fd95:	89 14 24             	mov    %edx,(%esp)
c010fd98:	ff d0                	call   *%eax
c010fd9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fda1:	75 1f                	jne    c010fdc2 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010fda3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fda6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fdad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdb0:	8b 00                	mov    (%eax),%eax
c010fdb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fdb6:	c7 04 24 48 8c 11 c0 	movl   $0xc0118c48,(%esp)
c010fdbd:	e8 af 05 ff ff       	call   c0100371 <cprintf>
    }

out:
    unlock_vdev_list();
c010fdc2:	e8 d2 f8 ff ff       	call   c010f699 <unlock_vdev_list>
    return ret;
c010fdc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fdca:	c9                   	leave  
c010fdcb:	c3                   	ret    

c010fdcc <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fdcc:	55                   	push   %ebp
c010fdcd:	89 e5                	mov    %esp,%ebp
c010fdcf:	83 ec 38             	sub    $0x38,%esp
c010fdd2:	c7 45 e4 e8 50 15 c0 	movl   $0xc01550e8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fdd9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fddc:	8b 40 04             	mov    0x4(%eax),%eax
c010fddf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fde2:	0f 94 c0             	sete   %al
c010fde5:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fde8:	85 c0                	test   %eax,%eax
c010fdea:	0f 85 f1 00 00 00    	jne    c010fee1 <vfs_unmount_all+0x115>
        lock_vdev_list();
c010fdf0:	e8 90 f8 ff ff       	call   c010f685 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fdf5:	c7 45 f0 e8 50 15 c0 	movl   $0xc01550e8,-0x10(%ebp)
c010fdfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdff:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fe02:	e9 ba 00 00 00       	jmp    c010fec1 <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fe07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe0a:	83 e8 10             	sub    $0x10,%eax
c010fe0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fe10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe13:	8b 40 0c             	mov    0xc(%eax),%eax
c010fe16:	85 c0                	test   %eax,%eax
c010fe18:	0f 84 a3 00 00 00    	je     c010fec1 <vfs_unmount_all+0xf5>
c010fe1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe21:	8b 40 08             	mov    0x8(%eax),%eax
c010fe24:	85 c0                	test   %eax,%eax
c010fe26:	0f 84 95 00 00 00    	je     c010fec1 <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fe2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe2f:	8b 40 08             	mov    0x8(%eax),%eax
c010fe32:	8b 40 70             	mov    0x70(%eax),%eax
c010fe35:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fe38:	8b 52 08             	mov    0x8(%edx),%edx
c010fe3b:	89 14 24             	mov    %edx,(%esp)
c010fe3e:	ff d0                	call   *%eax
c010fe40:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fe43:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fe47:	74 1e                	je     c010fe67 <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fe49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe4c:	8b 00                	mov    (%eax),%eax
c010fe4e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fe51:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe55:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe59:	c7 04 24 5c 8c 11 c0 	movl   $0xc0118c5c,(%esp)
c010fe60:	e8 0c 05 ff ff       	call   c0100371 <cprintf>
                        continue ;
c010fe65:	eb 5a                	jmp    c010fec1 <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fe67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe6a:	8b 40 08             	mov    0x8(%eax),%eax
c010fe6d:	8b 40 78             	mov    0x78(%eax),%eax
c010fe70:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fe73:	8b 52 08             	mov    0x8(%edx),%edx
c010fe76:	89 14 24             	mov    %edx,(%esp)
c010fe79:	ff d0                	call   *%eax
c010fe7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fe7e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fe82:	74 1e                	je     c010fea2 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fe84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe87:	8b 00                	mov    (%eax),%eax
c010fe89:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fe8c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe90:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe94:	c7 04 24 84 8c 11 c0 	movl   $0xc0118c84,(%esp)
c010fe9b:	e8 d1 04 ff ff       	call   c0100371 <cprintf>
                        continue ;
c010fea0:	eb 1f                	jmp    c010fec1 <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010fea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fea5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010feac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010feaf:	8b 00                	mov    (%eax),%eax
c010feb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010feb5:	c7 04 24 48 8c 11 c0 	movl   $0xc0118c48,(%esp)
c010febc:	e8 b0 04 ff ff       	call   c0100371 <cprintf>
c010fec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fec4:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fec7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010feca:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010fecd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fed0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fed3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fed6:	0f 85 2b ff ff ff    	jne    c010fe07 <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010fedc:	e8 b8 f7 ff ff       	call   c010f699 <unlock_vdev_list>
    }
    return 0;
c010fee1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fee6:	c9                   	leave  
c010fee7:	c3                   	ret    

c010fee8 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010fee8:	55                   	push   %ebp
c010fee9:	89 e5                	mov    %esp,%ebp
c010feeb:	53                   	push   %ebx
c010feec:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010feef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010fef6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fef9:	83 e0 03             	and    $0x3,%eax
c010fefc:	85 c0                	test   %eax,%eax
c010fefe:	74 18                	je     c010ff18 <vfs_open+0x30>
c010ff00:	83 f8 02             	cmp    $0x2,%eax
c010ff03:	77 09                	ja     c010ff0e <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010ff05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010ff0c:	eb 0b                	jmp    c010ff19 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010ff0e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff13:	e9 ba 02 00 00       	jmp    c01101d2 <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010ff18:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010ff19:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff1c:	83 e0 10             	and    $0x10,%eax
c010ff1f:	85 c0                	test   %eax,%eax
c010ff21:	74 10                	je     c010ff33 <vfs_open+0x4b>
        if (!can_write) {
c010ff23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff27:	75 0a                	jne    c010ff33 <vfs_open+0x4b>
            return -E_INVAL;
c010ff29:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff2e:	e9 9f 02 00 00       	jmp    c01101d2 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010ff33:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff36:	83 e0 08             	and    $0x8,%eax
c010ff39:	85 c0                	test   %eax,%eax
c010ff3b:	0f 95 c0             	setne  %al
c010ff3e:	0f b6 c0             	movzbl %al,%eax
c010ff41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010ff44:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff47:	83 e0 04             	and    $0x4,%eax
c010ff4a:	85 c0                	test   %eax,%eax
c010ff4c:	0f 95 c0             	setne  %al
c010ff4f:	0f b6 c0             	movzbl %al,%eax
c010ff52:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010ff55:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ff58:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff5f:	89 04 24             	mov    %eax,(%esp)
c010ff62:	e8 7a 04 00 00       	call   c01103e1 <vfs_lookup>
c010ff67:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010ff6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ff6e:	0f 84 cc 00 00 00    	je     c0110040 <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010ff74:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010ff78:	0f 85 ba 00 00 00    	jne    c0110038 <vfs_open+0x150>
c010ff7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff82:	0f 84 b0 00 00 00    	je     c0110038 <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010ff88:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ff8b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ff8f:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010ff92:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff96:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff99:	89 04 24             	mov    %eax,(%esp)
c010ff9c:	e8 20 05 00 00       	call   c01104c1 <vfs_lookup_parent>
c010ffa1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ffa4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ffa8:	74 08                	je     c010ffb2 <vfs_open+0xca>
                return ret;
c010ffaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ffad:	e9 20 02 00 00       	jmp    c01101d2 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c010ffb2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ffb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ffb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ffbc:	74 17                	je     c010ffd5 <vfs_open+0xed>
c010ffbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ffc1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ffc4:	85 c0                	test   %eax,%eax
c010ffc6:	74 0d                	je     c010ffd5 <vfs_open+0xed>
c010ffc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ffcb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ffce:	8b 40 34             	mov    0x34(%eax),%eax
c010ffd1:	85 c0                	test   %eax,%eax
c010ffd3:	75 24                	jne    c010fff9 <vfs_open+0x111>
c010ffd5:	c7 44 24 0c b0 8c 11 	movl   $0xc0118cb0,0xc(%esp)
c010ffdc:	c0 
c010ffdd:	c7 44 24 08 ff 8c 11 	movl   $0xc0118cff,0x8(%esp)
c010ffe4:	c0 
c010ffe5:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010ffec:	00 
c010ffed:	c7 04 24 14 8d 11 c0 	movl   $0xc0118d14,(%esp)
c010fff4:	e8 e5 0e ff ff       	call   c0100ede <__panic>
c010fff9:	c7 44 24 04 2a 8d 11 	movl   $0xc0118d2a,0x4(%esp)
c0110000:	c0 
c0110001:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110004:	89 04 24             	mov    %eax,(%esp)
c0110007:	e8 03 f4 ff ff       	call   c010f40f <inode_check>
c011000c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011000f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110012:	8b 40 34             	mov    0x34(%eax),%eax
c0110015:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0110018:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011001b:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c011001e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0110022:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0110025:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0110029:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011002d:	89 14 24             	mov    %edx,(%esp)
c0110030:	ff d0                	call   *%eax
c0110032:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c0110035:	90                   	nop
c0110036:	eb 1e                	jmp    c0110056 <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c0110038:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011003b:	e9 92 01 00 00       	jmp    c01101d2 <vfs_open+0x2ea>
    } else if (excl && create) {
c0110040:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110044:	74 10                	je     c0110056 <vfs_open+0x16e>
c0110046:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011004a:	74 0a                	je     c0110056 <vfs_open+0x16e>
        return -E_EXISTS;
c011004c:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c0110051:	e9 7c 01 00 00       	jmp    c01101d2 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c0110056:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110059:	85 c0                	test   %eax,%eax
c011005b:	75 24                	jne    c0110081 <vfs_open+0x199>
c011005d:	c7 44 24 0c 31 8d 11 	movl   $0xc0118d31,0xc(%esp)
c0110064:	c0 
c0110065:	c7 44 24 08 ff 8c 11 	movl   $0xc0118cff,0x8(%esp)
c011006c:	c0 
c011006d:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c0110074:	00 
c0110075:	c7 04 24 14 8d 11 c0 	movl   $0xc0118d14,(%esp)
c011007c:	e8 5d 0e ff ff       	call   c0100ede <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c0110081:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110084:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0110087:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011008b:	74 17                	je     c01100a4 <vfs_open+0x1bc>
c011008d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110090:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110093:	85 c0                	test   %eax,%eax
c0110095:	74 0d                	je     c01100a4 <vfs_open+0x1bc>
c0110097:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011009a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011009d:	8b 40 04             	mov    0x4(%eax),%eax
c01100a0:	85 c0                	test   %eax,%eax
c01100a2:	75 24                	jne    c01100c8 <vfs_open+0x1e0>
c01100a4:	c7 44 24 0c 40 8d 11 	movl   $0xc0118d40,0xc(%esp)
c01100ab:	c0 
c01100ac:	c7 44 24 08 ff 8c 11 	movl   $0xc0118cff,0x8(%esp)
c01100b3:	c0 
c01100b4:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c01100bb:	00 
c01100bc:	c7 04 24 14 8d 11 c0 	movl   $0xc0118d14,(%esp)
c01100c3:	e8 16 0e ff ff       	call   c0100ede <__panic>
c01100c8:	c7 44 24 04 8d 8d 11 	movl   $0xc0118d8d,0x4(%esp)
c01100cf:	c0 
c01100d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01100d3:	89 04 24             	mov    %eax,(%esp)
c01100d6:	e8 34 f3 ff ff       	call   c010f40f <inode_check>
c01100db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01100de:	8b 40 3c             	mov    0x3c(%eax),%eax
c01100e1:	8b 40 04             	mov    0x4(%eax),%eax
c01100e4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01100e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01100ea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01100ee:	89 14 24             	mov    %edx,(%esp)
c01100f1:	ff d0                	call   *%eax
c01100f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01100f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01100fa:	74 13                	je     c011010f <vfs_open+0x227>
        vop_ref_dec(node);
c01100fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100ff:	89 04 24             	mov    %eax,(%esp)
c0110102:	e8 1a f1 ff ff       	call   c010f221 <inode_ref_dec>
        return ret;
c0110107:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011010a:	e9 c3 00 00 00       	jmp    c01101d2 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c011010f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110112:	89 04 24             	mov    %eax,(%esp)
c0110115:	e8 f4 f1 ff ff       	call   c010f30e <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c011011a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011011d:	83 e0 10             	and    $0x10,%eax
c0110120:	85 c0                	test   %eax,%eax
c0110122:	75 0a                	jne    c011012e <vfs_open+0x246>
c0110124:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110128:	0f 84 97 00 00 00    	je     c01101c5 <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c011012e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110131:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0110134:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0110138:	74 17                	je     c0110151 <vfs_open+0x269>
c011013a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011013d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110140:	85 c0                	test   %eax,%eax
c0110142:	74 0d                	je     c0110151 <vfs_open+0x269>
c0110144:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110147:	8b 40 3c             	mov    0x3c(%eax),%eax
c011014a:	8b 40 30             	mov    0x30(%eax),%eax
c011014d:	85 c0                	test   %eax,%eax
c011014f:	75 24                	jne    c0110175 <vfs_open+0x28d>
c0110151:	c7 44 24 0c 94 8d 11 	movl   $0xc0118d94,0xc(%esp)
c0110158:	c0 
c0110159:	c7 44 24 08 ff 8c 11 	movl   $0xc0118cff,0x8(%esp)
c0110160:	c0 
c0110161:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0110168:	00 
c0110169:	c7 04 24 14 8d 11 c0 	movl   $0xc0118d14,(%esp)
c0110170:	e8 69 0d ff ff       	call   c0100ede <__panic>
c0110175:	c7 44 24 04 e5 8d 11 	movl   $0xc0118de5,0x4(%esp)
c011017c:	c0 
c011017d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110180:	89 04 24             	mov    %eax,(%esp)
c0110183:	e8 87 f2 ff ff       	call   c010f40f <inode_check>
c0110188:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011018b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011018e:	8b 40 30             	mov    0x30(%eax),%eax
c0110191:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0110194:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011019b:	00 
c011019c:	89 14 24             	mov    %edx,(%esp)
c011019f:	ff d0                	call   *%eax
c01101a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01101a4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01101a8:	74 1b                	je     c01101c5 <vfs_open+0x2dd>
            vop_open_dec(node);
c01101aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101ad:	89 04 24             	mov    %eax,(%esp)
c01101b0:	e8 73 f1 ff ff       	call   c010f328 <inode_open_dec>
            vop_ref_dec(node);
c01101b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101b8:	89 04 24             	mov    %eax,(%esp)
c01101bb:	e8 61 f0 ff ff       	call   c010f221 <inode_ref_dec>
            return ret;
c01101c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01101c3:	eb 0d                	jmp    c01101d2 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c01101c5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01101c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01101cb:	89 10                	mov    %edx,(%eax)
    return 0;
c01101cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101d2:	83 c4 44             	add    $0x44,%esp
c01101d5:	5b                   	pop    %ebx
c01101d6:	5d                   	pop    %ebp
c01101d7:	c3                   	ret    

c01101d8 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c01101d8:	55                   	push   %ebp
c01101d9:	89 e5                	mov    %esp,%ebp
c01101db:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c01101de:	8b 45 08             	mov    0x8(%ebp),%eax
c01101e1:	89 04 24             	mov    %eax,(%esp)
c01101e4:	e8 3f f1 ff ff       	call   c010f328 <inode_open_dec>
    vop_ref_dec(node);
c01101e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01101ec:	89 04 24             	mov    %eax,(%esp)
c01101ef:	e8 2d f0 ff ff       	call   c010f221 <inode_ref_dec>
    return 0;
c01101f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101f9:	c9                   	leave  
c01101fa:	c3                   	ret    

c01101fb <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c01101fb:	55                   	push   %ebp
c01101fc:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01101fe:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110203:	5d                   	pop    %ebp
c0110204:	c3                   	ret    

c0110205 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c0110205:	55                   	push   %ebp
c0110206:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110208:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011020d:	5d                   	pop    %ebp
c011020e:	c3                   	ret    

c011020f <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c011020f:	55                   	push   %ebp
c0110210:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110212:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110217:	5d                   	pop    %ebp
c0110218:	c3                   	ret    

c0110219 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c0110219:	55                   	push   %ebp
c011021a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011021c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110221:	5d                   	pop    %ebp
c0110222:	c3                   	ret    

c0110223 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c0110223:	55                   	push   %ebp
c0110224:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110226:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011022b:	5d                   	pop    %ebp
c011022c:	c3                   	ret    

c011022d <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c011022d:	55                   	push   %ebp
c011022e:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110230:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110235:	5d                   	pop    %ebp
c0110236:	c3                   	ret    

c0110237 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c0110237:	55                   	push   %ebp
c0110238:	89 e5                	mov    %esp,%ebp
c011023a:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c011023d:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c0110244:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c011024b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0110252:	eb 32                	jmp    c0110286 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c0110254:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110257:	8b 45 08             	mov    0x8(%ebp),%eax
c011025a:	01 d0                	add    %edx,%eax
c011025c:	0f b6 00             	movzbl (%eax),%eax
c011025f:	3c 3a                	cmp    $0x3a,%al
c0110261:	75 08                	jne    c011026b <get_device+0x34>
c0110263:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110266:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110269:	eb 2a                	jmp    c0110295 <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c011026b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011026e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110271:	01 d0                	add    %edx,%eax
c0110273:	0f b6 00             	movzbl (%eax),%eax
c0110276:	3c 2f                	cmp    $0x2f,%al
c0110278:	75 08                	jne    c0110282 <get_device+0x4b>
c011027a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011027d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110280:	eb 13                	jmp    c0110295 <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c0110282:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110286:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110289:	8b 45 08             	mov    0x8(%ebp),%eax
c011028c:	01 d0                	add    %edx,%eax
c011028e:	0f b6 00             	movzbl (%eax),%eax
c0110291:	84 c0                	test   %al,%al
c0110293:	75 bf                	jne    c0110254 <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110295:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110299:	79 1e                	jns    c01102b9 <get_device+0x82>
c011029b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011029f:	74 18                	je     c01102b9 <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c01102a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102a4:	8b 55 08             	mov    0x8(%ebp),%edx
c01102a7:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c01102a9:	8b 45 10             	mov    0x10(%ebp),%eax
c01102ac:	89 04 24             	mov    %eax,(%esp)
c01102af:	e8 ae 02 00 00       	call   c0110562 <vfs_get_curdir>
c01102b4:	e9 26 01 00 00       	jmp    c01103df <get_device+0x1a8>
    }
    if (colon > 0) {
c01102b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01102bd:	7e 42                	jle    c0110301 <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c01102bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01102c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01102c5:	01 d0                	add    %edx,%eax
c01102c7:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c01102ca:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01102ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01102d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01102d4:	01 d0                	add    %edx,%eax
c01102d6:	0f b6 00             	movzbl (%eax),%eax
c01102d9:	3c 2f                	cmp    $0x2f,%al
c01102db:	74 ed                	je     c01102ca <get_device+0x93>
        *subpath = path + colon;
c01102dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01102e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01102e3:	01 c2                	add    %eax,%edx
c01102e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102e8:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c01102ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01102ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01102f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01102f4:	89 04 24             	mov    %eax,(%esp)
c01102f7:	e8 61 f4 ff ff       	call   c010f75d <vfs_get_root>
c01102fc:	e9 de 00 00 00       	jmp    c01103df <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c0110301:	8b 45 08             	mov    0x8(%ebp),%eax
c0110304:	0f b6 00             	movzbl (%eax),%eax
c0110307:	3c 2f                	cmp    $0x2f,%al
c0110309:	75 20                	jne    c011032b <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c011030b:	8b 45 10             	mov    0x10(%ebp),%eax
c011030e:	89 04 24             	mov    %eax,(%esp)
c0110311:	e8 18 f3 ff ff       	call   c010f62e <vfs_get_bootfs>
c0110316:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110319:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011031d:	0f 84 a1 00 00 00    	je     c01103c4 <get_device+0x18d>
            return ret;
c0110323:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110326:	e9 b4 00 00 00       	jmp    c01103df <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c011032b:	8b 45 08             	mov    0x8(%ebp),%eax
c011032e:	0f b6 00             	movzbl (%eax),%eax
c0110331:	3c 3a                	cmp    $0x3a,%al
c0110333:	74 24                	je     c0110359 <get_device+0x122>
c0110335:	c7 44 24 0c f0 8d 11 	movl   $0xc0118df0,0xc(%esp)
c011033c:	c0 
c011033d:	c7 44 24 08 fd 8d 11 	movl   $0xc0118dfd,0x8(%esp)
c0110344:	c0 
c0110345:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011034c:	00 
c011034d:	c7 04 24 12 8e 11 c0 	movl   $0xc0118e12,(%esp)
c0110354:	e8 85 0b ff ff       	call   c0100ede <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c0110359:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011035c:	89 04 24             	mov    %eax,(%esp)
c011035f:	e8 fe 01 00 00       	call   c0110562 <vfs_get_curdir>
c0110364:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110367:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011036b:	74 05                	je     c0110372 <get_device+0x13b>
            return ret;
c011036d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110370:	eb 6d                	jmp    c01103df <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c0110372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110375:	8b 40 38             	mov    0x38(%eax),%eax
c0110378:	85 c0                	test   %eax,%eax
c011037a:	75 24                	jne    c01103a0 <get_device+0x169>
c011037c:	c7 44 24 0c 2a 8e 11 	movl   $0xc0118e2a,0xc(%esp)
c0110383:	c0 
c0110384:	c7 44 24 08 fd 8d 11 	movl   $0xc0118dfd,0x8(%esp)
c011038b:	c0 
c011038c:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110393:	00 
c0110394:	c7 04 24 12 8e 11 c0 	movl   $0xc0118e12,(%esp)
c011039b:	e8 3e 0b ff ff       	call   c0100ede <__panic>
        *node_store = fsop_get_root(node->in_fs);
c01103a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01103a3:	8b 40 38             	mov    0x38(%eax),%eax
c01103a6:	8b 40 74             	mov    0x74(%eax),%eax
c01103a9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01103ac:	8b 52 38             	mov    0x38(%edx),%edx
c01103af:	89 14 24             	mov    %edx,(%esp)
c01103b2:	ff d0                	call   *%eax
c01103b4:	8b 55 10             	mov    0x10(%ebp),%edx
c01103b7:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c01103b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01103bc:	89 04 24             	mov    %eax,(%esp)
c01103bf:	e8 5d ee ff ff       	call   c010f221 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c01103c4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01103c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01103cb:	0f b6 00             	movzbl (%eax),%eax
c01103ce:	3c 2f                	cmp    $0x2f,%al
c01103d0:	74 f2                	je     c01103c4 <get_device+0x18d>
    *subpath = path;
c01103d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01103d5:	8b 55 08             	mov    0x8(%ebp),%edx
c01103d8:	89 10                	mov    %edx,(%eax)
    return 0;
c01103da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01103df:	c9                   	leave  
c01103e0:	c3                   	ret    

c01103e1 <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c01103e1:	55                   	push   %ebp
c01103e2:	89 e5                	mov    %esp,%ebp
c01103e4:	56                   	push   %esi
c01103e5:	53                   	push   %ebx
c01103e6:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01103e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01103ec:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01103ef:	89 54 24 08          	mov    %edx,0x8(%esp)
c01103f3:	8d 75 08             	lea    0x8(%ebp),%esi
c01103f6:	89 74 24 04          	mov    %esi,0x4(%esp)
c01103fa:	89 04 24             	mov    %eax,(%esp)
c01103fd:	e8 35 fe ff ff       	call   c0110237 <get_device>
c0110402:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110409:	74 08                	je     c0110413 <vfs_lookup+0x32>
        return ret;
c011040b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011040e:	e9 a7 00 00 00       	jmp    c01104ba <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c0110413:	8b 45 08             	mov    0x8(%ebp),%eax
c0110416:	0f b6 00             	movzbl (%eax),%eax
c0110419:	84 c0                	test   %al,%al
c011041b:	0f 84 8c 00 00 00    	je     c01104ad <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c0110421:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110424:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110427:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011042b:	74 17                	je     c0110444 <vfs_lookup+0x63>
c011042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110430:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110433:	85 c0                	test   %eax,%eax
c0110435:	74 0d                	je     c0110444 <vfs_lookup+0x63>
c0110437:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011043a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011043d:	8b 40 38             	mov    0x38(%eax),%eax
c0110440:	85 c0                	test   %eax,%eax
c0110442:	75 24                	jne    c0110468 <vfs_lookup+0x87>
c0110444:	c7 44 24 0c 40 8e 11 	movl   $0xc0118e40,0xc(%esp)
c011044b:	c0 
c011044c:	c7 44 24 08 fd 8d 11 	movl   $0xc0118dfd,0x8(%esp)
c0110453:	c0 
c0110454:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c011045b:	00 
c011045c:	c7 04 24 12 8e 11 c0 	movl   $0xc0118e12,(%esp)
c0110463:	e8 76 0a ff ff       	call   c0100ede <__panic>
c0110468:	c7 44 24 04 8f 8e 11 	movl   $0xc0118e8f,0x4(%esp)
c011046f:	c0 
c0110470:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110473:	89 04 24             	mov    %eax,(%esp)
c0110476:	e8 94 ef ff ff       	call   c010f40f <inode_check>
c011047b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011047e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110481:	8b 40 38             	mov    0x38(%eax),%eax
c0110484:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110487:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011048a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011048d:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0110491:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110495:	89 14 24             	mov    %edx,(%esp)
c0110498:	ff d0                	call   *%eax
c011049a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011049d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104a0:	89 04 24             	mov    %eax,(%esp)
c01104a3:	e8 79 ed ff ff       	call   c010f221 <inode_ref_dec>
        return ret;
c01104a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104ab:	eb 0d                	jmp    c01104ba <vfs_lookup+0xd9>
    }
    *node_store = node;
c01104ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01104b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01104b3:	89 10                	mov    %edx,(%eax)
    return 0;
c01104b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01104ba:	83 c4 20             	add    $0x20,%esp
c01104bd:	5b                   	pop    %ebx
c01104be:	5e                   	pop    %esi
c01104bf:	5d                   	pop    %ebp
c01104c0:	c3                   	ret    

c01104c1 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c01104c1:	55                   	push   %ebp
c01104c2:	89 e5                	mov    %esp,%ebp
c01104c4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01104c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01104ca:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01104cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01104d1:	8d 4d 08             	lea    0x8(%ebp),%ecx
c01104d4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01104d8:	89 04 24             	mov    %eax,(%esp)
c01104db:	e8 57 fd ff ff       	call   c0110237 <get_device>
c01104e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104e7:	74 05                	je     c01104ee <vfs_lookup_parent+0x2d>
        return ret;
c01104e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104ec:	eb 15                	jmp    c0110503 <vfs_lookup_parent+0x42>
    }
    *endp = path;
c01104ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01104f1:	8b 45 10             	mov    0x10(%ebp),%eax
c01104f4:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c01104f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01104f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01104fc:	89 10                	mov    %edx,(%eax)
    return 0;
c01104fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110503:	c9                   	leave  
c0110504:	c3                   	ret    

c0110505 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c0110505:	55                   	push   %ebp
c0110506:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c0110508:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c011050d:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110513:	8b 00                	mov    (%eax),%eax
}
c0110515:	5d                   	pop    %ebp
c0110516:	c3                   	ret    

c0110517 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c0110517:	55                   	push   %ebp
c0110518:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c011051a:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c011051f:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110525:	8b 55 08             	mov    0x8(%ebp),%edx
c0110528:	89 10                	mov    %edx,(%eax)
}
c011052a:	5d                   	pop    %ebp
c011052b:	c3                   	ret    

c011052c <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c011052c:	55                   	push   %ebp
c011052d:	89 e5                	mov    %esp,%ebp
c011052f:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c0110532:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0110537:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011053d:	89 04 24             	mov    %eax,(%esp)
c0110540:	e8 35 ac ff ff       	call   c010b17a <lock_files>
}
c0110545:	c9                   	leave  
c0110546:	c3                   	ret    

c0110547 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c0110547:	55                   	push   %ebp
c0110548:	89 e5                	mov    %esp,%ebp
c011054a:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c011054d:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c0110552:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110558:	89 04 24             	mov    %eax,(%esp)
c011055b:	e8 30 ac ff ff       	call   c010b190 <unlock_files>
}
c0110560:	c9                   	leave  
c0110561:	c3                   	ret    

c0110562 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c0110562:	55                   	push   %ebp
c0110563:	89 e5                	mov    %esp,%ebp
c0110565:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c0110568:	e8 98 ff ff ff       	call   c0110505 <get_cwd_nolock>
c011056d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110570:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110574:	74 1a                	je     c0110590 <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c0110576:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110579:	89 04 24             	mov    %eax,(%esp)
c011057c:	e8 86 ec ff ff       	call   c010f207 <inode_ref_inc>
        *dir_store = node;
c0110581:	8b 45 08             	mov    0x8(%ebp),%eax
c0110584:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110587:	89 10                	mov    %edx,(%eax)
        return 0;
c0110589:	b8 00 00 00 00       	mov    $0x0,%eax
c011058e:	eb 05                	jmp    c0110595 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c0110590:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110595:	c9                   	leave  
c0110596:	c3                   	ret    

c0110597 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110597:	55                   	push   %ebp
c0110598:	89 e5                	mov    %esp,%ebp
c011059a:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c011059d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c01105a4:	e8 83 ff ff ff       	call   c011052c <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c01105a9:	e8 57 ff ff ff       	call   c0110505 <get_cwd_nolock>
c01105ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01105b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01105b4:	3b 45 08             	cmp    0x8(%ebp),%eax
c01105b7:	0f 84 c7 00 00 00    	je     c0110684 <vfs_set_curdir+0xed>
        if (dir != NULL) {
c01105bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01105c1:	0f 84 a1 00 00 00    	je     c0110668 <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c01105c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01105ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01105cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01105d1:	74 17                	je     c01105ea <vfs_set_curdir+0x53>
c01105d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105d6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105d9:	85 c0                	test   %eax,%eax
c01105db:	74 0d                	je     c01105ea <vfs_set_curdir+0x53>
c01105dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105e0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105e3:	8b 40 28             	mov    0x28(%eax),%eax
c01105e6:	85 c0                	test   %eax,%eax
c01105e8:	75 24                	jne    c011060e <vfs_set_curdir+0x77>
c01105ea:	c7 44 24 0c 98 8e 11 	movl   $0xc0118e98,0xc(%esp)
c01105f1:	c0 
c01105f2:	c7 44 24 08 e8 8e 11 	movl   $0xc0118ee8,0x8(%esp)
c01105f9:	c0 
c01105fa:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c0110601:	00 
c0110602:	c7 04 24 fd 8e 11 c0 	movl   $0xc0118efd,(%esp)
c0110609:	e8 d0 08 ff ff       	call   c0100ede <__panic>
c011060e:	c7 44 24 04 13 8f 11 	movl   $0xc0118f13,0x4(%esp)
c0110615:	c0 
c0110616:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110619:	89 04 24             	mov    %eax,(%esp)
c011061c:	e8 ee ed ff ff       	call   c010f40f <inode_check>
c0110621:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110624:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110627:	8b 40 28             	mov    0x28(%eax),%eax
c011062a:	8d 55 e8             	lea    -0x18(%ebp),%edx
c011062d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110631:	8b 55 08             	mov    0x8(%ebp),%edx
c0110634:	89 14 24             	mov    %edx,(%esp)
c0110637:	ff d0                	call   *%eax
c0110639:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011063c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110640:	74 02                	je     c0110644 <vfs_set_curdir+0xad>
                goto out;
c0110642:	eb 40                	jmp    c0110684 <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c0110644:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110647:	25 00 70 00 00       	and    $0x7000,%eax
c011064c:	3d 00 20 00 00       	cmp    $0x2000,%eax
c0110651:	74 0a                	je     c011065d <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c0110653:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c011065a:	90                   	nop
c011065b:	eb 27                	jmp    c0110684 <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c011065d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110660:	89 04 24             	mov    %eax,(%esp)
c0110663:	e8 9f eb ff ff       	call   c010f207 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c0110668:	8b 45 08             	mov    0x8(%ebp),%eax
c011066b:	89 04 24             	mov    %eax,(%esp)
c011066e:	e8 a4 fe ff ff       	call   c0110517 <set_cwd_nolock>
        if (old_dir != NULL) {
c0110673:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110677:	74 0b                	je     c0110684 <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c0110679:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011067c:	89 04 24             	mov    %eax,(%esp)
c011067f:	e8 9d eb ff ff       	call   c010f221 <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c0110684:	e8 be fe ff ff       	call   c0110547 <unlock_cfs>
    return ret;
c0110689:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011068c:	c9                   	leave  
c011068d:	c3                   	ret    

c011068e <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c011068e:	55                   	push   %ebp
c011068f:	89 e5                	mov    %esp,%ebp
c0110691:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c0110694:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110697:	89 44 24 04          	mov    %eax,0x4(%esp)
c011069b:	8b 45 08             	mov    0x8(%ebp),%eax
c011069e:	89 04 24             	mov    %eax,(%esp)
c01106a1:	e8 3b fd ff ff       	call   c01103e1 <vfs_lookup>
c01106a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106ad:	75 19                	jne    c01106c8 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c01106af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106b2:	89 04 24             	mov    %eax,(%esp)
c01106b5:	e8 dd fe ff ff       	call   c0110597 <vfs_set_curdir>
c01106ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c01106bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106c0:	89 04 24             	mov    %eax,(%esp)
c01106c3:	e8 59 eb ff ff       	call   c010f221 <inode_ref_dec>
    }
    return ret;
c01106c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01106cb:	c9                   	leave  
c01106cc:	c3                   	ret    

c01106cd <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c01106cd:	55                   	push   %ebp
c01106ce:	89 e5                	mov    %esp,%ebp
c01106d0:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c01106d3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01106d6:	89 04 24             	mov    %eax,(%esp)
c01106d9:	e8 84 fe ff ff       	call   c0110562 <vfs_get_curdir>
c01106de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106e5:	74 08                	je     c01106ef <vfs_getcwd+0x22>
        return ret;
c01106e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106ea:	e9 3a 01 00 00       	jmp    c0110829 <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c01106ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01106f2:	8b 40 38             	mov    0x38(%eax),%eax
c01106f5:	85 c0                	test   %eax,%eax
c01106f7:	75 24                	jne    c011071d <vfs_getcwd+0x50>
c01106f9:	c7 44 24 0c 1b 8f 11 	movl   $0xc0118f1b,0xc(%esp)
c0110700:	c0 
c0110701:	c7 44 24 08 e8 8e 11 	movl   $0xc0118ee8,0x8(%esp)
c0110708:	c0 
c0110709:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c0110710:	00 
c0110711:	c7 04 24 fd 8e 11 c0 	movl   $0xc0118efd,(%esp)
c0110718:	e8 c1 07 ff ff       	call   c0100ede <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c011071d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110720:	8b 40 38             	mov    0x38(%eax),%eax
c0110723:	89 04 24             	mov    %eax,(%esp)
c0110726:	e8 4f f1 ff ff       	call   c010f87a <vfs_get_devname>
c011072b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c011072e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110731:	89 04 24             	mov    %eax,(%esp)
c0110734:	e8 d8 4b 00 00       	call   c0115311 <strlen>
c0110739:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110740:	00 
c0110741:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110748:	00 
c0110749:	89 44 24 08          	mov    %eax,0x8(%esp)
c011074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110750:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110754:	8b 45 08             	mov    0x8(%ebp),%eax
c0110757:	89 04 24             	mov    %eax,(%esp)
c011075a:	e8 13 ad ff ff       	call   c010b472 <iobuf_move>
c011075f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110762:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110766:	74 05                	je     c011076d <vfs_getcwd+0xa0>
        goto out;
c0110768:	e9 ae 00 00 00       	jmp    c011081b <vfs_getcwd+0x14e>
    }
    char colon = ':';
c011076d:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c0110771:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110778:	00 
c0110779:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110780:	00 
c0110781:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110788:	00 
c0110789:	8d 45 e7             	lea    -0x19(%ebp),%eax
c011078c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110790:	8b 45 08             	mov    0x8(%ebp),%eax
c0110793:	89 04 24             	mov    %eax,(%esp)
c0110796:	e8 d7 ac ff ff       	call   c010b472 <iobuf_move>
c011079b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011079e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01107a2:	74 02                	je     c01107a6 <vfs_getcwd+0xd9>
        goto out;
c01107a4:	eb 75                	jmp    c011081b <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c01107a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01107a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01107ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01107b0:	74 17                	je     c01107c9 <vfs_getcwd+0xfc>
c01107b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01107b5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01107b8:	85 c0                	test   %eax,%eax
c01107ba:	74 0d                	je     c01107c9 <vfs_getcwd+0xfc>
c01107bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01107bf:	8b 40 3c             	mov    0x3c(%eax),%eax
c01107c2:	8b 40 1c             	mov    0x1c(%eax),%eax
c01107c5:	85 c0                	test   %eax,%eax
c01107c7:	75 24                	jne    c01107ed <vfs_getcwd+0x120>
c01107c9:	c7 44 24 0c 30 8f 11 	movl   $0xc0118f30,0xc(%esp)
c01107d0:	c0 
c01107d1:	c7 44 24 08 e8 8e 11 	movl   $0xc0118ee8,0x8(%esp)
c01107d8:	c0 
c01107d9:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c01107e0:	00 
c01107e1:	c7 04 24 fd 8e 11 c0 	movl   $0xc0118efd,(%esp)
c01107e8:	e8 f1 06 ff ff       	call   c0100ede <__panic>
c01107ed:	c7 44 24 04 81 8f 11 	movl   $0xc0118f81,0x4(%esp)
c01107f4:	c0 
c01107f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01107f8:	89 04 24             	mov    %eax,(%esp)
c01107fb:	e8 0f ec ff ff       	call   c010f40f <inode_check>
c0110800:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110803:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110806:	8b 40 1c             	mov    0x1c(%eax),%eax
c0110809:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011080c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c011080f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110813:	89 14 24             	mov    %edx,(%esp)
c0110816:	ff d0                	call   *%eax
c0110818:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c011081b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011081e:	89 04 24             	mov    %eax,(%esp)
c0110821:	e8 fb e9 ff ff       	call   c010f221 <inode_ref_dec>
    return ret;
c0110826:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110829:	c9                   	leave  
c011082a:	c3                   	ret    

c011082b <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c011082b:	55                   	push   %ebp
c011082c:	89 e5                	mov    %esp,%ebp
c011082e:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c0110831:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110834:	83 e0 3c             	and    $0x3c,%eax
c0110837:	85 c0                	test   %eax,%eax
c0110839:	74 07                	je     c0110842 <dev_open+0x17>
        return -E_INVAL;
c011083b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110840:	eb 58                	jmp    c011089a <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c0110842:	8b 45 08             	mov    0x8(%ebp),%eax
c0110845:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110848:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011084c:	74 0d                	je     c011085b <dev_open+0x30>
c011084e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110851:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110854:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110859:	74 24                	je     c011087f <dev_open+0x54>
c011085b:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c0110862:	c0 
c0110863:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c011086a:	c0 
c011086b:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0110872:	00 
c0110873:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c011087a:	e8 5f 06 ff ff       	call   c0100ede <__panic>
c011087f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110882:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0110885:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110888:	8b 40 08             	mov    0x8(%eax),%eax
c011088b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011088e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110892:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110895:	89 14 24             	mov    %edx,(%esp)
c0110898:	ff d0                	call   *%eax
}
c011089a:	c9                   	leave  
c011089b:	c3                   	ret    

c011089c <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011089c:	55                   	push   %ebp
c011089d:	89 e5                	mov    %esp,%ebp
c011089f:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01108a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01108a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01108ac:	74 0d                	je     c01108bb <dev_close+0x1f>
c01108ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108b1:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108b4:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01108b9:	74 24                	je     c01108df <dev_close+0x43>
c01108bb:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c01108c2:	c0 
c01108c3:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c01108ca:	c0 
c01108cb:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01108d2:	00 
c01108d3:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c01108da:	e8 ff 05 ff ff       	call   c0100ede <__panic>
c01108df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c01108e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01108e8:	8b 40 0c             	mov    0xc(%eax),%eax
c01108eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01108ee:	89 14 24             	mov    %edx,(%esp)
c01108f1:	ff d0                	call   *%eax
}
c01108f3:	c9                   	leave  
c01108f4:	c3                   	ret    

c01108f5 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01108f5:	55                   	push   %ebp
c01108f6:	89 e5                	mov    %esp,%ebp
c01108f8:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01108fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01108fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110901:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110905:	74 0d                	je     c0110914 <dev_read+0x1f>
c0110907:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011090a:	8b 40 2c             	mov    0x2c(%eax),%eax
c011090d:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110912:	74 24                	je     c0110938 <dev_read+0x43>
c0110914:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c011091b:	c0 
c011091c:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c0110923:	c0 
c0110924:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c011092b:	00 
c011092c:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c0110933:	e8 a6 05 ff ff       	call   c0100ede <__panic>
c0110938:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011093b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c011093e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110941:	8b 40 10             	mov    0x10(%eax),%eax
c0110944:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011094b:	00 
c011094c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011094f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110953:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110956:	89 14 24             	mov    %edx,(%esp)
c0110959:	ff d0                	call   *%eax
}
c011095b:	c9                   	leave  
c011095c:	c3                   	ret    

c011095d <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c011095d:	55                   	push   %ebp
c011095e:	89 e5                	mov    %esp,%ebp
c0110960:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110963:	8b 45 08             	mov    0x8(%ebp),%eax
c0110966:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110969:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011096d:	74 0d                	je     c011097c <dev_write+0x1f>
c011096f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110972:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110975:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011097a:	74 24                	je     c01109a0 <dev_write+0x43>
c011097c:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c0110983:	c0 
c0110984:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c011098b:	c0 
c011098c:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110993:	00 
c0110994:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c011099b:	e8 3e 05 ff ff       	call   c0100ede <__panic>
c01109a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c01109a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109a9:	8b 40 10             	mov    0x10(%eax),%eax
c01109ac:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01109b3:	00 
c01109b4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01109b7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01109bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01109be:	89 14 24             	mov    %edx,(%esp)
c01109c1:	ff d0                	call   *%eax
}
c01109c3:	c9                   	leave  
c01109c4:	c3                   	ret    

c01109c5 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c01109c5:	55                   	push   %ebp
c01109c6:	89 e5                	mov    %esp,%ebp
c01109c8:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01109cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01109ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01109d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109d5:	74 0d                	je     c01109e4 <dev_ioctl+0x1f>
c01109d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109da:	8b 40 2c             	mov    0x2c(%eax),%eax
c01109dd:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01109e2:	74 24                	je     c0110a08 <dev_ioctl+0x43>
c01109e4:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c01109eb:	c0 
c01109ec:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c01109f3:	c0 
c01109f4:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c01109fb:	00 
c01109fc:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c0110a03:	e8 d6 04 ff ff       	call   c0100ede <__panic>
c0110a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c0110a0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a11:	8b 40 14             	mov    0x14(%eax),%eax
c0110a14:	8b 55 10             	mov    0x10(%ebp),%edx
c0110a17:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110a1b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110a1e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110a22:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110a25:	89 14 24             	mov    %edx,(%esp)
c0110a28:	ff d0                	call   *%eax
}
c0110a2a:	c9                   	leave  
c0110a2b:	c3                   	ret    

c0110a2c <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c0110a2c:	55                   	push   %ebp
c0110a2d:	89 e5                	mov    %esp,%ebp
c0110a2f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110a32:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0110a39:	00 
c0110a3a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110a41:	00 
c0110a42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a45:	89 04 24             	mov    %eax,(%esp)
c0110a48:	e8 1a 4c 00 00       	call   c0115667 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0110a4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a57:	74 17                	je     c0110a70 <dev_fstat+0x44>
c0110a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a5c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110a5f:	85 c0                	test   %eax,%eax
c0110a61:	74 0d                	je     c0110a70 <dev_fstat+0x44>
c0110a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a66:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110a69:	8b 40 28             	mov    0x28(%eax),%eax
c0110a6c:	85 c0                	test   %eax,%eax
c0110a6e:	75 24                	jne    c0110a94 <dev_fstat+0x68>
c0110a70:	c7 44 24 0c fc 8f 11 	movl   $0xc0118ffc,0xc(%esp)
c0110a77:	c0 
c0110a78:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c0110a7f:	c0 
c0110a80:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0110a87:	00 
c0110a88:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c0110a8f:	e8 4a 04 ff ff       	call   c0100ede <__panic>
c0110a94:	c7 44 24 04 4c 90 11 	movl   $0xc011904c,0x4(%esp)
c0110a9b:	c0 
c0110a9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a9f:	89 04 24             	mov    %eax,(%esp)
c0110aa2:	e8 68 e9 ff ff       	call   c010f40f <inode_check>
c0110aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110aaa:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110aad:	8b 40 28             	mov    0x28(%eax),%eax
c0110ab0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110ab3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110ab7:	8b 55 08             	mov    0x8(%ebp),%edx
c0110aba:	89 14 24             	mov    %edx,(%esp)
c0110abd:	ff d0                	call   *%eax
c0110abf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110ac2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110ac6:	74 05                	je     c0110acd <dev_fstat+0xa1>
        return ret;
c0110ac8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110acb:	eb 72                	jmp    c0110b3f <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0110acd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ad0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110ad3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110ad7:	74 0d                	je     c0110ae6 <dev_fstat+0xba>
c0110ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110adc:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110adf:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110ae4:	74 24                	je     c0110b0a <dev_fstat+0xde>
c0110ae6:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c0110aed:	c0 
c0110aee:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c0110af5:	c0 
c0110af6:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0110afd:	00 
c0110afe:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c0110b05:	e8 d4 03 ff ff       	call   c0100ede <__panic>
c0110b0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c0110b10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b13:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110b1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110b1d:	8b 10                	mov    (%eax),%edx
c0110b1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b22:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c0110b25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b28:	8b 50 08             	mov    0x8(%eax),%edx
c0110b2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110b2e:	8b 40 04             	mov    0x4(%eax),%eax
c0110b31:	0f af d0             	imul   %eax,%edx
c0110b34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b37:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110b3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110b3f:	c9                   	leave  
c0110b40:	c3                   	ret    

c0110b41 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c0110b41:	55                   	push   %ebp
c0110b42:	89 e5                	mov    %esp,%ebp
c0110b44:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110b51:	74 0d                	je     c0110b60 <dev_gettype+0x1f>
c0110b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b56:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110b59:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110b5e:	74 24                	je     c0110b84 <dev_gettype+0x43>
c0110b60:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c0110b67:	c0 
c0110b68:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c0110b6f:	c0 
c0110b70:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0110b77:	00 
c0110b78:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c0110b7f:	e8 5a 03 ff ff       	call   c0100ede <__panic>
c0110b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b87:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110b8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b8d:	8b 00                	mov    (%eax),%eax
c0110b8f:	85 c0                	test   %eax,%eax
c0110b91:	74 07                	je     c0110b9a <dev_gettype+0x59>
c0110b93:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110b98:	eb 05                	jmp    c0110b9f <dev_gettype+0x5e>
c0110b9a:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110b9f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110ba2:	89 02                	mov    %eax,(%edx)
    return 0;
c0110ba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110ba9:	c9                   	leave  
c0110baa:	c3                   	ret    

c0110bab <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110bab:	55                   	push   %ebp
c0110bac:	89 e5                	mov    %esp,%ebp
c0110bae:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110bb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110bb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110bbb:	74 0d                	je     c0110bca <dev_tryseek+0x1f>
c0110bbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bc0:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110bc3:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110bc8:	74 24                	je     c0110bee <dev_tryseek+0x43>
c0110bca:	c7 44 24 0c a0 8f 11 	movl   $0xc0118fa0,0xc(%esp)
c0110bd1:	c0 
c0110bd2:	c7 44 24 08 d3 8f 11 	movl   $0xc0118fd3,0x8(%esp)
c0110bd9:	c0 
c0110bda:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0110be1:	00 
c0110be2:	c7 04 24 e8 8f 11 c0 	movl   $0xc0118fe8,(%esp)
c0110be9:	e8 f0 02 ff ff       	call   c0100ede <__panic>
c0110bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110bf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110bf7:	8b 00                	mov    (%eax),%eax
c0110bf9:	85 c0                	test   %eax,%eax
c0110bfb:	74 38                	je     c0110c35 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c0110bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c00:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c03:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110c06:	ba 00 00 00 00       	mov    $0x0,%edx
c0110c0b:	f7 f1                	div    %ecx
c0110c0d:	89 d0                	mov    %edx,%eax
c0110c0f:	85 c0                	test   %eax,%eax
c0110c11:	75 22                	jne    c0110c35 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110c13:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110c17:	78 1c                	js     c0110c35 <dev_tryseek+0x8a>
c0110c19:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110c1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c1f:	8b 08                	mov    (%eax),%ecx
c0110c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c24:	8b 40 04             	mov    0x4(%eax),%eax
c0110c27:	0f af c1             	imul   %ecx,%eax
c0110c2a:	39 c2                	cmp    %eax,%edx
c0110c2c:	73 07                	jae    c0110c35 <dev_tryseek+0x8a>
                return 0;
c0110c2e:	b8 00 00 00 00       	mov    $0x0,%eax
c0110c33:	eb 05                	jmp    c0110c3a <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c0110c35:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110c3a:	c9                   	leave  
c0110c3b:	c3                   	ret    

c0110c3c <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110c3c:	55                   	push   %ebp
c0110c3d:	89 e5                	mov    %esp,%ebp
c0110c3f:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c0110c42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c45:	0f b6 00             	movzbl (%eax),%eax
c0110c48:	84 c0                	test   %al,%al
c0110c4a:	74 07                	je     c0110c53 <dev_lookup+0x17>
        return -E_NOENT;
c0110c4c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110c51:	eb 18                	jmp    c0110c6b <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110c53:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c56:	89 04 24             	mov    %eax,(%esp)
c0110c59:	e8 a9 e5 ff ff       	call   c010f207 <inode_ref_inc>
    *node_store = node;
c0110c5e:	8b 45 10             	mov    0x10(%ebp),%eax
c0110c61:	8b 55 08             	mov    0x8(%ebp),%edx
c0110c64:	89 10                	mov    %edx,(%eax)
    return 0;
c0110c66:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110c6b:	c9                   	leave  
c0110c6c:	c3                   	ret    

c0110c6d <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110c6d:	55                   	push   %ebp
c0110c6e:	89 e5                	mov    %esp,%ebp
c0110c70:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110c73:	e8 8f 07 00 00       	call   c0111407 <dev_init_stdin>
    init_device(stdout);
c0110c78:	e8 0a 09 00 00       	call   c0111587 <dev_init_stdout>
    init_device(disk0);
c0110c7d:	e8 26 04 00 00       	call   c01110a8 <dev_init_disk0>
}
c0110c82:	c9                   	leave  
c0110c83:	c3                   	ret    

c0110c84 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110c84:	55                   	push   %ebp
c0110c85:	89 e5                	mov    %esp,%ebp
c0110c87:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110c8a:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110c91:	e8 96 e4 ff ff       	call   c010f12c <__alloc_inode>
c0110c96:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110c9d:	74 1b                	je     c0110cba <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110c9f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110ca6:	00 
c0110ca7:	c7 44 24 04 60 90 11 	movl   $0xc0119060,0x4(%esp)
c0110cae:	c0 
c0110caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cb2:	89 04 24             	mov    %eax,(%esp)
c0110cb5:	e8 9b e4 ff ff       	call   c010f155 <inode_init>
    }
    return node;
c0110cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110cbd:	c9                   	leave  
c0110cbe:	c3                   	ret    

c0110cbf <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110cbf:	55                   	push   %ebp
c0110cc0:	89 e5                	mov    %esp,%ebp
c0110cc2:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110cc5:	c7 04 24 00 51 15 c0 	movl   $0xc0155100,(%esp)
c0110ccc:	e8 2c 91 ff ff       	call   c0109dfd <down>
}
c0110cd1:	c9                   	leave  
c0110cd2:	c3                   	ret    

c0110cd3 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110cd3:	55                   	push   %ebp
c0110cd4:	89 e5                	mov    %esp,%ebp
c0110cd6:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110cd9:	c7 04 24 00 51 15 c0 	movl   $0xc0155100,(%esp)
c0110ce0:	e8 fd 90 ff ff       	call   c0109de2 <up>
}
c0110ce5:	c9                   	leave  
c0110ce6:	c3                   	ret    

c0110ce7 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110ce7:	55                   	push   %ebp
c0110ce8:	89 e5                	mov    %esp,%ebp
    return 0;
c0110cea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110cef:	5d                   	pop    %ebp
c0110cf0:	c3                   	ret    

c0110cf1 <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110cf1:	55                   	push   %ebp
c0110cf2:	89 e5                	mov    %esp,%ebp
    return 0;
c0110cf4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110cf9:	5d                   	pop    %ebp
c0110cfa:	c3                   	ret    

c0110cfb <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110cfb:	55                   	push   %ebp
c0110cfc:	89 e5                	mov    %esp,%ebp
c0110cfe:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d04:	c1 e0 03             	shl    $0x3,%eax
c0110d07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d0d:	c1 e0 03             	shl    $0x3,%eax
c0110d10:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110d13:	a1 fc 50 15 c0       	mov    0xc01550fc,%eax
c0110d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110d1b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110d1f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110d23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d2a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110d31:	e8 91 0f ff ff       	call   c0101cc7 <ide_read_secs>
c0110d36:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110d39:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110d3d:	74 3f                	je     c0110d7e <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110d3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d42:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110d46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110d49:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d50:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d57:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d5e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110d62:	c7 44 24 08 a0 90 11 	movl   $0xc01190a0,0x8(%esp)
c0110d69:	c0 
c0110d6a:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110d71:	00 
c0110d72:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c0110d79:	e8 60 01 ff ff       	call   c0100ede <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110d7e:	c9                   	leave  
c0110d7f:	c3                   	ret    

c0110d80 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110d80:	55                   	push   %ebp
c0110d81:	89 e5                	mov    %esp,%ebp
c0110d83:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110d86:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d89:	c1 e0 03             	shl    $0x3,%eax
c0110d8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d92:	c1 e0 03             	shl    $0x3,%eax
c0110d95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110d98:	a1 fc 50 15 c0       	mov    0xc01550fc,%eax
c0110d9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110da0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110da4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110da8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110dab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110daf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110db6:	e8 4e 11 ff ff       	call   c0101f09 <ide_write_secs>
c0110dbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110dbe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110dc2:	74 3f                	je     c0110e03 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110dc7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110dcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110dce:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110dd5:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ddc:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110de0:	8b 45 08             	mov    0x8(%ebp),%eax
c0110de3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110de7:	c7 44 24 08 04 91 11 	movl   $0xc0119104,0x8(%esp)
c0110dee:	c0 
c0110def:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110df6:	00 
c0110df7:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c0110dfe:	e8 db 00 ff ff       	call   c0100ede <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110e03:	c9                   	leave  
c0110e04:	c3                   	ret    

c0110e05 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110e05:	55                   	push   %ebp
c0110e06:	89 e5                	mov    %esp,%ebp
c0110e08:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110e0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e0e:	8b 40 04             	mov    0x4(%eax),%eax
c0110e11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110e14:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e17:	8b 40 0c             	mov    0xc(%eax),%eax
c0110e1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110e1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110e20:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110e26:	85 c0                	test   %eax,%eax
c0110e28:	0f 48 c2             	cmovs  %edx,%eax
c0110e2b:	c1 f8 0c             	sar    $0xc,%eax
c0110e2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e34:	c1 e8 0c             	shr    $0xc,%eax
c0110e37:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110e3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110e3d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110e42:	85 c0                	test   %eax,%eax
c0110e44:	75 0c                	jne    c0110e52 <disk0_io+0x4d>
c0110e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e49:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110e4e:	85 c0                	test   %eax,%eax
c0110e50:	74 0a                	je     c0110e5c <disk0_io+0x57>
        return -E_INVAL;
c0110e52:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110e57:	e9 7a 01 00 00       	jmp    c0110fd6 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110e5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110e62:	01 c2                	add    %eax,%edx
c0110e64:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e67:	8b 00                	mov    (%eax),%eax
c0110e69:	39 c2                	cmp    %eax,%edx
c0110e6b:	76 0a                	jbe    c0110e77 <disk0_io+0x72>
        return -E_INVAL;
c0110e6d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110e72:	e9 5f 01 00 00       	jmp    c0110fd6 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110e77:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110e7b:	75 0a                	jne    c0110e87 <disk0_io+0x82>
        return 0;
c0110e7d:	b8 00 00 00 00       	mov    $0x0,%eax
c0110e82:	e9 4f 01 00 00       	jmp    c0110fd6 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110e87:	e8 33 fe ff ff       	call   c0110cbf <lock_disk0>
    while (resid != 0) {
c0110e8c:	e9 31 01 00 00       	jmp    c0110fc2 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110e91:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110e98:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110e9c:	0f 84 89 00 00 00    	je     c0110f2b <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110ea2:	a1 fc 50 15 c0       	mov    0xc01550fc,%eax
c0110ea7:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110eaa:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110eae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110eb5:	00 
c0110eb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110eb9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110ebd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110ec1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ec4:	89 04 24             	mov    %eax,(%esp)
c0110ec7:	e8 a6 a5 ff ff       	call   c010b472 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110ecc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ecf:	85 c0                	test   %eax,%eax
c0110ed1:	74 14                	je     c0110ee7 <disk0_io+0xe2>
c0110ed3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ed6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110ed9:	77 0c                	ja     c0110ee7 <disk0_io+0xe2>
c0110edb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ede:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110ee3:	85 c0                	test   %eax,%eax
c0110ee5:	74 24                	je     c0110f0b <disk0_io+0x106>
c0110ee7:	c7 44 24 0c 50 91 11 	movl   $0xc0119150,0xc(%esp)
c0110eee:	c0 
c0110eef:	c7 44 24 08 8e 91 11 	movl   $0xc011918e,0x8(%esp)
c0110ef6:	c0 
c0110ef7:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110efe:	00 
c0110eff:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c0110f06:	e8 d3 ff fe ff       	call   c0100ede <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110f0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f0e:	c1 e8 0c             	shr    $0xc,%eax
c0110f11:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110f14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f17:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f1e:	89 04 24             	mov    %eax,(%esp)
c0110f21:	e8 5a fe ff ff       	call   c0110d80 <disk0_write_blks_nolock>
c0110f26:	e9 8b 00 00 00       	jmp    c0110fb6 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110f2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110f31:	76 06                	jbe    c0110f39 <disk0_io+0x134>
                alen = resid;
c0110f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f36:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110f39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f3c:	c1 e8 0c             	shr    $0xc,%eax
c0110f3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f4c:	89 04 24             	mov    %eax,(%esp)
c0110f4f:	e8 a7 fd ff ff       	call   c0110cfb <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110f54:	a1 fc 50 15 c0       	mov    0xc01550fc,%eax
c0110f59:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110f5c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110f60:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110f67:	00 
c0110f68:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110f6b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110f6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f76:	89 04 24             	mov    %eax,(%esp)
c0110f79:	e8 f4 a4 ff ff       	call   c010b472 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110f7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f81:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110f84:	75 0c                	jne    c0110f92 <disk0_io+0x18d>
c0110f86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f89:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f8e:	85 c0                	test   %eax,%eax
c0110f90:	74 24                	je     c0110fb6 <disk0_io+0x1b1>
c0110f92:	c7 44 24 0c a4 91 11 	movl   $0xc01191a4,0xc(%esp)
c0110f99:	c0 
c0110f9a:	c7 44 24 08 8e 91 11 	movl   $0xc011918e,0x8(%esp)
c0110fa1:	c0 
c0110fa2:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0110fa9:	00 
c0110faa:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c0110fb1:	e8 28 ff fe ff       	call   c0100ede <__panic>
        }
        resid -= copied, blkno += nblks;
c0110fb6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110fb9:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110fbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110fbf:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110fc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110fc6:	0f 85 c5 fe ff ff    	jne    c0110e91 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c0110fcc:	e8 02 fd ff ff       	call   c0110cd3 <unlock_disk0>
    return 0;
c0110fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110fd6:	c9                   	leave  
c0110fd7:	c3                   	ret    

c0110fd8 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110fd8:	55                   	push   %ebp
c0110fd9:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110fdb:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110fe0:	5d                   	pop    %ebp
c0110fe1:	c3                   	ret    

c0110fe2 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110fe2:	55                   	push   %ebp
c0110fe3:	89 e5                	mov    %esp,%ebp
c0110fe5:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110fe8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110fef:	e8 55 0c ff ff       	call   c0101c49 <ide_device_valid>
c0110ff4:	85 c0                	test   %eax,%eax
c0110ff6:	75 1c                	jne    c0111014 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0110ff8:	c7 44 24 08 d4 91 11 	movl   $0xc01191d4,0x8(%esp)
c0110fff:	c0 
c0111000:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0111007:	00 
c0111008:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c011100f:	e8 ca fe fe ff       	call   c0100ede <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0111014:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011101b:	e8 68 0c ff ff       	call   c0101c88 <ide_device_size>
c0111020:	c1 e8 03             	shr    $0x3,%eax
c0111023:	89 c2                	mov    %eax,%edx
c0111025:	8b 45 08             	mov    0x8(%ebp),%eax
c0111028:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c011102a:	8b 45 08             	mov    0x8(%ebp),%eax
c011102d:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c0111034:	8b 45 08             	mov    0x8(%ebp),%eax
c0111037:	c7 40 08 e7 0c 11 c0 	movl   $0xc0110ce7,0x8(%eax)
    dev->d_close = disk0_close;
c011103e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111041:	c7 40 0c f1 0c 11 c0 	movl   $0xc0110cf1,0xc(%eax)
    dev->d_io = disk0_io;
c0111048:	8b 45 08             	mov    0x8(%ebp),%eax
c011104b:	c7 40 10 05 0e 11 c0 	movl   $0xc0110e05,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0111052:	8b 45 08             	mov    0x8(%ebp),%eax
c0111055:	c7 40 14 d8 0f 11 c0 	movl   $0xc0110fd8,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c011105c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111063:	00 
c0111064:	c7 04 24 00 51 15 c0 	movl   $0xc0155100,(%esp)
c011106b:	e8 ff 8b ff ff       	call   c0109c6f <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0111070:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0111077:	e8 33 3d ff ff       	call   c0104daf <kmalloc>
c011107c:	a3 fc 50 15 c0       	mov    %eax,0xc01550fc
c0111081:	a1 fc 50 15 c0       	mov    0xc01550fc,%eax
c0111086:	85 c0                	test   %eax,%eax
c0111088:	75 1c                	jne    c01110a6 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c011108a:	c7 44 24 08 f3 91 11 	movl   $0xc01191f3,0x8(%esp)
c0111091:	c0 
c0111092:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0111099:	00 
c011109a:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c01110a1:	e8 38 fe fe ff       	call   c0100ede <__panic>
    }
}
c01110a6:	c9                   	leave  
c01110a7:	c3                   	ret    

c01110a8 <dev_init_disk0>:

void
dev_init_disk0(void) {
c01110a8:	55                   	push   %ebp
c01110a9:	89 e5                	mov    %esp,%ebp
c01110ab:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c01110ae:	e8 d1 fb ff ff       	call   c0110c84 <dev_create_inode>
c01110b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01110b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01110ba:	75 1c                	jne    c01110d8 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c01110bc:	c7 44 24 08 0f 92 11 	movl   $0xc011920f,0x8(%esp)
c01110c3:	c0 
c01110c4:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c01110cb:	00 
c01110cc:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c01110d3:	e8 06 fe fe ff       	call   c0100ede <__panic>
    }
    disk0_device_init(vop_info(node, device));
c01110d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110db:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01110de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01110e2:	74 0d                	je     c01110f1 <dev_init_disk0+0x49>
c01110e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110e7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01110ea:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01110ef:	74 24                	je     c0111115 <dev_init_disk0+0x6d>
c01110f1:	c7 44 24 0c 28 92 11 	movl   $0xc0119228,0xc(%esp)
c01110f8:	c0 
c01110f9:	c7 44 24 08 8e 91 11 	movl   $0xc011918e,0x8(%esp)
c0111100:	c0 
c0111101:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0111108:	00 
c0111109:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c0111110:	e8 c9 fd fe ff       	call   c0100ede <__panic>
c0111115:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111118:	89 04 24             	mov    %eax,(%esp)
c011111b:	e8 c2 fe ff ff       	call   c0110fe2 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0111120:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111127:	00 
c0111128:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011112b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011112f:	c7 04 24 5b 92 11 c0 	movl   $0xc011925b,(%esp)
c0111136:	e8 cb e9 ff ff       	call   c010fb06 <vfs_add_dev>
c011113b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011113e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111142:	74 23                	je     c0111167 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0111144:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111147:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011114b:	c7 44 24 08 61 92 11 	movl   $0xc0119261,0x8(%esp)
c0111152:	c0 
c0111153:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c011115a:	00 
c011115b:	c7 04 24 e8 90 11 c0 	movl   $0xc01190e8,(%esp)
c0111162:	e8 77 fd fe ff       	call   c0100ede <__panic>
    }
}
c0111167:	c9                   	leave  
c0111168:	c3                   	ret    

c0111169 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0111169:	55                   	push   %ebp
c011116a:	89 e5                	mov    %esp,%ebp
c011116c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c011116f:	9c                   	pushf  
c0111170:	58                   	pop    %eax
c0111171:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0111174:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0111177:	25 00 02 00 00       	and    $0x200,%eax
c011117c:	85 c0                	test   %eax,%eax
c011117e:	74 0c                	je     c011118c <__intr_save+0x23>
        intr_disable();
c0111180:	e8 cc 0f ff ff       	call   c0102151 <intr_disable>
        return 1;
c0111185:	b8 01 00 00 00       	mov    $0x1,%eax
c011118a:	eb 05                	jmp    c0111191 <__intr_save+0x28>
    }
    return 0;
c011118c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111191:	c9                   	leave  
c0111192:	c3                   	ret    

c0111193 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0111193:	55                   	push   %ebp
c0111194:	89 e5                	mov    %esp,%ebp
c0111196:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0111199:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011119d:	74 05                	je     c01111a4 <__intr_restore+0x11>
        intr_enable();
c011119f:	e8 a7 0f ff ff       	call   c010214b <intr_enable>
    }
}
c01111a4:	c9                   	leave  
c01111a5:	c3                   	ret    

c01111a6 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c01111a6:	55                   	push   %ebp
c01111a7:	89 e5                	mov    %esp,%ebp
c01111a9:	83 ec 28             	sub    $0x28,%esp
c01111ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01111af:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c01111b2:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c01111b6:	0f 84 80 00 00 00    	je     c011123c <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c01111bc:	e8 a8 ff ff ff       	call   c0111169 <__intr_save>
c01111c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c01111c4:	a1 24 61 15 c0       	mov    0xc0156124,%eax
c01111c9:	99                   	cltd   
c01111ca:	c1 ea 14             	shr    $0x14,%edx
c01111cd:	01 d0                	add    %edx,%eax
c01111cf:	25 ff 0f 00 00       	and    $0xfff,%eax
c01111d4:	29 d0                	sub    %edx,%eax
c01111d6:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c01111da:	88 90 20 51 15 c0    	mov    %dl,-0x3feaaee0(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c01111e0:	8b 15 24 61 15 c0    	mov    0xc0156124,%edx
c01111e6:	a1 20 61 15 c0       	mov    0xc0156120,%eax
c01111eb:	29 c2                	sub    %eax,%edx
c01111ed:	89 d0                	mov    %edx,%eax
c01111ef:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01111f4:	7f 0d                	jg     c0111203 <dev_stdin_write+0x5d>
                p_wpos ++;
c01111f6:	a1 24 61 15 c0       	mov    0xc0156124,%eax
c01111fb:	83 c0 01             	add    $0x1,%eax
c01111fe:	a3 24 61 15 c0       	mov    %eax,0xc0156124
            }
            if (!wait_queue_empty(wait_queue)) {
c0111203:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c0111208:	89 04 24             	mov    %eax,(%esp)
c011120b:	e8 59 8f ff ff       	call   c010a169 <wait_queue_empty>
c0111210:	85 c0                	test   %eax,%eax
c0111212:	75 1d                	jne    c0111231 <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c0111214:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c0111219:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111220:	00 
c0111221:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0111228:	80 
c0111229:	89 04 24             	mov    %eax,(%esp)
c011122c:	e8 ef 8f ff ff       	call   c010a220 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c0111231:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111234:	89 04 24             	mov    %eax,(%esp)
c0111237:	e8 57 ff ff ff       	call   c0111193 <__intr_restore>
    }
}
c011123c:	c9                   	leave  
c011123d:	c3                   	ret    

c011123e <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c011123e:	55                   	push   %ebp
c011123f:	89 e5                	mov    %esp,%ebp
c0111241:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0111244:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c011124b:	e8 19 ff ff ff       	call   c0111169 <__intr_save>
c0111250:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111253:	e9 bb 00 00 00       	jmp    c0111313 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0111258:	8b 15 20 61 15 c0    	mov    0xc0156120,%edx
c011125e:	a1 24 61 15 c0       	mov    0xc0156124,%eax
c0111263:	39 c2                	cmp    %eax,%edx
c0111265:	7d 3d                	jge    c01112a4 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0111267:	8b 45 08             	mov    0x8(%ebp),%eax
c011126a:	8d 50 01             	lea    0x1(%eax),%edx
c011126d:	89 55 08             	mov    %edx,0x8(%ebp)
c0111270:	8b 15 20 61 15 c0    	mov    0xc0156120,%edx
c0111276:	89 d1                	mov    %edx,%ecx
c0111278:	c1 f9 1f             	sar    $0x1f,%ecx
c011127b:	c1 e9 14             	shr    $0x14,%ecx
c011127e:	01 ca                	add    %ecx,%edx
c0111280:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0111286:	29 ca                	sub    %ecx,%edx
c0111288:	0f b6 92 20 51 15 c0 	movzbl -0x3feaaee0(%edx),%edx
c011128f:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111291:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111295:	a1 20 61 15 c0       	mov    0xc0156120,%eax
c011129a:	83 c0 01             	add    $0x1,%eax
c011129d:	a3 20 61 15 c0       	mov    %eax,0xc0156120
c01112a2:	eb 6f                	jmp    c0111313 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c01112a4:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01112a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c01112aa:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01112af:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c01112b6:	80 
c01112b7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01112ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01112be:	89 04 24             	mov    %eax,(%esp)
c01112c1:	e8 ef 8f ff ff       	call   c010a2b5 <wait_current_set>
                local_intr_restore(intr_flag);
c01112c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01112c9:	89 04 24             	mov    %eax,(%esp)
c01112cc:	e8 c2 fe ff ff       	call   c0111193 <__intr_restore>

                schedule();
c01112d1:	e8 cc d4 ff ff       	call   c010e7a2 <schedule>

                local_intr_save(intr_flag);
c01112d6:	e8 8e fe ff ff       	call   c0111169 <__intr_save>
c01112db:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c01112de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01112e1:	89 04 24             	mov    %eax,(%esp)
c01112e4:	e8 9d 8e ff ff       	call   c010a186 <wait_in_queue>
c01112e9:	85 c0                	test   %eax,%eax
c01112eb:	74 14                	je     c0111301 <dev_stdin_read+0xc3>
c01112ed:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01112f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01112f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01112f9:	89 04 24             	mov    %eax,(%esp)
c01112fc:	e8 80 8c ff ff       	call   c0109f81 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c0111301:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111304:	8b 40 04             	mov    0x4(%eax),%eax
c0111307:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c011130c:	75 11                	jne    c011131f <dev_stdin_read+0xe1>
c011130e:	e9 45 ff ff ff       	jmp    c0111258 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111313:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111316:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111319:	0f 82 39 ff ff ff    	jb     c0111258 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c011131f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111322:	89 04 24             	mov    %eax,(%esp)
c0111325:	e8 69 fe ff ff       	call   c0111193 <__intr_restore>
    return ret;
c011132a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011132d:	c9                   	leave  
c011132e:	c3                   	ret    

c011132f <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c011132f:	55                   	push   %ebp
c0111330:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c0111332:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111336:	74 07                	je     c011133f <stdin_open+0x10>
        return -E_INVAL;
c0111338:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011133d:	eb 05                	jmp    c0111344 <stdin_open+0x15>
    }
    return 0;
c011133f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111344:	5d                   	pop    %ebp
c0111345:	c3                   	ret    

c0111346 <stdin_close>:

static int
stdin_close(struct device *dev) {
c0111346:	55                   	push   %ebp
c0111347:	89 e5                	mov    %esp,%ebp
    return 0;
c0111349:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011134e:	5d                   	pop    %ebp
c011134f:	c3                   	ret    

c0111350 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c0111350:	55                   	push   %ebp
c0111351:	89 e5                	mov    %esp,%ebp
c0111353:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0111356:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011135a:	75 36                	jne    c0111392 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c011135c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011135f:	8b 50 0c             	mov    0xc(%eax),%edx
c0111362:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111365:	8b 00                	mov    (%eax),%eax
c0111367:	89 54 24 04          	mov    %edx,0x4(%esp)
c011136b:	89 04 24             	mov    %eax,(%esp)
c011136e:	e8 cb fe ff ff       	call   c011123e <dev_stdin_read>
c0111373:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111376:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011137a:	7e 11                	jle    c011138d <stdin_io+0x3d>
            iob->io_resid -= ret;
c011137c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011137f:	8b 50 0c             	mov    0xc(%eax),%edx
c0111382:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111385:	29 c2                	sub    %eax,%edx
c0111387:	8b 45 0c             	mov    0xc(%ebp),%eax
c011138a:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011138d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111390:	eb 05                	jmp    c0111397 <stdin_io+0x47>
    }
    return -E_INVAL;
c0111392:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111397:	c9                   	leave  
c0111398:	c3                   	ret    

c0111399 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111399:	55                   	push   %ebp
c011139a:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011139c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01113a1:	5d                   	pop    %ebp
c01113a2:	c3                   	ret    

c01113a3 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c01113a3:	55                   	push   %ebp
c01113a4:	89 e5                	mov    %esp,%ebp
c01113a6:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c01113a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01113ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c01113b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01113b5:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c01113bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01113bf:	c7 40 08 2f 13 11 c0 	movl   $0xc011132f,0x8(%eax)
    dev->d_close = stdin_close;
c01113c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01113c9:	c7 40 0c 46 13 11 c0 	movl   $0xc0111346,0xc(%eax)
    dev->d_io = stdin_io;
c01113d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01113d3:	c7 40 10 50 13 11 c0 	movl   $0xc0111350,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c01113da:	8b 45 08             	mov    0x8(%ebp),%eax
c01113dd:	c7 40 14 99 13 11 c0 	movl   $0xc0111399,0x14(%eax)

    p_rpos = p_wpos = 0;
c01113e4:	c7 05 24 61 15 c0 00 	movl   $0x0,0xc0156124
c01113eb:	00 00 00 
c01113ee:	a1 24 61 15 c0       	mov    0xc0156124,%eax
c01113f3:	a3 20 61 15 c0       	mov    %eax,0xc0156120
    wait_queue_init(wait_queue);
c01113f8:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01113fd:	89 04 24             	mov    %eax,(%esp)
c0111400:	e8 b9 8a ff ff       	call   c0109ebe <wait_queue_init>
}
c0111405:	c9                   	leave  
c0111406:	c3                   	ret    

c0111407 <dev_init_stdin>:

void
dev_init_stdin(void) {
c0111407:	55                   	push   %ebp
c0111408:	89 e5                	mov    %esp,%ebp
c011140a:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011140d:	e8 72 f8 ff ff       	call   c0110c84 <dev_create_inode>
c0111412:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111415:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111419:	75 1c                	jne    c0111437 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c011141b:	c7 44 24 08 7c 92 11 	movl   $0xc011927c,0x8(%esp)
c0111422:	c0 
c0111423:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c011142a:	00 
c011142b:	c7 04 24 95 92 11 c0 	movl   $0xc0119295,(%esp)
c0111432:	e8 a7 fa fe ff       	call   c0100ede <__panic>
    }
    stdin_device_init(vop_info(node, device));
c0111437:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011143a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011143d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111441:	74 0d                	je     c0111450 <dev_init_stdin+0x49>
c0111443:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111446:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111449:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011144e:	74 24                	je     c0111474 <dev_init_stdin+0x6d>
c0111450:	c7 44 24 0c b0 92 11 	movl   $0xc01192b0,0xc(%esp)
c0111457:	c0 
c0111458:	c7 44 24 08 e3 92 11 	movl   $0xc01192e3,0x8(%esp)
c011145f:	c0 
c0111460:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111467:	00 
c0111468:	c7 04 24 95 92 11 c0 	movl   $0xc0119295,(%esp)
c011146f:	e8 6a fa fe ff       	call   c0100ede <__panic>
c0111474:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111477:	89 04 24             	mov    %eax,(%esp)
c011147a:	e8 24 ff ff ff       	call   c01113a3 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c011147f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111486:	00 
c0111487:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011148a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011148e:	c7 04 24 f8 92 11 c0 	movl   $0xc01192f8,(%esp)
c0111495:	e8 6c e6 ff ff       	call   c010fb06 <vfs_add_dev>
c011149a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011149d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01114a1:	74 23                	je     c01114c6 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c01114a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01114aa:	c7 44 24 08 fe 92 11 	movl   $0xc01192fe,0x8(%esp)
c01114b1:	c0 
c01114b2:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c01114b9:	00 
c01114ba:	c7 04 24 95 92 11 c0 	movl   $0xc0119295,(%esp)
c01114c1:	e8 18 fa fe ff       	call   c0100ede <__panic>
    }
}
c01114c6:	c9                   	leave  
c01114c7:	c3                   	ret    

c01114c8 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c01114c8:	55                   	push   %ebp
c01114c9:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c01114cb:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01114cf:	74 07                	je     c01114d8 <stdout_open+0x10>
        return -E_INVAL;
c01114d1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01114d6:	eb 05                	jmp    c01114dd <stdout_open+0x15>
    }
    return 0;
c01114d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01114dd:	5d                   	pop    %ebp
c01114de:	c3                   	ret    

c01114df <stdout_close>:

static int
stdout_close(struct device *dev) {
c01114df:	55                   	push   %ebp
c01114e0:	89 e5                	mov    %esp,%ebp
    return 0;
c01114e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01114e7:	5d                   	pop    %ebp
c01114e8:	c3                   	ret    

c01114e9 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01114e9:	55                   	push   %ebp
c01114ea:	89 e5                	mov    %esp,%ebp
c01114ec:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c01114ef:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01114f3:	74 41                	je     c0111536 <stdout_io+0x4d>
        char *data = iob->io_base;
c01114f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114f8:	8b 00                	mov    (%eax),%eax
c01114fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01114fd:	eb 26                	jmp    c0111525 <stdout_io+0x3c>
            cputchar(*data ++);
c01114ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111502:	8d 50 01             	lea    0x1(%eax),%edx
c0111505:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0111508:	0f b6 00             	movzbl (%eax),%eax
c011150b:	0f be c0             	movsbl %al,%eax
c011150e:	89 04 24             	mov    %eax,(%esp)
c0111511:	e8 81 ee fe ff       	call   c0100397 <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c0111516:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111519:	8b 40 0c             	mov    0xc(%eax),%eax
c011151c:	8d 50 ff             	lea    -0x1(%eax),%edx
c011151f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111522:	89 50 0c             	mov    %edx,0xc(%eax)
c0111525:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111528:	8b 40 0c             	mov    0xc(%eax),%eax
c011152b:	85 c0                	test   %eax,%eax
c011152d:	75 d0                	jne    c01114ff <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c011152f:	b8 00 00 00 00       	mov    $0x0,%eax
c0111534:	eb 05                	jmp    c011153b <stdout_io+0x52>
    }
    return -E_INVAL;
c0111536:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011153b:	c9                   	leave  
c011153c:	c3                   	ret    

c011153d <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c011153d:	55                   	push   %ebp
c011153e:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0111540:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111545:	5d                   	pop    %ebp
c0111546:	c3                   	ret    

c0111547 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0111547:	55                   	push   %ebp
c0111548:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c011154a:	8b 45 08             	mov    0x8(%ebp),%eax
c011154d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111553:	8b 45 08             	mov    0x8(%ebp),%eax
c0111556:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c011155d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111560:	c7 40 08 c8 14 11 c0 	movl   $0xc01114c8,0x8(%eax)
    dev->d_close = stdout_close;
c0111567:	8b 45 08             	mov    0x8(%ebp),%eax
c011156a:	c7 40 0c df 14 11 c0 	movl   $0xc01114df,0xc(%eax)
    dev->d_io = stdout_io;
c0111571:	8b 45 08             	mov    0x8(%ebp),%eax
c0111574:	c7 40 10 e9 14 11 c0 	movl   $0xc01114e9,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c011157b:	8b 45 08             	mov    0x8(%ebp),%eax
c011157e:	c7 40 14 3d 15 11 c0 	movl   $0xc011153d,0x14(%eax)
}
c0111585:	5d                   	pop    %ebp
c0111586:	c3                   	ret    

c0111587 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111587:	55                   	push   %ebp
c0111588:	89 e5                	mov    %esp,%ebp
c011158a:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011158d:	e8 f2 f6 ff ff       	call   c0110c84 <dev_create_inode>
c0111592:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111599:	75 1c                	jne    c01115b7 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c011159b:	c7 44 24 08 18 93 11 	movl   $0xc0119318,0x8(%esp)
c01115a2:	c0 
c01115a3:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c01115aa:	00 
c01115ab:	c7 04 24 32 93 11 c0 	movl   $0xc0119332,(%esp)
c01115b2:	e8 27 f9 fe ff       	call   c0100ede <__panic>
    }
    stdout_device_init(vop_info(node, device));
c01115b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01115bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01115c1:	74 0d                	je     c01115d0 <dev_init_stdout+0x49>
c01115c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115c6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01115c9:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01115ce:	74 24                	je     c01115f4 <dev_init_stdout+0x6d>
c01115d0:	c7 44 24 0c 4c 93 11 	movl   $0xc011934c,0xc(%esp)
c01115d7:	c0 
c01115d8:	c7 44 24 08 7f 93 11 	movl   $0xc011937f,0x8(%esp)
c01115df:	c0 
c01115e0:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01115e7:	00 
c01115e8:	c7 04 24 32 93 11 c0 	movl   $0xc0119332,(%esp)
c01115ef:	e8 ea f8 fe ff       	call   c0100ede <__panic>
c01115f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115f7:	89 04 24             	mov    %eax,(%esp)
c01115fa:	e8 48 ff ff ff       	call   c0111547 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01115ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111606:	00 
c0111607:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011160a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011160e:	c7 04 24 94 93 11 c0 	movl   $0xc0119394,(%esp)
c0111615:	e8 ec e4 ff ff       	call   c010fb06 <vfs_add_dev>
c011161a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011161d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111621:	74 23                	je     c0111646 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c0111623:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111626:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011162a:	c7 44 24 08 9b 93 11 	movl   $0xc011939b,0x8(%esp)
c0111631:	c0 
c0111632:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c0111639:	00 
c011163a:	c7 04 24 32 93 11 c0 	movl   $0xc0119332,(%esp)
c0111641:	e8 98 f8 fe ff       	call   c0100ede <__panic>
    }
}
c0111646:	c9                   	leave  
c0111647:	c3                   	ret    

c0111648 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0111648:	55                   	push   %ebp
c0111649:	89 e5                	mov    %esp,%ebp
c011164b:	56                   	push   %esi
c011164c:	53                   	push   %ebx
c011164d:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0111650:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111654:	74 0b                	je     c0111661 <bitmap_create+0x19>
c0111656:	8b 45 08             	mov    0x8(%ebp),%eax
c0111659:	83 c0 20             	add    $0x20,%eax
c011165c:	3b 45 08             	cmp    0x8(%ebp),%eax
c011165f:	77 24                	ja     c0111685 <bitmap_create+0x3d>
c0111661:	c7 44 24 0c b8 93 11 	movl   $0xc01193b8,0xc(%esp)
c0111668:	c0 
c0111669:	c7 44 24 08 e0 93 11 	movl   $0xc01193e0,0x8(%esp)
c0111670:	c0 
c0111671:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111678:	00 
c0111679:	c7 04 24 f5 93 11 c0 	movl   $0xc01193f5,(%esp)
c0111680:	e8 59 f8 fe ff       	call   c0100ede <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111685:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011168c:	e8 1e 37 ff ff       	call   c0104daf <kmalloc>
c0111691:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111694:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111698:	75 0a                	jne    c01116a4 <bitmap_create+0x5c>
        return NULL;
c011169a:	b8 00 00 00 00       	mov    $0x0,%eax
c011169f:	e9 43 01 00 00       	jmp    c01117e7 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c01116a4:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c01116ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116ae:	8b 55 08             	mov    0x8(%ebp),%edx
c01116b1:	01 d0                	add    %edx,%eax
c01116b3:	83 e8 01             	sub    $0x1,%eax
c01116b6:	ba 00 00 00 00       	mov    $0x0,%edx
c01116bb:	f7 75 ec             	divl   -0x14(%ebp)
c01116be:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c01116c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01116c4:	c1 e0 02             	shl    $0x2,%eax
c01116c7:	89 04 24             	mov    %eax,(%esp)
c01116ca:	e8 e0 36 ff ff       	call   c0104daf <kmalloc>
c01116cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01116d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01116d6:	75 15                	jne    c01116ed <bitmap_create+0xa5>
        kfree(bitmap);
c01116d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116db:	89 04 24             	mov    %eax,(%esp)
c01116de:	e8 e7 36 ff ff       	call   c0104dca <kfree>
        return NULL;
c01116e3:	b8 00 00 00 00       	mov    $0x0,%eax
c01116e8:	e9 fa 00 00 00       	jmp    c01117e7 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01116ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116f0:	8b 55 08             	mov    0x8(%ebp),%edx
c01116f3:	89 10                	mov    %edx,(%eax)
c01116f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116f8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01116fb:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01116fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111701:	c1 e0 02             	shl    $0x2,%eax
c0111704:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111708:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c011170f:	ff 
c0111710:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111713:	89 04 24             	mov    %eax,(%esp)
c0111716:	e8 4c 3f 00 00       	call   c0115667 <memset>
c011171b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011171e:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c0111721:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111724:	c1 e0 05             	shl    $0x5,%eax
c0111727:	3b 45 08             	cmp    0x8(%ebp),%eax
c011172a:	0f 84 b4 00 00 00    	je     c01117e4 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c0111730:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111733:	83 e8 01             	sub    $0x1,%eax
c0111736:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111739:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011173c:	c1 e0 05             	shl    $0x5,%eax
c011173f:	89 c2                	mov    %eax,%edx
c0111741:	8b 45 08             	mov    0x8(%ebp),%eax
c0111744:	29 d0                	sub    %edx,%eax
c0111746:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111749:	8b 45 08             	mov    0x8(%ebp),%eax
c011174c:	c1 e8 05             	shr    $0x5,%eax
c011174f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111752:	74 24                	je     c0111778 <bitmap_create+0x130>
c0111754:	c7 44 24 0c 0a 94 11 	movl   $0xc011940a,0xc(%esp)
c011175b:	c0 
c011175c:	c7 44 24 08 e0 93 11 	movl   $0xc01193e0,0x8(%esp)
c0111763:	c0 
c0111764:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c011176b:	00 
c011176c:	c7 04 24 f5 93 11 c0 	movl   $0xc01193f5,(%esp)
c0111773:	e8 66 f7 fe ff       	call   c0100ede <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011177c:	74 06                	je     c0111784 <bitmap_create+0x13c>
c011177e:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111782:	76 24                	jbe    c01117a8 <bitmap_create+0x160>
c0111784:	c7 44 24 0c 24 94 11 	movl   $0xc0119424,0xc(%esp)
c011178b:	c0 
c011178c:	c7 44 24 08 e0 93 11 	movl   $0xc01193e0,0x8(%esp)
c0111793:	c0 
c0111794:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c011179b:	00 
c011179c:	c7 04 24 f5 93 11 c0 	movl   $0xc01193f5,(%esp)
c01117a3:	e8 36 f7 fe ff       	call   c0100ede <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c01117a8:	eb 34                	jmp    c01117de <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c01117aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117ad:	8b 40 08             	mov    0x8(%eax),%eax
c01117b0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01117b3:	c1 e2 02             	shl    $0x2,%edx
c01117b6:	01 c2                	add    %eax,%edx
c01117b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117bb:	8b 40 08             	mov    0x8(%eax),%eax
c01117be:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01117c1:	c1 e1 02             	shl    $0x2,%ecx
c01117c4:	01 c8                	add    %ecx,%eax
c01117c6:	8b 18                	mov    (%eax),%ebx
c01117c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117cb:	be 01 00 00 00       	mov    $0x1,%esi
c01117d0:	89 c1                	mov    %eax,%ecx
c01117d2:	d3 e6                	shl    %cl,%esi
c01117d4:	89 f0                	mov    %esi,%eax
c01117d6:	31 d8                	xor    %ebx,%eax
c01117d8:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c01117da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01117de:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01117e2:	76 c6                	jbe    c01117aa <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c01117e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01117e7:	83 c4 30             	add    $0x30,%esp
c01117ea:	5b                   	pop    %ebx
c01117eb:	5e                   	pop    %esi
c01117ec:	5d                   	pop    %ebp
c01117ed:	c3                   	ret    

c01117ee <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01117ee:	55                   	push   %ebp
c01117ef:	89 e5                	mov    %esp,%ebp
c01117f1:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01117f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01117f7:	8b 40 08             	mov    0x8(%eax),%eax
c01117fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01117fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0111800:	8b 40 04             	mov    0x4(%eax),%eax
c0111803:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0111806:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011180d:	e9 bb 00 00 00       	jmp    c01118cd <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c0111812:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111815:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011181c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011181f:	01 d0                	add    %edx,%eax
c0111821:	8b 00                	mov    (%eax),%eax
c0111823:	85 c0                	test   %eax,%eax
c0111825:	0f 84 9e 00 00 00    	je     c01118c9 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011182b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111832:	eb 6b                	jmp    c011189f <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c0111834:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111837:	ba 01 00 00 00       	mov    $0x1,%edx
c011183c:	89 c1                	mov    %eax,%ecx
c011183e:	d3 e2                	shl    %cl,%edx
c0111840:	89 d0                	mov    %edx,%eax
c0111842:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0111845:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111848:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011184f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111852:	01 d0                	add    %edx,%eax
c0111854:	8b 00                	mov    (%eax),%eax
c0111856:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111859:	85 c0                	test   %eax,%eax
c011185b:	74 3e                	je     c011189b <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c011185d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111860:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111867:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011186a:	01 c2                	add    %eax,%edx
c011186c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011186f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111876:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111879:	01 c8                	add    %ecx,%eax
c011187b:	8b 00                	mov    (%eax),%eax
c011187d:	33 45 e4             	xor    -0x1c(%ebp),%eax
c0111880:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0111882:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111885:	c1 e0 05             	shl    $0x5,%eax
c0111888:	89 c2                	mov    %eax,%edx
c011188a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011188d:	01 c2                	add    %eax,%edx
c011188f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111892:	89 10                	mov    %edx,(%eax)
                    return 0;
c0111894:	b8 00 00 00 00       	mov    $0x0,%eax
c0111899:	eb 43                	jmp    c01118de <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011189b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011189f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01118a3:	76 8f                	jbe    c0111834 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c01118a5:	c7 44 24 0c 49 94 11 	movl   $0xc0119449,0xc(%esp)
c01118ac:	c0 
c01118ad:	c7 44 24 08 e0 93 11 	movl   $0xc01193e0,0x8(%esp)
c01118b4:	c0 
c01118b5:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01118bc:	00 
c01118bd:	c7 04 24 f5 93 11 c0 	movl   $0xc01193f5,(%esp)
c01118c4:	e8 15 f6 fe ff       	call   c0100ede <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c01118c9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01118cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118d0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01118d3:	0f 82 39 ff ff ff    	jb     c0111812 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c01118d9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01118de:	c9                   	leave  
c01118df:	c3                   	ret    

c01118e0 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c01118e0:	55                   	push   %ebp
c01118e1:	89 e5                	mov    %esp,%ebp
c01118e3:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01118e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01118e9:	8b 00                	mov    (%eax),%eax
c01118eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01118ee:	77 24                	ja     c0111914 <bitmap_translate+0x34>
c01118f0:	c7 44 24 0c 4b 94 11 	movl   $0xc011944b,0xc(%esp)
c01118f7:	c0 
c01118f8:	c7 44 24 08 e0 93 11 	movl   $0xc01193e0,0x8(%esp)
c01118ff:	c0 
c0111900:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0111907:	00 
c0111908:	c7 04 24 f5 93 11 c0 	movl   $0xc01193f5,(%esp)
c011190f:	e8 ca f5 fe ff       	call   c0100ede <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0111914:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111917:	c1 e8 05             	shr    $0x5,%eax
c011191a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011191d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111920:	83 e0 1f             	and    $0x1f,%eax
c0111923:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0111926:	8b 45 08             	mov    0x8(%ebp),%eax
c0111929:	8b 40 08             	mov    0x8(%eax),%eax
c011192c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011192f:	c1 e2 02             	shl    $0x2,%edx
c0111932:	01 c2                	add    %eax,%edx
c0111934:	8b 45 10             	mov    0x10(%ebp),%eax
c0111937:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0111939:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011193c:	ba 01 00 00 00       	mov    $0x1,%edx
c0111941:	89 c1                	mov    %eax,%ecx
c0111943:	d3 e2                	shl    %cl,%edx
c0111945:	89 d0                	mov    %edx,%eax
c0111947:	89 c2                	mov    %eax,%edx
c0111949:	8b 45 14             	mov    0x14(%ebp),%eax
c011194c:	89 10                	mov    %edx,(%eax)
}
c011194e:	c9                   	leave  
c011194f:	c3                   	ret    

c0111950 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c0111950:	55                   	push   %ebp
c0111951:	89 e5                	mov    %esp,%ebp
c0111953:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111956:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111959:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011195d:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111960:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111964:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111967:	89 44 24 04          	mov    %eax,0x4(%esp)
c011196b:	8b 45 08             	mov    0x8(%ebp),%eax
c011196e:	89 04 24             	mov    %eax,(%esp)
c0111971:	e8 6a ff ff ff       	call   c01118e0 <bitmap_translate>
    return (*word & mask);
c0111976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111979:	8b 10                	mov    (%eax),%edx
c011197b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011197e:	21 d0                	and    %edx,%eax
}
c0111980:	c9                   	leave  
c0111981:	c3                   	ret    

c0111982 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111982:	55                   	push   %ebp
c0111983:	89 e5                	mov    %esp,%ebp
c0111985:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111988:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011198b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011198f:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111992:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111996:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111999:	89 44 24 04          	mov    %eax,0x4(%esp)
c011199d:	8b 45 08             	mov    0x8(%ebp),%eax
c01119a0:	89 04 24             	mov    %eax,(%esp)
c01119a3:	e8 38 ff ff ff       	call   c01118e0 <bitmap_translate>
    assert(!(*word & mask));
c01119a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119ab:	8b 10                	mov    (%eax),%edx
c01119ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01119b0:	21 d0                	and    %edx,%eax
c01119b2:	85 c0                	test   %eax,%eax
c01119b4:	74 24                	je     c01119da <bitmap_free+0x58>
c01119b6:	c7 44 24 0c 61 94 11 	movl   $0xc0119461,0xc(%esp)
c01119bd:	c0 
c01119be:	c7 44 24 08 e0 93 11 	movl   $0xc01193e0,0x8(%esp)
c01119c5:	c0 
c01119c6:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01119cd:	00 
c01119ce:	c7 04 24 f5 93 11 c0 	movl   $0xc01193f5,(%esp)
c01119d5:	e8 04 f5 fe ff       	call   c0100ede <__panic>
    *word |= mask;
c01119da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01119e0:	8b 0a                	mov    (%edx),%ecx
c01119e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01119e5:	09 ca                	or     %ecx,%edx
c01119e7:	89 10                	mov    %edx,(%eax)
}
c01119e9:	c9                   	leave  
c01119ea:	c3                   	ret    

c01119eb <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c01119eb:	55                   	push   %ebp
c01119ec:	89 e5                	mov    %esp,%ebp
c01119ee:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c01119f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01119f4:	8b 40 08             	mov    0x8(%eax),%eax
c01119f7:	89 04 24             	mov    %eax,(%esp)
c01119fa:	e8 cb 33 ff ff       	call   c0104dca <kfree>
    kfree(bitmap);
c01119ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a02:	89 04 24             	mov    %eax,(%esp)
c0111a05:	e8 c0 33 ff ff       	call   c0104dca <kfree>
}
c0111a0a:	c9                   	leave  
c0111a0b:	c3                   	ret    

c0111a0c <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0111a0c:	55                   	push   %ebp
c0111a0d:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0111a0f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111a13:	74 12                	je     c0111a27 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0111a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a18:	8b 40 04             	mov    0x4(%eax),%eax
c0111a1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111a22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a25:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a2a:	8b 40 08             	mov    0x8(%eax),%eax
}
c0111a2d:	5d                   	pop    %ebp
c0111a2e:	c3                   	ret    

c0111a2f <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c0111a2f:	55                   	push   %ebp
c0111a30:	89 e5                	mov    %esp,%ebp
c0111a32:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111a35:	c7 04 24 71 94 11 c0 	movl   $0xc0119471,(%esp)
c0111a3c:	e8 d6 08 00 00       	call   c0112317 <sfs_mount>
c0111a41:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111a44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111a48:	74 23                	je     c0111a6d <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a4d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a51:	c7 44 24 08 77 94 11 	movl   $0xc0119477,0x8(%esp)
c0111a58:	c0 
c0111a59:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0111a60:	00 
c0111a61:	c7 04 24 94 94 11 c0 	movl   $0xc0119494,(%esp)
c0111a68:	e8 71 f4 fe ff       	call   c0100ede <__panic>
    }
}
c0111a6d:	c9                   	leave  
c0111a6e:	c3                   	ret    

c0111a6f <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0111a6f:	55                   	push   %ebp
c0111a70:	89 e5                	mov    %esp,%ebp
c0111a72:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a78:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111a7b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111a7f:	74 0a                	je     c0111a8b <sfs_sync+0x1c>
c0111a81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a84:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111a87:	85 c0                	test   %eax,%eax
c0111a89:	74 24                	je     c0111aaf <sfs_sync+0x40>
c0111a8b:	c7 44 24 0c a8 94 11 	movl   $0xc01194a8,0xc(%esp)
c0111a92:	c0 
c0111a93:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111a9a:	c0 
c0111a9b:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111aa2:	00 
c0111aa3:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111aaa:	e8 2f f4 fe ff       	call   c0100ede <__panic>
c0111aaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ab2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111ab5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ab8:	89 04 24             	mov    %eax,(%esp)
c0111abb:	e8 f5 2f 00 00       	call   c0114ab5 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0111ac0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ac3:	83 c0 60             	add    $0x60,%eax
c0111ac6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111ac9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0111acf:	eb 74                	jmp    c0111b45 <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0111ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ad4:	83 e8 1c             	sub    $0x1c,%eax
c0111ad7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0111ada:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111add:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111ae0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111ae4:	74 17                	je     c0111afd <sfs_sync+0x8e>
c0111ae6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ae9:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111aec:	85 c0                	test   %eax,%eax
c0111aee:	74 0d                	je     c0111afd <sfs_sync+0x8e>
c0111af0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111af3:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111af6:	8b 40 18             	mov    0x18(%eax),%eax
c0111af9:	85 c0                	test   %eax,%eax
c0111afb:	75 24                	jne    c0111b21 <sfs_sync+0xb2>
c0111afd:	c7 44 24 0c fc 94 11 	movl   $0xc01194fc,0xc(%esp)
c0111b04:	c0 
c0111b05:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111b0c:	c0 
c0111b0d:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c0111b14:	00 
c0111b15:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111b1c:	e8 bd f3 fe ff       	call   c0100ede <__panic>
c0111b21:	c7 44 24 04 4a 95 11 	movl   $0xc011954a,0x4(%esp)
c0111b28:	c0 
c0111b29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b2c:	89 04 24             	mov    %eax,(%esp)
c0111b2f:	e8 db d8 ff ff       	call   c010f40f <inode_check>
c0111b34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b37:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111b3a:	8b 40 18             	mov    0x18(%eax),%eax
c0111b3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111b40:	89 14 24             	mov    %edx,(%esp)
c0111b43:	ff d0                	call   *%eax
c0111b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b48:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111b4b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111b4e:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0111b51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b57:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111b5a:	0f 85 71 ff ff ff    	jne    c0111ad1 <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c0111b60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b63:	89 04 24             	mov    %eax,(%esp)
c0111b66:	e8 76 2f 00 00       	call   c0114ae1 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b6e:	8b 40 34             	mov    0x34(%eax),%eax
c0111b71:	85 c0                	test   %eax,%eax
c0111b73:	74 50                	je     c0111bc5 <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b78:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111b7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b82:	89 04 24             	mov    %eax,(%esp)
c0111b85:	e8 bd 2d 00 00       	call   c0114947 <sfs_sync_super>
c0111b8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111b8d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111b91:	74 0f                	je     c0111ba2 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111b93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b96:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111b9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111ba0:	eb 28                	jmp    c0111bca <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111ba2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ba5:	89 04 24             	mov    %eax,(%esp)
c0111ba8:	e8 26 2e 00 00       	call   c01149d3 <sfs_sync_freemap>
c0111bad:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111bb0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111bb4:	74 0f                	je     c0111bc5 <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111bb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111bb9:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111bc0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111bc3:	eb 05                	jmp    c0111bca <sfs_sync+0x15b>
        }
    }
    return 0;
c0111bc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111bca:	c9                   	leave  
c0111bcb:	c3                   	ret    

c0111bcc <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111bcc:	55                   	push   %ebp
c0111bcd:	89 e5                	mov    %esp,%ebp
c0111bcf:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0111bd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111bd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111bdc:	74 0a                	je     c0111be8 <sfs_get_root+0x1c>
c0111bde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111be1:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111be4:	85 c0                	test   %eax,%eax
c0111be6:	74 24                	je     c0111c0c <sfs_get_root+0x40>
c0111be8:	c7 44 24 0c a8 94 11 	movl   $0xc01194a8,0xc(%esp)
c0111bef:	c0 
c0111bf0:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111bf7:	c0 
c0111bf8:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111bff:	00 
c0111c00:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111c07:	e8 d2 f2 fe ff       	call   c0100ede <__panic>
c0111c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c0f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111c16:	00 
c0111c17:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111c1a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111c1e:	89 04 24             	mov    %eax,(%esp)
c0111c21:	e8 e1 0b 00 00       	call   c0112807 <sfs_load_inode>
c0111c26:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111c29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111c2d:	74 23                	je     c0111c52 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0111c2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c32:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111c36:	c7 44 24 08 50 95 11 	movl   $0xc0119550,0x8(%esp)
c0111c3d:	c0 
c0111c3e:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111c45:	00 
c0111c46:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111c4d:	e8 8c f2 fe ff       	call   c0100ede <__panic>
    }
    return node;
c0111c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111c55:	c9                   	leave  
c0111c56:	c3                   	ret    

c0111c57 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111c57:	55                   	push   %ebp
c0111c58:	89 e5                	mov    %esp,%ebp
c0111c5a:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111c5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c60:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111c63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111c67:	74 0a                	je     c0111c73 <sfs_unmount+0x1c>
c0111c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c6c:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111c6f:	85 c0                	test   %eax,%eax
c0111c71:	74 24                	je     c0111c97 <sfs_unmount+0x40>
c0111c73:	c7 44 24 0c a8 94 11 	movl   $0xc01194a8,0xc(%esp)
c0111c7a:	c0 
c0111c7b:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111c82:	c0 
c0111c83:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111c8a:	00 
c0111c8b:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111c92:	e8 47 f2 fe ff       	call   c0100ede <__panic>
c0111c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ca0:	83 c0 60             	add    $0x60,%eax
c0111ca3:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ca9:	8b 40 04             	mov    0x4(%eax),%eax
c0111cac:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111caf:	0f 94 c0             	sete   %al
c0111cb2:	0f b6 c0             	movzbl %al,%eax
c0111cb5:	85 c0                	test   %eax,%eax
c0111cb7:	75 07                	jne    c0111cc0 <sfs_unmount+0x69>
        return -E_BUSY;
c0111cb9:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111cbe:	eb 68                	jmp    c0111d28 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111cc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111cc3:	8b 40 34             	mov    0x34(%eax),%eax
c0111cc6:	85 c0                	test   %eax,%eax
c0111cc8:	74 24                	je     c0111cee <sfs_unmount+0x97>
c0111cca:	c7 44 24 0c 69 95 11 	movl   $0xc0119569,0xc(%esp)
c0111cd1:	c0 
c0111cd2:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111cd9:	c0 
c0111cda:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111ce1:	00 
c0111ce2:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111ce9:	e8 f0 f1 fe ff       	call   c0100ede <__panic>
    bitmap_destroy(sfs->freemap);
c0111cee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111cf1:	8b 40 30             	mov    0x30(%eax),%eax
c0111cf4:	89 04 24             	mov    %eax,(%esp)
c0111cf7:	e8 ef fc ff ff       	call   c01119eb <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111cfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111cff:	8b 40 38             	mov    0x38(%eax),%eax
c0111d02:	89 04 24             	mov    %eax,(%esp)
c0111d05:	e8 c0 30 ff ff       	call   c0104dca <kfree>
    kfree(sfs->hash_list);
c0111d0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d0d:	8b 40 68             	mov    0x68(%eax),%eax
c0111d10:	89 04 24             	mov    %eax,(%esp)
c0111d13:	e8 b2 30 ff ff       	call   c0104dca <kfree>
    kfree(sfs);
c0111d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d1b:	89 04 24             	mov    %eax,(%esp)
c0111d1e:	e8 a7 30 ff ff       	call   c0104dca <kfree>
    return 0;
c0111d23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111d28:	c9                   	leave  
c0111d29:	c3                   	ret    

c0111d2a <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111d2a:	55                   	push   %ebp
c0111d2b:	89 e5                	mov    %esp,%ebp
c0111d2d:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111d30:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d33:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111d36:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111d3a:	74 0a                	je     c0111d46 <sfs_cleanup+0x1c>
c0111d3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d3f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111d42:	85 c0                	test   %eax,%eax
c0111d44:	74 24                	je     c0111d6a <sfs_cleanup+0x40>
c0111d46:	c7 44 24 0c a8 94 11 	movl   $0xc01194a8,0xc(%esp)
c0111d4d:	c0 
c0111d4e:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111d55:	c0 
c0111d56:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111d5d:	00 
c0111d5e:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111d65:	e8 74 f1 fe ff       	call   c0100ede <__panic>
c0111d6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111d70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111d73:	8b 40 04             	mov    0x4(%eax),%eax
c0111d76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111d79:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111d7c:	8b 40 08             	mov    0x8(%eax),%eax
c0111d7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111d82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111d88:	89 d1                	mov    %edx,%ecx
c0111d8a:	29 c1                	sub    %eax,%ecx
c0111d8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111d8f:	8d 50 0c             	lea    0xc(%eax),%edx
c0111d92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111d95:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111d99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111da0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111da4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111da8:	c7 04 24 7c 95 11 c0 	movl   $0xc011957c,(%esp)
c0111daf:	e8 bd e5 fe ff       	call   c0100371 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111db4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111dbb:	eb 1d                	jmp    c0111dda <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0111dc0:	8b 40 70             	mov    0x70(%eax),%eax
c0111dc3:	8b 55 08             	mov    0x8(%ebp),%edx
c0111dc6:	89 14 24             	mov    %edx,(%esp)
c0111dc9:	ff d0                	call   *%eax
c0111dcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111dce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111dd2:	75 02                	jne    c0111dd6 <sfs_cleanup+0xac>
            break;
c0111dd4:	eb 0a                	jmp    c0111de0 <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111dd6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111dda:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111dde:	7e dd                	jle    c0111dbd <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111de0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111de4:	74 2d                	je     c0111e13 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111de6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111de9:	8d 50 0c             	lea    0xc(%eax),%edx
c0111dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111def:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111df3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111df7:	c7 44 24 08 9b 95 11 	movl   $0xc011959b,0x8(%esp)
c0111dfe:	c0 
c0111dff:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111e06:	00 
c0111e07:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111e0e:	e8 48 f1 fe ff       	call   c0100f5b <__warn>
    }
}
c0111e13:	c9                   	leave  
c0111e14:	c3                   	ret    

c0111e15 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111e15:	55                   	push   %ebp
c0111e16:	89 e5                	mov    %esp,%ebp
c0111e18:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111e1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e1e:	c1 e0 0c             	shl    $0xc,%eax
c0111e21:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111e25:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111e2c:	00 
c0111e2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0111e30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e34:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111e37:	89 04 24             	mov    %eax,(%esp)
c0111e3a:	e8 05 96 ff ff       	call   c010b444 <iobuf_init>
c0111e3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111e42:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e45:	8b 40 10             	mov    0x10(%eax),%eax
c0111e48:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111e4f:	00 
c0111e50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111e53:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111e57:	8b 55 08             	mov    0x8(%ebp),%edx
c0111e5a:	89 14 24             	mov    %edx,(%esp)
c0111e5d:	ff d0                	call   *%eax
}
c0111e5f:	c9                   	leave  
c0111e60:	c3                   	ret    

c0111e61 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111e61:	55                   	push   %ebp
c0111e62:	89 e5                	mov    %esp,%ebp
c0111e64:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111e67:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111e6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e71:	89 04 24             	mov    %eax,(%esp)
c0111e74:	e8 93 fb ff ff       	call   c0111a0c <bitmap_getdata>
c0111e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111e80:	74 0f                	je     c0111e91 <sfs_init_freemap+0x30>
c0111e82:	8b 45 14             	mov    0x14(%ebp),%eax
c0111e85:	c1 e0 0c             	shl    $0xc,%eax
c0111e88:	89 c2                	mov    %eax,%edx
c0111e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111e8d:	39 c2                	cmp    %eax,%edx
c0111e8f:	74 24                	je     c0111eb5 <sfs_init_freemap+0x54>
c0111e91:	c7 44 24 0c b8 95 11 	movl   $0xc01195b8,0xc(%esp)
c0111e98:	c0 
c0111e99:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111ea0:	c0 
c0111ea1:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111ea8:	00 
c0111ea9:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111eb0:	e8 29 f0 fe ff       	call   c0100ede <__panic>
    while (nblks != 0) {
c0111eb5:	eb 36                	jmp    c0111eed <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111eba:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111ebe:	8b 45 10             	mov    0x10(%ebp),%eax
c0111ec1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ec5:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ec8:	89 04 24             	mov    %eax,(%esp)
c0111ecb:	e8 45 ff ff ff       	call   c0111e15 <sfs_init_read>
c0111ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111ed3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111ed7:	74 05                	je     c0111ede <sfs_init_freemap+0x7d>
            return ret;
c0111ed9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111edc:	eb 1a                	jmp    c0111ef8 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111ede:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111ee2:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111ee6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111eed:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111ef1:	75 c4                	jne    c0111eb7 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111ef3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111ef8:	c9                   	leave  
c0111ef9:	c3                   	ret    

c0111efa <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111efa:	55                   	push   %ebp
c0111efb:	89 e5                	mov    %esp,%ebp
c0111efd:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111f00:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f03:	8b 40 04             	mov    0x4(%eax),%eax
c0111f06:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111f0b:	74 0a                	je     c0111f17 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111f0d:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111f12:	e9 fe 03 00 00       	jmp    c0112315 <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111f17:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111f1e:	e8 df d5 ff ff       	call   c010f502 <__alloc_fs>
c0111f23:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111f26:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111f2a:	75 0a                	jne    c0111f36 <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111f2c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111f31:	e9 df 03 00 00       	jmp    c0112315 <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111f36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111f39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111f3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111f40:	74 0a                	je     c0111f4c <sfs_do_mount+0x52>
c0111f42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111f45:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111f48:	85 c0                	test   %eax,%eax
c0111f4a:	74 24                	je     c0111f70 <sfs_do_mount+0x76>
c0111f4c:	c7 44 24 0c a8 94 11 	movl   $0xc01194a8,0xc(%esp)
c0111f53:	c0 
c0111f54:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c0111f5b:	c0 
c0111f5c:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0111f63:	00 
c0111f64:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c0111f6b:	e8 6e ef fe ff       	call   c0100ede <__panic>
c0111f70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111f73:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0111f76:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f79:	8b 55 08             	mov    0x8(%ebp),%edx
c0111f7c:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0111f7f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0111f86:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0111f8d:	e8 1d 2e ff ff       	call   c0104daf <kmalloc>
c0111f92:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111f95:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f98:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111f9b:	89 50 38             	mov    %edx,0x38(%eax)
c0111f9e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fa1:	8b 40 38             	mov    0x38(%eax),%eax
c0111fa4:	85 c0                	test   %eax,%eax
c0111fa6:	75 05                	jne    c0111fad <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0111fa8:	e9 5a 03 00 00       	jmp    c0112307 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0111fad:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111fb0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111fb4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111fbb:	00 
c0111fbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fbf:	89 04 24             	mov    %eax,(%esp)
c0111fc2:	e8 4e fe ff ff       	call   c0111e15 <sfs_init_read>
c0111fc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111fca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111fce:	74 05                	je     c0111fd5 <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c0111fd0:	e9 27 03 00 00       	jmp    c01122fc <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c0111fd5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111fdc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111fdf:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0111fe2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111fe5:	8b 00                	mov    (%eax),%eax
c0111fe7:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111fec:	74 22                	je     c0112010 <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111fee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ff1:	8b 00                	mov    (%eax),%eax
c0111ff3:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0111ffa:	2f 
c0111ffb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111fff:	c7 04 24 e4 95 11 c0 	movl   $0xc01195e4,(%esp)
c0112006:	e8 66 e3 fe ff       	call   c0100371 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c011200b:	e9 ec 02 00 00       	jmp    c01122fc <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0112010:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112013:	8b 50 04             	mov    0x4(%eax),%edx
c0112016:	8b 45 08             	mov    0x8(%ebp),%eax
c0112019:	8b 00                	mov    (%eax),%eax
c011201b:	39 c2                	cmp    %eax,%edx
c011201d:	76 24                	jbe    c0112043 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c011201f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112022:	8b 10                	mov    (%eax),%edx
c0112024:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112027:	8b 40 04             	mov    0x4(%eax),%eax
c011202a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011202e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112032:	c7 04 24 1c 96 11 c0 	movl   $0xc011961c,(%esp)
c0112039:	e8 33 e3 fe ff       	call   c0100371 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c011203e:	e9 b9 02 00 00       	jmp    c01122fc <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0112043:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112046:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c011204a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011204d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0112050:	8b 0a                	mov    (%edx),%ecx
c0112052:	89 08                	mov    %ecx,(%eax)
c0112054:	8b 4a 04             	mov    0x4(%edx),%ecx
c0112057:	89 48 04             	mov    %ecx,0x4(%eax)
c011205a:	8b 4a 08             	mov    0x8(%edx),%ecx
c011205d:	89 48 08             	mov    %ecx,0x8(%eax)
c0112060:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0112063:	89 48 0c             	mov    %ecx,0xc(%eax)
c0112066:	8b 4a 10             	mov    0x10(%edx),%ecx
c0112069:	89 48 10             	mov    %ecx,0x10(%eax)
c011206c:	8b 4a 14             	mov    0x14(%edx),%ecx
c011206f:	89 48 14             	mov    %ecx,0x14(%eax)
c0112072:	8b 4a 18             	mov    0x18(%edx),%ecx
c0112075:	89 48 18             	mov    %ecx,0x18(%eax)
c0112078:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c011207b:	89 48 1c             	mov    %ecx,0x1c(%eax)
c011207e:	8b 4a 20             	mov    0x20(%edx),%ecx
c0112081:	89 48 20             	mov    %ecx,0x20(%eax)
c0112084:	8b 4a 24             	mov    0x24(%edx),%ecx
c0112087:	89 48 24             	mov    %ecx,0x24(%eax)
c011208a:	8b 52 28             	mov    0x28(%edx),%edx
c011208d:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0112090:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0112097:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c011209e:	e8 0c 2d ff ff       	call   c0104daf <kmalloc>
c01120a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01120a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01120a9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01120ac:	89 50 68             	mov    %edx,0x68(%eax)
c01120af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01120b2:	8b 40 68             	mov    0x68(%eax),%eax
c01120b5:	85 c0                	test   %eax,%eax
c01120b7:	75 05                	jne    c01120be <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c01120b9:	e9 3e 02 00 00       	jmp    c01122fc <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c01120be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01120c5:	eb 2a                	jmp    c01120f1 <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c01120c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01120d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01120d4:	01 d0                	add    %edx,%eax
c01120d6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01120d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01120dc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01120df:	89 50 04             	mov    %edx,0x4(%eax)
c01120e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01120e5:	8b 50 04             	mov    0x4(%eax),%edx
c01120e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01120eb:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c01120ed:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01120f1:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c01120f8:	76 cd                	jbe    c01120c7 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c01120fa:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0112101:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112104:	8b 50 04             	mov    0x4(%eax),%edx
c0112107:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011210a:	01 d0                	add    %edx,%eax
c011210c:	83 e8 01             	sub    $0x1,%eax
c011210f:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0112112:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112115:	ba 00 00 00 00       	mov    $0x0,%edx
c011211a:	f7 75 d0             	divl   -0x30(%ebp)
c011211d:	89 d0                	mov    %edx,%eax
c011211f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112122:	29 c2                	sub    %eax,%edx
c0112124:	89 d0                	mov    %edx,%eax
c0112126:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0112129:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011212c:	89 04 24             	mov    %eax,(%esp)
c011212f:	e8 14 f5 ff ff       	call   c0111648 <bitmap_create>
c0112134:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0112137:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011213a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011213d:	89 50 30             	mov    %edx,0x30(%eax)
c0112140:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112143:	8b 40 30             	mov    0x30(%eax),%eax
c0112146:	85 c0                	test   %eax,%eax
c0112148:	75 05                	jne    c011214f <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c011214a:	e9 a2 01 00 00       	jmp    c01122f1 <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c011214f:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0112156:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112159:	8b 50 04             	mov    0x4(%eax),%edx
c011215c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011215f:	01 d0                	add    %edx,%eax
c0112161:	83 e8 01             	sub    $0x1,%eax
c0112164:	ba 00 00 00 00       	mov    $0x0,%edx
c0112169:	f7 75 c0             	divl   -0x40(%ebp)
c011216c:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c011216f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112172:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112176:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0112179:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011217d:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0112184:	00 
c0112185:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112188:	89 44 24 04          	mov    %eax,0x4(%esp)
c011218c:	8b 45 08             	mov    0x8(%ebp),%eax
c011218f:	89 04 24             	mov    %eax,(%esp)
c0112192:	e8 ca fc ff ff       	call   c0111e61 <sfs_init_freemap>
c0112197:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011219a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011219e:	74 11                	je     c01121b1 <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c01121a0:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c01121a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01121a4:	89 04 24             	mov    %eax,(%esp)
c01121a7:	e8 3f f8 ff ff       	call   c01119eb <bitmap_destroy>
c01121ac:	e9 40 01 00 00       	jmp    c01122f1 <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c01121b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121b4:	8b 40 04             	mov    0x4(%eax),%eax
c01121b7:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01121ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c01121c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01121c8:	eb 1e                	jmp    c01121e8 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c01121ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01121cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01121d1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01121d4:	89 04 24             	mov    %eax,(%esp)
c01121d7:	e8 74 f7 ff ff       	call   c0111950 <bitmap_test>
c01121dc:	85 c0                	test   %eax,%eax
c01121de:	74 04                	je     c01121e4 <sfs_do_mount+0x2ea>
            unused_blocks ++;
c01121e0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c01121e4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01121e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01121eb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01121ee:	72 da                	jb     c01121ca <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c01121f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121f3:	8b 40 08             	mov    0x8(%eax),%eax
c01121f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01121f9:	74 24                	je     c011221f <sfs_do_mount+0x325>
c01121fb:	c7 44 24 0c 4c 96 11 	movl   $0xc011964c,0xc(%esp)
c0112202:	c0 
c0112203:	c7 44 24 08 d1 94 11 	movl   $0xc01194d1,0x8(%esp)
c011220a:	c0 
c011220b:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0112212:	00 
c0112213:	c7 04 24 e6 94 11 c0 	movl   $0xc01194e6,(%esp)
c011221a:	e8 bf ec fe ff       	call   c0100ede <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c011221f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112222:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0112229:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011222c:	83 c0 3c             	add    $0x3c,%eax
c011222f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112236:	00 
c0112237:	89 04 24             	mov    %eax,(%esp)
c011223a:	e8 30 7a ff ff       	call   c0109c6f <sem_init>
    sem_init(&(sfs->io_sem), 1);
c011223f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112242:	83 c0 48             	add    $0x48,%eax
c0112245:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011224c:	00 
c011224d:	89 04 24             	mov    %eax,(%esp)
c0112250:	e8 1a 7a ff ff       	call   c0109c6f <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0112255:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112258:	83 c0 54             	add    $0x54,%eax
c011225b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112262:	00 
c0112263:	89 04 24             	mov    %eax,(%esp)
c0112266:	e8 04 7a ff ff       	call   c0109c6f <sem_init>
    list_init(&(sfs->inode_list));
c011226b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011226e:	83 c0 60             	add    $0x60,%eax
c0112271:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0112274:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112277:	8b 55 b0             	mov    -0x50(%ebp),%edx
c011227a:	89 50 04             	mov    %edx,0x4(%eax)
c011227d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112280:	8b 50 04             	mov    0x4(%eax),%edx
c0112283:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112286:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112288:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011228b:	8b 55 b8             	mov    -0x48(%ebp),%edx
c011228e:	89 d1                	mov    %edx,%ecx
c0112290:	29 c1                	sub    %eax,%ecx
c0112292:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112295:	8d 50 0c             	lea    0xc(%eax),%edx
c0112298:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011229b:	89 44 24 10          	mov    %eax,0x10(%esp)
c011229f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01122a6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01122aa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01122ae:	c7 04 24 76 96 11 c0 	movl   $0xc0119676,(%esp)
c01122b5:	e8 b7 e0 fe ff       	call   c0100371 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c01122ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01122bd:	c7 40 70 6f 1a 11 c0 	movl   $0xc0111a6f,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c01122c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01122c7:	c7 40 74 cc 1b 11 c0 	movl   $0xc0111bcc,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c01122ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01122d1:	c7 40 78 57 1c 11 c0 	movl   $0xc0111c57,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c01122d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01122db:	c7 40 7c 2a 1d 11 c0 	movl   $0xc0111d2a,0x7c(%eax)
    *fs_store = fs;
c01122e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01122e5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01122e8:	89 10                	mov    %edx,(%eax)
    return 0;
c01122ea:	b8 00 00 00 00       	mov    $0x0,%eax
c01122ef:	eb 24                	jmp    c0112315 <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c01122f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01122f4:	89 04 24             	mov    %eax,(%esp)
c01122f7:	e8 ce 2a ff ff       	call   c0104dca <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c01122fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01122ff:	89 04 24             	mov    %eax,(%esp)
c0112302:	e8 c3 2a ff ff       	call   c0104dca <kfree>
failed_cleanup_fs:
    kfree(fs);
c0112307:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011230a:	89 04 24             	mov    %eax,(%esp)
c011230d:	e8 b8 2a ff ff       	call   c0104dca <kfree>
    return ret;
c0112312:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112315:	c9                   	leave  
c0112316:	c3                   	ret    

c0112317 <sfs_mount>:

int
sfs_mount(const char *devname) {
c0112317:	55                   	push   %ebp
c0112318:	89 e5                	mov    %esp,%ebp
c011231a:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c011231d:	c7 44 24 04 fa 1e 11 	movl   $0xc0111efa,0x4(%esp)
c0112324:	c0 
c0112325:	8b 45 08             	mov    0x8(%ebp),%eax
c0112328:	89 04 24             	mov    %eax,(%esp)
c011232b:	e8 96 d8 ff ff       	call   c010fbc6 <vfs_mount>
}
c0112330:	c9                   	leave  
c0112331:	c3                   	ret    

c0112332 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c0112332:	55                   	push   %ebp
c0112333:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c0112335:	8b 45 08             	mov    0x8(%ebp),%eax
c0112338:	8b 40 30             	mov    0x30(%eax),%eax
}
c011233b:	5d                   	pop    %ebp
c011233c:	c3                   	ret    

c011233d <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c011233d:	55                   	push   %ebp
c011233e:	89 e5                	mov    %esp,%ebp
c0112340:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c0112343:	8b 45 08             	mov    0x8(%ebp),%eax
c0112346:	83 c0 10             	add    $0x10,%eax
c0112349:	89 04 24             	mov    %eax,(%esp)
c011234c:	e8 ac 7a ff ff       	call   c0109dfd <down>
}
c0112351:	c9                   	leave  
c0112352:	c3                   	ret    

c0112353 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c0112353:	55                   	push   %ebp
c0112354:	89 e5                	mov    %esp,%ebp
c0112356:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0112359:	8b 45 08             	mov    0x8(%ebp),%eax
c011235c:	83 c0 10             	add    $0x10,%eax
c011235f:	89 04 24             	mov    %eax,(%esp)
c0112362:	e8 7b 7a ff ff       	call   c0109de2 <up>
}
c0112367:	c9                   	leave  
c0112368:	c3                   	ret    

c0112369 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0112369:	55                   	push   %ebp
c011236a:	89 e5                	mov    %esp,%ebp
c011236c:	83 ec 28             	sub    $0x28,%esp
c011236f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112372:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0112376:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c011237a:	83 f8 01             	cmp    $0x1,%eax
c011237d:	74 0c                	je     c011238b <sfs_get_ops+0x22>
c011237f:	83 f8 02             	cmp    $0x2,%eax
c0112382:	75 0e                	jne    c0112392 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0112384:	b8 a0 96 11 c0       	mov    $0xc01196a0,%eax
c0112389:	eb 2b                	jmp    c01123b6 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c011238b:	b8 e0 96 11 c0       	mov    $0xc01196e0,%eax
c0112390:	eb 24                	jmp    c01123b6 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0112392:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112396:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011239a:	c7 44 24 08 20 97 11 	movl   $0xc0119720,0x8(%esp)
c01123a1:	c0 
c01123a2:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c01123a9:	00 
c01123aa:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01123b1:	e8 28 eb fe ff       	call   c0100ede <__panic>
}
c01123b6:	c9                   	leave  
c01123b7:	c3                   	ret    

c01123b8 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c01123b8:	55                   	push   %ebp
c01123b9:	89 e5                	mov    %esp,%ebp
c01123bb:	53                   	push   %ebx
c01123bc:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c01123bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01123c2:	8b 58 68             	mov    0x68(%eax),%ebx
c01123c5:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01123cc:	00 
c01123cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123d0:	89 04 24             	mov    %eax,(%esp)
c01123d3:	e8 35 27 00 00       	call   c0114b0d <hash32>
c01123d8:	c1 e0 03             	shl    $0x3,%eax
c01123db:	01 d8                	add    %ebx,%eax
}
c01123dd:	83 c4 14             	add    $0x14,%esp
c01123e0:	5b                   	pop    %ebx
c01123e1:	5d                   	pop    %ebp
c01123e2:	c3                   	ret    

c01123e3 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c01123e3:	55                   	push   %ebp
c01123e4:	89 e5                	mov    %esp,%ebp
c01123e6:	53                   	push   %ebx
c01123e7:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01123ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123ed:	83 c0 1c             	add    $0x1c,%eax
c01123f0:	8b 55 08             	mov    0x8(%ebp),%edx
c01123f3:	83 c2 60             	add    $0x60,%edx
c01123f6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01123f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01123fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112402:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112405:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0112408:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011240b:	8b 40 04             	mov    0x4(%eax),%eax
c011240e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112411:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0112414:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112417:	89 55 e0             	mov    %edx,-0x20(%ebp)
c011241a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011241d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112420:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112423:	89 10                	mov    %edx,(%eax)
c0112425:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112428:	8b 10                	mov    (%eax),%edx
c011242a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011242d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112430:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112433:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0112436:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112439:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011243c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011243f:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c0112441:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112444:	8d 58 24             	lea    0x24(%eax),%ebx
c0112447:	8b 45 0c             	mov    0xc(%ebp),%eax
c011244a:	8b 40 04             	mov    0x4(%eax),%eax
c011244d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112451:	8b 45 08             	mov    0x8(%ebp),%eax
c0112454:	89 04 24             	mov    %eax,(%esp)
c0112457:	e8 5c ff ff ff       	call   c01123b8 <sfs_hash_list>
c011245c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011245f:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c0112462:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112465:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112468:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011246b:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011246e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112471:	8b 40 04             	mov    0x4(%eax),%eax
c0112474:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112477:	89 55 c8             	mov    %edx,-0x38(%ebp)
c011247a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011247d:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0112480:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112483:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112486:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112489:	89 10                	mov    %edx,(%eax)
c011248b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011248e:	8b 10                	mov    (%eax),%edx
c0112490:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112493:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112496:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112499:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011249c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011249f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01124a2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01124a5:	89 10                	mov    %edx,(%eax)
}
c01124a7:	83 c4 54             	add    $0x54,%esp
c01124aa:	5b                   	pop    %ebx
c01124ab:	5d                   	pop    %ebp
c01124ac:	c3                   	ret    

c01124ad <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c01124ad:	55                   	push   %ebp
c01124ae:	89 e5                	mov    %esp,%ebp
c01124b0:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c01124b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01124b6:	83 c0 1c             	add    $0x1c,%eax
c01124b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01124bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01124bf:	8b 40 04             	mov    0x4(%eax),%eax
c01124c2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01124c5:	8b 12                	mov    (%edx),%edx
c01124c7:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01124ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01124cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01124d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01124d3:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01124d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124d9:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01124dc:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c01124de:	8b 45 08             	mov    0x8(%ebp),%eax
c01124e1:	83 c0 24             	add    $0x24,%eax
c01124e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01124e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124ea:	8b 40 04             	mov    0x4(%eax),%eax
c01124ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01124f0:	8b 12                	mov    (%edx),%edx
c01124f2:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01124f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01124f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124fb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01124fe:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112501:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112504:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112507:	89 10                	mov    %edx,(%eax)
}
c0112509:	c9                   	leave  
c011250a:	c3                   	ret    

c011250b <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c011250b:	55                   	push   %ebp
c011250c:	89 e5                	mov    %esp,%ebp
c011250e:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c0112511:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0112515:	74 2a                	je     c0112541 <sfs_block_inuse+0x36>
c0112517:	8b 45 08             	mov    0x8(%ebp),%eax
c011251a:	8b 40 04             	mov    0x4(%eax),%eax
c011251d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112520:	76 1f                	jbe    c0112541 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c0112522:	8b 45 08             	mov    0x8(%ebp),%eax
c0112525:	8b 40 30             	mov    0x30(%eax),%eax
c0112528:	8b 55 0c             	mov    0xc(%ebp),%edx
c011252b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011252f:	89 04 24             	mov    %eax,(%esp)
c0112532:	e8 19 f4 ff ff       	call   c0111950 <bitmap_test>
c0112537:	85 c0                	test   %eax,%eax
c0112539:	0f 94 c0             	sete   %al
c011253c:	0f b6 c0             	movzbl %al,%eax
c011253f:	eb 2d                	jmp    c011256e <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c0112541:	8b 45 08             	mov    0x8(%ebp),%eax
c0112544:	8b 40 04             	mov    0x4(%eax),%eax
c0112547:	8b 55 0c             	mov    0xc(%ebp),%edx
c011254a:	89 54 24 10          	mov    %edx,0x10(%esp)
c011254e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112552:	c7 44 24 08 50 97 11 	movl   $0xc0119750,0x8(%esp)
c0112559:	c0 
c011255a:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0112561:	00 
c0112562:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112569:	e8 70 e9 fe ff       	call   c0100ede <__panic>
}
c011256e:	c9                   	leave  
c011256f:	c3                   	ret    

c0112570 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c0112570:	55                   	push   %ebp
c0112571:	89 e5                	mov    %esp,%ebp
c0112573:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0112576:	8b 45 08             	mov    0x8(%ebp),%eax
c0112579:	8b 40 30             	mov    0x30(%eax),%eax
c011257c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011257f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112583:	89 04 24             	mov    %eax,(%esp)
c0112586:	e8 63 f2 ff ff       	call   c01117ee <bitmap_alloc>
c011258b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011258e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112592:	74 08                	je     c011259c <sfs_block_alloc+0x2c>
        return ret;
c0112594:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112597:	e9 9f 00 00 00       	jmp    c011263b <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c011259c:	8b 45 08             	mov    0x8(%ebp),%eax
c011259f:	8b 40 08             	mov    0x8(%eax),%eax
c01125a2:	85 c0                	test   %eax,%eax
c01125a4:	75 24                	jne    c01125ca <sfs_block_alloc+0x5a>
c01125a6:	c7 44 24 0c 82 97 11 	movl   $0xc0119782,0xc(%esp)
c01125ad:	c0 
c01125ae:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01125b5:	c0 
c01125b6:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01125bd:	00 
c01125be:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01125c5:	e8 14 e9 fe ff       	call   c0100ede <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c01125ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01125cd:	8b 40 08             	mov    0x8(%eax),%eax
c01125d0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01125d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01125d6:	89 50 08             	mov    %edx,0x8(%eax)
c01125d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01125dc:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c01125e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01125e6:	8b 00                	mov    (%eax),%eax
c01125e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01125ef:	89 04 24             	mov    %eax,(%esp)
c01125f2:	e8 14 ff ff ff       	call   c011250b <sfs_block_inuse>
c01125f7:	85 c0                	test   %eax,%eax
c01125f9:	75 24                	jne    c011261f <sfs_block_alloc+0xaf>
c01125fb:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c0112602:	c0 
c0112603:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011260a:	c0 
c011260b:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0112612:	00 
c0112613:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011261a:	e8 bf e8 fe ff       	call   c0100ede <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c011261f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112622:	8b 00                	mov    (%eax),%eax
c0112624:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011262b:	00 
c011262c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112630:	8b 45 08             	mov    0x8(%ebp),%eax
c0112633:	89 04 24             	mov    %eax,(%esp)
c0112636:	e8 f4 23 00 00       	call   c0114a2f <sfs_clear_block>
}
c011263b:	c9                   	leave  
c011263c:	c3                   	ret    

c011263d <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c011263d:	55                   	push   %ebp
c011263e:	89 e5                	mov    %esp,%ebp
c0112640:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c0112643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112646:	89 44 24 04          	mov    %eax,0x4(%esp)
c011264a:	8b 45 08             	mov    0x8(%ebp),%eax
c011264d:	89 04 24             	mov    %eax,(%esp)
c0112650:	e8 b6 fe ff ff       	call   c011250b <sfs_block_inuse>
c0112655:	85 c0                	test   %eax,%eax
c0112657:	75 24                	jne    c011267d <sfs_block_free+0x40>
c0112659:	c7 44 24 0c d5 97 11 	movl   $0xc01197d5,0xc(%esp)
c0112660:	c0 
c0112661:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112668:	c0 
c0112669:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0112670:	00 
c0112671:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112678:	e8 61 e8 fe ff       	call   c0100ede <__panic>
    bitmap_free(sfs->freemap, ino);
c011267d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112680:	8b 40 30             	mov    0x30(%eax),%eax
c0112683:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112686:	89 54 24 04          	mov    %edx,0x4(%esp)
c011268a:	89 04 24             	mov    %eax,(%esp)
c011268d:	e8 f0 f2 ff ff       	call   c0111982 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0112692:	8b 45 08             	mov    0x8(%ebp),%eax
c0112695:	8b 40 08             	mov    0x8(%eax),%eax
c0112698:	8d 50 01             	lea    0x1(%eax),%edx
c011269b:	8b 45 08             	mov    0x8(%ebp),%eax
c011269e:	89 50 08             	mov    %edx,0x8(%eax)
c01126a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01126a4:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c01126ab:	c9                   	leave  
c01126ac:	c3                   	ret    

c01126ad <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c01126ad:	55                   	push   %ebp
c01126ae:	89 e5                	mov    %esp,%ebp
c01126b0:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c01126b3:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c01126ba:	e8 6d ca ff ff       	call   c010f12c <__alloc_inode>
c01126bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01126c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01126c6:	0f 84 b5 00 00 00    	je     c0112781 <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c01126cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126cf:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01126d3:	0f b7 c0             	movzwl %ax,%eax
c01126d6:	89 04 24             	mov    %eax,(%esp)
c01126d9:	e8 8b fc ff ff       	call   c0112369 <sfs_get_ops>
c01126de:	8b 55 08             	mov    0x8(%ebp),%edx
c01126e1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01126e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126ec:	89 04 24             	mov    %eax,(%esp)
c01126ef:	e8 61 ca ff ff       	call   c010f155 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c01126f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01126fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01126fe:	74 0d                	je     c011270d <sfs_create_inode+0x60>
c0112700:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112703:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112706:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011270b:	74 24                	je     c0112731 <sfs_create_inode+0x84>
c011270d:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0112714:	c0 
c0112715:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011271c:	c0 
c011271d:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0112724:	00 
c0112725:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011272c:	e8 ad e7 fe ff       	call   c0100ede <__panic>
c0112731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112734:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c0112737:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011273a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011273d:	89 10                	mov    %edx,(%eax)
c011273f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112742:	8b 55 10             	mov    0x10(%ebp),%edx
c0112745:	89 50 04             	mov    %edx,0x4(%eax)
c0112748:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011274b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0112752:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112755:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c011275c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011275f:	83 c0 10             	add    $0x10,%eax
c0112762:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112769:	00 
c011276a:	89 04 24             	mov    %eax,(%esp)
c011276d:	e8 fd 74 ff ff       	call   c0109c6f <sem_init>
        *node_store = node;
c0112772:	8b 45 14             	mov    0x14(%ebp),%eax
c0112775:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112778:	89 10                	mov    %edx,(%eax)
        return 0;
c011277a:	b8 00 00 00 00       	mov    $0x0,%eax
c011277f:	eb 05                	jmp    c0112786 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c0112781:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0112786:	c9                   	leave  
c0112787:	c3                   	ret    

c0112788 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112788:	55                   	push   %ebp
c0112789:	89 e5                	mov    %esp,%ebp
c011278b:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011278e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112791:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112795:	8b 45 08             	mov    0x8(%ebp),%eax
c0112798:	89 04 24             	mov    %eax,(%esp)
c011279b:	e8 18 fc ff ff       	call   c01123b8 <sfs_hash_list>
c01127a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01127a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01127a9:	eb 3e                	jmp    c01127e9 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c01127ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127ae:	83 e8 24             	sub    $0x24,%eax
c01127b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c01127b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127b7:	8b 40 04             	mov    0x4(%eax),%eax
c01127ba:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01127bd:	75 2a                	jne    c01127e9 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c01127bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c01127c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01127c8:	89 04 24             	mov    %eax,(%esp)
c01127cb:	e8 37 ca ff ff       	call   c010f207 <inode_ref_inc>
c01127d0:	83 f8 01             	cmp    $0x1,%eax
c01127d3:	75 0f                	jne    c01127e4 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c01127d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127d8:	8b 40 0c             	mov    0xc(%eax),%eax
c01127db:	8d 50 01             	lea    0x1(%eax),%edx
c01127de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127e1:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c01127e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01127e7:	eb 1c                	jmp    c0112805 <lookup_sfs_nolock+0x7d>
c01127e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01127ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01127f2:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c01127f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01127f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127fb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01127fe:	75 ab                	jne    c01127ab <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c0112800:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112805:	c9                   	leave  
c0112806:	c3                   	ret    

c0112807 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c0112807:	55                   	push   %ebp
c0112808:	89 e5                	mov    %esp,%ebp
c011280a:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c011280d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112810:	89 04 24             	mov    %eax,(%esp)
c0112813:	e8 9d 22 00 00       	call   c0114ab5 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c0112818:	8b 45 10             	mov    0x10(%ebp),%eax
c011281b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011281f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112822:	89 04 24             	mov    %eax,(%esp)
c0112825:	e8 5e ff ff ff       	call   c0112788 <lookup_sfs_nolock>
c011282a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011282d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112830:	85 c0                	test   %eax,%eax
c0112832:	74 05                	je     c0112839 <sfs_load_inode+0x32>
        goto out_unlock;
c0112834:	e9 3c 01 00 00       	jmp    c0112975 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c0112839:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c0112840:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112847:	e8 63 25 ff ff       	call   c0104daf <kmalloc>
c011284c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011284f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112853:	75 05                	jne    c011285a <sfs_load_inode+0x53>
        goto failed_unlock;
c0112855:	e9 40 01 00 00       	jmp    c011299a <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c011285a:	8b 45 10             	mov    0x10(%ebp),%eax
c011285d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112861:	8b 45 08             	mov    0x8(%ebp),%eax
c0112864:	89 04 24             	mov    %eax,(%esp)
c0112867:	e8 9f fc ff ff       	call   c011250b <sfs_block_inuse>
c011286c:	85 c0                	test   %eax,%eax
c011286e:	75 24                	jne    c0112894 <sfs_load_inode+0x8d>
c0112870:	c7 44 24 0c d5 97 11 	movl   $0xc01197d5,0xc(%esp)
c0112877:	c0 
c0112878:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011287f:	c0 
c0112880:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112887:	00 
c0112888:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011288f:	e8 4a e6 fe ff       	call   c0100ede <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0112894:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011289b:	00 
c011289c:	8b 45 10             	mov    0x10(%ebp),%eax
c011289f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01128a3:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c01128aa:	00 
c01128ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01128ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01128b5:	89 04 24             	mov    %eax,(%esp)
c01128b8:	e8 e9 1e 00 00       	call   c01147a6 <sfs_rbuf>
c01128bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01128c4:	74 05                	je     c01128cb <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c01128c6:	e9 c4 00 00 00       	jmp    c011298f <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c01128cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01128ce:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01128d2:	66 85 c0             	test   %ax,%ax
c01128d5:	75 24                	jne    c01128fb <sfs_load_inode+0xf4>
c01128d7:	c7 44 24 0c 26 98 11 	movl   $0xc0119826,0xc(%esp)
c01128de:	c0 
c01128df:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01128e6:	c0 
c01128e7:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c01128ee:	00 
c01128ef:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01128f6:	e8 e3 e5 fe ff       	call   c0100ede <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c01128fb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01128fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112902:	8b 45 10             	mov    0x10(%ebp),%eax
c0112905:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011290c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112910:	8b 45 08             	mov    0x8(%ebp),%eax
c0112913:	89 04 24             	mov    %eax,(%esp)
c0112916:	e8 92 fd ff ff       	call   c01126ad <sfs_create_inode>
c011291b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011291e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112922:	74 02                	je     c0112926 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c0112924:	eb 69                	jmp    c011298f <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0112926:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112929:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011292c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112930:	74 0d                	je     c011293f <sfs_load_inode+0x138>
c0112932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112935:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112938:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011293d:	74 24                	je     c0112963 <sfs_load_inode+0x15c>
c011293f:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0112946:	c0 
c0112947:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011294e:	c0 
c011294f:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112956:	00 
c0112957:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011295e:	e8 7b e5 fe ff       	call   c0100ede <__panic>
c0112963:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112966:	89 44 24 04          	mov    %eax,0x4(%esp)
c011296a:	8b 45 08             	mov    0x8(%ebp),%eax
c011296d:	89 04 24             	mov    %eax,(%esp)
c0112970:	e8 6e fa ff ff       	call   c01123e3 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112975:	8b 45 08             	mov    0x8(%ebp),%eax
c0112978:	89 04 24             	mov    %eax,(%esp)
c011297b:	e8 61 21 00 00       	call   c0114ae1 <unlock_sfs_fs>
    *node_store = node;
c0112980:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112983:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112986:	89 10                	mov    %edx,(%eax)
    return 0;
c0112988:	b8 00 00 00 00       	mov    $0x0,%eax
c011298d:	eb 19                	jmp    c01129a8 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c011298f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112992:	89 04 24             	mov    %eax,(%esp)
c0112995:	e8 30 24 ff ff       	call   c0104dca <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c011299a:	8b 45 08             	mov    0x8(%ebp),%eax
c011299d:	89 04 24             	mov    %eax,(%esp)
c01129a0:	e8 3c 21 00 00       	call   c0114ae1 <unlock_sfs_fs>
    return ret;
c01129a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01129a8:	c9                   	leave  
c01129a9:	c3                   	ret    

c01129aa <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c01129aa:	55                   	push   %ebp
c01129ab:	89 e5                	mov    %esp,%ebp
c01129ad:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c01129b0:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01129b7:	76 24                	jbe    c01129dd <sfs_bmap_get_sub_nolock+0x33>
c01129b9:	c7 44 24 0c 37 98 11 	movl   $0xc0119837,0xc(%esp)
c01129c0:	c0 
c01129c1:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01129c8:	c0 
c01129c9:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c01129d0:	00 
c01129d1:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01129d8:	e8 01 e5 fe ff       	call   c0100ede <__panic>
    int ret;
    uint32_t ent, ino = 0;
c01129dd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c01129e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01129e7:	c1 e0 02             	shl    $0x2,%eax
c01129ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c01129ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129f0:	8b 00                	mov    (%eax),%eax
c01129f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01129f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129f8:	85 c0                	test   %eax,%eax
c01129fa:	74 50                	je     c0112a4c <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01129fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112a02:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112a06:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112a0a:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112a11:	00 
c0112a12:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112a15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a1c:	89 04 24             	mov    %eax,(%esp)
c0112a1f:	e8 82 1d 00 00       	call   c01147a6 <sfs_rbuf>
c0112a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112a27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112a2b:	74 08                	je     c0112a35 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c0112a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a30:	e9 eb 00 00 00       	jmp    c0112b20 <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c0112a35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a38:	85 c0                	test   %eax,%eax
c0112a3a:	0f 85 9c 00 00 00    	jne    c0112adc <sfs_bmap_get_sub_nolock+0x132>
c0112a40:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112a44:	0f 84 92 00 00 00    	je     c0112adc <sfs_bmap_get_sub_nolock+0x132>
c0112a4a:	eb 2e                	jmp    c0112a7a <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c0112a4c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112a50:	75 05                	jne    c0112a57 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c0112a52:	e9 85 00 00 00       	jmp    c0112adc <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112a57:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112a5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a61:	89 04 24             	mov    %eax,(%esp)
c0112a64:	e8 07 fb ff ff       	call   c0112570 <sfs_block_alloc>
c0112a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112a6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112a70:	74 08                	je     c0112a7a <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c0112a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a75:	e9 a6 00 00 00       	jmp    c0112b20 <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112a7a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112a7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a81:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a84:	89 04 24             	mov    %eax,(%esp)
c0112a87:	e8 e4 fa ff ff       	call   c0112570 <sfs_block_alloc>
c0112a8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112a8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112a93:	74 02                	je     c0112a97 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112a95:	eb 68                	jmp    c0112aff <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a9a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112a9d:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112aa1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112aa5:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112aac:	00 
c0112aad:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112ab0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ab7:	89 04 24             	mov    %eax,(%esp)
c0112aba:	e8 a0 1d 00 00       	call   c011485f <sfs_wbuf>
c0112abf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ac2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112ac6:	74 14                	je     c0112adc <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c0112ac8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112acb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ad2:	89 04 24             	mov    %eax,(%esp)
c0112ad5:	e8 63 fb ff ff       	call   c011263d <sfs_block_free>
        goto failed_cleanup;
c0112ada:	eb 23                	jmp    c0112aff <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c0112adc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112adf:	8b 10                	mov    (%eax),%edx
c0112ae1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ae4:	39 c2                	cmp    %eax,%edx
c0112ae6:	74 08                	je     c0112af0 <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c0112ae8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112aeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112aee:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0112af0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112af3:	8b 45 18             	mov    0x18(%ebp),%eax
c0112af6:	89 10                	mov    %edx,(%eax)
    return 0;
c0112af8:	b8 00 00 00 00       	mov    $0x0,%eax
c0112afd:	eb 21                	jmp    c0112b20 <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c0112aff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b02:	8b 10                	mov    (%eax),%edx
c0112b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b07:	39 c2                	cmp    %eax,%edx
c0112b09:	74 12                	je     c0112b1d <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c0112b0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b12:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b15:	89 04 24             	mov    %eax,(%esp)
c0112b18:	e8 20 fb ff ff       	call   c011263d <sfs_block_free>
    }
    return ret;
c0112b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112b20:	c9                   	leave  
c0112b21:	c3                   	ret    

c0112b22 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112b22:	55                   	push   %ebp
c0112b23:	89 e5                	mov    %esp,%ebp
c0112b25:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112b28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b2b:	8b 00                	mov    (%eax),%eax
c0112b2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0112b30:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112b34:	77 5e                	ja     c0112b94 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c0112b36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b39:	8b 55 10             	mov    0x10(%ebp),%edx
c0112b3c:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112b40:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112b43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112b46:	85 c0                	test   %eax,%eax
c0112b48:	75 45                	jne    c0112b8f <sfs_bmap_get_nolock+0x6d>
c0112b4a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b4e:	74 3f                	je     c0112b8f <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112b50:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b57:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b5a:	89 04 24             	mov    %eax,(%esp)
c0112b5d:	e8 0e fa ff ff       	call   c0112570 <sfs_block_alloc>
c0112b62:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b69:	74 08                	je     c0112b73 <sfs_bmap_get_nolock+0x51>
                return ret;
c0112b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b6e:	e9 2f 01 00 00       	jmp    c0112ca2 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c0112b73:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b79:	8b 55 10             	mov    0x10(%ebp),%edx
c0112b7c:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0112b80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b83:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112b8a:	e9 c5 00 00 00       	jmp    c0112c54 <sfs_bmap_get_nolock+0x132>
c0112b8f:	e9 c0 00 00 00       	jmp    c0112c54 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112b94:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112b98:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112b9f:	0f 87 93 00 00 00    	ja     c0112c38 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c0112ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ba8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112bab:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112bae:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112bb1:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112bb5:	8b 45 14             	mov    0x14(%ebp),%eax
c0112bb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112bbc:	8b 45 10             	mov    0x10(%ebp),%eax
c0112bbf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112bc3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112bc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bca:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bcd:	89 04 24             	mov    %eax,(%esp)
c0112bd0:	e8 d5 fd ff ff       	call   c01129aa <sfs_bmap_get_sub_nolock>
c0112bd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112bd8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112bdc:	74 08                	je     c0112be6 <sfs_bmap_get_nolock+0xc4>
            return ret;
c0112bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112be1:	e9 bc 00 00 00       	jmp    c0112ca2 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c0112be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112be9:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112bec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bef:	39 c2                	cmp    %eax,%edx
c0112bf1:	74 43                	je     c0112c36 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bf6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112bf9:	85 c0                	test   %eax,%eax
c0112bfb:	74 24                	je     c0112c21 <sfs_bmap_get_nolock+0xff>
c0112bfd:	c7 44 24 0c 4e 98 11 	movl   $0xc011984e,0xc(%esp)
c0112c04:	c0 
c0112c05:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112c0c:	c0 
c0112c0d:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112c14:	00 
c0112c15:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112c1c:	e8 bd e2 fe ff       	call   c0100ede <__panic>
            din->indirect = ent;
c0112c21:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c27:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112c2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c2d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112c34:	eb 1e                	jmp    c0112c54 <sfs_bmap_get_nolock+0x132>
c0112c36:	eb 1c                	jmp    c0112c54 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112c38:	c7 44 24 08 64 98 11 	movl   $0xc0119864,0x8(%esp)
c0112c3f:	c0 
c0112c40:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112c47:	00 
c0112c48:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112c4f:	e8 8a e2 fe ff       	call   c0100ede <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112c54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c57:	85 c0                	test   %eax,%eax
c0112c59:	74 3a                	je     c0112c95 <sfs_bmap_get_nolock+0x173>
c0112c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c65:	89 04 24             	mov    %eax,(%esp)
c0112c68:	e8 9e f8 ff ff       	call   c011250b <sfs_block_inuse>
c0112c6d:	85 c0                	test   %eax,%eax
c0112c6f:	75 24                	jne    c0112c95 <sfs_bmap_get_nolock+0x173>
c0112c71:	c7 44 24 0c 90 98 11 	movl   $0xc0119890,0xc(%esp)
c0112c78:	c0 
c0112c79:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112c80:	c0 
c0112c81:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112c88:	00 
c0112c89:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112c90:	e8 49 e2 fe ff       	call   c0100ede <__panic>
    *ino_store = ino;
c0112c95:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112c98:	8b 45 18             	mov    0x18(%ebp),%eax
c0112c9b:	89 10                	mov    %edx,(%eax)
    return 0;
c0112c9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112ca2:	c9                   	leave  
c0112ca3:	c3                   	ret    

c0112ca4 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112ca4:	55                   	push   %ebp
c0112ca5:	89 e5                	mov    %esp,%ebp
c0112ca7:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112caa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cad:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0112cb4:	89 04 24             	mov    %eax,(%esp)
c0112cb7:	e8 4f f8 ff ff       	call   c011250b <sfs_block_inuse>
c0112cbc:	85 c0                	test   %eax,%eax
c0112cbe:	74 09                	je     c0112cc9 <sfs_bmap_free_sub_nolock+0x25>
c0112cc0:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112cc7:	76 24                	jbe    c0112ced <sfs_bmap_free_sub_nolock+0x49>
c0112cc9:	c7 44 24 0c b8 98 11 	movl   $0xc01198b8,0xc(%esp)
c0112cd0:	c0 
c0112cd1:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112cd8:	c0 
c0112cd9:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112ce0:	00 
c0112ce1:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112ce8:	e8 f1 e1 fe ff       	call   c0100ede <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112ced:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112cf4:	8b 45 10             	mov    0x10(%ebp),%eax
c0112cf7:	c1 e0 02             	shl    $0x2,%eax
c0112cfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d00:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112d04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d07:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112d0b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112d12:	00 
c0112d13:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d1d:	89 04 24             	mov    %eax,(%esp)
c0112d20:	e8 81 1a 00 00       	call   c01147a6 <sfs_rbuf>
c0112d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112d28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112d2c:	74 05                	je     c0112d33 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112d2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d31:	eb 54                	jmp    c0112d87 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112d33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112d36:	85 c0                	test   %eax,%eax
c0112d38:	74 48                	je     c0112d82 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112d3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d3d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112d41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d44:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112d48:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112d4f:	00 
c0112d50:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112d53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d57:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d5a:	89 04 24             	mov    %eax,(%esp)
c0112d5d:	e8 fd 1a 00 00       	call   c011485f <sfs_wbuf>
c0112d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112d65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112d69:	74 05                	je     c0112d70 <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112d6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d6e:	eb 17                	jmp    c0112d87 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112d70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112d73:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d77:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d7a:	89 04 24             	mov    %eax,(%esp)
c0112d7d:	e8 bb f8 ff ff       	call   c011263d <sfs_block_free>
    }
    return 0;
c0112d82:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d87:	c9                   	leave  
c0112d88:	c3                   	ret    

c0112d89 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112d89:	55                   	push   %ebp
c0112d8a:	89 e5                	mov    %esp,%ebp
c0112d8c:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112d8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d92:	8b 00                	mov    (%eax),%eax
c0112d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112d97:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112d9b:	77 44                	ja     c0112de1 <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112da0:	8b 55 10             	mov    0x10(%ebp),%edx
c0112da3:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112da7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112daa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112dae:	74 2a                	je     c0112dda <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112db0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112db3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0112dba:	89 04 24             	mov    %eax,(%esp)
c0112dbd:	e8 7b f8 ff ff       	call   c011263d <sfs_block_free>
            din->direct[index] = 0;
c0112dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dc5:	8b 55 10             	mov    0x10(%ebp),%edx
c0112dc8:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112dcf:	00 
            sin->dirty = 1;
c0112dd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112dd3:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112dda:	b8 00 00 00 00       	mov    $0x0,%eax
c0112ddf:	eb 4f                	jmp    c0112e30 <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112de1:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112de5:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112dec:	77 3d                	ja     c0112e2b <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112df1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112df4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112df7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112dfb:	74 27                	je     c0112e24 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112dfd:	8b 45 10             	mov    0x10(%ebp),%eax
c0112e00:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e0e:	89 04 24             	mov    %eax,(%esp)
c0112e11:	e8 8e fe ff ff       	call   c0112ca4 <sfs_bmap_free_sub_nolock>
c0112e16:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112e19:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112e1d:	74 05                	je     c0112e24 <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112e1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112e22:	eb 0c                	jmp    c0112e30 <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112e24:	b8 00 00 00 00       	mov    $0x0,%eax
c0112e29:	eb 05                	jmp    c0112e30 <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112e2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e30:	c9                   	leave  
c0112e31:	c3                   	ret    

c0112e32 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112e32:	55                   	push   %ebp
c0112e33:	89 e5                	mov    %esp,%ebp
c0112e35:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112e38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e3b:	8b 00                	mov    (%eax),%eax
c0112e3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e43:	8b 40 08             	mov    0x8(%eax),%eax
c0112e46:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112e49:	73 24                	jae    c0112e6f <sfs_bmap_load_nolock+0x3d>
c0112e4b:	c7 44 24 0c ec 98 11 	movl   $0xc01198ec,0xc(%esp)
c0112e52:	c0 
c0112e53:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112e5a:	c0 
c0112e5b:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112e62:	00 
c0112e63:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112e6a:	e8 6f e0 fe ff       	call   c0100ede <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e72:	8b 40 08             	mov    0x8(%eax),%eax
c0112e75:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112e78:	0f 94 c0             	sete   %al
c0112e7b:	0f b6 c0             	movzbl %al,%eax
c0112e7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112e81:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112e84:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e8f:	8b 45 10             	mov    0x10(%ebp),%eax
c0112e92:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ea0:	89 04 24             	mov    %eax,(%esp)
c0112ea3:	e8 7a fc ff ff       	call   c0112b22 <sfs_bmap_get_nolock>
c0112ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112eab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112eaf:	74 05                	je     c0112eb6 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112eb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112eb4:	eb 62                	jmp    c0112f18 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112eb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112eb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ec0:	89 04 24             	mov    %eax,(%esp)
c0112ec3:	e8 43 f6 ff ff       	call   c011250b <sfs_block_inuse>
c0112ec8:	85 c0                	test   %eax,%eax
c0112eca:	75 24                	jne    c0112ef0 <sfs_bmap_load_nolock+0xbe>
c0112ecc:	c7 44 24 0c d5 97 11 	movl   $0xc01197d5,0xc(%esp)
c0112ed3:	c0 
c0112ed4:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112edb:	c0 
c0112edc:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112ee3:	00 
c0112ee4:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112eeb:	e8 ee df fe ff       	call   c0100ede <__panic>
    if (create) {
c0112ef0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112ef4:	74 0f                	je     c0112f05 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ef9:	8b 40 08             	mov    0x8(%eax),%eax
c0112efc:	8d 50 01             	lea    0x1(%eax),%edx
c0112eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f02:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112f05:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112f09:	74 08                	je     c0112f13 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112f0b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112f0e:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f11:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112f13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112f18:	c9                   	leave  
c0112f19:	c3                   	ret    

c0112f1a <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112f1a:	55                   	push   %ebp
c0112f1b:	89 e5                	mov    %esp,%ebp
c0112f1d:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112f20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f23:	8b 00                	mov    (%eax),%eax
c0112f25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112f28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f2b:	8b 40 08             	mov    0x8(%eax),%eax
c0112f2e:	85 c0                	test   %eax,%eax
c0112f30:	75 24                	jne    c0112f56 <sfs_bmap_truncate_nolock+0x3c>
c0112f32:	c7 44 24 0c 01 99 11 	movl   $0xc0119901,0xc(%esp)
c0112f39:	c0 
c0112f3a:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112f41:	c0 
c0112f42:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112f49:	00 
c0112f4a:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112f51:	e8 88 df fe ff       	call   c0100ede <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f59:	8b 40 08             	mov    0x8(%eax),%eax
c0112f5c:	83 e8 01             	sub    $0x1,%eax
c0112f5f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f6d:	89 04 24             	mov    %eax,(%esp)
c0112f70:	e8 14 fe ff ff       	call   c0112d89 <sfs_bmap_free_nolock>
c0112f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112f78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112f7c:	74 05                	je     c0112f83 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0112f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f81:	eb 1e                	jmp    c0112fa1 <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0112f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f86:	8b 40 08             	mov    0x8(%eax),%eax
c0112f89:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112f8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f8f:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0112f92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f95:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0112f9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112fa1:	c9                   	leave  
c0112fa2:	c3                   	ret    

c0112fa3 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0112fa3:	55                   	push   %ebp
c0112fa4:	89 e5                	mov    %esp,%ebp
c0112fa6:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0112fa9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fac:	8b 00                	mov    (%eax),%eax
c0112fae:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112fb2:	66 83 f8 02          	cmp    $0x2,%ax
c0112fb6:	75 15                	jne    c0112fcd <sfs_dirent_read_nolock+0x2a>
c0112fb8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112fbc:	78 0f                	js     c0112fcd <sfs_dirent_read_nolock+0x2a>
c0112fbe:	8b 55 10             	mov    0x10(%ebp),%edx
c0112fc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fc4:	8b 00                	mov    (%eax),%eax
c0112fc6:	8b 40 08             	mov    0x8(%eax),%eax
c0112fc9:	39 c2                	cmp    %eax,%edx
c0112fcb:	72 24                	jb     c0112ff1 <sfs_dirent_read_nolock+0x4e>
c0112fcd:	c7 44 24 0c 14 99 11 	movl   $0xc0119914,0xc(%esp)
c0112fd4:	c0 
c0112fd5:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0112fdc:	c0 
c0112fdd:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0112fe4:	00 
c0112fe5:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0112fec:	e8 ed de fe ff       	call   c0100ede <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0112ff1:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ff4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0112ff7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112ffb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112fff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113002:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113006:	8b 45 08             	mov    0x8(%ebp),%eax
c0113009:	89 04 24             	mov    %eax,(%esp)
c011300c:	e8 21 fe ff ff       	call   c0112e32 <sfs_bmap_load_nolock>
c0113011:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113014:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113018:	74 08                	je     c0113022 <sfs_dirent_read_nolock+0x7f>
        return ret;
c011301a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011301d:	e9 80 00 00 00       	jmp    c01130a2 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c0113022:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113025:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113029:	8b 45 08             	mov    0x8(%ebp),%eax
c011302c:	89 04 24             	mov    %eax,(%esp)
c011302f:	e8 d7 f4 ff ff       	call   c011250b <sfs_block_inuse>
c0113034:	85 c0                	test   %eax,%eax
c0113036:	75 24                	jne    c011305c <sfs_dirent_read_nolock+0xb9>
c0113038:	c7 44 24 0c d5 97 11 	movl   $0xc01197d5,0xc(%esp)
c011303f:	c0 
c0113040:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113047:	c0 
c0113048:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c011304f:	00 
c0113050:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113057:	e8 82 de fe ff       	call   c0100ede <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c011305c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011305f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113066:	00 
c0113067:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011306b:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c0113072:	00 
c0113073:	8b 45 14             	mov    0x14(%ebp),%eax
c0113076:	89 44 24 04          	mov    %eax,0x4(%esp)
c011307a:	8b 45 08             	mov    0x8(%ebp),%eax
c011307d:	89 04 24             	mov    %eax,(%esp)
c0113080:	e8 21 17 00 00       	call   c01147a6 <sfs_rbuf>
c0113085:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113088:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011308c:	74 05                	je     c0113093 <sfs_dirent_read_nolock+0xf0>
        return ret;
c011308e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113091:	eb 0f                	jmp    c01130a2 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0113093:	8b 45 14             	mov    0x14(%ebp),%eax
c0113096:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c011309d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01130a2:	c9                   	leave  
c01130a3:	c3                   	ret    

c01130a4 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c01130a4:	55                   	push   %ebp
c01130a5:	89 e5                	mov    %esp,%ebp
c01130a7:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c01130aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01130ad:	89 04 24             	mov    %eax,(%esp)
c01130b0:	e8 5c 22 00 00       	call   c0115311 <strlen>
c01130b5:	3d ff 00 00 00       	cmp    $0xff,%eax
c01130ba:	76 24                	jbe    c01130e0 <sfs_dirent_search_nolock+0x3c>
c01130bc:	c7 44 24 0c 60 99 11 	movl   $0xc0119960,0xc(%esp)
c01130c3:	c0 
c01130c4:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01130cb:	c0 
c01130cc:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c01130d3:	00 
c01130d4:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01130db:	e8 fe dd fe ff       	call   c0100ede <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01130e0:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01130e7:	e8 c3 1c ff ff       	call   c0104daf <kmalloc>
c01130ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01130ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01130f3:	75 0a                	jne    c01130ff <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c01130f5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01130fa:	e9 cb 00 00 00       	jmp    c01131ca <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c01130ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113102:	8b 00                	mov    (%eax),%eax
c0113104:	8b 40 08             	mov    0x8(%eax),%eax
c0113107:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c011310a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011310e:	74 08                	je     c0113118 <sfs_dirent_search_nolock+0x74>
c0113110:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113113:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0113116:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0113118:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011311f:	e9 85 00 00 00       	jmp    c01131a9 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113124:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113127:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011312b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011312e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113132:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113135:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113139:	8b 45 08             	mov    0x8(%ebp),%eax
c011313c:	89 04 24             	mov    %eax,(%esp)
c011313f:	e8 5f fe ff ff       	call   c0112fa3 <sfs_dirent_read_nolock>
c0113144:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113147:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011314b:	74 02                	je     c011314f <sfs_dirent_search_nolock+0xab>
            goto out;
c011314d:	eb 6d                	jmp    c01131bc <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c011314f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113152:	8b 00                	mov    (%eax),%eax
c0113154:	85 c0                	test   %eax,%eax
c0113156:	75 12                	jne    c011316a <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0113158:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011315c:	74 0a                	je     c0113168 <sfs_dirent_search_nolock+0xc4>
c011315e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113161:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113164:	89 10                	mov    %edx,(%eax)
            continue ;
c0113166:	eb 3d                	jmp    c01131a5 <sfs_dirent_search_nolock+0x101>
c0113168:	eb 3b                	jmp    c01131a5 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c011316a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011316d:	83 c0 04             	add    $0x4,%eax
c0113170:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113174:	8b 45 10             	mov    0x10(%ebp),%eax
c0113177:	89 04 24             	mov    %eax,(%esp)
c011317a:	e8 8a 22 00 00       	call   c0115409 <strcmp>
c011317f:	85 c0                	test   %eax,%eax
c0113181:	75 22                	jne    c01131a5 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0113183:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113187:	74 08                	je     c0113191 <sfs_dirent_search_nolock+0xed>
c0113189:	8b 45 18             	mov    0x18(%ebp),%eax
c011318c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011318f:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0113191:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113195:	74 0c                	je     c01131a3 <sfs_dirent_search_nolock+0xff>
c0113197:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011319a:	8b 10                	mov    (%eax),%edx
c011319c:	8b 45 14             	mov    0x14(%ebp),%eax
c011319f:	89 10                	mov    %edx,(%eax)
            goto out;
c01131a1:	eb 19                	jmp    c01131bc <sfs_dirent_search_nolock+0x118>
c01131a3:	eb 17                	jmp    c01131bc <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c01131a5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01131a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01131ac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01131af:	0f 8c 6f ff ff ff    	jl     c0113124 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c01131b5:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c01131bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131bf:	89 04 24             	mov    %eax,(%esp)
c01131c2:	e8 03 1c ff ff       	call   c0104dca <kfree>
    return ret;
c01131c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01131ca:	c9                   	leave  
c01131cb:	c3                   	ret    

c01131cc <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c01131cc:	55                   	push   %ebp
c01131cd:	89 e5                	mov    %esp,%ebp
c01131cf:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c01131d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131d5:	8b 00                	mov    (%eax),%eax
c01131d7:	8b 40 08             	mov    0x8(%eax),%eax
c01131da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c01131dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01131e4:	eb 43                	jmp    c0113229 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01131e6:	8b 45 14             	mov    0x14(%ebp),%eax
c01131e9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01131ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01131f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01131fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01131fe:	89 04 24             	mov    %eax,(%esp)
c0113201:	e8 9d fd ff ff       	call   c0112fa3 <sfs_dirent_read_nolock>
c0113206:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113209:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011320d:	74 05                	je     c0113214 <sfs_dirent_findino_nolock+0x48>
            return ret;
c011320f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113212:	eb 22                	jmp    c0113236 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0113214:	8b 45 14             	mov    0x14(%ebp),%eax
c0113217:	8b 00                	mov    (%eax),%eax
c0113219:	3b 45 10             	cmp    0x10(%ebp),%eax
c011321c:	75 07                	jne    c0113225 <sfs_dirent_findino_nolock+0x59>
            return 0;
c011321e:	b8 00 00 00 00       	mov    $0x0,%eax
c0113223:	eb 11                	jmp    c0113236 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113225:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113229:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011322c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011322f:	7c b5                	jl     c01131e6 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c0113231:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113236:	c9                   	leave  
c0113237:	c3                   	ret    

c0113238 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0113238:	55                   	push   %ebp
c0113239:	89 e5                	mov    %esp,%ebp
c011323b:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c011323e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113241:	89 04 24             	mov    %eax,(%esp)
c0113244:	e8 f4 f0 ff ff       	call   c011233d <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0113249:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0113250:	00 
c0113251:	8b 45 18             	mov    0x18(%ebp),%eax
c0113254:	89 44 24 10          	mov    %eax,0x10(%esp)
c0113258:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011325b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011325f:	8b 45 10             	mov    0x10(%ebp),%eax
c0113262:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113269:	89 44 24 04          	mov    %eax,0x4(%esp)
c011326d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113270:	89 04 24             	mov    %eax,(%esp)
c0113273:	e8 2c fe ff ff       	call   c01130a4 <sfs_dirent_search_nolock>
c0113278:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c011327b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011327e:	89 04 24             	mov    %eax,(%esp)
c0113281:	e8 cd f0 ff ff       	call   c0112353 <unlock_sin>
    if (ret == 0) {
c0113286:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011328a:	75 1c                	jne    c01132a8 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011328c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011328f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113293:	8b 45 14             	mov    0x14(%ebp),%eax
c0113296:	89 44 24 04          	mov    %eax,0x4(%esp)
c011329a:	8b 45 08             	mov    0x8(%ebp),%eax
c011329d:	89 04 24             	mov    %eax,(%esp)
c01132a0:	e8 62 f5 ff ff       	call   c0112807 <sfs_load_inode>
c01132a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c01132a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01132ab:	c9                   	leave  
c01132ac:	c3                   	ret    

c01132ad <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c01132ad:	55                   	push   %ebp
c01132ae:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c01132b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132b3:	83 e0 03             	and    $0x3,%eax
c01132b6:	85 c0                	test   %eax,%eax
c01132b8:	74 07                	je     c01132c1 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c01132ba:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01132bf:	eb 17                	jmp    c01132d8 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c01132c1:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c01132c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132c5:	83 e0 20             	and    $0x20,%eax
c01132c8:	85 c0                	test   %eax,%eax
c01132ca:	74 07                	je     c01132d3 <sfs_opendir+0x26>
        return -E_ISDIR;
c01132cc:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01132d1:	eb 05                	jmp    c01132d8 <sfs_opendir+0x2b>
    }
    return 0;
c01132d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01132d8:	5d                   	pop    %ebp
c01132d9:	c3                   	ret    

c01132da <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c01132da:	55                   	push   %ebp
c01132db:	89 e5                	mov    %esp,%ebp
    return 0;
c01132dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01132e2:	5d                   	pop    %ebp
c01132e3:	c3                   	ret    

c01132e4 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c01132e4:	55                   	push   %ebp
c01132e5:	89 e5                	mov    %esp,%ebp
c01132e7:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c01132ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01132ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01132f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01132f4:	74 17                	je     c011330d <sfs_close+0x29>
c01132f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132f9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01132fc:	85 c0                	test   %eax,%eax
c01132fe:	74 0d                	je     c011330d <sfs_close+0x29>
c0113300:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113303:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113306:	8b 40 18             	mov    0x18(%eax),%eax
c0113309:	85 c0                	test   %eax,%eax
c011330b:	75 24                	jne    c0113331 <sfs_close+0x4d>
c011330d:	c7 44 24 0c 84 99 11 	movl   $0xc0119984,0xc(%esp)
c0113314:	c0 
c0113315:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011331c:	c0 
c011331d:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c0113324:	00 
c0113325:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011332c:	e8 ad db fe ff       	call   c0100ede <__panic>
c0113331:	c7 44 24 04 d2 99 11 	movl   $0xc01199d2,0x4(%esp)
c0113338:	c0 
c0113339:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011333c:	89 04 24             	mov    %eax,(%esp)
c011333f:	e8 cb c0 ff ff       	call   c010f40f <inode_check>
c0113344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113347:	8b 40 3c             	mov    0x3c(%eax),%eax
c011334a:	8b 40 18             	mov    0x18(%eax),%eax
c011334d:	8b 55 08             	mov    0x8(%ebp),%edx
c0113350:	89 14 24             	mov    %edx,(%esp)
c0113353:	ff d0                	call   *%eax
}
c0113355:	c9                   	leave  
c0113356:	c3                   	ret    

c0113357 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0113357:	55                   	push   %ebp
c0113358:	89 e5                	mov    %esp,%ebp
c011335a:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c011335d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113360:	8b 00                	mov    (%eax),%eax
c0113362:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0113365:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113368:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011336c:	66 83 f8 02          	cmp    $0x2,%ax
c0113370:	75 24                	jne    c0113396 <sfs_io_nolock+0x3f>
c0113372:	c7 44 24 0c d8 99 11 	movl   $0xc01199d8,0xc(%esp)
c0113379:	c0 
c011337a:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113381:	c0 
c0113382:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0113389:	00 
c011338a:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113391:	e8 48 db fe ff       	call   c0100ede <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113396:	8b 45 18             	mov    0x18(%ebp),%eax
c0113399:	8b 10                	mov    (%eax),%edx
c011339b:	8b 45 14             	mov    0x14(%ebp),%eax
c011339e:	01 d0                	add    %edx,%eax
c01133a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c01133a3:	8b 45 18             	mov    0x18(%ebp),%eax
c01133a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c01133ac:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01133b0:	78 12                	js     c01133c4 <sfs_io_nolock+0x6d>
c01133b2:	8b 45 14             	mov    0x14(%ebp),%eax
c01133b5:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01133ba:	77 08                	ja     c01133c4 <sfs_io_nolock+0x6d>
c01133bc:	8b 45 14             	mov    0x14(%ebp),%eax
c01133bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01133c2:	7e 0a                	jle    c01133ce <sfs_io_nolock+0x77>
        return -E_INVAL;
c01133c4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01133c9:	e9 a0 02 00 00       	jmp    c011366e <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c01133ce:	8b 45 14             	mov    0x14(%ebp),%eax
c01133d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01133d4:	75 0a                	jne    c01133e0 <sfs_io_nolock+0x89>
        return 0;
c01133d6:	b8 00 00 00 00       	mov    $0x0,%eax
c01133db:	e9 8e 02 00 00       	jmp    c011366e <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c01133e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133e3:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01133e8:	76 07                	jbe    c01133f1 <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c01133ea:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01133f1:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01133f5:	75 2a                	jne    c0113421 <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c01133f7:	8b 55 14             	mov    0x14(%ebp),%edx
c01133fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01133fd:	8b 00                	mov    (%eax),%eax
c01133ff:	39 c2                	cmp    %eax,%edx
c0113401:	72 0a                	jb     c011340d <sfs_io_nolock+0xb6>
            return 0;
c0113403:	b8 00 00 00 00       	mov    $0x0,%eax
c0113408:	e9 61 02 00 00       	jmp    c011366e <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c011340d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113410:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113413:	8b 00                	mov    (%eax),%eax
c0113415:	39 c2                	cmp    %eax,%edx
c0113417:	76 08                	jbe    c0113421 <sfs_io_nolock+0xca>
            endpos = din->size;
c0113419:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011341c:	8b 00                	mov    (%eax),%eax
c011341e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c0113421:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0113425:	74 10                	je     c0113437 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0113427:	c7 45 f0 5f 48 11 c0 	movl   $0xc011485f,-0x10(%ebp)
c011342e:	c7 45 ec 76 47 11 c0 	movl   $0xc0114776,-0x14(%ebp)
c0113435:	eb 0e                	jmp    c0113445 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0113437:	c7 45 f0 a6 47 11 c0 	movl   $0xc01147a6,-0x10(%ebp)
c011343e:	c7 45 ec 46 47 11 c0 	movl   $0xc0114746,-0x14(%ebp)
    }

    int ret = 0;
c0113445:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c011344c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0113453:	8b 45 14             	mov    0x14(%ebp),%eax
c0113456:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011345c:	85 c0                	test   %eax,%eax
c011345e:	0f 48 c2             	cmovs  %edx,%eax
c0113461:	c1 f8 0c             	sar    $0xc,%eax
c0113464:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0113467:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011346a:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0113470:	85 c0                	test   %eax,%eax
c0113472:	0f 48 c2             	cmovs  %edx,%eax
c0113475:	c1 f8 0c             	sar    $0xc,%eax
c0113478:	2b 45 e0             	sub    -0x20(%ebp),%eax
c011347b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c011347e:	8b 45 14             	mov    0x14(%ebp),%eax
c0113481:	99                   	cltd   
c0113482:	c1 ea 14             	shr    $0x14,%edx
c0113485:	01 d0                	add    %edx,%eax
c0113487:	25 ff 0f 00 00       	and    $0xfff,%eax
c011348c:	29 d0                	sub    %edx,%eax
c011348e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0113491:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0113495:	0f 84 9f 00 00 00    	je     c011353a <sfs_io_nolock+0x1e3>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c011349b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011349f:	74 0a                	je     c01134ab <sfs_io_nolock+0x154>
c01134a1:	b8 00 10 00 00       	mov    $0x1000,%eax
c01134a6:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c01134a9:	eb 0a                	jmp    c01134b5 <sfs_io_nolock+0x15e>
c01134ab:	8b 45 14             	mov    0x14(%ebp),%eax
c01134ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01134b1:	29 c2                	sub    %eax,%edx
c01134b3:	89 d0                	mov    %edx,%eax
c01134b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01134b8:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01134bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01134bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01134c2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01134d0:	89 04 24             	mov    %eax,(%esp)
c01134d3:	e8 5a f9 ff ff       	call   c0112e32 <sfs_bmap_load_nolock>
c01134d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01134db:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01134df:	74 05                	je     c01134e6 <sfs_io_nolock+0x18f>
            goto out;
c01134e1:	e9 51 01 00 00       	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c01134e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01134e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01134ec:	89 54 24 10          	mov    %edx,0x10(%esp)
c01134f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01134f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01134f7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134fb:	8b 45 10             	mov    0x10(%ebp),%eax
c01134fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113502:	8b 45 08             	mov    0x8(%ebp),%eax
c0113505:	89 04 24             	mov    %eax,(%esp)
c0113508:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011350b:	ff d0                	call   *%eax
c011350d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113510:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113514:	74 05                	je     c011351b <sfs_io_nolock+0x1c4>
            goto out;
c0113516:	e9 1c 01 00 00       	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c011351b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011351e:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c0113521:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113525:	75 05                	jne    c011352c <sfs_io_nolock+0x1d5>
            goto out;
c0113527:	e9 0b 01 00 00       	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno ++, nblks --;
c011352c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011352f:	01 45 10             	add    %eax,0x10(%ebp)
c0113532:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0113536:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c011353a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c0113541:	eb 71                	jmp    c01135b4 <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113543:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113546:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011354a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011354d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113551:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113554:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113558:	8b 45 08             	mov    0x8(%ebp),%eax
c011355b:	89 04 24             	mov    %eax,(%esp)
c011355e:	e8 cf f8 ff ff       	call   c0112e32 <sfs_bmap_load_nolock>
c0113563:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113566:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011356a:	74 05                	je     c0113571 <sfs_io_nolock+0x21a>
            goto out;
c011356c:	e9 c6 00 00 00       	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c0113571:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113574:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011357b:	00 
c011357c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113580:	8b 45 10             	mov    0x10(%ebp),%eax
c0113583:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113587:	8b 45 08             	mov    0x8(%ebp),%eax
c011358a:	89 04 24             	mov    %eax,(%esp)
c011358d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113590:	ff d0                	call   *%eax
c0113592:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113595:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113599:	74 05                	je     c01135a0 <sfs_io_nolock+0x249>
            goto out;
c011359b:	e9 97 00 00 00       	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno ++, nblks --;
c01135a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01135a3:	01 45 e4             	add    %eax,-0x1c(%ebp)
c01135a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01135a9:	01 45 10             	add    %eax,0x10(%ebp)
c01135ac:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c01135b0:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        }
        buf += size, blkno ++, nblks --;
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
c01135b4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01135b8:	75 89                	jne    c0113543 <sfs_io_nolock+0x1ec>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c01135ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135bd:	99                   	cltd   
c01135be:	c1 ea 14             	shr    $0x14,%edx
c01135c1:	01 d0                	add    %edx,%eax
c01135c3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01135c8:	29 d0                	sub    %edx,%eax
c01135ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01135cd:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01135d1:	74 64                	je     c0113637 <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01135d3:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01135d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01135da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01135dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01135eb:	89 04 24             	mov    %eax,(%esp)
c01135ee:	e8 3f f8 ff ff       	call   c0112e32 <sfs_bmap_load_nolock>
c01135f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01135f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01135fa:	74 02                	je     c01135fe <sfs_io_nolock+0x2a7>
            goto out;
c01135fc:	eb 39                	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c01135fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113601:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113608:	00 
c0113609:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011360d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113610:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113614:	8b 45 10             	mov    0x10(%ebp),%eax
c0113617:	89 44 24 04          	mov    %eax,0x4(%esp)
c011361b:	8b 45 08             	mov    0x8(%ebp),%eax
c011361e:	89 04 24             	mov    %eax,(%esp)
c0113621:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113624:	ff d0                	call   *%eax
c0113626:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113629:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011362d:	74 02                	je     c0113631 <sfs_io_nolock+0x2da>
            goto out;
c011362f:	eb 06                	jmp    c0113637 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c0113631:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113634:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c0113637:	8b 45 18             	mov    0x18(%ebp),%eax
c011363a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011363d:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c011363f:	8b 55 14             	mov    0x14(%ebp),%edx
c0113642:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113645:	01 c2                	add    %eax,%edx
c0113647:	8b 45 0c             	mov    0xc(%ebp),%eax
c011364a:	8b 00                	mov    (%eax),%eax
c011364c:	8b 00                	mov    (%eax),%eax
c011364e:	39 c2                	cmp    %eax,%edx
c0113650:	76 19                	jbe    c011366b <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c0113652:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113655:	8b 00                	mov    (%eax),%eax
c0113657:	8b 4d 14             	mov    0x14(%ebp),%ecx
c011365a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011365d:	01 ca                	add    %ecx,%edx
c011365f:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c0113661:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113664:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c011366b:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c011366e:	c9                   	leave  
c011366f:	c3                   	ret    

c0113670 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c0113670:	55                   	push   %ebp
c0113671:	89 e5                	mov    %esp,%ebp
c0113673:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113676:	8b 45 08             	mov    0x8(%ebp),%eax
c0113679:	8b 40 38             	mov    0x38(%eax),%eax
c011367c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011367f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113683:	74 0a                	je     c011368f <sfs_io+0x1f>
c0113685:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113688:	8b 40 6c             	mov    0x6c(%eax),%eax
c011368b:	85 c0                	test   %eax,%eax
c011368d:	74 24                	je     c01136b3 <sfs_io+0x43>
c011368f:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c0113696:	c0 
c0113697:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011369e:	c0 
c011369f:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c01136a6:	00 
c01136a7:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01136ae:	e8 2b d8 fe ff       	call   c0100ede <__panic>
c01136b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01136b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01136b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01136bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01136bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01136c3:	74 0d                	je     c01136d2 <sfs_io+0x62>
c01136c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01136c8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01136cb:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01136d0:	74 24                	je     c01136f6 <sfs_io+0x86>
c01136d2:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c01136d9:	c0 
c01136da:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01136e1:	c0 
c01136e2:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01136e9:	00 
c01136ea:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01136f1:	e8 e8 d7 fe ff       	call   c0100ede <__panic>
c01136f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01136f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c01136fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136ff:	89 04 24             	mov    %eax,(%esp)
c0113702:	e8 36 ec ff ff       	call   c011233d <lock_sin>
    {
        size_t alen = iob->io_resid;
c0113707:	8b 45 0c             	mov    0xc(%ebp),%eax
c011370a:	8b 40 0c             	mov    0xc(%eax),%eax
c011370d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c0113710:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113713:	8b 50 04             	mov    0x4(%eax),%edx
c0113716:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113719:	8b 00                	mov    (%eax),%eax
c011371b:	8b 4d 10             	mov    0x10(%ebp),%ecx
c011371e:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0113722:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0113725:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0113729:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011372d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113731:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113734:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113738:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011373b:	89 04 24             	mov    %eax,(%esp)
c011373e:	e8 14 fc ff ff       	call   c0113357 <sfs_io_nolock>
c0113743:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0113746:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113749:	85 c0                	test   %eax,%eax
c011374b:	74 12                	je     c011375f <sfs_io+0xef>
            iobuf_skip(iob, alen);
c011374d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113750:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113754:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113757:	89 04 24             	mov    %eax,(%esp)
c011375a:	e8 28 7e ff ff       	call   c010b587 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c011375f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113762:	89 04 24             	mov    %eax,(%esp)
c0113765:	e8 e9 eb ff ff       	call   c0112353 <unlock_sin>
    return ret;
c011376a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c011376d:	c9                   	leave  
c011376e:	c3                   	ret    

c011376f <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c011376f:	55                   	push   %ebp
c0113770:	89 e5                	mov    %esp,%ebp
c0113772:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0113775:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011377c:	00 
c011377d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113780:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113784:	8b 45 08             	mov    0x8(%ebp),%eax
c0113787:	89 04 24             	mov    %eax,(%esp)
c011378a:	e8 e1 fe ff ff       	call   c0113670 <sfs_io>
}
c011378f:	c9                   	leave  
c0113790:	c3                   	ret    

c0113791 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c0113791:	55                   	push   %ebp
c0113792:	89 e5                	mov    %esp,%ebp
c0113794:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113797:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011379e:	00 
c011379f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01137a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01137a9:	89 04 24             	mov    %eax,(%esp)
c01137ac:	e8 bf fe ff ff       	call   c0113670 <sfs_io>
}
c01137b1:	c9                   	leave  
c01137b2:	c3                   	ret    

c01137b3 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c01137b3:	55                   	push   %ebp
c01137b4:	89 e5                	mov    %esp,%ebp
c01137b6:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01137b9:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01137c0:	00 
c01137c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01137c8:	00 
c01137c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137cc:	89 04 24             	mov    %eax,(%esp)
c01137cf:	e8 93 1e 00 00       	call   c0115667 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01137d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01137d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01137da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01137de:	74 17                	je     c01137f7 <sfs_fstat+0x44>
c01137e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01137e3:	8b 40 3c             	mov    0x3c(%eax),%eax
c01137e6:	85 c0                	test   %eax,%eax
c01137e8:	74 0d                	je     c01137f7 <sfs_fstat+0x44>
c01137ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01137ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c01137f0:	8b 40 28             	mov    0x28(%eax),%eax
c01137f3:	85 c0                	test   %eax,%eax
c01137f5:	75 24                	jne    c011381b <sfs_fstat+0x68>
c01137f7:	c7 44 24 0c 20 9a 11 	movl   $0xc0119a20,0xc(%esp)
c01137fe:	c0 
c01137ff:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113806:	c0 
c0113807:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c011380e:	00 
c011380f:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113816:	e8 c3 d6 fe ff       	call   c0100ede <__panic>
c011381b:	c7 44 24 04 70 9a 11 	movl   $0xc0119a70,0x4(%esp)
c0113822:	c0 
c0113823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113826:	89 04 24             	mov    %eax,(%esp)
c0113829:	e8 e1 bb ff ff       	call   c010f40f <inode_check>
c011382e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113831:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113834:	8b 40 28             	mov    0x28(%eax),%eax
c0113837:	8b 55 0c             	mov    0xc(%ebp),%edx
c011383a:	89 54 24 04          	mov    %edx,0x4(%esp)
c011383e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113841:	89 14 24             	mov    %edx,(%esp)
c0113844:	ff d0                	call   *%eax
c0113846:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113849:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011384d:	74 05                	je     c0113854 <sfs_fstat+0xa1>
        return ret;
c011384f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113852:	eb 71                	jmp    c01138c5 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113854:	8b 45 08             	mov    0x8(%ebp),%eax
c0113857:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011385a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011385e:	74 0d                	je     c011386d <sfs_fstat+0xba>
c0113860:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113863:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113866:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011386b:	74 24                	je     c0113891 <sfs_fstat+0xde>
c011386d:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0113874:	c0 
c0113875:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011387c:	c0 
c011387d:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c0113884:	00 
c0113885:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011388c:	e8 4d d6 fe ff       	call   c0100ede <__panic>
c0113891:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113894:	8b 00                	mov    (%eax),%eax
c0113896:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113899:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011389c:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01138a0:	0f b7 d0             	movzwl %ax,%edx
c01138a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138a6:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c01138a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01138ac:	8b 50 08             	mov    0x8(%eax),%edx
c01138af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138b2:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c01138b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01138b8:	8b 10                	mov    (%eax),%edx
c01138ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138bd:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01138c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01138c5:	c9                   	leave  
c01138c6:	c3                   	ret    

c01138c7 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c01138c7:	55                   	push   %ebp
c01138c8:	89 e5                	mov    %esp,%ebp
c01138ca:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01138cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01138d0:	8b 40 38             	mov    0x38(%eax),%eax
c01138d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01138d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01138da:	74 0a                	je     c01138e6 <sfs_fsync+0x1f>
c01138dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01138df:	8b 40 6c             	mov    0x6c(%eax),%eax
c01138e2:	85 c0                	test   %eax,%eax
c01138e4:	74 24                	je     c011390a <sfs_fsync+0x43>
c01138e6:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c01138ed:	c0 
c01138ee:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01138f5:	c0 
c01138f6:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c01138fd:	00 
c01138fe:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113905:	e8 d4 d5 fe ff       	call   c0100ede <__panic>
c011390a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011390d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113910:	8b 45 08             	mov    0x8(%ebp),%eax
c0113913:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113916:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011391a:	74 0d                	je     c0113929 <sfs_fsync+0x62>
c011391c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011391f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113922:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113927:	74 24                	je     c011394d <sfs_fsync+0x86>
c0113929:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0113930:	c0 
c0113931:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113938:	c0 
c0113939:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c0113940:	00 
c0113941:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113948:	e8 91 d5 fe ff       	call   c0100ede <__panic>
c011394d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113950:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0113953:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c011395a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011395d:	8b 40 08             	mov    0x8(%eax),%eax
c0113960:	85 c0                	test   %eax,%eax
c0113962:	74 6b                	je     c01139cf <sfs_fsync+0x108>
        lock_sin(sin);
c0113964:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113967:	89 04 24             	mov    %eax,(%esp)
c011396a:	e8 ce e9 ff ff       	call   c011233d <lock_sin>
        {
            if (sin->dirty) {
c011396f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113972:	8b 40 08             	mov    0x8(%eax),%eax
c0113975:	85 c0                	test   %eax,%eax
c0113977:	74 4b                	je     c01139c4 <sfs_fsync+0xfd>
                sin->dirty = 0;
c0113979:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011397c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0113983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113986:	8b 50 04             	mov    0x4(%eax),%edx
c0113989:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011398c:	8b 00                	mov    (%eax),%eax
c011398e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113995:	00 
c0113996:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011399a:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c01139a1:	00 
c01139a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01139a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01139a9:	89 04 24             	mov    %eax,(%esp)
c01139ac:	e8 ae 0e 00 00       	call   c011485f <sfs_wbuf>
c01139b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01139b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01139b8:	74 0a                	je     c01139c4 <sfs_fsync+0xfd>
                    sin->dirty = 1;
c01139ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139bd:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c01139c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139c7:	89 04 24             	mov    %eax,(%esp)
c01139ca:	e8 84 e9 ff ff       	call   c0112353 <unlock_sin>
    }
    return ret;
c01139cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01139d2:	c9                   	leave  
c01139d3:	c3                   	ret    

c01139d4 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c01139d4:	55                   	push   %ebp
c01139d5:	89 e5                	mov    %esp,%ebp
c01139d7:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01139da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01139dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01139e0:	83 f8 02             	cmp    $0x2,%eax
c01139e3:	76 15                	jbe    c01139fa <sfs_namefile+0x26>
c01139e5:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01139ec:	e8 be 13 ff ff       	call   c0104daf <kmalloc>
c01139f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01139f4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01139f8:	75 0a                	jne    c0113a04 <sfs_namefile+0x30>
        return -E_NO_MEM;
c01139fa:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01139ff:	e9 bd 02 00 00       	jmp    c0113cc1 <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113a04:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a07:	8b 40 38             	mov    0x38(%eax),%eax
c0113a0a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113a0d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113a11:	74 0a                	je     c0113a1d <sfs_namefile+0x49>
c0113a13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113a16:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113a19:	85 c0                	test   %eax,%eax
c0113a1b:	74 24                	je     c0113a41 <sfs_namefile+0x6d>
c0113a1d:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c0113a24:	c0 
c0113a25:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113a2c:	c0 
c0113a2d:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c0113a34:	00 
c0113a35:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113a3c:	e8 9d d4 fe ff       	call   c0100ede <__panic>
c0113a41:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113a44:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113a47:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113a4d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113a51:	74 0d                	je     c0113a60 <sfs_namefile+0x8c>
c0113a53:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113a56:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113a59:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113a5e:	74 24                	je     c0113a84 <sfs_namefile+0xb0>
c0113a60:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0113a67:	c0 
c0113a68:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113a6f:	c0 
c0113a70:	c7 44 24 04 db 02 00 	movl   $0x2db,0x4(%esp)
c0113a77:	00 
c0113a78:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113a7f:	e8 5a d4 fe ff       	call   c0100ede <__panic>
c0113a84:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113a87:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a8d:	8b 10                	mov    (%eax),%edx
c0113a8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a92:	8b 40 0c             	mov    0xc(%eax),%eax
c0113a95:	01 d0                	add    %edx,%eax
c0113a97:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113a9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a9d:	8b 40 0c             	mov    0xc(%eax),%eax
c0113aa0:	83 e8 02             	sub    $0x2,%eax
c0113aa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113aa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0113aa9:	89 04 24             	mov    %eax,(%esp)
c0113aac:	e8 56 b7 ff ff       	call   c010f207 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0113ab1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113ab8:	00 
c0113ab9:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113abc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113ac0:	c7 44 24 08 78 9a 11 	movl   $0xc0119a78,0x8(%esp)
c0113ac7:	c0 
c0113ac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113acb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113acf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ad2:	89 04 24             	mov    %eax,(%esp)
c0113ad5:	e8 5e f7 ff ff       	call   c0113238 <sfs_lookup_once>
c0113ada:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113add:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113ae1:	74 05                	je     c0113ae8 <sfs_namefile+0x114>
            goto failed;
c0113ae3:	e9 c0 01 00 00       	jmp    c0113ca8 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c0113ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113aeb:	8b 40 04             	mov    0x4(%eax),%eax
c0113aee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0113af1:	8b 45 08             	mov    0x8(%ebp),%eax
c0113af4:	89 04 24             	mov    %eax,(%esp)
c0113af7:	e8 25 b7 ff ff       	call   c010f221 <inode_ref_dec>
        if (node == parent) {
c0113afc:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113aff:	39 45 08             	cmp    %eax,0x8(%ebp)
c0113b02:	75 76                	jne    c0113b7a <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113b04:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b07:	89 04 24             	mov    %eax,(%esp)
c0113b0a:	e8 12 b7 ff ff       	call   c010f221 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c0113b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b12:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b15:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0113b18:	83 e8 02             	sub    $0x2,%eax
c0113b1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c0113b1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b21:	8b 00                	mov    (%eax),%eax
c0113b23:	8d 50 01             	lea    0x1(%eax),%edx
c0113b26:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b29:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113b2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b34:	89 14 24             	mov    %edx,(%esp)
c0113b37:	e8 6a 1b 00 00       	call   c01156a6 <memmove>
c0113b3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113b3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b42:	83 e8 01             	sub    $0x1,%eax
c0113b45:	c6 00 2f             	movb   $0x2f,(%eax)
c0113b48:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b4b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113b4e:	01 d0                	add    %edx,%eax
c0113b50:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113b53:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b5d:	89 04 24             	mov    %eax,(%esp)
c0113b60:	e8 22 7a ff ff       	call   c010b587 <iobuf_skip>
    kfree(entry);
c0113b65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b68:	89 04 24             	mov    %eax,(%esp)
c0113b6b:	e8 5a 12 ff ff       	call   c0104dca <kfree>
    return 0;
c0113b70:	b8 00 00 00 00       	mov    $0x0,%eax
c0113b75:	e9 47 01 00 00       	jmp    c0113cc1 <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113b7a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113b7d:	89 45 08             	mov    %eax,0x8(%ebp)
c0113b80:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b83:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113b86:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113b8a:	74 0d                	je     c0113b99 <sfs_namefile+0x1c5>
c0113b8c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113b8f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113b92:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113b97:	74 24                	je     c0113bbd <sfs_namefile+0x1e9>
c0113b99:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0113ba0:	c0 
c0113ba1:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113ba8:	c0 
c0113ba9:	c7 44 24 04 ee 02 00 	movl   $0x2ee,0x4(%esp)
c0113bb0:	00 
c0113bb1:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113bb8:	e8 21 d3 fe ff       	call   c0100ede <__panic>
c0113bbd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113bc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113bc6:	8b 40 04             	mov    0x4(%eax),%eax
c0113bc9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113bcc:	74 0f                	je     c0113bdd <sfs_namefile+0x209>
c0113bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113bd1:	8b 00                	mov    (%eax),%eax
c0113bd3:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113bd7:	66 83 f8 02          	cmp    $0x2,%ax
c0113bdb:	74 24                	je     c0113c01 <sfs_namefile+0x22d>
c0113bdd:	c7 44 24 0c 7c 9a 11 	movl   $0xc0119a7c,0xc(%esp)
c0113be4:	c0 
c0113be5:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113bec:	c0 
c0113bed:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
c0113bf4:	00 
c0113bf5:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113bfc:	e8 dd d2 fe ff       	call   c0100ede <__panic>

        lock_sin(sin);
c0113c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c04:	89 04 24             	mov    %eax,(%esp)
c0113c07:	e8 31 e7 ff ff       	call   c011233d <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113c0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113c13:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113c16:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c21:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c24:	89 04 24             	mov    %eax,(%esp)
c0113c27:	e8 a0 f5 ff ff       	call   c01131cc <sfs_dirent_findino_nolock>
c0113c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0113c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c32:	89 04 24             	mov    %eax,(%esp)
c0113c35:	e8 19 e7 ff ff       	call   c0112353 <unlock_sin>

        if (ret != 0) {
c0113c3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113c3e:	74 03                	je     c0113c43 <sfs_namefile+0x26f>
            goto failed;
c0113c40:	90                   	nop
c0113c41:	eb 65                	jmp    c0113ca8 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113c43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c46:	83 c0 04             	add    $0x4,%eax
c0113c49:	89 04 24             	mov    %eax,(%esp)
c0113c4c:	e8 c0 16 00 00       	call   c0115311 <strlen>
c0113c51:	83 c0 01             	add    $0x1,%eax
c0113c54:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113c57:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c5a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113c5d:	76 09                	jbe    c0113c68 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113c5f:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113c66:	eb 40                	jmp    c0113ca8 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113c68:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c6b:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113c6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c71:	f7 d8                	neg    %eax
c0113c73:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113c76:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c79:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113c7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c7f:	83 c0 04             	add    $0x4,%eax
c0113c82:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113c86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c8d:	89 04 24             	mov    %eax,(%esp)
c0113c90:	e8 b4 1a 00 00       	call   c0115749 <memcpy>
        ptr[alen - 1] = '/';
c0113c95:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c98:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113c9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c9e:	01 d0                	add    %edx,%eax
c0113ca0:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113ca3:	e9 09 fe ff ff       	jmp    c0113ab1 <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cab:	89 04 24             	mov    %eax,(%esp)
c0113cae:	e8 6e b5 ff ff       	call   c010f221 <inode_ref_dec>
    kfree(entry);
c0113cb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113cb6:	89 04 24             	mov    %eax,(%esp)
c0113cb9:	e8 0c 11 ff ff       	call   c0104dca <kfree>
    return ret;
c0113cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113cc1:	c9                   	leave  
c0113cc2:	c3                   	ret    

c0113cc3 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113cc3:	55                   	push   %ebp
c0113cc4:	89 e5                	mov    %esp,%ebp
c0113cc6:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113cc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ccc:	8b 00                	mov    (%eax),%eax
c0113cce:	8b 40 08             	mov    0x8(%eax),%eax
c0113cd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113cd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113cdb:	eb 4c                	jmp    c0113d29 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113cdd:	8b 45 14             	mov    0x14(%ebp),%eax
c0113ce0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113ce7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113cee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113cf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cf5:	89 04 24             	mov    %eax,(%esp)
c0113cf8:	e8 a6 f2 ff ff       	call   c0112fa3 <sfs_dirent_read_nolock>
c0113cfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113d00:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113d04:	74 05                	je     c0113d0b <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113d06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d09:	eb 2b                	jmp    c0113d36 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113d0b:	8b 45 14             	mov    0x14(%ebp),%eax
c0113d0e:	8b 00                	mov    (%eax),%eax
c0113d10:	85 c0                	test   %eax,%eax
c0113d12:	74 11                	je     c0113d25 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113d14:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113d18:	75 07                	jne    c0113d21 <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113d1a:	b8 00 00 00 00       	mov    $0x0,%eax
c0113d1f:	eb 15                	jmp    c0113d36 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113d21:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113d25:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d2c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113d2f:	7c ac                	jl     c0113cdd <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113d31:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113d36:	c9                   	leave  
c0113d37:	c3                   	ret    

c0113d38 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113d38:	55                   	push   %ebp
c0113d39:	89 e5                	mov    %esp,%ebp
c0113d3b:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113d3e:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113d45:	e8 65 10 ff ff       	call   c0104daf <kmalloc>
c0113d4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113d4d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113d51:	75 0a                	jne    c0113d5d <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113d53:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113d58:	e9 6b 01 00 00       	jmp    c0113ec8 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113d5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d60:	8b 40 38             	mov    0x38(%eax),%eax
c0113d63:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113d66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113d6a:	74 0a                	je     c0113d76 <sfs_getdirentry+0x3e>
c0113d6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d6f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113d72:	85 c0                	test   %eax,%eax
c0113d74:	74 24                	je     c0113d9a <sfs_getdirentry+0x62>
c0113d76:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c0113d7d:	c0 
c0113d7e:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113d85:	c0 
c0113d86:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
c0113d8d:	00 
c0113d8e:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113d95:	e8 44 d1 fe ff       	call   c0100ede <__panic>
c0113d9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113da0:	8b 45 08             	mov    0x8(%ebp),%eax
c0113da3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113da6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113daa:	74 0d                	je     c0113db9 <sfs_getdirentry+0x81>
c0113dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113daf:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113db2:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113db7:	74 24                	je     c0113ddd <sfs_getdirentry+0xa5>
c0113db9:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0113dc0:	c0 
c0113dc1:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113dc8:	c0 
c0113dc9:	c7 44 24 04 31 03 00 	movl   $0x331,0x4(%esp)
c0113dd0:	00 
c0113dd1:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113dd8:	e8 01 d1 fe ff       	call   c0100ede <__panic>
c0113ddd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113de0:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113de3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113de6:	8b 40 04             	mov    0x4(%eax),%eax
c0113de9:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113dec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113df0:	78 0a                	js     c0113dfc <sfs_getdirentry+0xc4>
c0113df2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113df5:	0f b6 c0             	movzbl %al,%eax
c0113df8:	85 c0                	test   %eax,%eax
c0113dfa:	74 15                	je     c0113e11 <sfs_getdirentry+0xd9>
        kfree(entry);
c0113dfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113dff:	89 04 24             	mov    %eax,(%esp)
c0113e02:	e8 c3 0f ff ff       	call   c0104dca <kfree>
        return -E_INVAL;
c0113e07:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113e0c:	e9 b7 00 00 00       	jmp    c0113ec8 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113e11:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e14:	c1 e8 08             	shr    $0x8,%eax
c0113e17:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113e1a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113e1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e20:	8b 00                	mov    (%eax),%eax
c0113e22:	8b 40 08             	mov    0x8(%eax),%eax
c0113e25:	39 c2                	cmp    %eax,%edx
c0113e27:	76 15                	jbe    c0113e3e <sfs_getdirentry+0x106>
        kfree(entry);
c0113e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e2c:	89 04 24             	mov    %eax,(%esp)
c0113e2f:	e8 96 0f ff ff       	call   c0104dca <kfree>
        return -E_NOENT;
c0113e34:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113e39:	e9 8a 00 00 00       	jmp    c0113ec8 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113e3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e41:	89 04 24             	mov    %eax,(%esp)
c0113e44:	e8 f4 e4 ff ff       	call   c011233d <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113e49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e4c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113e50:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113e53:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113e57:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113e5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113e61:	89 04 24             	mov    %eax,(%esp)
c0113e64:	e8 5a fe ff ff       	call   c0113cc3 <sfs_getdirentry_sub_nolock>
c0113e69:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113e6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113e70:	74 0d                	je     c0113e7f <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113e72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e75:	89 04 24             	mov    %eax,(%esp)
c0113e78:	e8 d6 e4 ff ff       	call   c0112353 <unlock_sin>
        goto out;
c0113e7d:	eb 3b                	jmp    c0113eba <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113e7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e82:	89 04 24             	mov    %eax,(%esp)
c0113e85:	e8 c9 e4 ff ff       	call   c0112353 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113e8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e8d:	83 c0 04             	add    $0x4,%eax
c0113e90:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113e97:	00 
c0113e98:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113e9f:	00 
c0113ea0:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113ea7:	00 
c0113ea8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113eac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113eaf:	89 04 24             	mov    %eax,(%esp)
c0113eb2:	e8 bb 75 ff ff       	call   c010b472 <iobuf_move>
c0113eb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113eba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ebd:	89 04 24             	mov    %eax,(%esp)
c0113ec0:	e8 05 0f ff ff       	call   c0104dca <kfree>
    return ret;
c0113ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113ec8:	c9                   	leave  
c0113ec9:	c3                   	ret    

c0113eca <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113eca:	55                   	push   %ebp
c0113ecb:	89 e5                	mov    %esp,%ebp
c0113ecd:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ed3:	8b 40 38             	mov    0x38(%eax),%eax
c0113ed6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113ed9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113edd:	74 0a                	je     c0113ee9 <sfs_reclaim+0x1f>
c0113edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ee2:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113ee5:	85 c0                	test   %eax,%eax
c0113ee7:	74 24                	je     c0113f0d <sfs_reclaim+0x43>
c0113ee9:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c0113ef0:	c0 
c0113ef1:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113ef8:	c0 
c0113ef9:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c0113f00:	00 
c0113f01:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113f08:	e8 d1 cf fe ff       	call   c0100ede <__panic>
c0113f0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f10:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113f13:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f16:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113f19:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113f1d:	74 0d                	je     c0113f2c <sfs_reclaim+0x62>
c0113f1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f22:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113f25:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113f2a:	74 24                	je     c0113f50 <sfs_reclaim+0x86>
c0113f2c:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0113f33:	c0 
c0113f34:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113f3b:	c0 
c0113f3c:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c0113f43:	00 
c0113f44:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113f4b:	e8 8e cf fe ff       	call   c0100ede <__panic>
c0113f50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f53:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113f56:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113f5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f60:	89 04 24             	mov    %eax,(%esp)
c0113f63:	e8 4d 0b 00 00       	call   c0114ab5 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113f68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f6b:	8b 40 0c             	mov    0xc(%eax),%eax
c0113f6e:	85 c0                	test   %eax,%eax
c0113f70:	7f 24                	jg     c0113f96 <sfs_reclaim+0xcc>
c0113f72:	c7 44 24 0c ae 9a 11 	movl   $0xc0119aae,0xc(%esp)
c0113f79:	c0 
c0113f7a:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0113f81:	c0 
c0113f82:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
c0113f89:	00 
c0113f8a:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0113f91:	e8 48 cf fe ff       	call   c0100ede <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0113f96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f99:	8b 40 0c             	mov    0xc(%eax),%eax
c0113f9c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113f9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fa2:	89 50 0c             	mov    %edx,0xc(%eax)
c0113fa5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fa8:	8b 40 0c             	mov    0xc(%eax),%eax
c0113fab:	85 c0                	test   %eax,%eax
c0113fad:	0f 85 a1 01 00 00    	jne    c0114154 <sfs_reclaim+0x28a>
c0113fb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fb6:	89 04 24             	mov    %eax,(%esp)
c0113fb9:	e8 74 e3 ff ff       	call   c0112332 <inode_ref_count>
c0113fbe:	85 c0                	test   %eax,%eax
c0113fc0:	0f 85 8e 01 00 00    	jne    c0114154 <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0113fc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fc9:	8b 00                	mov    (%eax),%eax
c0113fcb:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113fcf:	66 85 c0             	test   %ax,%ax
c0113fd2:	0f 85 81 00 00 00    	jne    c0114059 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0113fd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fdb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113fde:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113fe2:	74 17                	je     c0113ffb <sfs_reclaim+0x131>
c0113fe4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113fe7:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113fea:	85 c0                	test   %eax,%eax
c0113fec:	74 0d                	je     c0113ffb <sfs_reclaim+0x131>
c0113fee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ff1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ff4:	8b 40 30             	mov    0x30(%eax),%eax
c0113ff7:	85 c0                	test   %eax,%eax
c0113ff9:	75 24                	jne    c011401f <sfs_reclaim+0x155>
c0113ffb:	c7 44 24 0c c8 9a 11 	movl   $0xc0119ac8,0xc(%esp)
c0114002:	c0 
c0114003:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011400a:	c0 
c011400b:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c0114012:	00 
c0114013:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011401a:	e8 bf ce fe ff       	call   c0100ede <__panic>
c011401f:	c7 44 24 04 19 9b 11 	movl   $0xc0119b19,0x4(%esp)
c0114026:	c0 
c0114027:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011402a:	89 04 24             	mov    %eax,(%esp)
c011402d:	e8 dd b3 ff ff       	call   c010f40f <inode_check>
c0114032:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114035:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114038:	8b 40 30             	mov    0x30(%eax),%eax
c011403b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114042:	00 
c0114043:	8b 55 08             	mov    0x8(%ebp),%edx
c0114046:	89 14 24             	mov    %edx,(%esp)
c0114049:	ff d0                	call   *%eax
c011404b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011404e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114052:	74 05                	je     c0114059 <sfs_reclaim+0x18f>
            goto failed_unlock;
c0114054:	e9 fb 00 00 00       	jmp    c0114154 <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0114059:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011405c:	8b 40 08             	mov    0x8(%eax),%eax
c011405f:	85 c0                	test   %eax,%eax
c0114061:	74 76                	je     c01140d9 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c0114063:	8b 45 08             	mov    0x8(%ebp),%eax
c0114066:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0114069:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011406d:	74 17                	je     c0114086 <sfs_reclaim+0x1bc>
c011406f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114072:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114075:	85 c0                	test   %eax,%eax
c0114077:	74 0d                	je     c0114086 <sfs_reclaim+0x1bc>
c0114079:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011407c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011407f:	8b 40 18             	mov    0x18(%eax),%eax
c0114082:	85 c0                	test   %eax,%eax
c0114084:	75 24                	jne    c01140aa <sfs_reclaim+0x1e0>
c0114086:	c7 44 24 0c 84 99 11 	movl   $0xc0119984,0xc(%esp)
c011408d:	c0 
c011408e:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0114095:	c0 
c0114096:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c011409d:	00 
c011409e:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01140a5:	e8 34 ce fe ff       	call   c0100ede <__panic>
c01140aa:	c7 44 24 04 d2 99 11 	movl   $0xc01199d2,0x4(%esp)
c01140b1:	c0 
c01140b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01140b5:	89 04 24             	mov    %eax,(%esp)
c01140b8:	e8 52 b3 ff ff       	call   c010f40f <inode_check>
c01140bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01140c0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140c3:	8b 40 18             	mov    0x18(%eax),%eax
c01140c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01140c9:	89 14 24             	mov    %edx,(%esp)
c01140cc:	ff d0                	call   *%eax
c01140ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01140d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01140d5:	74 02                	je     c01140d9 <sfs_reclaim+0x20f>
            goto failed_unlock;
c01140d7:	eb 7b                	jmp    c0114154 <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c01140d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01140dc:	89 04 24             	mov    %eax,(%esp)
c01140df:	e8 c9 e3 ff ff       	call   c01124ad <sfs_remove_links>
    unlock_sfs_fs(sfs);
c01140e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140e7:	89 04 24             	mov    %eax,(%esp)
c01140ea:	e8 f2 09 00 00       	call   c0114ae1 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c01140ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01140f2:	8b 00                	mov    (%eax),%eax
c01140f4:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01140f8:	66 85 c0             	test   %ax,%ax
c01140fb:	75 38                	jne    c0114135 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c01140fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114100:	8b 40 04             	mov    0x4(%eax),%eax
c0114103:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114107:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011410a:	89 04 24             	mov    %eax,(%esp)
c011410d:	e8 2b e5 ff ff       	call   c011263d <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c0114112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114115:	8b 00                	mov    (%eax),%eax
c0114117:	8b 40 3c             	mov    0x3c(%eax),%eax
c011411a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011411d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0114121:	74 12                	je     c0114135 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c0114123:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114126:	89 44 24 04          	mov    %eax,0x4(%esp)
c011412a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011412d:	89 04 24             	mov    %eax,(%esp)
c0114130:	e8 08 e5 ff ff       	call   c011263d <sfs_block_free>
        }
    }
    kfree(sin->din);
c0114135:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114138:	8b 00                	mov    (%eax),%eax
c011413a:	89 04 24             	mov    %eax,(%esp)
c011413d:	e8 88 0c ff ff       	call   c0104dca <kfree>
    vop_kill(node);
c0114142:	8b 45 08             	mov    0x8(%ebp),%eax
c0114145:	89 04 24             	mov    %eax,(%esp)
c0114148:	e8 41 b0 ff ff       	call   c010f18e <inode_kill>
    return 0;
c011414d:	b8 00 00 00 00       	mov    $0x0,%eax
c0114152:	eb 0e                	jmp    c0114162 <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0114154:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114157:	89 04 24             	mov    %eax,(%esp)
c011415a:	e8 82 09 00 00       	call   c0114ae1 <unlock_sfs_fs>
    return ret;
c011415f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114162:	c9                   	leave  
c0114163:	c3                   	ret    

c0114164 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0114164:	55                   	push   %ebp
c0114165:	89 e5                	mov    %esp,%ebp
c0114167:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c011416a:	8b 45 08             	mov    0x8(%ebp),%eax
c011416d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114170:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114174:	74 0d                	je     c0114183 <sfs_gettype+0x1f>
c0114176:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114179:	8b 40 2c             	mov    0x2c(%eax),%eax
c011417c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114181:	74 24                	je     c01141a7 <sfs_gettype+0x43>
c0114183:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c011418a:	c0 
c011418b:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0114192:	c0 
c0114193:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
c011419a:	00 
c011419b:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01141a2:	e8 37 cd fe ff       	call   c0100ede <__panic>
c01141a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01141aa:	8b 00                	mov    (%eax),%eax
c01141ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c01141af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01141b2:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01141b6:	0f b7 c0             	movzwl %ax,%eax
c01141b9:	83 f8 02             	cmp    $0x2,%eax
c01141bc:	74 0c                	je     c01141ca <sfs_gettype+0x66>
c01141be:	83 f8 03             	cmp    $0x3,%eax
c01141c1:	74 27                	je     c01141ea <sfs_gettype+0x86>
c01141c3:	83 f8 01             	cmp    $0x1,%eax
c01141c6:	74 12                	je     c01141da <sfs_gettype+0x76>
c01141c8:	eb 30                	jmp    c01141fa <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c01141ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141cd:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c01141d3:	b8 00 00 00 00       	mov    $0x0,%eax
c01141d8:	eb 4a                	jmp    c0114224 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c01141da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141dd:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c01141e3:	b8 00 00 00 00       	mov    $0x0,%eax
c01141e8:	eb 3a                	jmp    c0114224 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c01141ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141ed:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c01141f3:	b8 00 00 00 00       	mov    $0x0,%eax
c01141f8:	eb 2a                	jmp    c0114224 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c01141fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01141fd:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0114201:	0f b7 c0             	movzwl %ax,%eax
c0114204:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114208:	c7 44 24 08 20 97 11 	movl   $0xc0119720,0x8(%esp)
c011420f:	c0 
c0114210:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c0114217:	00 
c0114218:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011421f:	e8 ba cc fe ff       	call   c0100ede <__panic>
}
c0114224:	c9                   	leave  
c0114225:	c3                   	ret    

c0114226 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0114226:	55                   	push   %ebp
c0114227:	89 e5                	mov    %esp,%ebp
c0114229:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c011422c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114230:	78 0a                	js     c011423c <sfs_tryseek+0x16>
c0114232:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114235:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c011423a:	76 0a                	jbe    c0114246 <sfs_tryseek+0x20>
        return -E_INVAL;
c011423c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114241:	e9 ca 00 00 00       	jmp    c0114310 <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114246:	8b 45 08             	mov    0x8(%ebp),%eax
c0114249:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011424c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114250:	74 0d                	je     c011425f <sfs_tryseek+0x39>
c0114252:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114255:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114258:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011425d:	74 24                	je     c0114283 <sfs_tryseek+0x5d>
c011425f:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0114266:	c0 
c0114267:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011426e:	c0 
c011426f:	c7 44 24 04 90 03 00 	movl   $0x390,0x4(%esp)
c0114276:	00 
c0114277:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011427e:	e8 5b cc fe ff       	call   c0100ede <__panic>
c0114283:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114286:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0114289:	8b 55 0c             	mov    0xc(%ebp),%edx
c011428c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011428f:	8b 00                	mov    (%eax),%eax
c0114291:	8b 00                	mov    (%eax),%eax
c0114293:	39 c2                	cmp    %eax,%edx
c0114295:	76 74                	jbe    c011430b <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114297:	8b 45 08             	mov    0x8(%ebp),%eax
c011429a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011429d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01142a1:	74 17                	je     c01142ba <sfs_tryseek+0x94>
c01142a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01142a6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01142a9:	85 c0                	test   %eax,%eax
c01142ab:	74 0d                	je     c01142ba <sfs_tryseek+0x94>
c01142ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01142b0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01142b3:	8b 40 30             	mov    0x30(%eax),%eax
c01142b6:	85 c0                	test   %eax,%eax
c01142b8:	75 24                	jne    c01142de <sfs_tryseek+0xb8>
c01142ba:	c7 44 24 0c c8 9a 11 	movl   $0xc0119ac8,0xc(%esp)
c01142c1:	c0 
c01142c2:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01142c9:	c0 
c01142ca:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
c01142d1:	00 
c01142d2:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01142d9:	e8 00 cc fe ff       	call   c0100ede <__panic>
c01142de:	c7 44 24 04 19 9b 11 	movl   $0xc0119b19,0x4(%esp)
c01142e5:	c0 
c01142e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01142e9:	89 04 24             	mov    %eax,(%esp)
c01142ec:	e8 1e b1 ff ff       	call   c010f40f <inode_check>
c01142f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01142f4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01142f7:	8b 40 30             	mov    0x30(%eax),%eax
c01142fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01142fd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114301:	8b 55 08             	mov    0x8(%ebp),%edx
c0114304:	89 14 24             	mov    %edx,(%esp)
c0114307:	ff d0                	call   *%eax
c0114309:	eb 05                	jmp    c0114310 <sfs_tryseek+0xea>
    }
    return 0;
c011430b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114310:	c9                   	leave  
c0114311:	c3                   	ret    

c0114312 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c0114312:	55                   	push   %ebp
c0114313:	89 e5                	mov    %esp,%ebp
c0114315:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0114318:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011431c:	78 0a                	js     c0114328 <sfs_truncfile+0x16>
c011431e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114321:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0114326:	76 0a                	jbe    c0114332 <sfs_truncfile+0x20>
        return -E_INVAL;
c0114328:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011432d:	e9 d4 01 00 00       	jmp    c0114506 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0114332:	8b 45 08             	mov    0x8(%ebp),%eax
c0114335:	8b 40 38             	mov    0x38(%eax),%eax
c0114338:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011433b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011433f:	74 0a                	je     c011434b <sfs_truncfile+0x39>
c0114341:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114344:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114347:	85 c0                	test   %eax,%eax
c0114349:	74 24                	je     c011436f <sfs_truncfile+0x5d>
c011434b:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c0114352:	c0 
c0114353:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011435a:	c0 
c011435b:	c7 44 24 04 9f 03 00 	movl   $0x39f,0x4(%esp)
c0114362:	00 
c0114363:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011436a:	e8 6f cb fe ff       	call   c0100ede <__panic>
c011436f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114372:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114375:	8b 45 08             	mov    0x8(%ebp),%eax
c0114378:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011437b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011437f:	74 0d                	je     c011438e <sfs_truncfile+0x7c>
c0114381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114384:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114387:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011438c:	74 24                	je     c01143b2 <sfs_truncfile+0xa0>
c011438e:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c0114395:	c0 
c0114396:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011439d:	c0 
c011439e:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
c01143a5:	00 
c01143a6:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01143ad:	e8 2c cb fe ff       	call   c0100ede <__panic>
c01143b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01143b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c01143b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01143bb:	8b 00                	mov    (%eax),%eax
c01143bd:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c01143c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c01143c7:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c01143ce:	8b 55 0c             	mov    0xc(%ebp),%edx
c01143d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01143d4:	01 d0                	add    %edx,%eax
c01143d6:	83 e8 01             	sub    $0x1,%eax
c01143d9:	ba 00 00 00 00       	mov    $0x0,%edx
c01143de:	f7 75 d8             	divl   -0x28(%ebp)
c01143e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c01143e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01143e7:	8b 10                	mov    (%eax),%edx
c01143e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01143ec:	39 c2                	cmp    %eax,%edx
c01143ee:	75 39                	jne    c0114429 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c01143f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01143f3:	8b 40 08             	mov    0x8(%eax),%eax
c01143f6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01143f9:	74 24                	je     c011441f <sfs_truncfile+0x10d>
c01143fb:	c7 44 24 0c 22 9b 11 	movl   $0xc0119b22,0xc(%esp)
c0114402:	c0 
c0114403:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c011440a:	c0 
c011440b:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c0114412:	00 
c0114413:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c011441a:	e8 bf ca fe ff       	call   c0100ede <__panic>
        return 0;
c011441f:	b8 00 00 00 00       	mov    $0x0,%eax
c0114424:	e9 dd 00 00 00       	jmp    c0114506 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c0114429:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011442c:	89 04 24             	mov    %eax,(%esp)
c011442f:	e8 09 df ff ff       	call   c011233d <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c0114434:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114437:	8b 40 08             	mov    0x8(%eax),%eax
c011443a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c011443d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114440:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114443:	73 3f                	jae    c0114484 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114445:	eb 33                	jmp    c011447a <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0114447:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011444e:	00 
c011444f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114452:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114456:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114459:	89 44 24 04          	mov    %eax,0x4(%esp)
c011445d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114460:	89 04 24             	mov    %eax,(%esp)
c0114463:	e8 ca e9 ff ff       	call   c0112e32 <sfs_bmap_load_nolock>
c0114468:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011446b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011446f:	74 05                	je     c0114476 <sfs_truncfile+0x164>
                goto out_unlock;
c0114471:	e9 82 00 00 00       	jmp    c01144f8 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0114476:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c011447a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011447d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114480:	75 c5                	jne    c0114447 <sfs_truncfile+0x135>
c0114482:	eb 33                	jmp    c01144b7 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0114484:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114487:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011448a:	73 2b                	jae    c01144b7 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c011448c:	eb 21                	jmp    c01144af <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c011448e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114491:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114495:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114498:	89 04 24             	mov    %eax,(%esp)
c011449b:	e8 7a ea ff ff       	call   c0112f1a <sfs_bmap_truncate_nolock>
c01144a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01144a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01144a7:	74 02                	je     c01144ab <sfs_truncfile+0x199>
                goto out_unlock;
c01144a9:	eb 4d                	jmp    c01144f8 <sfs_truncfile+0x1e6>
            }
            nblks --;
c01144ab:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c01144af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01144b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01144b5:	75 d7                	jne    c011448e <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c01144b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144ba:	8b 40 08             	mov    0x8(%eax),%eax
c01144bd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01144c0:	74 24                	je     c01144e6 <sfs_truncfile+0x1d4>
c01144c2:	c7 44 24 0c 37 9b 11 	movl   $0xc0119b37,0xc(%esp)
c01144c9:	c0 
c01144ca:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01144d1:	c0 
c01144d2:	c7 44 24 04 c0 03 00 	movl   $0x3c0,0x4(%esp)
c01144d9:	00 
c01144da:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01144e1:	e8 f8 c9 fe ff       	call   c0100ede <__panic>
    din->size = len;
c01144e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01144e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144ec:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c01144ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144f1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c01144f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144fb:	89 04 24             	mov    %eax,(%esp)
c01144fe:	e8 50 de ff ff       	call   c0112353 <unlock_sin>
    return ret;
c0114503:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114506:	c9                   	leave  
c0114507:	c3                   	ret    

c0114508 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0114508:	55                   	push   %ebp
c0114509:	89 e5                	mov    %esp,%ebp
c011450b:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011450e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114511:	8b 40 38             	mov    0x38(%eax),%eax
c0114514:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114517:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011451b:	74 0a                	je     c0114527 <sfs_lookup+0x1f>
c011451d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114520:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114523:	85 c0                	test   %eax,%eax
c0114525:	74 24                	je     c011454b <sfs_lookup+0x43>
c0114527:	c7 44 24 0c f4 99 11 	movl   $0xc01199f4,0xc(%esp)
c011452e:	c0 
c011452f:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0114536:	c0 
c0114537:	c7 44 24 04 d0 03 00 	movl   $0x3d0,0x4(%esp)
c011453e:	00 
c011453f:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0114546:	e8 93 c9 fe ff       	call   c0100ede <__panic>
c011454b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011454e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c0114551:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114554:	0f b6 00             	movzbl (%eax),%eax
c0114557:	84 c0                	test   %al,%al
c0114559:	74 0a                	je     c0114565 <sfs_lookup+0x5d>
c011455b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011455e:	0f b6 00             	movzbl (%eax),%eax
c0114561:	3c 2f                	cmp    $0x2f,%al
c0114563:	75 24                	jne    c0114589 <sfs_lookup+0x81>
c0114565:	c7 44 24 0c 4c 9b 11 	movl   $0xc0119b4c,0xc(%esp)
c011456c:	c0 
c011456d:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c0114574:	c0 
c0114575:	c7 44 24 04 d1 03 00 	movl   $0x3d1,0x4(%esp)
c011457c:	00 
c011457d:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c0114584:	e8 55 c9 fe ff       	call   c0100ede <__panic>
    vop_ref_inc(node);
c0114589:	8b 45 08             	mov    0x8(%ebp),%eax
c011458c:	89 04 24             	mov    %eax,(%esp)
c011458f:	e8 73 ac ff ff       	call   c010f207 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114594:	8b 45 08             	mov    0x8(%ebp),%eax
c0114597:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011459a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011459e:	74 0d                	je     c01145ad <sfs_lookup+0xa5>
c01145a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01145a3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01145a6:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01145ab:	74 24                	je     c01145d1 <sfs_lookup+0xc9>
c01145ad:	c7 44 24 0c f0 97 11 	movl   $0xc01197f0,0xc(%esp)
c01145b4:	c0 
c01145b5:	c7 44 24 08 9f 97 11 	movl   $0xc011979f,0x8(%esp)
c01145bc:	c0 
c01145bd:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
c01145c4:	00 
c01145c5:	c7 04 24 37 97 11 c0 	movl   $0xc0119737,(%esp)
c01145cc:	e8 0d c9 fe ff       	call   c0100ede <__panic>
c01145d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01145d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01145d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01145da:	8b 00                	mov    (%eax),%eax
c01145dc:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01145e0:	66 83 f8 02          	cmp    $0x2,%ax
c01145e4:	74 12                	je     c01145f8 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c01145e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01145e9:	89 04 24             	mov    %eax,(%esp)
c01145ec:	e8 30 ac ff ff       	call   c010f221 <inode_ref_dec>
        return -E_NOTDIR;
c01145f1:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c01145f6:	eb 4e                	jmp    c0114646 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c01145f8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01145ff:	00 
c0114600:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0114603:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114607:	8b 45 0c             	mov    0xc(%ebp),%eax
c011460a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011460e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114611:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114615:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114618:	89 04 24             	mov    %eax,(%esp)
c011461b:	e8 18 ec ff ff       	call   c0113238 <sfs_lookup_once>
c0114620:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0114623:	8b 45 08             	mov    0x8(%ebp),%eax
c0114626:	89 04 24             	mov    %eax,(%esp)
c0114629:	e8 f3 ab ff ff       	call   c010f221 <inode_ref_dec>
    if (ret != 0) {
c011462e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114632:	74 05                	je     c0114639 <sfs_lookup+0x131>
        return ret;
c0114634:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114637:	eb 0d                	jmp    c0114646 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c0114639:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011463c:	8b 45 10             	mov    0x10(%ebp),%eax
c011463f:	89 10                	mov    %edx,(%eax)
    return 0;
c0114641:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114646:	c9                   	leave  
c0114647:	c3                   	ret    

c0114648 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0114648:	55                   	push   %ebp
c0114649:	89 e5                	mov    %esp,%ebp
c011464b:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c011464e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114652:	75 06                	jne    c011465a <sfs_rwblock_nolock+0x12>
c0114654:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114658:	75 0b                	jne    c0114665 <sfs_rwblock_nolock+0x1d>
c011465a:	8b 45 08             	mov    0x8(%ebp),%eax
c011465d:	8b 40 04             	mov    0x4(%eax),%eax
c0114660:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114663:	77 24                	ja     c0114689 <sfs_rwblock_nolock+0x41>
c0114665:	c7 44 24 0c 6c 9b 11 	movl   $0xc0119b6c,0xc(%esp)
c011466c:	c0 
c011466d:	c7 44 24 08 a0 9b 11 	movl   $0xc0119ba0,0x8(%esp)
c0114674:	c0 
c0114675:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011467c:	00 
c011467d:	c7 04 24 b5 9b 11 c0 	movl   $0xc0119bb5,(%esp)
c0114684:	e8 55 c8 fe ff       	call   c0100ede <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114689:	8b 45 10             	mov    0x10(%ebp),%eax
c011468c:	c1 e0 0c             	shl    $0xc,%eax
c011468f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114693:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011469a:	00 
c011469b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011469e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146a2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01146a5:	89 04 24             	mov    %eax,(%esp)
c01146a8:	e8 97 6d ff ff       	call   c010b444 <iobuf_init>
c01146ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c01146b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01146b3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01146b6:	8b 40 10             	mov    0x10(%eax),%eax
c01146b9:	8b 55 08             	mov    0x8(%ebp),%edx
c01146bc:	8b 52 2c             	mov    0x2c(%edx),%edx
c01146bf:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01146c2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01146c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01146c9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01146cd:	89 14 24             	mov    %edx,(%esp)
c01146d0:	ff d0                	call   *%eax
}
c01146d2:	c9                   	leave  
c01146d3:	c3                   	ret    

c01146d4 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c01146d4:	55                   	push   %ebp
c01146d5:	89 e5                	mov    %esp,%ebp
c01146d7:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c01146da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01146e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01146e4:	89 04 24             	mov    %eax,(%esp)
c01146e7:	e8 df 03 00 00       	call   c0114acb <lock_sfs_io>
    {
        while (nblks != 0) {
c01146ec:	eb 42                	jmp    c0114730 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c01146ee:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01146f5:	00 
c01146f6:	8b 45 18             	mov    0x18(%ebp),%eax
c01146f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01146fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0114700:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114704:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114707:	89 44 24 04          	mov    %eax,0x4(%esp)
c011470b:	8b 45 08             	mov    0x8(%ebp),%eax
c011470e:	89 04 24             	mov    %eax,(%esp)
c0114711:	e8 32 ff ff ff       	call   c0114648 <sfs_rwblock_nolock>
c0114716:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114719:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011471d:	74 02                	je     c0114721 <sfs_rwblock+0x4d>
                break;
c011471f:	eb 15                	jmp    c0114736 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c0114721:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0114725:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c0114729:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c0114730:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0114734:	75 b8                	jne    c01146ee <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c0114736:	8b 45 08             	mov    0x8(%ebp),%eax
c0114739:	89 04 24             	mov    %eax,(%esp)
c011473c:	e8 b6 03 00 00       	call   c0114af7 <unlock_sfs_io>
    return ret;
c0114741:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114744:	c9                   	leave  
c0114745:	c3                   	ret    

c0114746 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114746:	55                   	push   %ebp
c0114747:	89 e5                	mov    %esp,%ebp
c0114749:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c011474c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114753:	00 
c0114754:	8b 45 14             	mov    0x14(%ebp),%eax
c0114757:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011475b:	8b 45 10             	mov    0x10(%ebp),%eax
c011475e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114762:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114765:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114769:	8b 45 08             	mov    0x8(%ebp),%eax
c011476c:	89 04 24             	mov    %eax,(%esp)
c011476f:	e8 60 ff ff ff       	call   c01146d4 <sfs_rwblock>
}
c0114774:	c9                   	leave  
c0114775:	c3                   	ret    

c0114776 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114776:	55                   	push   %ebp
c0114777:	89 e5                	mov    %esp,%ebp
c0114779:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c011477c:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114783:	00 
c0114784:	8b 45 14             	mov    0x14(%ebp),%eax
c0114787:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011478b:	8b 45 10             	mov    0x10(%ebp),%eax
c011478e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114792:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114795:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114799:	8b 45 08             	mov    0x8(%ebp),%eax
c011479c:	89 04 24             	mov    %eax,(%esp)
c011479f:	e8 30 ff ff ff       	call   c01146d4 <sfs_rwblock>
}
c01147a4:	c9                   	leave  
c01147a5:	c3                   	ret    

c01147a6 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01147a6:	55                   	push   %ebp
c01147a7:	89 e5                	mov    %esp,%ebp
c01147a9:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01147ac:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01147b0:	78 18                	js     c01147ca <sfs_rbuf+0x24>
c01147b2:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c01147b9:	7f 0f                	jg     c01147ca <sfs_rbuf+0x24>
c01147bb:	8b 55 18             	mov    0x18(%ebp),%edx
c01147be:	8b 45 10             	mov    0x10(%ebp),%eax
c01147c1:	01 d0                	add    %edx,%eax
c01147c3:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01147c8:	76 24                	jbe    c01147ee <sfs_rbuf+0x48>
c01147ca:	c7 44 24 0c cc 9b 11 	movl   $0xc0119bcc,0xc(%esp)
c01147d1:	c0 
c01147d2:	c7 44 24 08 a0 9b 11 	movl   $0xc0119ba0,0x8(%esp)
c01147d9:	c0 
c01147da:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01147e1:	00 
c01147e2:	c7 04 24 b5 9b 11 c0 	movl   $0xc0119bb5,(%esp)
c01147e9:	e8 f0 c6 fe ff       	call   c0100ede <__panic>
    int ret;
    lock_sfs_io(sfs);
c01147ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01147f1:	89 04 24             	mov    %eax,(%esp)
c01147f4:	e8 d2 02 00 00       	call   c0114acb <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01147f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01147fc:	8b 40 38             	mov    0x38(%eax),%eax
c01147ff:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114806:	00 
c0114807:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011480e:	00 
c011480f:	8b 55 14             	mov    0x14(%ebp),%edx
c0114812:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114816:	89 44 24 04          	mov    %eax,0x4(%esp)
c011481a:	8b 45 08             	mov    0x8(%ebp),%eax
c011481d:	89 04 24             	mov    %eax,(%esp)
c0114820:	e8 23 fe ff ff       	call   c0114648 <sfs_rwblock_nolock>
c0114825:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114828:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011482c:	75 21                	jne    c011484f <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c011482e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114831:	8b 50 38             	mov    0x38(%eax),%edx
c0114834:	8b 45 18             	mov    0x18(%ebp),%eax
c0114837:	01 c2                	add    %eax,%edx
c0114839:	8b 45 10             	mov    0x10(%ebp),%eax
c011483c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114840:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114844:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114847:	89 04 24             	mov    %eax,(%esp)
c011484a:	e8 fa 0e 00 00       	call   c0115749 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c011484f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114852:	89 04 24             	mov    %eax,(%esp)
c0114855:	e8 9d 02 00 00       	call   c0114af7 <unlock_sfs_io>
    return ret;
c011485a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011485d:	c9                   	leave  
c011485e:	c3                   	ret    

c011485f <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c011485f:	55                   	push   %ebp
c0114860:	89 e5                	mov    %esp,%ebp
c0114862:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114865:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114869:	78 18                	js     c0114883 <sfs_wbuf+0x24>
c011486b:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114872:	7f 0f                	jg     c0114883 <sfs_wbuf+0x24>
c0114874:	8b 55 18             	mov    0x18(%ebp),%edx
c0114877:	8b 45 10             	mov    0x10(%ebp),%eax
c011487a:	01 d0                	add    %edx,%eax
c011487c:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114881:	76 24                	jbe    c01148a7 <sfs_wbuf+0x48>
c0114883:	c7 44 24 0c cc 9b 11 	movl   $0xc0119bcc,0xc(%esp)
c011488a:	c0 
c011488b:	c7 44 24 08 a0 9b 11 	movl   $0xc0119ba0,0x8(%esp)
c0114892:	c0 
c0114893:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c011489a:	00 
c011489b:	c7 04 24 b5 9b 11 c0 	movl   $0xc0119bb5,(%esp)
c01148a2:	e8 37 c6 fe ff       	call   c0100ede <__panic>
    int ret;
    lock_sfs_io(sfs);
c01148a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01148aa:	89 04 24             	mov    %eax,(%esp)
c01148ad:	e8 19 02 00 00       	call   c0114acb <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01148b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01148b5:	8b 40 38             	mov    0x38(%eax),%eax
c01148b8:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01148bf:	00 
c01148c0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01148c7:	00 
c01148c8:	8b 55 14             	mov    0x14(%ebp),%edx
c01148cb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01148cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01148d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01148d6:	89 04 24             	mov    %eax,(%esp)
c01148d9:	e8 6a fd ff ff       	call   c0114648 <sfs_rwblock_nolock>
c01148de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01148e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01148e5:	75 50                	jne    c0114937 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01148e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01148ea:	8b 50 38             	mov    0x38(%eax),%edx
c01148ed:	8b 45 18             	mov    0x18(%ebp),%eax
c01148f0:	01 c2                	add    %eax,%edx
c01148f2:	8b 45 10             	mov    0x10(%ebp),%eax
c01148f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01148f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01148fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114900:	89 14 24             	mov    %edx,(%esp)
c0114903:	e8 41 0e 00 00       	call   c0115749 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c0114908:	8b 45 08             	mov    0x8(%ebp),%eax
c011490b:	8b 40 38             	mov    0x38(%eax),%eax
c011490e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114915:	00 
c0114916:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011491d:	00 
c011491e:	8b 55 14             	mov    0x14(%ebp),%edx
c0114921:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114925:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114929:	8b 45 08             	mov    0x8(%ebp),%eax
c011492c:	89 04 24             	mov    %eax,(%esp)
c011492f:	e8 14 fd ff ff       	call   c0114648 <sfs_rwblock_nolock>
c0114934:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0114937:	8b 45 08             	mov    0x8(%ebp),%eax
c011493a:	89 04 24             	mov    %eax,(%esp)
c011493d:	e8 b5 01 00 00       	call   c0114af7 <unlock_sfs_io>
    return ret;
c0114942:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114945:	c9                   	leave  
c0114946:	c3                   	ret    

c0114947 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0114947:	55                   	push   %ebp
c0114948:	89 e5                	mov    %esp,%ebp
c011494a:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c011494d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114950:	89 04 24             	mov    %eax,(%esp)
c0114953:	e8 73 01 00 00       	call   c0114acb <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114958:	8b 45 08             	mov    0x8(%ebp),%eax
c011495b:	8b 40 38             	mov    0x38(%eax),%eax
c011495e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114965:	00 
c0114966:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011496d:	00 
c011496e:	89 04 24             	mov    %eax,(%esp)
c0114971:	e8 f1 0c 00 00       	call   c0115667 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114976:	8b 55 08             	mov    0x8(%ebp),%edx
c0114979:	8b 45 08             	mov    0x8(%ebp),%eax
c011497c:	8b 40 38             	mov    0x38(%eax),%eax
c011497f:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114986:	00 
c0114987:	89 54 24 04          	mov    %edx,0x4(%esp)
c011498b:	89 04 24             	mov    %eax,(%esp)
c011498e:	e8 b6 0d 00 00       	call   c0115749 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0114993:	8b 45 08             	mov    0x8(%ebp),%eax
c0114996:	8b 40 38             	mov    0x38(%eax),%eax
c0114999:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01149a0:	00 
c01149a1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01149a8:	00 
c01149a9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01149b0:	00 
c01149b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01149b8:	89 04 24             	mov    %eax,(%esp)
c01149bb:	e8 88 fc ff ff       	call   c0114648 <sfs_rwblock_nolock>
c01149c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c01149c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01149c6:	89 04 24             	mov    %eax,(%esp)
c01149c9:	e8 29 01 00 00       	call   c0114af7 <unlock_sfs_io>
    return ret;
c01149ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01149d1:	c9                   	leave  
c01149d2:	c3                   	ret    

c01149d3 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c01149d3:	55                   	push   %ebp
c01149d4:	89 e5                	mov    %esp,%ebp
c01149d6:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c01149d9:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c01149e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01149e3:	8b 50 04             	mov    0x4(%eax),%edx
c01149e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01149e9:	01 d0                	add    %edx,%eax
c01149eb:	83 e8 01             	sub    $0x1,%eax
c01149ee:	ba 00 00 00 00       	mov    $0x0,%edx
c01149f3:	f7 75 f4             	divl   -0xc(%ebp)
c01149f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c01149f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01149fc:	8b 40 30             	mov    0x30(%eax),%eax
c01149ff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114a06:	00 
c0114a07:	89 04 24             	mov    %eax,(%esp)
c0114a0a:	e8 fd cf ff ff       	call   c0111a0c <bitmap_getdata>
c0114a0f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114a12:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0114a16:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0114a1d:	00 
c0114a1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a25:	89 04 24             	mov    %eax,(%esp)
c0114a28:	e8 49 fd ff ff       	call   c0114776 <sfs_wblock>
}
c0114a2d:	c9                   	leave  
c0114a2e:	c3                   	ret    

c0114a2f <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0114a2f:	55                   	push   %ebp
c0114a30:	89 e5                	mov    %esp,%ebp
c0114a32:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a38:	89 04 24             	mov    %eax,(%esp)
c0114a3b:	e8 8b 00 00 00       	call   c0114acb <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a43:	8b 40 38             	mov    0x38(%eax),%eax
c0114a46:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114a4d:	00 
c0114a4e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114a55:	00 
c0114a56:	89 04 24             	mov    %eax,(%esp)
c0114a59:	e8 09 0c 00 00       	call   c0115667 <memset>
        while (nblks != 0) {
c0114a5e:	eb 3f                	jmp    c0114a9f <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0114a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a63:	8b 40 38             	mov    0x38(%eax),%eax
c0114a66:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114a6d:	00 
c0114a6e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114a75:	00 
c0114a76:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114a79:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114a7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a81:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a84:	89 04 24             	mov    %eax,(%esp)
c0114a87:	e8 bc fb ff ff       	call   c0114648 <sfs_rwblock_nolock>
c0114a8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114a8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114a93:	74 02                	je     c0114a97 <sfs_clear_block+0x68>
                break;
c0114a95:	eb 0e                	jmp    c0114aa5 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0114a97:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114a9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0114a9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114aa3:	75 bb                	jne    c0114a60 <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114aa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aa8:	89 04 24             	mov    %eax,(%esp)
c0114aab:	e8 47 00 00 00       	call   c0114af7 <unlock_sfs_io>
    return ret;
c0114ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114ab3:	c9                   	leave  
c0114ab4:	c3                   	ret    

c0114ab5 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114ab5:	55                   	push   %ebp
c0114ab6:	89 e5                	mov    %esp,%ebp
c0114ab8:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114abe:	83 c0 3c             	add    $0x3c,%eax
c0114ac1:	89 04 24             	mov    %eax,(%esp)
c0114ac4:	e8 34 53 ff ff       	call   c0109dfd <down>
}
c0114ac9:	c9                   	leave  
c0114aca:	c3                   	ret    

c0114acb <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0114acb:	55                   	push   %ebp
c0114acc:	89 e5                	mov    %esp,%ebp
c0114ace:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0114ad1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ad4:	83 c0 48             	add    $0x48,%eax
c0114ad7:	89 04 24             	mov    %eax,(%esp)
c0114ada:	e8 1e 53 ff ff       	call   c0109dfd <down>
}
c0114adf:	c9                   	leave  
c0114ae0:	c3                   	ret    

c0114ae1 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0114ae1:	55                   	push   %ebp
c0114ae2:	89 e5                	mov    %esp,%ebp
c0114ae4:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c0114ae7:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aea:	83 c0 3c             	add    $0x3c,%eax
c0114aed:	89 04 24             	mov    %eax,(%esp)
c0114af0:	e8 ed 52 ff ff       	call   c0109de2 <up>
}
c0114af5:	c9                   	leave  
c0114af6:	c3                   	ret    

c0114af7 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0114af7:	55                   	push   %ebp
c0114af8:	89 e5                	mov    %esp,%ebp
c0114afa:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c0114afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b00:	83 c0 48             	add    $0x48,%eax
c0114b03:	89 04 24             	mov    %eax,(%esp)
c0114b06:	e8 d7 52 ff ff       	call   c0109de2 <up>
}
c0114b0b:	c9                   	leave  
c0114b0c:	c3                   	ret    

c0114b0d <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c0114b0d:	55                   	push   %ebp
c0114b0e:	89 e5                	mov    %esp,%ebp
c0114b10:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0114b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b16:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c0114b1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c0114b1f:	b8 20 00 00 00       	mov    $0x20,%eax
c0114b24:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114b27:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0114b2a:	89 c1                	mov    %eax,%ecx
c0114b2c:	d3 ea                	shr    %cl,%edx
c0114b2e:	89 d0                	mov    %edx,%eax
}
c0114b30:	c9                   	leave  
c0114b31:	c3                   	ret    

c0114b32 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0114b32:	55                   	push   %ebp
c0114b33:	89 e5                	mov    %esp,%ebp
c0114b35:	83 ec 58             	sub    $0x58,%esp
c0114b38:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114b3e:	8b 45 18             	mov    0x18(%ebp),%eax
c0114b41:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0114b44:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114b47:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114b4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114b4d:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114b50:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114b53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114b56:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114b59:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114b5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114b5f:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0114b62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b65:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114b68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114b6c:	74 1c                	je     c0114b8a <printnum+0x58>
c0114b6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b71:	ba 00 00 00 00       	mov    $0x0,%edx
c0114b76:	f7 75 e4             	divl   -0x1c(%ebp)
c0114b79:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b7f:	ba 00 00 00 00       	mov    $0x0,%edx
c0114b84:	f7 75 e4             	divl   -0x1c(%ebp)
c0114b87:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114b8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114b8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114b90:	f7 75 e4             	divl   -0x1c(%ebp)
c0114b93:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114b96:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0114b99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114b9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114b9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114ba2:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114ba5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114ba8:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114bab:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114bae:	ba 00 00 00 00       	mov    $0x0,%edx
c0114bb3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114bb6:	77 64                	ja     c0114c1c <printnum+0xea>
c0114bb8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114bbb:	72 05                	jb     c0114bc2 <printnum+0x90>
c0114bbd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114bc0:	77 5a                	ja     c0114c1c <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0114bc2:	8b 45 20             	mov    0x20(%ebp),%eax
c0114bc5:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114bc8:	8b 45 24             	mov    0x24(%ebp),%eax
c0114bcb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114bcf:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114bd3:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114bd6:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114bda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114bdd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114be0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114be4:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114be8:	8b 45 10             	mov    0x10(%ebp),%eax
c0114beb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114bef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114bf2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114bf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bf9:	89 04 24             	mov    %eax,(%esp)
c0114bfc:	e8 31 ff ff ff       	call   c0114b32 <printnum>
c0114c01:	eb 23                	jmp    c0114c26 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114c03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c06:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c11:	8b 45 24             	mov    0x24(%ebp),%eax
c0114c14:	89 04 24             	mov    %eax,(%esp)
c0114c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c1a:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0114c1c:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0114c20:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0114c24:	7f dd                	jg     c0114c03 <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0114c26:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114c29:	05 24 9e 11 c0       	add    $0xc0119e24,%eax
c0114c2e:	0f b6 00             	movzbl (%eax),%eax
c0114c31:	0f be c0             	movsbl %al,%eax
c0114c34:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114c37:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114c3b:	8b 55 10             	mov    0x10(%ebp),%edx
c0114c3e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114c42:	89 04 24             	mov    %eax,(%esp)
c0114c45:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c48:	ff d0                	call   *%eax
}
c0114c4a:	c9                   	leave  
c0114c4b:	c3                   	ret    

c0114c4c <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114c4c:	55                   	push   %ebp
c0114c4d:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114c4f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114c53:	7e 14                	jle    c0114c69 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114c55:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c58:	8b 00                	mov    (%eax),%eax
c0114c5a:	8d 48 08             	lea    0x8(%eax),%ecx
c0114c5d:	8b 55 08             	mov    0x8(%ebp),%edx
c0114c60:	89 0a                	mov    %ecx,(%edx)
c0114c62:	8b 50 04             	mov    0x4(%eax),%edx
c0114c65:	8b 00                	mov    (%eax),%eax
c0114c67:	eb 30                	jmp    c0114c99 <getuint+0x4d>
    }
    else if (lflag) {
c0114c69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114c6d:	74 16                	je     c0114c85 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114c6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c72:	8b 00                	mov    (%eax),%eax
c0114c74:	8d 48 04             	lea    0x4(%eax),%ecx
c0114c77:	8b 55 08             	mov    0x8(%ebp),%edx
c0114c7a:	89 0a                	mov    %ecx,(%edx)
c0114c7c:	8b 00                	mov    (%eax),%eax
c0114c7e:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c83:	eb 14                	jmp    c0114c99 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114c85:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c88:	8b 00                	mov    (%eax),%eax
c0114c8a:	8d 48 04             	lea    0x4(%eax),%ecx
c0114c8d:	8b 55 08             	mov    0x8(%ebp),%edx
c0114c90:	89 0a                	mov    %ecx,(%edx)
c0114c92:	8b 00                	mov    (%eax),%eax
c0114c94:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114c99:	5d                   	pop    %ebp
c0114c9a:	c3                   	ret    

c0114c9b <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114c9b:	55                   	push   %ebp
c0114c9c:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114c9e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114ca2:	7e 14                	jle    c0114cb8 <getint+0x1d>
        return va_arg(*ap, long long);
c0114ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ca7:	8b 00                	mov    (%eax),%eax
c0114ca9:	8d 48 08             	lea    0x8(%eax),%ecx
c0114cac:	8b 55 08             	mov    0x8(%ebp),%edx
c0114caf:	89 0a                	mov    %ecx,(%edx)
c0114cb1:	8b 50 04             	mov    0x4(%eax),%edx
c0114cb4:	8b 00                	mov    (%eax),%eax
c0114cb6:	eb 28                	jmp    c0114ce0 <getint+0x45>
    }
    else if (lflag) {
c0114cb8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114cbc:	74 12                	je     c0114cd0 <getint+0x35>
        return va_arg(*ap, long);
c0114cbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cc1:	8b 00                	mov    (%eax),%eax
c0114cc3:	8d 48 04             	lea    0x4(%eax),%ecx
c0114cc6:	8b 55 08             	mov    0x8(%ebp),%edx
c0114cc9:	89 0a                	mov    %ecx,(%edx)
c0114ccb:	8b 00                	mov    (%eax),%eax
c0114ccd:	99                   	cltd   
c0114cce:	eb 10                	jmp    c0114ce0 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114cd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cd3:	8b 00                	mov    (%eax),%eax
c0114cd5:	8d 48 04             	lea    0x4(%eax),%ecx
c0114cd8:	8b 55 08             	mov    0x8(%ebp),%edx
c0114cdb:	89 0a                	mov    %ecx,(%edx)
c0114cdd:	8b 00                	mov    (%eax),%eax
c0114cdf:	99                   	cltd   
    }
}
c0114ce0:	5d                   	pop    %ebp
c0114ce1:	c3                   	ret    

c0114ce2 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114ce2:	55                   	push   %ebp
c0114ce3:	89 e5                	mov    %esp,%ebp
c0114ce5:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114ce8:	8d 45 18             	lea    0x18(%ebp),%eax
c0114ceb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114cf1:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114cf5:	8b 45 14             	mov    0x14(%ebp),%eax
c0114cf8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114cfc:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d0d:	89 04 24             	mov    %eax,(%esp)
c0114d10:	e8 02 00 00 00       	call   c0114d17 <vprintfmt>
    va_end(ap);
}
c0114d15:	c9                   	leave  
c0114d16:	c3                   	ret    

c0114d17 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114d17:	55                   	push   %ebp
c0114d18:	89 e5                	mov    %esp,%ebp
c0114d1a:	56                   	push   %esi
c0114d1b:	53                   	push   %ebx
c0114d1c:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114d1f:	eb 1f                	jmp    c0114d40 <vprintfmt+0x29>
            if (ch == '\0') {
c0114d21:	85 db                	test   %ebx,%ebx
c0114d23:	75 05                	jne    c0114d2a <vprintfmt+0x13>
                return;
c0114d25:	e9 33 04 00 00       	jmp    c011515d <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d2d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d31:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d38:	89 1c 24             	mov    %ebx,(%esp)
c0114d3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d3e:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114d40:	8b 45 14             	mov    0x14(%ebp),%eax
c0114d43:	8d 50 01             	lea    0x1(%eax),%edx
c0114d46:	89 55 14             	mov    %edx,0x14(%ebp)
c0114d49:	0f b6 00             	movzbl (%eax),%eax
c0114d4c:	0f b6 d8             	movzbl %al,%ebx
c0114d4f:	83 fb 25             	cmp    $0x25,%ebx
c0114d52:	75 cd                	jne    c0114d21 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114d54:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114d58:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114d5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114d62:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114d65:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114d6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114d6f:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114d72:	8b 45 14             	mov    0x14(%ebp),%eax
c0114d75:	8d 50 01             	lea    0x1(%eax),%edx
c0114d78:	89 55 14             	mov    %edx,0x14(%ebp)
c0114d7b:	0f b6 00             	movzbl (%eax),%eax
c0114d7e:	0f b6 d8             	movzbl %al,%ebx
c0114d81:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114d84:	83 f8 55             	cmp    $0x55,%eax
c0114d87:	0f 87 98 03 00 00    	ja     c0115125 <vprintfmt+0x40e>
c0114d8d:	8b 04 85 48 9e 11 c0 	mov    -0x3fee61b8(,%eax,4),%eax
c0114d94:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114d96:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114d9a:	eb d6                	jmp    c0114d72 <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114d9c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114da0:	eb d0                	jmp    c0114d72 <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114da2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114da9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114dac:	89 d0                	mov    %edx,%eax
c0114dae:	c1 e0 02             	shl    $0x2,%eax
c0114db1:	01 d0                	add    %edx,%eax
c0114db3:	01 c0                	add    %eax,%eax
c0114db5:	01 d8                	add    %ebx,%eax
c0114db7:	83 e8 30             	sub    $0x30,%eax
c0114dba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114dbd:	8b 45 14             	mov    0x14(%ebp),%eax
c0114dc0:	0f b6 00             	movzbl (%eax),%eax
c0114dc3:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114dc6:	83 fb 2f             	cmp    $0x2f,%ebx
c0114dc9:	7e 0b                	jle    c0114dd6 <vprintfmt+0xbf>
c0114dcb:	83 fb 39             	cmp    $0x39,%ebx
c0114dce:	7f 06                	jg     c0114dd6 <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114dd0:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114dd4:	eb d3                	jmp    c0114da9 <vprintfmt+0x92>
            goto process_precision;
c0114dd6:	eb 33                	jmp    c0114e0b <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114dd8:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ddb:	8d 50 04             	lea    0x4(%eax),%edx
c0114dde:	89 55 18             	mov    %edx,0x18(%ebp)
c0114de1:	8b 00                	mov    (%eax),%eax
c0114de3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114de6:	eb 23                	jmp    c0114e0b <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114de8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114dec:	79 0c                	jns    c0114dfa <vprintfmt+0xe3>
                width = 0;
c0114dee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114df5:	e9 78 ff ff ff       	jmp    c0114d72 <vprintfmt+0x5b>
c0114dfa:	e9 73 ff ff ff       	jmp    c0114d72 <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114dff:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114e06:	e9 67 ff ff ff       	jmp    c0114d72 <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114e0b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114e0f:	79 12                	jns    c0114e23 <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114e11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114e14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114e17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114e1e:	e9 4f ff ff ff       	jmp    c0114d72 <vprintfmt+0x5b>
c0114e23:	e9 4a ff ff ff       	jmp    c0114d72 <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114e28:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114e2c:	e9 41 ff ff ff       	jmp    c0114d72 <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114e31:	8b 45 18             	mov    0x18(%ebp),%eax
c0114e34:	8d 50 04             	lea    0x4(%eax),%edx
c0114e37:	89 55 18             	mov    %edx,0x18(%ebp)
c0114e3a:	8b 00                	mov    (%eax),%eax
c0114e3c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114e3f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114e43:	8b 55 10             	mov    0x10(%ebp),%edx
c0114e46:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114e4a:	89 04 24             	mov    %eax,(%esp)
c0114e4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e50:	ff d0                	call   *%eax
            break;
c0114e52:	e9 00 03 00 00       	jmp    c0115157 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114e57:	8b 45 18             	mov    0x18(%ebp),%eax
c0114e5a:	8d 50 04             	lea    0x4(%eax),%edx
c0114e5d:	89 55 18             	mov    %edx,0x18(%ebp)
c0114e60:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114e62:	85 db                	test   %ebx,%ebx
c0114e64:	79 02                	jns    c0114e68 <vprintfmt+0x151>
                err = -err;
c0114e66:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114e68:	83 fb 18             	cmp    $0x18,%ebx
c0114e6b:	7f 0b                	jg     c0114e78 <vprintfmt+0x161>
c0114e6d:	8b 34 9d c0 9d 11 c0 	mov    -0x3fee6240(,%ebx,4),%esi
c0114e74:	85 f6                	test   %esi,%esi
c0114e76:	75 2a                	jne    c0114ea2 <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114e78:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114e7c:	c7 44 24 0c 35 9e 11 	movl   $0xc0119e35,0xc(%esp)
c0114e83:	c0 
c0114e84:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e87:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e92:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e95:	89 04 24             	mov    %eax,(%esp)
c0114e98:	e8 45 fe ff ff       	call   c0114ce2 <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114e9d:	e9 b5 02 00 00       	jmp    c0115157 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114ea2:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114ea6:	c7 44 24 0c 3e 9e 11 	movl   $0xc0119e3e,0xc(%esp)
c0114ead:	c0 
c0114eae:	8b 45 10             	mov    0x10(%ebp),%eax
c0114eb1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114eb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114eb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ebf:	89 04 24             	mov    %eax,(%esp)
c0114ec2:	e8 1b fe ff ff       	call   c0114ce2 <printfmt>
            }
            break;
c0114ec7:	e9 8b 02 00 00       	jmp    c0115157 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114ecc:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ecf:	8d 50 04             	lea    0x4(%eax),%edx
c0114ed2:	89 55 18             	mov    %edx,0x18(%ebp)
c0114ed5:	8b 30                	mov    (%eax),%esi
c0114ed7:	85 f6                	test   %esi,%esi
c0114ed9:	75 05                	jne    c0114ee0 <vprintfmt+0x1c9>
                p = "(null)";
c0114edb:	be 41 9e 11 c0       	mov    $0xc0119e41,%esi
            }
            if (width > 0 && padc != '-') {
c0114ee0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ee4:	7e 45                	jle    c0114f2b <vprintfmt+0x214>
c0114ee6:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114eea:	74 3f                	je     c0114f2b <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114eec:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114eef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114ef2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ef6:	89 34 24             	mov    %esi,(%esp)
c0114ef9:	e8 3b 04 00 00       	call   c0115339 <strnlen>
c0114efe:	29 c3                	sub    %eax,%ebx
c0114f00:	89 d8                	mov    %ebx,%eax
c0114f02:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114f05:	eb 1e                	jmp    c0114f25 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114f07:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114f0b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114f0e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114f12:	8b 55 10             	mov    0x10(%ebp),%edx
c0114f15:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114f19:	89 04 24             	mov    %eax,(%esp)
c0114f1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f1f:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114f21:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114f25:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114f29:	7f dc                	jg     c0114f07 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114f2b:	eb 46                	jmp    c0114f73 <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114f2d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114f31:	74 26                	je     c0114f59 <vprintfmt+0x242>
c0114f33:	83 fb 1f             	cmp    $0x1f,%ebx
c0114f36:	7e 05                	jle    c0114f3d <vprintfmt+0x226>
c0114f38:	83 fb 7e             	cmp    $0x7e,%ebx
c0114f3b:	7e 1c                	jle    c0114f59 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f40:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f44:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f4b:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0114f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f55:	ff d0                	call   *%eax
c0114f57:	eb 16                	jmp    c0114f6f <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0114f59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f5c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f60:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f63:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f67:	89 1c 24             	mov    %ebx,(%esp)
c0114f6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f6d:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114f6f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114f73:	89 f0                	mov    %esi,%eax
c0114f75:	8d 70 01             	lea    0x1(%eax),%esi
c0114f78:	0f b6 00             	movzbl (%eax),%eax
c0114f7b:	0f be d8             	movsbl %al,%ebx
c0114f7e:	85 db                	test   %ebx,%ebx
c0114f80:	74 10                	je     c0114f92 <vprintfmt+0x27b>
c0114f82:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114f86:	78 a5                	js     c0114f2d <vprintfmt+0x216>
c0114f88:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0114f8c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114f90:	79 9b                	jns    c0114f2d <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114f92:	eb 1e                	jmp    c0114fb2 <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0114f94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f97:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f9b:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fa2:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0114fa9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fac:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114fae:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114fb2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114fb6:	7f dc                	jg     c0114f94 <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0114fb8:	e9 9a 01 00 00       	jmp    c0115157 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0114fbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114fc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fc4:	8d 45 18             	lea    0x18(%ebp),%eax
c0114fc7:	89 04 24             	mov    %eax,(%esp)
c0114fca:	e8 cc fc ff ff       	call   c0114c9b <getint>
c0114fcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114fd2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0114fd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114fd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114fdb:	85 d2                	test   %edx,%edx
c0114fdd:	79 2d                	jns    c011500c <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c0114fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fe2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114fe6:	8b 45 10             	mov    0x10(%ebp),%eax
c0114fe9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fed:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0114ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ff7:	ff d0                	call   *%eax
                num = -(long long)num;
c0114ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ffc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114fff:	f7 d8                	neg    %eax
c0115001:	83 d2 00             	adc    $0x0,%edx
c0115004:	f7 da                	neg    %edx
c0115006:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115009:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c011500c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0115013:	e9 b6 00 00 00       	jmp    c01150ce <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0115018:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011501b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011501f:	8d 45 18             	lea    0x18(%ebp),%eax
c0115022:	89 04 24             	mov    %eax,(%esp)
c0115025:	e8 22 fc ff ff       	call   c0114c4c <getuint>
c011502a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011502d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0115030:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0115037:	e9 92 00 00 00       	jmp    c01150ce <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c011503c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011503f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115043:	8d 45 18             	lea    0x18(%ebp),%eax
c0115046:	89 04 24             	mov    %eax,(%esp)
c0115049:	e8 fe fb ff ff       	call   c0114c4c <getuint>
c011504e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115051:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0115054:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c011505b:	eb 71                	jmp    c01150ce <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c011505d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115060:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115064:	8b 45 10             	mov    0x10(%ebp),%eax
c0115067:	89 44 24 04          	mov    %eax,0x4(%esp)
c011506b:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0115072:	8b 45 08             	mov    0x8(%ebp),%eax
c0115075:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0115077:	8b 45 0c             	mov    0xc(%ebp),%eax
c011507a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011507e:	8b 45 10             	mov    0x10(%ebp),%eax
c0115081:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115085:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c011508c:	8b 45 08             	mov    0x8(%ebp),%eax
c011508f:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0115091:	8b 45 18             	mov    0x18(%ebp),%eax
c0115094:	8d 50 04             	lea    0x4(%eax),%edx
c0115097:	89 55 18             	mov    %edx,0x18(%ebp)
c011509a:	8b 00                	mov    (%eax),%eax
c011509c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011509f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c01150a6:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c01150ad:	eb 1f                	jmp    c01150ce <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c01150af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01150b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150b6:	8d 45 18             	lea    0x18(%ebp),%eax
c01150b9:	89 04 24             	mov    %eax,(%esp)
c01150bc:	e8 8b fb ff ff       	call   c0114c4c <getuint>
c01150c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150c4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c01150c7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c01150ce:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c01150d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01150d5:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c01150d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01150dc:	89 54 24 18          	mov    %edx,0x18(%esp)
c01150e0:	89 44 24 14          	mov    %eax,0x14(%esp)
c01150e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01150ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01150ee:	89 54 24 10          	mov    %edx,0x10(%esp)
c01150f2:	8b 45 10             	mov    0x10(%ebp),%eax
c01150f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115100:	8b 45 08             	mov    0x8(%ebp),%eax
c0115103:	89 04 24             	mov    %eax,(%esp)
c0115106:	e8 27 fa ff ff       	call   c0114b32 <printnum>
            break;
c011510b:	eb 4a                	jmp    c0115157 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c011510d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115110:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115114:	8b 45 10             	mov    0x10(%ebp),%eax
c0115117:	89 44 24 04          	mov    %eax,0x4(%esp)
c011511b:	89 1c 24             	mov    %ebx,(%esp)
c011511e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115121:	ff d0                	call   *%eax
            break;
c0115123:	eb 32                	jmp    c0115157 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0115125:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115128:	89 44 24 08          	mov    %eax,0x8(%esp)
c011512c:	8b 45 10             	mov    0x10(%ebp),%eax
c011512f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115133:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c011513a:	8b 45 08             	mov    0x8(%ebp),%eax
c011513d:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c011513f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115143:	eb 04                	jmp    c0115149 <vprintfmt+0x432>
c0115145:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115149:	8b 45 14             	mov    0x14(%ebp),%eax
c011514c:	83 e8 01             	sub    $0x1,%eax
c011514f:	0f b6 00             	movzbl (%eax),%eax
c0115152:	3c 25                	cmp    $0x25,%al
c0115154:	75 ef                	jne    c0115145 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0115156:	90                   	nop
        }
    }
c0115157:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0115158:	e9 e3 fb ff ff       	jmp    c0114d40 <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c011515d:	83 c4 40             	add    $0x40,%esp
c0115160:	5b                   	pop    %ebx
c0115161:	5e                   	pop    %esi
c0115162:	5d                   	pop    %ebp
c0115163:	c3                   	ret    

c0115164 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0115164:	55                   	push   %ebp
c0115165:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0115167:	8b 45 0c             	mov    0xc(%ebp),%eax
c011516a:	8b 40 08             	mov    0x8(%eax),%eax
c011516d:	8d 50 01             	lea    0x1(%eax),%edx
c0115170:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115173:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0115176:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115179:	8b 10                	mov    (%eax),%edx
c011517b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011517e:	8b 40 04             	mov    0x4(%eax),%eax
c0115181:	39 c2                	cmp    %eax,%edx
c0115183:	73 12                	jae    c0115197 <sprintputch+0x33>
        *b->buf ++ = ch;
c0115185:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115188:	8b 00                	mov    (%eax),%eax
c011518a:	8d 48 01             	lea    0x1(%eax),%ecx
c011518d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0115190:	89 0a                	mov    %ecx,(%edx)
c0115192:	8b 55 08             	mov    0x8(%ebp),%edx
c0115195:	88 10                	mov    %dl,(%eax)
    }
}
c0115197:	5d                   	pop    %ebp
c0115198:	c3                   	ret    

c0115199 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0115199:	55                   	push   %ebp
c011519a:	89 e5                	mov    %esp,%ebp
c011519c:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c011519f:	8d 45 14             	lea    0x14(%ebp),%eax
c01151a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c01151a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01151ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01151af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01151bd:	89 04 24             	mov    %eax,(%esp)
c01151c0:	e8 08 00 00 00       	call   c01151cd <vsnprintf>
c01151c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01151c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01151cb:	c9                   	leave  
c01151cc:	c3                   	ret    

c01151cd <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c01151cd:	55                   	push   %ebp
c01151ce:	89 e5                	mov    %esp,%ebp
c01151d0:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c01151d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01151d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01151d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01151df:	8b 45 08             	mov    0x8(%ebp),%eax
c01151e2:	01 d0                	add    %edx,%eax
c01151e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01151e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01151ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01151f2:	74 0a                	je     c01151fe <vsnprintf+0x31>
c01151f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01151f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151fa:	39 c2                	cmp    %eax,%edx
c01151fc:	76 07                	jbe    c0115205 <vsnprintf+0x38>
        return -E_INVAL;
c01151fe:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0115203:	eb 32                	jmp    c0115237 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0115205:	8b 45 14             	mov    0x14(%ebp),%eax
c0115208:	89 44 24 10          	mov    %eax,0x10(%esp)
c011520c:	8b 45 10             	mov    0x10(%ebp),%eax
c011520f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115213:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0115216:	89 44 24 08          	mov    %eax,0x8(%esp)
c011521a:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0115221:	ff 
c0115222:	c7 04 24 64 51 11 c0 	movl   $0xc0115164,(%esp)
c0115229:	e8 e9 fa ff ff       	call   c0114d17 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c011522e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115231:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0115234:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115237:	c9                   	leave  
c0115238:	c3                   	ret    

c0115239 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0115239:	55                   	push   %ebp
c011523a:	89 e5                	mov    %esp,%ebp
c011523c:	57                   	push   %edi
c011523d:	56                   	push   %esi
c011523e:	53                   	push   %ebx
c011523f:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0115242:	a1 c8 fe 14 c0       	mov    0xc014fec8,%eax
c0115247:	8b 15 cc fe 14 c0    	mov    0xc014fecc,%edx
c011524d:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0115253:	6b f0 05             	imul   $0x5,%eax,%esi
c0115256:	01 f7                	add    %esi,%edi
c0115258:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c011525d:	f7 e6                	mul    %esi
c011525f:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0115262:	89 f2                	mov    %esi,%edx
c0115264:	83 c0 0b             	add    $0xb,%eax
c0115267:	83 d2 00             	adc    $0x0,%edx
c011526a:	89 c7                	mov    %eax,%edi
c011526c:	83 e7 ff             	and    $0xffffffff,%edi
c011526f:	89 f9                	mov    %edi,%ecx
c0115271:	0f b7 da             	movzwl %dx,%ebx
c0115274:	89 0d c8 fe 14 c0    	mov    %ecx,0xc014fec8
c011527a:	89 1d cc fe 14 c0    	mov    %ebx,0xc014fecc
    unsigned long long result = (next >> 12);
c0115280:	a1 c8 fe 14 c0       	mov    0xc014fec8,%eax
c0115285:	8b 15 cc fe 14 c0    	mov    0xc014fecc,%edx
c011528b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c011528f:	c1 ea 0c             	shr    $0xc,%edx
c0115292:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115295:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115298:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c011529f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01152a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01152a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01152a8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01152ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01152ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01152b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01152b5:	74 1c                	je     c01152d3 <rand+0x9a>
c01152b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01152ba:	ba 00 00 00 00       	mov    $0x0,%edx
c01152bf:	f7 75 dc             	divl   -0x24(%ebp)
c01152c2:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01152c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01152c8:	ba 00 00 00 00       	mov    $0x0,%edx
c01152cd:	f7 75 dc             	divl   -0x24(%ebp)
c01152d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01152d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01152d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01152d9:	f7 75 dc             	divl   -0x24(%ebp)
c01152dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01152df:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01152e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01152e5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01152e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01152eb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01152ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01152f1:	83 c4 24             	add    $0x24,%esp
c01152f4:	5b                   	pop    %ebx
c01152f5:	5e                   	pop    %esi
c01152f6:	5f                   	pop    %edi
c01152f7:	5d                   	pop    %ebp
c01152f8:	c3                   	ret    

c01152f9 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01152f9:	55                   	push   %ebp
c01152fa:	89 e5                	mov    %esp,%ebp
    next = seed;
c01152fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01152ff:	ba 00 00 00 00       	mov    $0x0,%edx
c0115304:	a3 c8 fe 14 c0       	mov    %eax,0xc014fec8
c0115309:	89 15 cc fe 14 c0    	mov    %edx,0xc014fecc
}
c011530f:	5d                   	pop    %ebp
c0115310:	c3                   	ret    

c0115311 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0115311:	55                   	push   %ebp
c0115312:	89 e5                	mov    %esp,%ebp
c0115314:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0115317:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c011531e:	eb 04                	jmp    c0115324 <strlen+0x13>
        cnt ++;
c0115320:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0115324:	8b 45 08             	mov    0x8(%ebp),%eax
c0115327:	8d 50 01             	lea    0x1(%eax),%edx
c011532a:	89 55 08             	mov    %edx,0x8(%ebp)
c011532d:	0f b6 00             	movzbl (%eax),%eax
c0115330:	84 c0                	test   %al,%al
c0115332:	75 ec                	jne    c0115320 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c0115334:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115337:	c9                   	leave  
c0115338:	c3                   	ret    

c0115339 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0115339:	55                   	push   %ebp
c011533a:	89 e5                	mov    %esp,%ebp
c011533c:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c011533f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0115346:	eb 04                	jmp    c011534c <strnlen+0x13>
        cnt ++;
c0115348:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c011534c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011534f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0115352:	73 10                	jae    c0115364 <strnlen+0x2b>
c0115354:	8b 45 08             	mov    0x8(%ebp),%eax
c0115357:	8d 50 01             	lea    0x1(%eax),%edx
c011535a:	89 55 08             	mov    %edx,0x8(%ebp)
c011535d:	0f b6 00             	movzbl (%eax),%eax
c0115360:	84 c0                	test   %al,%al
c0115362:	75 e4                	jne    c0115348 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0115364:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115367:	c9                   	leave  
c0115368:	c3                   	ret    

c0115369 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0115369:	55                   	push   %ebp
c011536a:	89 e5                	mov    %esp,%ebp
c011536c:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c011536f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115372:	89 04 24             	mov    %eax,(%esp)
c0115375:	e8 97 ff ff ff       	call   c0115311 <strlen>
c011537a:	8b 55 08             	mov    0x8(%ebp),%edx
c011537d:	01 c2                	add    %eax,%edx
c011537f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115382:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115386:	89 14 24             	mov    %edx,(%esp)
c0115389:	e8 02 00 00 00       	call   c0115390 <strcpy>
}
c011538e:	c9                   	leave  
c011538f:	c3                   	ret    

c0115390 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0115390:	55                   	push   %ebp
c0115391:	89 e5                	mov    %esp,%ebp
c0115393:	57                   	push   %edi
c0115394:	56                   	push   %esi
c0115395:	83 ec 20             	sub    $0x20,%esp
c0115398:	8b 45 08             	mov    0x8(%ebp),%eax
c011539b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011539e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01153a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c01153a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01153a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01153aa:	89 d1                	mov    %edx,%ecx
c01153ac:	89 c2                	mov    %eax,%edx
c01153ae:	89 ce                	mov    %ecx,%esi
c01153b0:	89 d7                	mov    %edx,%edi
c01153b2:	ac                   	lods   %ds:(%esi),%al
c01153b3:	aa                   	stos   %al,%es:(%edi)
c01153b4:	84 c0                	test   %al,%al
c01153b6:	75 fa                	jne    c01153b2 <strcpy+0x22>
c01153b8:	89 fa                	mov    %edi,%edx
c01153ba:	89 f1                	mov    %esi,%ecx
c01153bc:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01153bf:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01153c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c01153c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c01153c8:	83 c4 20             	add    $0x20,%esp
c01153cb:	5e                   	pop    %esi
c01153cc:	5f                   	pop    %edi
c01153cd:	5d                   	pop    %ebp
c01153ce:	c3                   	ret    

c01153cf <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c01153cf:	55                   	push   %ebp
c01153d0:	89 e5                	mov    %esp,%ebp
c01153d2:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01153d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01153d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01153db:	eb 21                	jmp    c01153fe <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01153dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01153e0:	0f b6 10             	movzbl (%eax),%edx
c01153e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01153e6:	88 10                	mov    %dl,(%eax)
c01153e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01153eb:	0f b6 00             	movzbl (%eax),%eax
c01153ee:	84 c0                	test   %al,%al
c01153f0:	74 04                	je     c01153f6 <strncpy+0x27>
            src ++;
c01153f2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c01153f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01153fa:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01153fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115402:	75 d9                	jne    c01153dd <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c0115404:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115407:	c9                   	leave  
c0115408:	c3                   	ret    

c0115409 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0115409:	55                   	push   %ebp
c011540a:	89 e5                	mov    %esp,%ebp
c011540c:	57                   	push   %edi
c011540d:	56                   	push   %esi
c011540e:	83 ec 20             	sub    $0x20,%esp
c0115411:	8b 45 08             	mov    0x8(%ebp),%eax
c0115414:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115417:	8b 45 0c             	mov    0xc(%ebp),%eax
c011541a:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c011541d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115420:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115423:	89 d1                	mov    %edx,%ecx
c0115425:	89 c2                	mov    %eax,%edx
c0115427:	89 ce                	mov    %ecx,%esi
c0115429:	89 d7                	mov    %edx,%edi
c011542b:	ac                   	lods   %ds:(%esi),%al
c011542c:	ae                   	scas   %es:(%edi),%al
c011542d:	75 08                	jne    c0115437 <strcmp+0x2e>
c011542f:	84 c0                	test   %al,%al
c0115431:	75 f8                	jne    c011542b <strcmp+0x22>
c0115433:	31 c0                	xor    %eax,%eax
c0115435:	eb 04                	jmp    c011543b <strcmp+0x32>
c0115437:	19 c0                	sbb    %eax,%eax
c0115439:	0c 01                	or     $0x1,%al
c011543b:	89 fa                	mov    %edi,%edx
c011543d:	89 f1                	mov    %esi,%ecx
c011543f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115442:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115445:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0115448:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c011544b:	83 c4 20             	add    $0x20,%esp
c011544e:	5e                   	pop    %esi
c011544f:	5f                   	pop    %edi
c0115450:	5d                   	pop    %ebp
c0115451:	c3                   	ret    

c0115452 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0115452:	55                   	push   %ebp
c0115453:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115455:	eb 0c                	jmp    c0115463 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115457:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c011545b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011545f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115463:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115467:	74 1a                	je     c0115483 <strncmp+0x31>
c0115469:	8b 45 08             	mov    0x8(%ebp),%eax
c011546c:	0f b6 00             	movzbl (%eax),%eax
c011546f:	84 c0                	test   %al,%al
c0115471:	74 10                	je     c0115483 <strncmp+0x31>
c0115473:	8b 45 08             	mov    0x8(%ebp),%eax
c0115476:	0f b6 10             	movzbl (%eax),%edx
c0115479:	8b 45 0c             	mov    0xc(%ebp),%eax
c011547c:	0f b6 00             	movzbl (%eax),%eax
c011547f:	38 c2                	cmp    %al,%dl
c0115481:	74 d4                	je     c0115457 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115483:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115487:	74 18                	je     c01154a1 <strncmp+0x4f>
c0115489:	8b 45 08             	mov    0x8(%ebp),%eax
c011548c:	0f b6 00             	movzbl (%eax),%eax
c011548f:	0f b6 d0             	movzbl %al,%edx
c0115492:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115495:	0f b6 00             	movzbl (%eax),%eax
c0115498:	0f b6 c0             	movzbl %al,%eax
c011549b:	29 c2                	sub    %eax,%edx
c011549d:	89 d0                	mov    %edx,%eax
c011549f:	eb 05                	jmp    c01154a6 <strncmp+0x54>
c01154a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01154a6:	5d                   	pop    %ebp
c01154a7:	c3                   	ret    

c01154a8 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c01154a8:	55                   	push   %ebp
c01154a9:	89 e5                	mov    %esp,%ebp
c01154ab:	83 ec 04             	sub    $0x4,%esp
c01154ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154b1:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01154b4:	eb 14                	jmp    c01154ca <strchr+0x22>
        if (*s == c) {
c01154b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01154b9:	0f b6 00             	movzbl (%eax),%eax
c01154bc:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01154bf:	75 05                	jne    c01154c6 <strchr+0x1e>
            return (char *)s;
c01154c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01154c4:	eb 13                	jmp    c01154d9 <strchr+0x31>
        }
        s ++;
c01154c6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c01154ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01154cd:	0f b6 00             	movzbl (%eax),%eax
c01154d0:	84 c0                	test   %al,%al
c01154d2:	75 e2                	jne    c01154b6 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c01154d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01154d9:	c9                   	leave  
c01154da:	c3                   	ret    

c01154db <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01154db:	55                   	push   %ebp
c01154dc:	89 e5                	mov    %esp,%ebp
c01154de:	83 ec 04             	sub    $0x4,%esp
c01154e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154e4:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01154e7:	eb 11                	jmp    c01154fa <strfind+0x1f>
        if (*s == c) {
c01154e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01154ec:	0f b6 00             	movzbl (%eax),%eax
c01154ef:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01154f2:	75 02                	jne    c01154f6 <strfind+0x1b>
            break;
c01154f4:	eb 0e                	jmp    c0115504 <strfind+0x29>
        }
        s ++;
c01154f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01154fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01154fd:	0f b6 00             	movzbl (%eax),%eax
c0115500:	84 c0                	test   %al,%al
c0115502:	75 e5                	jne    c01154e9 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c0115504:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115507:	c9                   	leave  
c0115508:	c3                   	ret    

c0115509 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c0115509:	55                   	push   %ebp
c011550a:	89 e5                	mov    %esp,%ebp
c011550c:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c011550f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0115516:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c011551d:	eb 04                	jmp    c0115523 <strtol+0x1a>
        s ++;
c011551f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0115523:	8b 45 08             	mov    0x8(%ebp),%eax
c0115526:	0f b6 00             	movzbl (%eax),%eax
c0115529:	3c 20                	cmp    $0x20,%al
c011552b:	74 f2                	je     c011551f <strtol+0x16>
c011552d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115530:	0f b6 00             	movzbl (%eax),%eax
c0115533:	3c 09                	cmp    $0x9,%al
c0115535:	74 e8                	je     c011551f <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0115537:	8b 45 08             	mov    0x8(%ebp),%eax
c011553a:	0f b6 00             	movzbl (%eax),%eax
c011553d:	3c 2b                	cmp    $0x2b,%al
c011553f:	75 06                	jne    c0115547 <strtol+0x3e>
        s ++;
c0115541:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115545:	eb 15                	jmp    c011555c <strtol+0x53>
    }
    else if (*s == '-') {
c0115547:	8b 45 08             	mov    0x8(%ebp),%eax
c011554a:	0f b6 00             	movzbl (%eax),%eax
c011554d:	3c 2d                	cmp    $0x2d,%al
c011554f:	75 0b                	jne    c011555c <strtol+0x53>
        s ++, neg = 1;
c0115551:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115555:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c011555c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115560:	74 06                	je     c0115568 <strtol+0x5f>
c0115562:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0115566:	75 24                	jne    c011558c <strtol+0x83>
c0115568:	8b 45 08             	mov    0x8(%ebp),%eax
c011556b:	0f b6 00             	movzbl (%eax),%eax
c011556e:	3c 30                	cmp    $0x30,%al
c0115570:	75 1a                	jne    c011558c <strtol+0x83>
c0115572:	8b 45 08             	mov    0x8(%ebp),%eax
c0115575:	83 c0 01             	add    $0x1,%eax
c0115578:	0f b6 00             	movzbl (%eax),%eax
c011557b:	3c 78                	cmp    $0x78,%al
c011557d:	75 0d                	jne    c011558c <strtol+0x83>
        s += 2, base = 16;
c011557f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0115583:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c011558a:	eb 2a                	jmp    c01155b6 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011558c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115590:	75 17                	jne    c01155a9 <strtol+0xa0>
c0115592:	8b 45 08             	mov    0x8(%ebp),%eax
c0115595:	0f b6 00             	movzbl (%eax),%eax
c0115598:	3c 30                	cmp    $0x30,%al
c011559a:	75 0d                	jne    c01155a9 <strtol+0xa0>
        s ++, base = 8;
c011559c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01155a0:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c01155a7:	eb 0d                	jmp    c01155b6 <strtol+0xad>
    }
    else if (base == 0) {
c01155a9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01155ad:	75 07                	jne    c01155b6 <strtol+0xad>
        base = 10;
c01155af:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c01155b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01155b9:	0f b6 00             	movzbl (%eax),%eax
c01155bc:	3c 2f                	cmp    $0x2f,%al
c01155be:	7e 1b                	jle    c01155db <strtol+0xd2>
c01155c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01155c3:	0f b6 00             	movzbl (%eax),%eax
c01155c6:	3c 39                	cmp    $0x39,%al
c01155c8:	7f 11                	jg     c01155db <strtol+0xd2>
            dig = *s - '0';
c01155ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01155cd:	0f b6 00             	movzbl (%eax),%eax
c01155d0:	0f be c0             	movsbl %al,%eax
c01155d3:	83 e8 30             	sub    $0x30,%eax
c01155d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01155d9:	eb 48                	jmp    c0115623 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01155db:	8b 45 08             	mov    0x8(%ebp),%eax
c01155de:	0f b6 00             	movzbl (%eax),%eax
c01155e1:	3c 60                	cmp    $0x60,%al
c01155e3:	7e 1b                	jle    c0115600 <strtol+0xf7>
c01155e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01155e8:	0f b6 00             	movzbl (%eax),%eax
c01155eb:	3c 7a                	cmp    $0x7a,%al
c01155ed:	7f 11                	jg     c0115600 <strtol+0xf7>
            dig = *s - 'a' + 10;
c01155ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01155f2:	0f b6 00             	movzbl (%eax),%eax
c01155f5:	0f be c0             	movsbl %al,%eax
c01155f8:	83 e8 57             	sub    $0x57,%eax
c01155fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01155fe:	eb 23                	jmp    c0115623 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0115600:	8b 45 08             	mov    0x8(%ebp),%eax
c0115603:	0f b6 00             	movzbl (%eax),%eax
c0115606:	3c 40                	cmp    $0x40,%al
c0115608:	7e 3d                	jle    c0115647 <strtol+0x13e>
c011560a:	8b 45 08             	mov    0x8(%ebp),%eax
c011560d:	0f b6 00             	movzbl (%eax),%eax
c0115610:	3c 5a                	cmp    $0x5a,%al
c0115612:	7f 33                	jg     c0115647 <strtol+0x13e>
            dig = *s - 'A' + 10;
c0115614:	8b 45 08             	mov    0x8(%ebp),%eax
c0115617:	0f b6 00             	movzbl (%eax),%eax
c011561a:	0f be c0             	movsbl %al,%eax
c011561d:	83 e8 37             	sub    $0x37,%eax
c0115620:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0115623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115626:	3b 45 10             	cmp    0x10(%ebp),%eax
c0115629:	7c 02                	jl     c011562d <strtol+0x124>
            break;
c011562b:	eb 1a                	jmp    c0115647 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c011562d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115631:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115634:	0f af 45 10          	imul   0x10(%ebp),%eax
c0115638:	89 c2                	mov    %eax,%edx
c011563a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011563d:	01 d0                	add    %edx,%eax
c011563f:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0115642:	e9 6f ff ff ff       	jmp    c01155b6 <strtol+0xad>

    if (endptr) {
c0115647:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011564b:	74 08                	je     c0115655 <strtol+0x14c>
        *endptr = (char *) s;
c011564d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115650:	8b 55 08             	mov    0x8(%ebp),%edx
c0115653:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0115655:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0115659:	74 07                	je     c0115662 <strtol+0x159>
c011565b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011565e:	f7 d8                	neg    %eax
c0115660:	eb 03                	jmp    c0115665 <strtol+0x15c>
c0115662:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0115665:	c9                   	leave  
c0115666:	c3                   	ret    

c0115667 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115667:	55                   	push   %ebp
c0115668:	89 e5                	mov    %esp,%ebp
c011566a:	57                   	push   %edi
c011566b:	83 ec 24             	sub    $0x24,%esp
c011566e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115671:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0115674:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0115678:	8b 55 08             	mov    0x8(%ebp),%edx
c011567b:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011567e:	88 45 f7             	mov    %al,-0x9(%ebp)
c0115681:	8b 45 10             	mov    0x10(%ebp),%eax
c0115684:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115687:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c011568a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c011568e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0115691:	89 d7                	mov    %edx,%edi
c0115693:	f3 aa                	rep stos %al,%es:(%edi)
c0115695:	89 fa                	mov    %edi,%edx
c0115697:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c011569a:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c011569d:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c01156a0:	83 c4 24             	add    $0x24,%esp
c01156a3:	5f                   	pop    %edi
c01156a4:	5d                   	pop    %ebp
c01156a5:	c3                   	ret    

c01156a6 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c01156a6:	55                   	push   %ebp
c01156a7:	89 e5                	mov    %esp,%ebp
c01156a9:	57                   	push   %edi
c01156aa:	56                   	push   %esi
c01156ab:	53                   	push   %ebx
c01156ac:	83 ec 30             	sub    $0x30,%esp
c01156af:	8b 45 08             	mov    0x8(%ebp),%eax
c01156b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01156b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01156b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01156bb:	8b 45 10             	mov    0x10(%ebp),%eax
c01156be:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c01156c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01156c4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01156c7:	73 42                	jae    c011570b <memmove+0x65>
c01156c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01156cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01156cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01156d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01156d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01156d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01156db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01156de:	c1 e8 02             	shr    $0x2,%eax
c01156e1:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01156e3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01156e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01156e9:	89 d7                	mov    %edx,%edi
c01156eb:	89 c6                	mov    %eax,%esi
c01156ed:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01156ef:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01156f2:	83 e1 03             	and    $0x3,%ecx
c01156f5:	74 02                	je     c01156f9 <memmove+0x53>
c01156f7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01156f9:	89 f0                	mov    %esi,%eax
c01156fb:	89 fa                	mov    %edi,%edx
c01156fd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0115700:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0115703:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0115706:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0115709:	eb 36                	jmp    c0115741 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c011570b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011570e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0115711:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115714:	01 c2                	add    %eax,%edx
c0115716:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115719:	8d 48 ff             	lea    -0x1(%eax),%ecx
c011571c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011571f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0115722:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115725:	89 c1                	mov    %eax,%ecx
c0115727:	89 d8                	mov    %ebx,%eax
c0115729:	89 d6                	mov    %edx,%esi
c011572b:	89 c7                	mov    %eax,%edi
c011572d:	fd                   	std    
c011572e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115730:	fc                   	cld    
c0115731:	89 f8                	mov    %edi,%eax
c0115733:	89 f2                	mov    %esi,%edx
c0115735:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0115738:	89 55 c8             	mov    %edx,-0x38(%ebp)
c011573b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c011573e:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0115741:	83 c4 30             	add    $0x30,%esp
c0115744:	5b                   	pop    %ebx
c0115745:	5e                   	pop    %esi
c0115746:	5f                   	pop    %edi
c0115747:	5d                   	pop    %ebp
c0115748:	c3                   	ret    

c0115749 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115749:	55                   	push   %ebp
c011574a:	89 e5                	mov    %esp,%ebp
c011574c:	57                   	push   %edi
c011574d:	56                   	push   %esi
c011574e:	83 ec 20             	sub    $0x20,%esp
c0115751:	8b 45 08             	mov    0x8(%ebp),%eax
c0115754:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115757:	8b 45 0c             	mov    0xc(%ebp),%eax
c011575a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011575d:	8b 45 10             	mov    0x10(%ebp),%eax
c0115760:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0115763:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115766:	c1 e8 02             	shr    $0x2,%eax
c0115769:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c011576b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011576e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115771:	89 d7                	mov    %edx,%edi
c0115773:	89 c6                	mov    %eax,%esi
c0115775:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115777:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c011577a:	83 e1 03             	and    $0x3,%ecx
c011577d:	74 02                	je     c0115781 <memcpy+0x38>
c011577f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115781:	89 f0                	mov    %esi,%eax
c0115783:	89 fa                	mov    %edi,%edx
c0115785:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115788:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011578b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c011578e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0115791:	83 c4 20             	add    $0x20,%esp
c0115794:	5e                   	pop    %esi
c0115795:	5f                   	pop    %edi
c0115796:	5d                   	pop    %ebp
c0115797:	c3                   	ret    

c0115798 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115798:	55                   	push   %ebp
c0115799:	89 e5                	mov    %esp,%ebp
c011579b:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c011579e:	8b 45 08             	mov    0x8(%ebp),%eax
c01157a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c01157a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01157a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c01157aa:	eb 30                	jmp    c01157dc <memcmp+0x44>
        if (*s1 != *s2) {
c01157ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01157af:	0f b6 10             	movzbl (%eax),%edx
c01157b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01157b5:	0f b6 00             	movzbl (%eax),%eax
c01157b8:	38 c2                	cmp    %al,%dl
c01157ba:	74 18                	je     c01157d4 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c01157bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01157bf:	0f b6 00             	movzbl (%eax),%eax
c01157c2:	0f b6 d0             	movzbl %al,%edx
c01157c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01157c8:	0f b6 00             	movzbl (%eax),%eax
c01157cb:	0f b6 c0             	movzbl %al,%eax
c01157ce:	29 c2                	sub    %eax,%edx
c01157d0:	89 d0                	mov    %edx,%eax
c01157d2:	eb 1a                	jmp    c01157ee <memcmp+0x56>
        }
        s1 ++, s2 ++;
c01157d4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01157d8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c01157dc:	8b 45 10             	mov    0x10(%ebp),%eax
c01157df:	8d 50 ff             	lea    -0x1(%eax),%edx
c01157e2:	89 55 10             	mov    %edx,0x10(%ebp)
c01157e5:	85 c0                	test   %eax,%eax
c01157e7:	75 c3                	jne    c01157ac <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01157e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01157ee:	c9                   	leave  
c01157ef:	c3                   	ret    

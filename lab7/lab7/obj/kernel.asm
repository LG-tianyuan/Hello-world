
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 30 1c 00       	mov    $0x1c3000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 30 1c c0       	mov    %eax,0xc01c3000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba c4 82 1c c0       	mov    $0xc01c82c4,%edx
c0100041:	b8 00 50 1c c0       	mov    $0xc01c5000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100055:	00 
c0100056:	c7 04 24 00 50 1c c0 	movl   $0xc01c5000,(%esp)
c010005d:	e8 cf d5 00 00       	call   c010d631 <memset>

    cons_init();                // init the console
c0100062:	e8 a0 16 00 00       	call   c0101707 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100067:	c7 45 f4 c0 d7 10 c0 	movl   $0xc010d7c0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c010006e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100071:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100075:	c7 04 24 dc d7 10 c0 	movl   $0xc010d7dc,(%esp)
c010007c:	e8 e3 02 00 00       	call   c0100364 <cprintf>

    print_kerninfo();
c0100081:	e8 0a 09 00 00       	call   c0100990 <print_kerninfo>

    grade_backtrace();
c0100086:	e8 a2 00 00 00       	call   c010012d <grade_backtrace>

    pmm_init();                 // init physical memory management
c010008b:	e8 b2 56 00 00       	call   c0105742 <pmm_init>

    pic_init();                 // init interrupt controller
c0100090:	e8 50 20 00 00       	call   c01020e5 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100095:	e8 c8 21 00 00       	call   c0102262 <idt_init>

    vmm_init();                 // init virtual memory management
c010009a:	e8 42 86 00 00       	call   c01086e1 <vmm_init>
    sched_init();               // init scheduler
c010009f:	e8 cb c3 00 00       	call   c010c46f <sched_init>
    proc_init();                // init process table
c01000a4:	e8 bb bc 00 00       	call   c010bd64 <proc_init>
    
    ide_init();                 // init ide devices
c01000a9:	e8 8a 17 00 00       	call   c0101838 <ide_init>
    swap_init();                // init swap
c01000ae:	e8 06 6d 00 00       	call   c0106db9 <swap_init>

    clock_init();               // init clock interrupt
c01000b3:	e8 05 0e 00 00       	call   c0100ebd <clock_init>
    intr_enable();              // enable irq interrupt
c01000b8:	e8 96 1f 00 00       	call   c0102053 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000bd:	e8 61 be 00 00       	call   c010bf23 <cpu_idle>

c01000c2 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c2:	55                   	push   %ebp
c01000c3:	89 e5                	mov    %esp,%ebp
c01000c5:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000cf:	00 
c01000d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d7:	00 
c01000d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000df:	e8 fa 0c 00 00       	call   c0100dde <mon_backtrace>
}
c01000e4:	c9                   	leave  
c01000e5:	c3                   	ret    

c01000e6 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000e6:	55                   	push   %ebp
c01000e7:	89 e5                	mov    %esp,%ebp
c01000e9:	53                   	push   %ebx
c01000ea:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000ed:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000f0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000f3:	8d 55 08             	lea    0x8(%ebp),%edx
c01000f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000fd:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100101:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100105:	89 04 24             	mov    %eax,(%esp)
c0100108:	e8 b5 ff ff ff       	call   c01000c2 <grade_backtrace2>
}
c010010d:	83 c4 14             	add    $0x14,%esp
c0100110:	5b                   	pop    %ebx
c0100111:	5d                   	pop    %ebp
c0100112:	c3                   	ret    

c0100113 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100113:	55                   	push   %ebp
c0100114:	89 e5                	mov    %esp,%ebp
c0100116:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100119:	8b 45 10             	mov    0x10(%ebp),%eax
c010011c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100120:	8b 45 08             	mov    0x8(%ebp),%eax
c0100123:	89 04 24             	mov    %eax,(%esp)
c0100126:	e8 bb ff ff ff       	call   c01000e6 <grade_backtrace1>
}
c010012b:	c9                   	leave  
c010012c:	c3                   	ret    

c010012d <grade_backtrace>:

void
grade_backtrace(void) {
c010012d:	55                   	push   %ebp
c010012e:	89 e5                	mov    %esp,%ebp
c0100130:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100133:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100138:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c010013f:	ff 
c0100140:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100144:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010014b:	e8 c3 ff ff ff       	call   c0100113 <grade_backtrace0>
}
c0100150:	c9                   	leave  
c0100151:	c3                   	ret    

c0100152 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100152:	55                   	push   %ebp
c0100153:	89 e5                	mov    %esp,%ebp
c0100155:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100158:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010015b:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010015e:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100161:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100164:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100168:	0f b7 c0             	movzwl %ax,%eax
c010016b:	83 e0 03             	and    $0x3,%eax
c010016e:	89 c2                	mov    %eax,%edx
c0100170:	a1 00 50 1c c0       	mov    0xc01c5000,%eax
c0100175:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100179:	89 44 24 04          	mov    %eax,0x4(%esp)
c010017d:	c7 04 24 e1 d7 10 c0 	movl   $0xc010d7e1,(%esp)
c0100184:	e8 db 01 00 00       	call   c0100364 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100189:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010018d:	0f b7 d0             	movzwl %ax,%edx
c0100190:	a1 00 50 1c c0       	mov    0xc01c5000,%eax
c0100195:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100199:	89 44 24 04          	mov    %eax,0x4(%esp)
c010019d:	c7 04 24 ef d7 10 c0 	movl   $0xc010d7ef,(%esp)
c01001a4:	e8 bb 01 00 00       	call   c0100364 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a9:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001ad:	0f b7 d0             	movzwl %ax,%edx
c01001b0:	a1 00 50 1c c0       	mov    0xc01c5000,%eax
c01001b5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001bd:	c7 04 24 fd d7 10 c0 	movl   $0xc010d7fd,(%esp)
c01001c4:	e8 9b 01 00 00       	call   c0100364 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001cd:	0f b7 d0             	movzwl %ax,%edx
c01001d0:	a1 00 50 1c c0       	mov    0xc01c5000,%eax
c01001d5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001dd:	c7 04 24 0b d8 10 c0 	movl   $0xc010d80b,(%esp)
c01001e4:	e8 7b 01 00 00       	call   c0100364 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e9:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ed:	0f b7 d0             	movzwl %ax,%edx
c01001f0:	a1 00 50 1c c0       	mov    0xc01c5000,%eax
c01001f5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001fd:	c7 04 24 19 d8 10 c0 	movl   $0xc010d819,(%esp)
c0100204:	e8 5b 01 00 00       	call   c0100364 <cprintf>
    round ++;
c0100209:	a1 00 50 1c c0       	mov    0xc01c5000,%eax
c010020e:	83 c0 01             	add    $0x1,%eax
c0100211:	a3 00 50 1c c0       	mov    %eax,0xc01c5000
}
c0100216:	c9                   	leave  
c0100217:	c3                   	ret    

c0100218 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100218:	55                   	push   %ebp
c0100219:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010021b:	5d                   	pop    %ebp
c010021c:	c3                   	ret    

c010021d <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c010021d:	55                   	push   %ebp
c010021e:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100220:	5d                   	pop    %ebp
c0100221:	c3                   	ret    

c0100222 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100222:	55                   	push   %ebp
c0100223:	89 e5                	mov    %esp,%ebp
c0100225:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100228:	e8 25 ff ff ff       	call   c0100152 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010022d:	c7 04 24 28 d8 10 c0 	movl   $0xc010d828,(%esp)
c0100234:	e8 2b 01 00 00       	call   c0100364 <cprintf>
    lab1_switch_to_user();
c0100239:	e8 da ff ff ff       	call   c0100218 <lab1_switch_to_user>
    lab1_print_cur_status();
c010023e:	e8 0f ff ff ff       	call   c0100152 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100243:	c7 04 24 48 d8 10 c0 	movl   $0xc010d848,(%esp)
c010024a:	e8 15 01 00 00       	call   c0100364 <cprintf>
    lab1_switch_to_kernel();
c010024f:	e8 c9 ff ff ff       	call   c010021d <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100254:	e8 f9 fe ff ff       	call   c0100152 <lab1_print_cur_status>
}
c0100259:	c9                   	leave  
c010025a:	c3                   	ret    

c010025b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010025b:	55                   	push   %ebp
c010025c:	89 e5                	mov    %esp,%ebp
c010025e:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100261:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100265:	74 13                	je     c010027a <readline+0x1f>
        cprintf("%s", prompt);
c0100267:	8b 45 08             	mov    0x8(%ebp),%eax
c010026a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010026e:	c7 04 24 67 d8 10 c0 	movl   $0xc010d867,(%esp)
c0100275:	e8 ea 00 00 00       	call   c0100364 <cprintf>
    }
    int i = 0, c;
c010027a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100281:	e8 66 01 00 00       	call   c01003ec <getchar>
c0100286:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100289:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010028d:	79 07                	jns    c0100296 <readline+0x3b>
            return NULL;
c010028f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100294:	eb 79                	jmp    c010030f <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100296:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010029a:	7e 28                	jle    c01002c4 <readline+0x69>
c010029c:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01002a3:	7f 1f                	jg     c01002c4 <readline+0x69>
            cputchar(c);
c01002a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a8:	89 04 24             	mov    %eax,(%esp)
c01002ab:	e8 da 00 00 00       	call   c010038a <cputchar>
            buf[i ++] = c;
c01002b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002b3:	8d 50 01             	lea    0x1(%eax),%edx
c01002b6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002bc:	88 90 20 50 1c c0    	mov    %dl,-0x3fe3afe0(%eax)
c01002c2:	eb 46                	jmp    c010030a <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002c4:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c8:	75 17                	jne    c01002e1 <readline+0x86>
c01002ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ce:	7e 11                	jle    c01002e1 <readline+0x86>
            cputchar(c);
c01002d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002d3:	89 04 24             	mov    %eax,(%esp)
c01002d6:	e8 af 00 00 00       	call   c010038a <cputchar>
            i --;
c01002db:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002df:	eb 29                	jmp    c010030a <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002e1:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002e5:	74 06                	je     c01002ed <readline+0x92>
c01002e7:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002eb:	75 1d                	jne    c010030a <readline+0xaf>
            cputchar(c);
c01002ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f0:	89 04 24             	mov    %eax,(%esp)
c01002f3:	e8 92 00 00 00       	call   c010038a <cputchar>
            buf[i] = '\0';
c01002f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002fb:	05 20 50 1c c0       	add    $0xc01c5020,%eax
c0100300:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c0100303:	b8 20 50 1c c0       	mov    $0xc01c5020,%eax
c0100308:	eb 05                	jmp    c010030f <readline+0xb4>
        }
    }
c010030a:	e9 72 ff ff ff       	jmp    c0100281 <readline+0x26>
}
c010030f:	c9                   	leave  
c0100310:	c3                   	ret    

c0100311 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100311:	55                   	push   %ebp
c0100312:	89 e5                	mov    %esp,%ebp
c0100314:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100317:	8b 45 08             	mov    0x8(%ebp),%eax
c010031a:	89 04 24             	mov    %eax,(%esp)
c010031d:	e8 11 14 00 00       	call   c0101733 <cons_putc>
    (*cnt) ++;
c0100322:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100325:	8b 00                	mov    (%eax),%eax
c0100327:	8d 50 01             	lea    0x1(%eax),%edx
c010032a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010032d:	89 10                	mov    %edx,(%eax)
}
c010032f:	c9                   	leave  
c0100330:	c3                   	ret    

c0100331 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100331:	55                   	push   %ebp
c0100332:	89 e5                	mov    %esp,%ebp
c0100334:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100337:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010033e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8b 45 08             	mov    0x8(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010034f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100353:	c7 04 24 11 03 10 c0 	movl   $0xc0100311,(%esp)
c010035a:	e8 13 ca 00 00       	call   c010cd72 <vprintfmt>
    return cnt;
c010035f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100362:	c9                   	leave  
c0100363:	c3                   	ret    

c0100364 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100364:	55                   	push   %ebp
c0100365:	89 e5                	mov    %esp,%ebp
c0100367:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036a:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100370:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100373:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100377:	8b 45 08             	mov    0x8(%ebp),%eax
c010037a:	89 04 24             	mov    %eax,(%esp)
c010037d:	e8 af ff ff ff       	call   c0100331 <vcprintf>
c0100382:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100385:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100388:	c9                   	leave  
c0100389:	c3                   	ret    

c010038a <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038a:	55                   	push   %ebp
c010038b:	89 e5                	mov    %esp,%ebp
c010038d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100390:	8b 45 08             	mov    0x8(%ebp),%eax
c0100393:	89 04 24             	mov    %eax,(%esp)
c0100396:	e8 98 13 00 00       	call   c0101733 <cons_putc>
}
c010039b:	c9                   	leave  
c010039c:	c3                   	ret    

c010039d <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039d:	55                   	push   %ebp
c010039e:	89 e5                	mov    %esp,%ebp
c01003a0:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003aa:	eb 13                	jmp    c01003bf <cputs+0x22>
        cputch(c, &cnt);
c01003ac:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b0:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b7:	89 04 24             	mov    %eax,(%esp)
c01003ba:	e8 52 ff ff ff       	call   c0100311 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c2:	8d 50 01             	lea    0x1(%eax),%edx
c01003c5:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c8:	0f b6 00             	movzbl (%eax),%eax
c01003cb:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003ce:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d2:	75 d8                	jne    c01003ac <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003db:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e2:	e8 2a ff ff ff       	call   c0100311 <cputch>
    return cnt;
c01003e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003ea:	c9                   	leave  
c01003eb:	c3                   	ret    

c01003ec <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ec:	55                   	push   %ebp
c01003ed:	89 e5                	mov    %esp,%ebp
c01003ef:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f2:	e8 78 13 00 00       	call   c010176f <cons_getc>
c01003f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003fe:	74 f2                	je     c01003f2 <getchar+0x6>
        /* do nothing */;
    return c;
c0100400:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100403:	c9                   	leave  
c0100404:	c3                   	ret    

c0100405 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c0100405:	55                   	push   %ebp
c0100406:	89 e5                	mov    %esp,%ebp
c0100408:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c010040b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010040e:	8b 00                	mov    (%eax),%eax
c0100410:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100413:	8b 45 10             	mov    0x10(%ebp),%eax
c0100416:	8b 00                	mov    (%eax),%eax
c0100418:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010041b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100422:	e9 d2 00 00 00       	jmp    c01004f9 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100427:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010042a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010042d:	01 d0                	add    %edx,%eax
c010042f:	89 c2                	mov    %eax,%edx
c0100431:	c1 ea 1f             	shr    $0x1f,%edx
c0100434:	01 d0                	add    %edx,%eax
c0100436:	d1 f8                	sar    %eax
c0100438:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010043b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010043e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100441:	eb 04                	jmp    c0100447 <stab_binsearch+0x42>
            m --;
c0100443:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100447:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010044a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010044d:	7c 1f                	jl     c010046e <stab_binsearch+0x69>
c010044f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100452:	89 d0                	mov    %edx,%eax
c0100454:	01 c0                	add    %eax,%eax
c0100456:	01 d0                	add    %edx,%eax
c0100458:	c1 e0 02             	shl    $0x2,%eax
c010045b:	89 c2                	mov    %eax,%edx
c010045d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100460:	01 d0                	add    %edx,%eax
c0100462:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100466:	0f b6 c0             	movzbl %al,%eax
c0100469:	3b 45 14             	cmp    0x14(%ebp),%eax
c010046c:	75 d5                	jne    c0100443 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010046e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100471:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100474:	7d 0b                	jge    c0100481 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100476:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100479:	83 c0 01             	add    $0x1,%eax
c010047c:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010047f:	eb 78                	jmp    c01004f9 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100481:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100488:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010048b:	89 d0                	mov    %edx,%eax
c010048d:	01 c0                	add    %eax,%eax
c010048f:	01 d0                	add    %edx,%eax
c0100491:	c1 e0 02             	shl    $0x2,%eax
c0100494:	89 c2                	mov    %eax,%edx
c0100496:	8b 45 08             	mov    0x8(%ebp),%eax
c0100499:	01 d0                	add    %edx,%eax
c010049b:	8b 40 08             	mov    0x8(%eax),%eax
c010049e:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004a1:	73 13                	jae    c01004b6 <stab_binsearch+0xb1>
            *region_left = m;
c01004a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004a9:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c01004ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ae:	83 c0 01             	add    $0x1,%eax
c01004b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004b4:	eb 43                	jmp    c01004f9 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004b9:	89 d0                	mov    %edx,%eax
c01004bb:	01 c0                	add    %eax,%eax
c01004bd:	01 d0                	add    %edx,%eax
c01004bf:	c1 e0 02             	shl    $0x2,%eax
c01004c2:	89 c2                	mov    %eax,%edx
c01004c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01004c7:	01 d0                	add    %edx,%eax
c01004c9:	8b 40 08             	mov    0x8(%eax),%eax
c01004cc:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004cf:	76 16                	jbe    c01004e7 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d4:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004d7:	8b 45 10             	mov    0x10(%ebp),%eax
c01004da:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004df:	83 e8 01             	sub    $0x1,%eax
c01004e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e5:	eb 12                	jmp    c01004f9 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ed:	89 10                	mov    %edx,(%eax)
            l = m;
c01004ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004f5:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004fc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004ff:	0f 8e 22 ff ff ff    	jle    c0100427 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0100505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100509:	75 0f                	jne    c010051a <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c010050b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010050e:	8b 00                	mov    (%eax),%eax
c0100510:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100513:	8b 45 10             	mov    0x10(%ebp),%eax
c0100516:	89 10                	mov    %edx,(%eax)
c0100518:	eb 3f                	jmp    c0100559 <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010051a:	8b 45 10             	mov    0x10(%ebp),%eax
c010051d:	8b 00                	mov    (%eax),%eax
c010051f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100522:	eb 04                	jmp    c0100528 <stab_binsearch+0x123>
c0100524:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0100528:	8b 45 0c             	mov    0xc(%ebp),%eax
c010052b:	8b 00                	mov    (%eax),%eax
c010052d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100530:	7d 1f                	jge    c0100551 <stab_binsearch+0x14c>
c0100532:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100535:	89 d0                	mov    %edx,%eax
c0100537:	01 c0                	add    %eax,%eax
c0100539:	01 d0                	add    %edx,%eax
c010053b:	c1 e0 02             	shl    $0x2,%eax
c010053e:	89 c2                	mov    %eax,%edx
c0100540:	8b 45 08             	mov    0x8(%ebp),%eax
c0100543:	01 d0                	add    %edx,%eax
c0100545:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100549:	0f b6 c0             	movzbl %al,%eax
c010054c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054f:	75 d3                	jne    c0100524 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100551:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100554:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100557:	89 10                	mov    %edx,(%eax)
    }
}
c0100559:	c9                   	leave  
c010055a:	c3                   	ret    

c010055b <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010055b:	55                   	push   %ebp
c010055c:	89 e5                	mov    %esp,%ebp
c010055e:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100561:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100564:	c7 00 6c d8 10 c0    	movl   $0xc010d86c,(%eax)
    info->eip_line = 0;
c010056a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100574:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100577:	c7 40 08 6c d8 10 c0 	movl   $0xc010d86c,0x8(%eax)
    info->eip_fn_namelen = 9;
c010057e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100581:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010058b:	8b 55 08             	mov    0x8(%ebp),%edx
c010058e:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100591:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100594:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010059b:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c01005a2:	76 21                	jbe    c01005c5 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c01005a4:	c7 45 f4 80 05 11 c0 	movl   $0xc0110580,-0xc(%ebp)
        stab_end = __STAB_END__;
c01005ab:	c7 45 f0 38 79 12 c0 	movl   $0xc0127938,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005b2:	c7 45 ec 39 79 12 c0 	movl   $0xc0127939,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005b9:	c7 45 e8 f9 e7 12 c0 	movl   $0xc012e7f9,-0x18(%ebp)
c01005c0:	e9 ea 00 00 00       	jmp    c01006af <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005c5:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005cc:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c01005d1:	85 c0                	test   %eax,%eax
c01005d3:	74 11                	je     c01005e6 <debuginfo_eip+0x8b>
c01005d5:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c01005da:	8b 40 18             	mov    0x18(%eax),%eax
c01005dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005e4:	75 0a                	jne    c01005f0 <debuginfo_eip+0x95>
            return -1;
c01005e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005eb:	e9 9e 03 00 00       	jmp    c010098e <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005f3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005fa:	00 
c01005fb:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0100602:	00 
c0100603:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100607:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010060a:	89 04 24             	mov    %eax,(%esp)
c010060d:	e8 f8 89 00 00       	call   c010900a <user_mem_check>
c0100612:	85 c0                	test   %eax,%eax
c0100614:	75 0a                	jne    c0100620 <debuginfo_eip+0xc5>
            return -1;
c0100616:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010061b:	e9 6e 03 00 00       	jmp    c010098e <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100620:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100623:	8b 00                	mov    (%eax),%eax
c0100625:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0100628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010062b:	8b 40 04             	mov    0x4(%eax),%eax
c010062e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100631:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100634:	8b 40 08             	mov    0x8(%eax),%eax
c0100637:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010063a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010063d:	8b 40 0c             	mov    0xc(%eax),%eax
c0100640:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100643:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100649:	29 c2                	sub    %eax,%edx
c010064b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010064e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100655:	00 
c0100656:	89 54 24 08          	mov    %edx,0x8(%esp)
c010065a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010065e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100661:	89 04 24             	mov    %eax,(%esp)
c0100664:	e8 a1 89 00 00       	call   c010900a <user_mem_check>
c0100669:	85 c0                	test   %eax,%eax
c010066b:	75 0a                	jne    c0100677 <debuginfo_eip+0x11c>
            return -1;
c010066d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100672:	e9 17 03 00 00       	jmp    c010098e <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100677:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010067a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067d:	29 c2                	sub    %eax,%edx
c010067f:	89 d0                	mov    %edx,%eax
c0100681:	89 c2                	mov    %eax,%edx
c0100683:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100686:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010068d:	00 
c010068e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100692:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100696:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100699:	89 04 24             	mov    %eax,(%esp)
c010069c:	e8 69 89 00 00       	call   c010900a <user_mem_check>
c01006a1:	85 c0                	test   %eax,%eax
c01006a3:	75 0a                	jne    c01006af <debuginfo_eip+0x154>
            return -1;
c01006a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006aa:	e9 df 02 00 00       	jmp    c010098e <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006b2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006b5:	76 0d                	jbe    c01006c4 <debuginfo_eip+0x169>
c01006b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ba:	83 e8 01             	sub    $0x1,%eax
c01006bd:	0f b6 00             	movzbl (%eax),%eax
c01006c0:	84 c0                	test   %al,%al
c01006c2:	74 0a                	je     c01006ce <debuginfo_eip+0x173>
        return -1;
c01006c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006c9:	e9 c0 02 00 00       	jmp    c010098e <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006db:	29 c2                	sub    %eax,%edx
c01006dd:	89 d0                	mov    %edx,%eax
c01006df:	c1 f8 02             	sar    $0x2,%eax
c01006e2:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006e8:	83 e8 01             	sub    $0x1,%eax
c01006eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01006f1:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006f5:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006fc:	00 
c01006fd:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0100700:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100704:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100707:	89 44 24 04          	mov    %eax,0x4(%esp)
c010070b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070e:	89 04 24             	mov    %eax,(%esp)
c0100711:	e8 ef fc ff ff       	call   c0100405 <stab_binsearch>
    if (lfile == 0)
c0100716:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100719:	85 c0                	test   %eax,%eax
c010071b:	75 0a                	jne    c0100727 <debuginfo_eip+0x1cc>
        return -1;
c010071d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100722:	e9 67 02 00 00       	jmp    c010098e <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100727:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010072a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010072d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100730:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100733:	8b 45 08             	mov    0x8(%ebp),%eax
c0100736:	89 44 24 10          	mov    %eax,0x10(%esp)
c010073a:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100741:	00 
c0100742:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100745:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100749:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010074c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100750:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100753:	89 04 24             	mov    %eax,(%esp)
c0100756:	e8 aa fc ff ff       	call   c0100405 <stab_binsearch>

    if (lfun <= rfun) {
c010075b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010075e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100761:	39 c2                	cmp    %eax,%edx
c0100763:	7f 7c                	jg     c01007e1 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100765:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100768:	89 c2                	mov    %eax,%edx
c010076a:	89 d0                	mov    %edx,%eax
c010076c:	01 c0                	add    %eax,%eax
c010076e:	01 d0                	add    %edx,%eax
c0100770:	c1 e0 02             	shl    $0x2,%eax
c0100773:	89 c2                	mov    %eax,%edx
c0100775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100778:	01 d0                	add    %edx,%eax
c010077a:	8b 10                	mov    (%eax),%edx
c010077c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010077f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100782:	29 c1                	sub    %eax,%ecx
c0100784:	89 c8                	mov    %ecx,%eax
c0100786:	39 c2                	cmp    %eax,%edx
c0100788:	73 22                	jae    c01007ac <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010078a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010078d:	89 c2                	mov    %eax,%edx
c010078f:	89 d0                	mov    %edx,%eax
c0100791:	01 c0                	add    %eax,%eax
c0100793:	01 d0                	add    %edx,%eax
c0100795:	c1 e0 02             	shl    $0x2,%eax
c0100798:	89 c2                	mov    %eax,%edx
c010079a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010079d:	01 d0                	add    %edx,%eax
c010079f:	8b 10                	mov    (%eax),%edx
c01007a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01007a4:	01 c2                	add    %eax,%edx
c01007a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007a9:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007af:	89 c2                	mov    %eax,%edx
c01007b1:	89 d0                	mov    %edx,%eax
c01007b3:	01 c0                	add    %eax,%eax
c01007b5:	01 d0                	add    %edx,%eax
c01007b7:	c1 e0 02             	shl    $0x2,%eax
c01007ba:	89 c2                	mov    %eax,%edx
c01007bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bf:	01 d0                	add    %edx,%eax
c01007c1:	8b 50 08             	mov    0x8(%eax),%edx
c01007c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c7:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007cd:	8b 40 10             	mov    0x10(%eax),%eax
c01007d0:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007df:	eb 15                	jmp    c01007f6 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007e4:	8b 55 08             	mov    0x8(%ebp),%edx
c01007e7:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007f3:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007f9:	8b 40 08             	mov    0x8(%eax),%eax
c01007fc:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0100803:	00 
c0100804:	89 04 24             	mov    %eax,(%esp)
c0100807:	e8 99 cc 00 00       	call   c010d4a5 <strfind>
c010080c:	89 c2                	mov    %eax,%edx
c010080e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100811:	8b 40 08             	mov    0x8(%eax),%eax
c0100814:	29 c2                	sub    %eax,%edx
c0100816:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100819:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010081c:	8b 45 08             	mov    0x8(%ebp),%eax
c010081f:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100823:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010082a:	00 
c010082b:	8d 45 c8             	lea    -0x38(%ebp),%eax
c010082e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100832:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100835:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100839:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010083c:	89 04 24             	mov    %eax,(%esp)
c010083f:	e8 c1 fb ff ff       	call   c0100405 <stab_binsearch>
    if (lline <= rline) {
c0100844:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100847:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010084a:	39 c2                	cmp    %eax,%edx
c010084c:	7f 24                	jg     c0100872 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c010084e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100851:	89 c2                	mov    %eax,%edx
c0100853:	89 d0                	mov    %edx,%eax
c0100855:	01 c0                	add    %eax,%eax
c0100857:	01 d0                	add    %edx,%eax
c0100859:	c1 e0 02             	shl    $0x2,%eax
c010085c:	89 c2                	mov    %eax,%edx
c010085e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100861:	01 d0                	add    %edx,%eax
c0100863:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100867:	0f b7 d0             	movzwl %ax,%edx
c010086a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010086d:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100870:	eb 13                	jmp    c0100885 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100872:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100877:	e9 12 01 00 00       	jmp    c010098e <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010087c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010087f:	83 e8 01             	sub    $0x1,%eax
c0100882:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100885:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100888:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010088b:	39 c2                	cmp    %eax,%edx
c010088d:	7c 56                	jl     c01008e5 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c010088f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100892:	89 c2                	mov    %eax,%edx
c0100894:	89 d0                	mov    %edx,%eax
c0100896:	01 c0                	add    %eax,%eax
c0100898:	01 d0                	add    %edx,%eax
c010089a:	c1 e0 02             	shl    $0x2,%eax
c010089d:	89 c2                	mov    %eax,%edx
c010089f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a2:	01 d0                	add    %edx,%eax
c01008a4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008a8:	3c 84                	cmp    $0x84,%al
c01008aa:	74 39                	je     c01008e5 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008af:	89 c2                	mov    %eax,%edx
c01008b1:	89 d0                	mov    %edx,%eax
c01008b3:	01 c0                	add    %eax,%eax
c01008b5:	01 d0                	add    %edx,%eax
c01008b7:	c1 e0 02             	shl    $0x2,%eax
c01008ba:	89 c2                	mov    %eax,%edx
c01008bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008bf:	01 d0                	add    %edx,%eax
c01008c1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008c5:	3c 64                	cmp    $0x64,%al
c01008c7:	75 b3                	jne    c010087c <debuginfo_eip+0x321>
c01008c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008cc:	89 c2                	mov    %eax,%edx
c01008ce:	89 d0                	mov    %edx,%eax
c01008d0:	01 c0                	add    %eax,%eax
c01008d2:	01 d0                	add    %edx,%eax
c01008d4:	c1 e0 02             	shl    $0x2,%eax
c01008d7:	89 c2                	mov    %eax,%edx
c01008d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008dc:	01 d0                	add    %edx,%eax
c01008de:	8b 40 08             	mov    0x8(%eax),%eax
c01008e1:	85 c0                	test   %eax,%eax
c01008e3:	74 97                	je     c010087c <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008e5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008eb:	39 c2                	cmp    %eax,%edx
c01008ed:	7c 46                	jl     c0100935 <debuginfo_eip+0x3da>
c01008ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008f2:	89 c2                	mov    %eax,%edx
c01008f4:	89 d0                	mov    %edx,%eax
c01008f6:	01 c0                	add    %eax,%eax
c01008f8:	01 d0                	add    %edx,%eax
c01008fa:	c1 e0 02             	shl    $0x2,%eax
c01008fd:	89 c2                	mov    %eax,%edx
c01008ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100902:	01 d0                	add    %edx,%eax
c0100904:	8b 10                	mov    (%eax),%edx
c0100906:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100909:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010090c:	29 c1                	sub    %eax,%ecx
c010090e:	89 c8                	mov    %ecx,%eax
c0100910:	39 c2                	cmp    %eax,%edx
c0100912:	73 21                	jae    c0100935 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100914:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100917:	89 c2                	mov    %eax,%edx
c0100919:	89 d0                	mov    %edx,%eax
c010091b:	01 c0                	add    %eax,%eax
c010091d:	01 d0                	add    %edx,%eax
c010091f:	c1 e0 02             	shl    $0x2,%eax
c0100922:	89 c2                	mov    %eax,%edx
c0100924:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100927:	01 d0                	add    %edx,%eax
c0100929:	8b 10                	mov    (%eax),%edx
c010092b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010092e:	01 c2                	add    %eax,%edx
c0100930:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100933:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100935:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100938:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010093b:	39 c2                	cmp    %eax,%edx
c010093d:	7d 4a                	jge    c0100989 <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c010093f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100942:	83 c0 01             	add    $0x1,%eax
c0100945:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100948:	eb 18                	jmp    c0100962 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010094a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094d:	8b 40 14             	mov    0x14(%eax),%eax
c0100950:	8d 50 01             	lea    0x1(%eax),%edx
c0100953:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100956:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100959:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010095c:	83 c0 01             	add    $0x1,%eax
c010095f:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100962:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100965:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100968:	39 c2                	cmp    %eax,%edx
c010096a:	7d 1d                	jge    c0100989 <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096f:	89 c2                	mov    %eax,%edx
c0100971:	89 d0                	mov    %edx,%eax
c0100973:	01 c0                	add    %eax,%eax
c0100975:	01 d0                	add    %edx,%eax
c0100977:	c1 e0 02             	shl    $0x2,%eax
c010097a:	89 c2                	mov    %eax,%edx
c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097f:	01 d0                	add    %edx,%eax
c0100981:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100985:	3c a0                	cmp    $0xa0,%al
c0100987:	74 c1                	je     c010094a <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100989:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010098e:	c9                   	leave  
c010098f:	c3                   	ret    

c0100990 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100990:	55                   	push   %ebp
c0100991:	89 e5                	mov    %esp,%ebp
c0100993:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100996:	c7 04 24 76 d8 10 c0 	movl   $0xc010d876,(%esp)
c010099d:	e8 c2 f9 ff ff       	call   c0100364 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c01009a2:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
c01009a9:	c0 
c01009aa:	c7 04 24 8f d8 10 c0 	movl   $0xc010d88f,(%esp)
c01009b1:	e8 ae f9 ff ff       	call   c0100364 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009b6:	c7 44 24 04 ba d7 10 	movl   $0xc010d7ba,0x4(%esp)
c01009bd:	c0 
c01009be:	c7 04 24 a7 d8 10 c0 	movl   $0xc010d8a7,(%esp)
c01009c5:	e8 9a f9 ff ff       	call   c0100364 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009ca:	c7 44 24 04 00 50 1c 	movl   $0xc01c5000,0x4(%esp)
c01009d1:	c0 
c01009d2:	c7 04 24 bf d8 10 c0 	movl   $0xc010d8bf,(%esp)
c01009d9:	e8 86 f9 ff ff       	call   c0100364 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009de:	c7 44 24 04 c4 82 1c 	movl   $0xc01c82c4,0x4(%esp)
c01009e5:	c0 
c01009e6:	c7 04 24 d7 d8 10 c0 	movl   $0xc010d8d7,(%esp)
c01009ed:	e8 72 f9 ff ff       	call   c0100364 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009f2:	b8 c4 82 1c c0       	mov    $0xc01c82c4,%eax
c01009f7:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009fd:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100a02:	29 c2                	sub    %eax,%edx
c0100a04:	89 d0                	mov    %edx,%eax
c0100a06:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a0c:	85 c0                	test   %eax,%eax
c0100a0e:	0f 48 c2             	cmovs  %edx,%eax
c0100a11:	c1 f8 0a             	sar    $0xa,%eax
c0100a14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a18:	c7 04 24 f0 d8 10 c0 	movl   $0xc010d8f0,(%esp)
c0100a1f:	e8 40 f9 ff ff       	call   c0100364 <cprintf>
}
c0100a24:	c9                   	leave  
c0100a25:	c3                   	ret    

c0100a26 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a26:	55                   	push   %ebp
c0100a27:	89 e5                	mov    %esp,%ebp
c0100a29:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a2f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a39:	89 04 24             	mov    %eax,(%esp)
c0100a3c:	e8 1a fb ff ff       	call   c010055b <debuginfo_eip>
c0100a41:	85 c0                	test   %eax,%eax
c0100a43:	74 15                	je     c0100a5a <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a4c:	c7 04 24 1a d9 10 c0 	movl   $0xc010d91a,(%esp)
c0100a53:	e8 0c f9 ff ff       	call   c0100364 <cprintf>
c0100a58:	eb 6d                	jmp    c0100ac7 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a61:	eb 1c                	jmp    c0100a7f <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a69:	01 d0                	add    %edx,%eax
c0100a6b:	0f b6 00             	movzbl (%eax),%eax
c0100a6e:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a74:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a77:	01 ca                	add    %ecx,%edx
c0100a79:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a7b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a85:	7f dc                	jg     c0100a63 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a87:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a90:	01 d0                	add    %edx,%eax
c0100a92:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a98:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a9b:	89 d1                	mov    %edx,%ecx
c0100a9d:	29 c1                	sub    %eax,%ecx
c0100a9f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100aa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100aa5:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100aa9:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aaf:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100ab3:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100ab7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100abb:	c7 04 24 36 d9 10 c0 	movl   $0xc010d936,(%esp)
c0100ac2:	e8 9d f8 ff ff       	call   c0100364 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ac7:	c9                   	leave  
c0100ac8:	c3                   	ret    

c0100ac9 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100ac9:	55                   	push   %ebp
c0100aca:	89 e5                	mov    %esp,%ebp
c0100acc:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100acf:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ad2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ad5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100ad8:	c9                   	leave  
c0100ad9:	c3                   	ret    

c0100ada <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ada:	55                   	push   %ebp
c0100adb:	89 e5                	mov    %esp,%ebp
c0100add:	53                   	push   %ebx
c0100ade:	83 ec 44             	sub    $0x44,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ae1:	89 e8                	mov    %ebp,%eax
c0100ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100ae6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
c0100ae9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t eip = read_eip();
c0100aec:	e8 d8 ff ff ff       	call   c0100ac9 <read_eip>
c0100af1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i;
	for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++)
c0100af4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100afb:	e9 8d 00 00 00       	jmp    c0100b8d <print_stackframe+0xb3>
	{
		cprintf("ebp:0x%08x eip:0x%08x args:",ebp,eip);
c0100b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b03:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b0e:	c7 04 24 48 d9 10 c0 	movl   $0xc010d948,(%esp)
c0100b15:	e8 4a f8 ff ff       	call   c0100364 <cprintf>
		uint32_t *args = (uint32_t *)ebp + 2;
c0100b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b1d:	83 c0 08             	add    $0x8,%eax
c0100b20:	89 45 e8             	mov    %eax,-0x18(%ebp)
		cprintf("0x%08x 0x%08x 0x%08x 0x%08x",*args,*(args+1),*(args+2),*(args+3));
c0100b23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b26:	83 c0 0c             	add    $0xc,%eax
c0100b29:	8b 18                	mov    (%eax),%ebx
c0100b2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b2e:	83 c0 08             	add    $0x8,%eax
c0100b31:	8b 08                	mov    (%eax),%ecx
c0100b33:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b36:	83 c0 04             	add    $0x4,%eax
c0100b39:	8b 10                	mov    (%eax),%edx
c0100b3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b3e:	8b 00                	mov    (%eax),%eax
c0100b40:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0100b44:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b48:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b50:	c7 04 24 64 d9 10 c0 	movl   $0xc010d964,(%esp)
c0100b57:	e8 08 f8 ff ff       	call   c0100364 <cprintf>
		cprintf("\n");
c0100b5c:	c7 04 24 80 d9 10 c0 	movl   $0xc010d980,(%esp)
c0100b63:	e8 fc f7 ff ff       	call   c0100364 <cprintf>
		print_debuginfo(eip-1);
c0100b68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b6b:	83 e8 01             	sub    $0x1,%eax
c0100b6e:	89 04 24             	mov    %eax,(%esp)
c0100b71:	e8 b0 fe ff ff       	call   c0100a26 <print_debuginfo>
		eip = ((uint32_t *)ebp)[1];
c0100b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b79:	83 c0 04             	add    $0x4,%eax
c0100b7c:	8b 00                	mov    (%eax),%eax
c0100b7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ebp = ((uint32_t *)ebp)[0];
c0100b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b84:	8b 00                	mov    (%eax),%eax
c0100b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
	uint32_t eip = read_eip();
	int i;
	for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++)
c0100b89:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b91:	74 0a                	je     c0100b9d <print_stackframe+0xc3>
c0100b93:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b97:	0f 8e 63 ff ff ff    	jle    c0100b00 <print_stackframe+0x26>
		cprintf("\n");
		print_debuginfo(eip-1);
		eip = ((uint32_t *)ebp)[1];
		ebp = ((uint32_t *)ebp)[0];
	}
}
c0100b9d:	83 c4 44             	add    $0x44,%esp
c0100ba0:	5b                   	pop    %ebx
c0100ba1:	5d                   	pop    %ebp
c0100ba2:	c3                   	ret    

c0100ba3 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100ba3:	55                   	push   %ebp
c0100ba4:	89 e5                	mov    %esp,%ebp
c0100ba6:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100ba9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bb0:	eb 0c                	jmp    c0100bbe <parse+0x1b>
            *buf ++ = '\0';
c0100bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb5:	8d 50 01             	lea    0x1(%eax),%edx
c0100bb8:	89 55 08             	mov    %edx,0x8(%ebp)
c0100bbb:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bc1:	0f b6 00             	movzbl (%eax),%eax
c0100bc4:	84 c0                	test   %al,%al
c0100bc6:	74 1d                	je     c0100be5 <parse+0x42>
c0100bc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bcb:	0f b6 00             	movzbl (%eax),%eax
c0100bce:	0f be c0             	movsbl %al,%eax
c0100bd1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bd5:	c7 04 24 04 da 10 c0 	movl   $0xc010da04,(%esp)
c0100bdc:	e8 91 c8 00 00       	call   c010d472 <strchr>
c0100be1:	85 c0                	test   %eax,%eax
c0100be3:	75 cd                	jne    c0100bb2 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100be5:	8b 45 08             	mov    0x8(%ebp),%eax
c0100be8:	0f b6 00             	movzbl (%eax),%eax
c0100beb:	84 c0                	test   %al,%al
c0100bed:	75 02                	jne    c0100bf1 <parse+0x4e>
            break;
c0100bef:	eb 67                	jmp    c0100c58 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bf1:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bf5:	75 14                	jne    c0100c0b <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bf7:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100bfe:	00 
c0100bff:	c7 04 24 09 da 10 c0 	movl   $0xc010da09,(%esp)
c0100c06:	e8 59 f7 ff ff       	call   c0100364 <cprintf>
        }
        argv[argc ++] = buf;
c0100c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c0e:	8d 50 01             	lea    0x1(%eax),%edx
c0100c11:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c1e:	01 c2                	add    %eax,%edx
c0100c20:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c23:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c25:	eb 04                	jmp    c0100c2b <parse+0x88>
            buf ++;
c0100c27:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c2e:	0f b6 00             	movzbl (%eax),%eax
c0100c31:	84 c0                	test   %al,%al
c0100c33:	74 1d                	je     c0100c52 <parse+0xaf>
c0100c35:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c38:	0f b6 00             	movzbl (%eax),%eax
c0100c3b:	0f be c0             	movsbl %al,%eax
c0100c3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c42:	c7 04 24 04 da 10 c0 	movl   $0xc010da04,(%esp)
c0100c49:	e8 24 c8 00 00       	call   c010d472 <strchr>
c0100c4e:	85 c0                	test   %eax,%eax
c0100c50:	74 d5                	je     c0100c27 <parse+0x84>
            buf ++;
        }
    }
c0100c52:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c53:	e9 66 ff ff ff       	jmp    c0100bbe <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c5b:	c9                   	leave  
c0100c5c:	c3                   	ret    

c0100c5d <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c5d:	55                   	push   %ebp
c0100c5e:	89 e5                	mov    %esp,%ebp
c0100c60:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c63:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c6d:	89 04 24             	mov    %eax,(%esp)
c0100c70:	e8 2e ff ff ff       	call   c0100ba3 <parse>
c0100c75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c7c:	75 0a                	jne    c0100c88 <runcmd+0x2b>
        return 0;
c0100c7e:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c83:	e9 85 00 00 00       	jmp    c0100d0d <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c8f:	eb 5c                	jmp    c0100ced <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c91:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c97:	89 d0                	mov    %edx,%eax
c0100c99:	01 c0                	add    %eax,%eax
c0100c9b:	01 d0                	add    %edx,%eax
c0100c9d:	c1 e0 02             	shl    $0x2,%eax
c0100ca0:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100ca5:	8b 00                	mov    (%eax),%eax
c0100ca7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100cab:	89 04 24             	mov    %eax,(%esp)
c0100cae:	e8 20 c7 00 00       	call   c010d3d3 <strcmp>
c0100cb3:	85 c0                	test   %eax,%eax
c0100cb5:	75 32                	jne    c0100ce9 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100cb7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100cba:	89 d0                	mov    %edx,%eax
c0100cbc:	01 c0                	add    %eax,%eax
c0100cbe:	01 d0                	add    %edx,%eax
c0100cc0:	c1 e0 02             	shl    $0x2,%eax
c0100cc3:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100cc8:	8b 40 08             	mov    0x8(%eax),%eax
c0100ccb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cce:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cd1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cd4:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cd8:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cdb:	83 c2 04             	add    $0x4,%edx
c0100cde:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ce2:	89 0c 24             	mov    %ecx,(%esp)
c0100ce5:	ff d0                	call   *%eax
c0100ce7:	eb 24                	jmp    c0100d0d <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ce9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cf0:	83 f8 02             	cmp    $0x2,%eax
c0100cf3:	76 9c                	jbe    c0100c91 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cf5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cfc:	c7 04 24 27 da 10 c0 	movl   $0xc010da27,(%esp)
c0100d03:	e8 5c f6 ff ff       	call   c0100364 <cprintf>
    return 0;
c0100d08:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d0d:	c9                   	leave  
c0100d0e:	c3                   	ret    

c0100d0f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d0f:	55                   	push   %ebp
c0100d10:	89 e5                	mov    %esp,%ebp
c0100d12:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d15:	c7 04 24 40 da 10 c0 	movl   $0xc010da40,(%esp)
c0100d1c:	e8 43 f6 ff ff       	call   c0100364 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d21:	c7 04 24 68 da 10 c0 	movl   $0xc010da68,(%esp)
c0100d28:	e8 37 f6 ff ff       	call   c0100364 <cprintf>

    if (tf != NULL) {
c0100d2d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d31:	74 0b                	je     c0100d3e <kmonitor+0x2f>
        print_trapframe(tf);
c0100d33:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d36:	89 04 24             	mov    %eax,(%esp)
c0100d39:	e8 d9 16 00 00       	call   c0102417 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d3e:	c7 04 24 8d da 10 c0 	movl   $0xc010da8d,(%esp)
c0100d45:	e8 11 f5 ff ff       	call   c010025b <readline>
c0100d4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d51:	74 18                	je     c0100d6b <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d53:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d5d:	89 04 24             	mov    %eax,(%esp)
c0100d60:	e8 f8 fe ff ff       	call   c0100c5d <runcmd>
c0100d65:	85 c0                	test   %eax,%eax
c0100d67:	79 02                	jns    c0100d6b <kmonitor+0x5c>
                break;
c0100d69:	eb 02                	jmp    c0100d6d <kmonitor+0x5e>
            }
        }
    }
c0100d6b:	eb d1                	jmp    c0100d3e <kmonitor+0x2f>
}
c0100d6d:	c9                   	leave  
c0100d6e:	c3                   	ret    

c0100d6f <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d6f:	55                   	push   %ebp
c0100d70:	89 e5                	mov    %esp,%ebp
c0100d72:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d7c:	eb 3f                	jmp    c0100dbd <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d81:	89 d0                	mov    %edx,%eax
c0100d83:	01 c0                	add    %eax,%eax
c0100d85:	01 d0                	add    %edx,%eax
c0100d87:	c1 e0 02             	shl    $0x2,%eax
c0100d8a:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100d8f:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d92:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d95:	89 d0                	mov    %edx,%eax
c0100d97:	01 c0                	add    %eax,%eax
c0100d99:	01 d0                	add    %edx,%eax
c0100d9b:	c1 e0 02             	shl    $0x2,%eax
c0100d9e:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100da3:	8b 00                	mov    (%eax),%eax
c0100da5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100da9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dad:	c7 04 24 91 da 10 c0 	movl   $0xc010da91,(%esp)
c0100db4:	e8 ab f5 ff ff       	call   c0100364 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100db9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc0:	83 f8 02             	cmp    $0x2,%eax
c0100dc3:	76 b9                	jbe    c0100d7e <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dca:	c9                   	leave  
c0100dcb:	c3                   	ret    

c0100dcc <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100dcc:	55                   	push   %ebp
c0100dcd:	89 e5                	mov    %esp,%ebp
c0100dcf:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dd2:	e8 b9 fb ff ff       	call   c0100990 <print_kerninfo>
    return 0;
c0100dd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ddc:	c9                   	leave  
c0100ddd:	c3                   	ret    

c0100dde <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dde:	55                   	push   %ebp
c0100ddf:	89 e5                	mov    %esp,%ebp
c0100de1:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100de4:	e8 f1 fc ff ff       	call   c0100ada <print_stackframe>
    return 0;
c0100de9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dee:	c9                   	leave  
c0100def:	c3                   	ret    

c0100df0 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100df0:	55                   	push   %ebp
c0100df1:	89 e5                	mov    %esp,%ebp
c0100df3:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100df6:	a1 20 54 1c c0       	mov    0xc01c5420,%eax
c0100dfb:	85 c0                	test   %eax,%eax
c0100dfd:	74 02                	je     c0100e01 <__panic+0x11>
        goto panic_dead;
c0100dff:	eb 59                	jmp    c0100e5a <__panic+0x6a>
    }
    is_panic = 1;
c0100e01:	c7 05 20 54 1c c0 01 	movl   $0x1,0xc01c5420
c0100e08:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100e0b:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100e11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e14:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1f:	c7 04 24 9a da 10 c0 	movl   $0xc010da9a,(%esp)
c0100e26:	e8 39 f5 ff ff       	call   c0100364 <cprintf>
    vcprintf(fmt, ap);
c0100e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f4 f4 ff ff       	call   c0100331 <vcprintf>
    cprintf("\n");
c0100e3d:	c7 04 24 b6 da 10 c0 	movl   $0xc010dab6,(%esp)
c0100e44:	e8 1b f5 ff ff       	call   c0100364 <cprintf>
    
    cprintf("stack trackback:\n");
c0100e49:	c7 04 24 b8 da 10 c0 	movl   $0xc010dab8,(%esp)
c0100e50:	e8 0f f5 ff ff       	call   c0100364 <cprintf>
    print_stackframe();
c0100e55:	e8 80 fc ff ff       	call   c0100ada <print_stackframe>
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100e5a:	e8 fa 11 00 00       	call   c0102059 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e5f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e66:	e8 a4 fe ff ff       	call   c0100d0f <kmonitor>
    }
c0100e6b:	eb f2                	jmp    c0100e5f <__panic+0x6f>

c0100e6d <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e6d:	55                   	push   %ebp
c0100e6e:	89 e5                	mov    %esp,%ebp
c0100e70:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e73:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e7c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e87:	c7 04 24 ca da 10 c0 	movl   $0xc010daca,(%esp)
c0100e8e:	e8 d1 f4 ff ff       	call   c0100364 <cprintf>
    vcprintf(fmt, ap);
c0100e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e9d:	89 04 24             	mov    %eax,(%esp)
c0100ea0:	e8 8c f4 ff ff       	call   c0100331 <vcprintf>
    cprintf("\n");
c0100ea5:	c7 04 24 b6 da 10 c0 	movl   $0xc010dab6,(%esp)
c0100eac:	e8 b3 f4 ff ff       	call   c0100364 <cprintf>
    va_end(ap);
}
c0100eb1:	c9                   	leave  
c0100eb2:	c3                   	ret    

c0100eb3 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100eb3:	55                   	push   %ebp
c0100eb4:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100eb6:	a1 20 54 1c c0       	mov    0xc01c5420,%eax
}
c0100ebb:	5d                   	pop    %ebp
c0100ebc:	c3                   	ret    

c0100ebd <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100ebd:	55                   	push   %ebp
c0100ebe:	89 e5                	mov    %esp,%ebp
c0100ec0:	83 ec 28             	sub    $0x28,%esp
c0100ec3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100ec9:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ecd:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100ed1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100ed5:	ee                   	out    %al,(%dx)
c0100ed6:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100edc:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100ee0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ee4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ee8:	ee                   	out    %al,(%dx)
c0100ee9:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100eef:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ef3:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ef7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100efb:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100efc:	c7 05 d8 80 1c c0 00 	movl   $0x0,0xc01c80d8
c0100f03:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100f06:	c7 04 24 e8 da 10 c0 	movl   $0xc010dae8,(%esp)
c0100f0d:	e8 52 f4 ff ff       	call   c0100364 <cprintf>
    pic_enable(IRQ_TIMER);
c0100f12:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f19:	e8 99 11 00 00       	call   c01020b7 <pic_enable>
}
c0100f1e:	c9                   	leave  
c0100f1f:	c3                   	ret    

c0100f20 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100f20:	55                   	push   %ebp
c0100f21:	89 e5                	mov    %esp,%ebp
c0100f23:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100f26:	9c                   	pushf  
c0100f27:	58                   	pop    %eax
c0100f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f2e:	25 00 02 00 00       	and    $0x200,%eax
c0100f33:	85 c0                	test   %eax,%eax
c0100f35:	74 0c                	je     c0100f43 <__intr_save+0x23>
        intr_disable();
c0100f37:	e8 1d 11 00 00       	call   c0102059 <intr_disable>
        return 1;
c0100f3c:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f41:	eb 05                	jmp    c0100f48 <__intr_save+0x28>
    }
    return 0;
c0100f43:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f48:	c9                   	leave  
c0100f49:	c3                   	ret    

c0100f4a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f4a:	55                   	push   %ebp
c0100f4b:	89 e5                	mov    %esp,%ebp
c0100f4d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f54:	74 05                	je     c0100f5b <__intr_restore+0x11>
        intr_enable();
c0100f56:	e8 f8 10 00 00       	call   c0102053 <intr_enable>
    }
}
c0100f5b:	c9                   	leave  
c0100f5c:	c3                   	ret    

c0100f5d <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f5d:	55                   	push   %ebp
c0100f5e:	89 e5                	mov    %esp,%ebp
c0100f60:	83 ec 10             	sub    $0x10,%esp
c0100f63:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f69:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f6d:	89 c2                	mov    %eax,%edx
c0100f6f:	ec                   	in     (%dx),%al
c0100f70:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f73:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f79:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f7d:	89 c2                	mov    %eax,%edx
c0100f7f:	ec                   	in     (%dx),%al
c0100f80:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f83:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f89:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f8d:	89 c2                	mov    %eax,%edx
c0100f8f:	ec                   	in     (%dx),%al
c0100f90:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f93:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f99:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f9d:	89 c2                	mov    %eax,%edx
c0100f9f:	ec                   	in     (%dx),%al
c0100fa0:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100fa3:	c9                   	leave  
c0100fa4:	c3                   	ret    

c0100fa5 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100fa5:	55                   	push   %ebp
c0100fa6:	89 e5                	mov    %esp,%ebp
c0100fa8:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100fab:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100fb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fb5:	0f b7 00             	movzwl (%eax),%eax
c0100fb8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100fbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fbf:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100fc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fc7:	0f b7 00             	movzwl (%eax),%eax
c0100fca:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fce:	74 12                	je     c0100fe2 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fd0:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fd7:	66 c7 05 46 54 1c c0 	movw   $0x3b4,0xc01c5446
c0100fde:	b4 03 
c0100fe0:	eb 13                	jmp    c0100ff5 <cga_init+0x50>
    } else {
        *cp = was;
c0100fe2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fe5:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fe9:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fec:	66 c7 05 46 54 1c c0 	movw   $0x3d4,0xc01c5446
c0100ff3:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100ff5:	0f b7 05 46 54 1c c0 	movzwl 0xc01c5446,%eax
c0100ffc:	0f b7 c0             	movzwl %ax,%eax
c0100fff:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101003:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101007:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010100b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010100f:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101010:	0f b7 05 46 54 1c c0 	movzwl 0xc01c5446,%eax
c0101017:	83 c0 01             	add    $0x1,%eax
c010101a:	0f b7 c0             	movzwl %ax,%eax
c010101d:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101021:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101025:	89 c2                	mov    %eax,%edx
c0101027:	ec                   	in     (%dx),%al
c0101028:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c010102b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010102f:	0f b6 c0             	movzbl %al,%eax
c0101032:	c1 e0 08             	shl    $0x8,%eax
c0101035:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101038:	0f b7 05 46 54 1c c0 	movzwl 0xc01c5446,%eax
c010103f:	0f b7 c0             	movzwl %ax,%eax
c0101042:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101046:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010104a:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010104e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101052:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101053:	0f b7 05 46 54 1c c0 	movzwl 0xc01c5446,%eax
c010105a:	83 c0 01             	add    $0x1,%eax
c010105d:	0f b7 c0             	movzwl %ax,%eax
c0101060:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101064:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101068:	89 c2                	mov    %eax,%edx
c010106a:	ec                   	in     (%dx),%al
c010106b:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010106e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101072:	0f b6 c0             	movzbl %al,%eax
c0101075:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101078:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010107b:	a3 40 54 1c c0       	mov    %eax,0xc01c5440
    crt_pos = pos;
c0101080:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101083:	66 a3 44 54 1c c0    	mov    %ax,0xc01c5444
}
c0101089:	c9                   	leave  
c010108a:	c3                   	ret    

c010108b <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010108b:	55                   	push   %ebp
c010108c:	89 e5                	mov    %esp,%ebp
c010108e:	83 ec 48             	sub    $0x48,%esp
c0101091:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101097:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010109b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010109f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01010a3:	ee                   	out    %al,(%dx)
c01010a4:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01010aa:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01010ae:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010b2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010b6:	ee                   	out    %al,(%dx)
c01010b7:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01010bd:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01010c1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010c5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010c9:	ee                   	out    %al,(%dx)
c01010ca:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010d0:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010d4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010d8:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010dc:	ee                   	out    %al,(%dx)
c01010dd:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010e3:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010e7:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010eb:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010ef:	ee                   	out    %al,(%dx)
c01010f0:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010f6:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010fa:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010fe:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101102:	ee                   	out    %al,(%dx)
c0101103:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0101109:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c010110d:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101111:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101115:	ee                   	out    %al,(%dx)
c0101116:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010111c:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101120:	89 c2                	mov    %eax,%edx
c0101122:	ec                   	in     (%dx),%al
c0101123:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c0101126:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010112a:	3c ff                	cmp    $0xff,%al
c010112c:	0f 95 c0             	setne  %al
c010112f:	0f b6 c0             	movzbl %al,%eax
c0101132:	a3 48 54 1c c0       	mov    %eax,0xc01c5448
c0101137:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010113d:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101141:	89 c2                	mov    %eax,%edx
c0101143:	ec                   	in     (%dx),%al
c0101144:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101147:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010114d:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101151:	89 c2                	mov    %eax,%edx
c0101153:	ec                   	in     (%dx),%al
c0101154:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101157:	a1 48 54 1c c0       	mov    0xc01c5448,%eax
c010115c:	85 c0                	test   %eax,%eax
c010115e:	74 0c                	je     c010116c <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101160:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101167:	e8 4b 0f 00 00       	call   c01020b7 <pic_enable>
    }
}
c010116c:	c9                   	leave  
c010116d:	c3                   	ret    

c010116e <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010116e:	55                   	push   %ebp
c010116f:	89 e5                	mov    %esp,%ebp
c0101171:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101174:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010117b:	eb 09                	jmp    c0101186 <lpt_putc_sub+0x18>
        delay();
c010117d:	e8 db fd ff ff       	call   c0100f5d <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101182:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101186:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010118c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101190:	89 c2                	mov    %eax,%edx
c0101192:	ec                   	in     (%dx),%al
c0101193:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101196:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010119a:	84 c0                	test   %al,%al
c010119c:	78 09                	js     c01011a7 <lpt_putc_sub+0x39>
c010119e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01011a5:	7e d6                	jle    c010117d <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01011a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01011aa:	0f b6 c0             	movzbl %al,%eax
c01011ad:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c01011b3:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01011b6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01011ba:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01011be:	ee                   	out    %al,(%dx)
c01011bf:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c01011c5:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01011c9:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011cd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011d1:	ee                   	out    %al,(%dx)
c01011d2:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011d8:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011dc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011e0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011e4:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011e5:	c9                   	leave  
c01011e6:	c3                   	ret    

c01011e7 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011e7:	55                   	push   %ebp
c01011e8:	89 e5                	mov    %esp,%ebp
c01011ea:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011ed:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011f1:	74 0d                	je     c0101200 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01011f6:	89 04 24             	mov    %eax,(%esp)
c01011f9:	e8 70 ff ff ff       	call   c010116e <lpt_putc_sub>
c01011fe:	eb 24                	jmp    c0101224 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0101200:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101207:	e8 62 ff ff ff       	call   c010116e <lpt_putc_sub>
        lpt_putc_sub(' ');
c010120c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101213:	e8 56 ff ff ff       	call   c010116e <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101218:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010121f:	e8 4a ff ff ff       	call   c010116e <lpt_putc_sub>
    }
}
c0101224:	c9                   	leave  
c0101225:	c3                   	ret    

c0101226 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101226:	55                   	push   %ebp
c0101227:	89 e5                	mov    %esp,%ebp
c0101229:	53                   	push   %ebx
c010122a:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c010122d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101230:	b0 00                	mov    $0x0,%al
c0101232:	85 c0                	test   %eax,%eax
c0101234:	75 07                	jne    c010123d <cga_putc+0x17>
        c |= 0x0700;
c0101236:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010123d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101240:	0f b6 c0             	movzbl %al,%eax
c0101243:	83 f8 0a             	cmp    $0xa,%eax
c0101246:	74 4c                	je     c0101294 <cga_putc+0x6e>
c0101248:	83 f8 0d             	cmp    $0xd,%eax
c010124b:	74 57                	je     c01012a4 <cga_putc+0x7e>
c010124d:	83 f8 08             	cmp    $0x8,%eax
c0101250:	0f 85 88 00 00 00    	jne    c01012de <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101256:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c010125d:	66 85 c0             	test   %ax,%ax
c0101260:	74 30                	je     c0101292 <cga_putc+0x6c>
            crt_pos --;
c0101262:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c0101269:	83 e8 01             	sub    $0x1,%eax
c010126c:	66 a3 44 54 1c c0    	mov    %ax,0xc01c5444
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101272:	a1 40 54 1c c0       	mov    0xc01c5440,%eax
c0101277:	0f b7 15 44 54 1c c0 	movzwl 0xc01c5444,%edx
c010127e:	0f b7 d2             	movzwl %dx,%edx
c0101281:	01 d2                	add    %edx,%edx
c0101283:	01 c2                	add    %eax,%edx
c0101285:	8b 45 08             	mov    0x8(%ebp),%eax
c0101288:	b0 00                	mov    $0x0,%al
c010128a:	83 c8 20             	or     $0x20,%eax
c010128d:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101290:	eb 72                	jmp    c0101304 <cga_putc+0xde>
c0101292:	eb 70                	jmp    c0101304 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101294:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c010129b:	83 c0 50             	add    $0x50,%eax
c010129e:	66 a3 44 54 1c c0    	mov    %ax,0xc01c5444
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01012a4:	0f b7 1d 44 54 1c c0 	movzwl 0xc01c5444,%ebx
c01012ab:	0f b7 0d 44 54 1c c0 	movzwl 0xc01c5444,%ecx
c01012b2:	0f b7 c1             	movzwl %cx,%eax
c01012b5:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01012bb:	c1 e8 10             	shr    $0x10,%eax
c01012be:	89 c2                	mov    %eax,%edx
c01012c0:	66 c1 ea 06          	shr    $0x6,%dx
c01012c4:	89 d0                	mov    %edx,%eax
c01012c6:	c1 e0 02             	shl    $0x2,%eax
c01012c9:	01 d0                	add    %edx,%eax
c01012cb:	c1 e0 04             	shl    $0x4,%eax
c01012ce:	29 c1                	sub    %eax,%ecx
c01012d0:	89 ca                	mov    %ecx,%edx
c01012d2:	89 d8                	mov    %ebx,%eax
c01012d4:	29 d0                	sub    %edx,%eax
c01012d6:	66 a3 44 54 1c c0    	mov    %ax,0xc01c5444
        break;
c01012dc:	eb 26                	jmp    c0101304 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012de:	8b 0d 40 54 1c c0    	mov    0xc01c5440,%ecx
c01012e4:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c01012eb:	8d 50 01             	lea    0x1(%eax),%edx
c01012ee:	66 89 15 44 54 1c c0 	mov    %dx,0xc01c5444
c01012f5:	0f b7 c0             	movzwl %ax,%eax
c01012f8:	01 c0                	add    %eax,%eax
c01012fa:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0101300:	66 89 02             	mov    %ax,(%edx)
        break;
c0101303:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101304:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c010130b:	66 3d cf 07          	cmp    $0x7cf,%ax
c010130f:	76 5b                	jbe    c010136c <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101311:	a1 40 54 1c c0       	mov    0xc01c5440,%eax
c0101316:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c010131c:	a1 40 54 1c c0       	mov    0xc01c5440,%eax
c0101321:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101328:	00 
c0101329:	89 54 24 04          	mov    %edx,0x4(%esp)
c010132d:	89 04 24             	mov    %eax,(%esp)
c0101330:	e8 3b c3 00 00       	call   c010d670 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101335:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010133c:	eb 15                	jmp    c0101353 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010133e:	a1 40 54 1c c0       	mov    0xc01c5440,%eax
c0101343:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101346:	01 d2                	add    %edx,%edx
c0101348:	01 d0                	add    %edx,%eax
c010134a:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010134f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101353:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010135a:	7e e2                	jle    c010133e <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010135c:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c0101363:	83 e8 50             	sub    $0x50,%eax
c0101366:	66 a3 44 54 1c c0    	mov    %ax,0xc01c5444
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010136c:	0f b7 05 46 54 1c c0 	movzwl 0xc01c5446,%eax
c0101373:	0f b7 c0             	movzwl %ax,%eax
c0101376:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010137a:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010137e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101382:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101386:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101387:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c010138e:	66 c1 e8 08          	shr    $0x8,%ax
c0101392:	0f b6 c0             	movzbl %al,%eax
c0101395:	0f b7 15 46 54 1c c0 	movzwl 0xc01c5446,%edx
c010139c:	83 c2 01             	add    $0x1,%edx
c010139f:	0f b7 d2             	movzwl %dx,%edx
c01013a2:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01013a6:	88 45 ed             	mov    %al,-0x13(%ebp)
c01013a9:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01013ad:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01013b1:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c01013b2:	0f b7 05 46 54 1c c0 	movzwl 0xc01c5446,%eax
c01013b9:	0f b7 c0             	movzwl %ax,%eax
c01013bc:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01013c0:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c01013c4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013c8:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013cc:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013cd:	0f b7 05 44 54 1c c0 	movzwl 0xc01c5444,%eax
c01013d4:	0f b6 c0             	movzbl %al,%eax
c01013d7:	0f b7 15 46 54 1c c0 	movzwl 0xc01c5446,%edx
c01013de:	83 c2 01             	add    $0x1,%edx
c01013e1:	0f b7 d2             	movzwl %dx,%edx
c01013e4:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013e8:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013eb:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013ef:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013f3:	ee                   	out    %al,(%dx)
}
c01013f4:	83 c4 34             	add    $0x34,%esp
c01013f7:	5b                   	pop    %ebx
c01013f8:	5d                   	pop    %ebp
c01013f9:	c3                   	ret    

c01013fa <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013fa:	55                   	push   %ebp
c01013fb:	89 e5                	mov    %esp,%ebp
c01013fd:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101400:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101407:	eb 09                	jmp    c0101412 <serial_putc_sub+0x18>
        delay();
c0101409:	e8 4f fb ff ff       	call   c0100f5d <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010140e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101412:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101418:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010141c:	89 c2                	mov    %eax,%edx
c010141e:	ec                   	in     (%dx),%al
c010141f:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101422:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101426:	0f b6 c0             	movzbl %al,%eax
c0101429:	83 e0 20             	and    $0x20,%eax
c010142c:	85 c0                	test   %eax,%eax
c010142e:	75 09                	jne    c0101439 <serial_putc_sub+0x3f>
c0101430:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101437:	7e d0                	jle    c0101409 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101439:	8b 45 08             	mov    0x8(%ebp),%eax
c010143c:	0f b6 c0             	movzbl %al,%eax
c010143f:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101445:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101448:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010144c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101450:	ee                   	out    %al,(%dx)
}
c0101451:	c9                   	leave  
c0101452:	c3                   	ret    

c0101453 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101453:	55                   	push   %ebp
c0101454:	89 e5                	mov    %esp,%ebp
c0101456:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101459:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010145d:	74 0d                	je     c010146c <serial_putc+0x19>
        serial_putc_sub(c);
c010145f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101462:	89 04 24             	mov    %eax,(%esp)
c0101465:	e8 90 ff ff ff       	call   c01013fa <serial_putc_sub>
c010146a:	eb 24                	jmp    c0101490 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010146c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101473:	e8 82 ff ff ff       	call   c01013fa <serial_putc_sub>
        serial_putc_sub(' ');
c0101478:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010147f:	e8 76 ff ff ff       	call   c01013fa <serial_putc_sub>
        serial_putc_sub('\b');
c0101484:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010148b:	e8 6a ff ff ff       	call   c01013fa <serial_putc_sub>
    }
}
c0101490:	c9                   	leave  
c0101491:	c3                   	ret    

c0101492 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101492:	55                   	push   %ebp
c0101493:	89 e5                	mov    %esp,%ebp
c0101495:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101498:	eb 33                	jmp    c01014cd <cons_intr+0x3b>
        if (c != 0) {
c010149a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010149e:	74 2d                	je     c01014cd <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01014a0:	a1 64 56 1c c0       	mov    0xc01c5664,%eax
c01014a5:	8d 50 01             	lea    0x1(%eax),%edx
c01014a8:	89 15 64 56 1c c0    	mov    %edx,0xc01c5664
c01014ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01014b1:	88 90 60 54 1c c0    	mov    %dl,-0x3fe3aba0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c01014b7:	a1 64 56 1c c0       	mov    0xc01c5664,%eax
c01014bc:	3d 00 02 00 00       	cmp    $0x200,%eax
c01014c1:	75 0a                	jne    c01014cd <cons_intr+0x3b>
                cons.wpos = 0;
c01014c3:	c7 05 64 56 1c c0 00 	movl   $0x0,0xc01c5664
c01014ca:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01014d0:	ff d0                	call   *%eax
c01014d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014d5:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014d9:	75 bf                	jne    c010149a <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014db:	c9                   	leave  
c01014dc:	c3                   	ret    

c01014dd <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014dd:	55                   	push   %ebp
c01014de:	89 e5                	mov    %esp,%ebp
c01014e0:	83 ec 10             	sub    $0x10,%esp
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 01             	and    $0x1,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 07                	jne    c0101508 <serial_proc_data+0x2b>
        return -1;
c0101501:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101506:	eb 2a                	jmp    c0101532 <serial_proc_data+0x55>
c0101508:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010150e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101512:	89 c2                	mov    %eax,%edx
c0101514:	ec                   	in     (%dx),%al
c0101515:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c0101518:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c010151c:	0f b6 c0             	movzbl %al,%eax
c010151f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101522:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101526:	75 07                	jne    c010152f <serial_proc_data+0x52>
        c = '\b';
c0101528:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c010152f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101532:	c9                   	leave  
c0101533:	c3                   	ret    

c0101534 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101534:	55                   	push   %ebp
c0101535:	89 e5                	mov    %esp,%ebp
c0101537:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010153a:	a1 48 54 1c c0       	mov    0xc01c5448,%eax
c010153f:	85 c0                	test   %eax,%eax
c0101541:	74 0c                	je     c010154f <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101543:	c7 04 24 dd 14 10 c0 	movl   $0xc01014dd,(%esp)
c010154a:	e8 43 ff ff ff       	call   c0101492 <cons_intr>
    }
}
c010154f:	c9                   	leave  
c0101550:	c3                   	ret    

c0101551 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101551:	55                   	push   %ebp
c0101552:	89 e5                	mov    %esp,%ebp
c0101554:	83 ec 38             	sub    $0x38,%esp
c0101557:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010155d:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101561:	89 c2                	mov    %eax,%edx
c0101563:	ec                   	in     (%dx),%al
c0101564:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101567:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010156b:	0f b6 c0             	movzbl %al,%eax
c010156e:	83 e0 01             	and    $0x1,%eax
c0101571:	85 c0                	test   %eax,%eax
c0101573:	75 0a                	jne    c010157f <kbd_proc_data+0x2e>
        return -1;
c0101575:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010157a:	e9 59 01 00 00       	jmp    c01016d8 <kbd_proc_data+0x187>
c010157f:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101585:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101589:	89 c2                	mov    %eax,%edx
c010158b:	ec                   	in     (%dx),%al
c010158c:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010158f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101593:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101596:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010159a:	75 17                	jne    c01015b3 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010159c:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c01015a1:	83 c8 40             	or     $0x40,%eax
c01015a4:	a3 68 56 1c c0       	mov    %eax,0xc01c5668
        return 0;
c01015a9:	b8 00 00 00 00       	mov    $0x0,%eax
c01015ae:	e9 25 01 00 00       	jmp    c01016d8 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c01015b3:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b7:	84 c0                	test   %al,%al
c01015b9:	79 47                	jns    c0101602 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01015bb:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c01015c0:	83 e0 40             	and    $0x40,%eax
c01015c3:	85 c0                	test   %eax,%eax
c01015c5:	75 09                	jne    c01015d0 <kbd_proc_data+0x7f>
c01015c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015cb:	83 e0 7f             	and    $0x7f,%eax
c01015ce:	eb 04                	jmp    c01015d4 <kbd_proc_data+0x83>
c01015d0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015d4:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015d7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015db:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c01015e2:	83 c8 40             	or     $0x40,%eax
c01015e5:	0f b6 c0             	movzbl %al,%eax
c01015e8:	f7 d0                	not    %eax
c01015ea:	89 c2                	mov    %eax,%edx
c01015ec:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c01015f1:	21 d0                	and    %edx,%eax
c01015f3:	a3 68 56 1c c0       	mov    %eax,0xc01c5668
        return 0;
c01015f8:	b8 00 00 00 00       	mov    $0x0,%eax
c01015fd:	e9 d6 00 00 00       	jmp    c01016d8 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0101602:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c0101607:	83 e0 40             	and    $0x40,%eax
c010160a:	85 c0                	test   %eax,%eax
c010160c:	74 11                	je     c010161f <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c010160e:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101612:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c0101617:	83 e0 bf             	and    $0xffffffbf,%eax
c010161a:	a3 68 56 1c c0       	mov    %eax,0xc01c5668
    }

    shift |= shiftcode[data];
c010161f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101623:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c010162a:	0f b6 d0             	movzbl %al,%edx
c010162d:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c0101632:	09 d0                	or     %edx,%eax
c0101634:	a3 68 56 1c c0       	mov    %eax,0xc01c5668
    shift ^= togglecode[data];
c0101639:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010163d:	0f b6 80 40 11 13 c0 	movzbl -0x3feceec0(%eax),%eax
c0101644:	0f b6 d0             	movzbl %al,%edx
c0101647:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c010164c:	31 d0                	xor    %edx,%eax
c010164e:	a3 68 56 1c c0       	mov    %eax,0xc01c5668

    c = charcode[shift & (CTL | SHIFT)][data];
c0101653:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c0101658:	83 e0 03             	and    $0x3,%eax
c010165b:	8b 14 85 40 15 13 c0 	mov    -0x3feceac0(,%eax,4),%edx
c0101662:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101666:	01 d0                	add    %edx,%eax
c0101668:	0f b6 00             	movzbl (%eax),%eax
c010166b:	0f b6 c0             	movzbl %al,%eax
c010166e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101671:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c0101676:	83 e0 08             	and    $0x8,%eax
c0101679:	85 c0                	test   %eax,%eax
c010167b:	74 22                	je     c010169f <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010167d:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101681:	7e 0c                	jle    c010168f <kbd_proc_data+0x13e>
c0101683:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101687:	7f 06                	jg     c010168f <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101689:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010168d:	eb 10                	jmp    c010169f <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c010168f:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101693:	7e 0a                	jle    c010169f <kbd_proc_data+0x14e>
c0101695:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101699:	7f 04                	jg     c010169f <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010169b:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c010169f:	a1 68 56 1c c0       	mov    0xc01c5668,%eax
c01016a4:	f7 d0                	not    %eax
c01016a6:	83 e0 06             	and    $0x6,%eax
c01016a9:	85 c0                	test   %eax,%eax
c01016ab:	75 28                	jne    c01016d5 <kbd_proc_data+0x184>
c01016ad:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c01016b4:	75 1f                	jne    c01016d5 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c01016b6:	c7 04 24 03 db 10 c0 	movl   $0xc010db03,(%esp)
c01016bd:	e8 a2 ec ff ff       	call   c0100364 <cprintf>
c01016c2:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01016c8:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016cc:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016d0:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016d4:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016d8:	c9                   	leave  
c01016d9:	c3                   	ret    

c01016da <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016da:	55                   	push   %ebp
c01016db:	89 e5                	mov    %esp,%ebp
c01016dd:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016e0:	c7 04 24 51 15 10 c0 	movl   $0xc0101551,(%esp)
c01016e7:	e8 a6 fd ff ff       	call   c0101492 <cons_intr>
}
c01016ec:	c9                   	leave  
c01016ed:	c3                   	ret    

c01016ee <kbd_init>:

static void
kbd_init(void) {
c01016ee:	55                   	push   %ebp
c01016ef:	89 e5                	mov    %esp,%ebp
c01016f1:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016f4:	e8 e1 ff ff ff       	call   c01016da <kbd_intr>
    pic_enable(IRQ_KBD);
c01016f9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101700:	e8 b2 09 00 00       	call   c01020b7 <pic_enable>
}
c0101705:	c9                   	leave  
c0101706:	c3                   	ret    

c0101707 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101707:	55                   	push   %ebp
c0101708:	89 e5                	mov    %esp,%ebp
c010170a:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c010170d:	e8 93 f8 ff ff       	call   c0100fa5 <cga_init>
    serial_init();
c0101712:	e8 74 f9 ff ff       	call   c010108b <serial_init>
    kbd_init();
c0101717:	e8 d2 ff ff ff       	call   c01016ee <kbd_init>
    if (!serial_exists) {
c010171c:	a1 48 54 1c c0       	mov    0xc01c5448,%eax
c0101721:	85 c0                	test   %eax,%eax
c0101723:	75 0c                	jne    c0101731 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0101725:	c7 04 24 0f db 10 c0 	movl   $0xc010db0f,(%esp)
c010172c:	e8 33 ec ff ff       	call   c0100364 <cprintf>
    }
}
c0101731:	c9                   	leave  
c0101732:	c3                   	ret    

c0101733 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101733:	55                   	push   %ebp
c0101734:	89 e5                	mov    %esp,%ebp
c0101736:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101739:	e8 e2 f7 ff ff       	call   c0100f20 <__intr_save>
c010173e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101741:	8b 45 08             	mov    0x8(%ebp),%eax
c0101744:	89 04 24             	mov    %eax,(%esp)
c0101747:	e8 9b fa ff ff       	call   c01011e7 <lpt_putc>
        cga_putc(c);
c010174c:	8b 45 08             	mov    0x8(%ebp),%eax
c010174f:	89 04 24             	mov    %eax,(%esp)
c0101752:	e8 cf fa ff ff       	call   c0101226 <cga_putc>
        serial_putc(c);
c0101757:	8b 45 08             	mov    0x8(%ebp),%eax
c010175a:	89 04 24             	mov    %eax,(%esp)
c010175d:	e8 f1 fc ff ff       	call   c0101453 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101762:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101765:	89 04 24             	mov    %eax,(%esp)
c0101768:	e8 dd f7 ff ff       	call   c0100f4a <__intr_restore>
}
c010176d:	c9                   	leave  
c010176e:	c3                   	ret    

c010176f <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c010176f:	55                   	push   %ebp
c0101770:	89 e5                	mov    %esp,%ebp
c0101772:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101775:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010177c:	e8 9f f7 ff ff       	call   c0100f20 <__intr_save>
c0101781:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101784:	e8 ab fd ff ff       	call   c0101534 <serial_intr>
        kbd_intr();
c0101789:	e8 4c ff ff ff       	call   c01016da <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010178e:	8b 15 60 56 1c c0    	mov    0xc01c5660,%edx
c0101794:	a1 64 56 1c c0       	mov    0xc01c5664,%eax
c0101799:	39 c2                	cmp    %eax,%edx
c010179b:	74 31                	je     c01017ce <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010179d:	a1 60 56 1c c0       	mov    0xc01c5660,%eax
c01017a2:	8d 50 01             	lea    0x1(%eax),%edx
c01017a5:	89 15 60 56 1c c0    	mov    %edx,0xc01c5660
c01017ab:	0f b6 80 60 54 1c c0 	movzbl -0x3fe3aba0(%eax),%eax
c01017b2:	0f b6 c0             	movzbl %al,%eax
c01017b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c01017b8:	a1 60 56 1c c0       	mov    0xc01c5660,%eax
c01017bd:	3d 00 02 00 00       	cmp    $0x200,%eax
c01017c2:	75 0a                	jne    c01017ce <cons_getc+0x5f>
                cons.rpos = 0;
c01017c4:	c7 05 60 56 1c c0 00 	movl   $0x0,0xc01c5660
c01017cb:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017d1:	89 04 24             	mov    %eax,(%esp)
c01017d4:	e8 71 f7 ff ff       	call   c0100f4a <__intr_restore>
    return c;
c01017d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017dc:	c9                   	leave  
c01017dd:	c3                   	ret    

c01017de <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017de:	55                   	push   %ebp
c01017df:	89 e5                	mov    %esp,%ebp
c01017e1:	83 ec 14             	sub    $0x14,%esp
c01017e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01017e7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017eb:	90                   	nop
c01017ec:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017f0:	83 c0 07             	add    $0x7,%eax
c01017f3:	0f b7 c0             	movzwl %ax,%eax
c01017f6:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017fa:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017fe:	89 c2                	mov    %eax,%edx
c0101800:	ec                   	in     (%dx),%al
c0101801:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101804:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101808:	0f b6 c0             	movzbl %al,%eax
c010180b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010180e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101811:	25 80 00 00 00       	and    $0x80,%eax
c0101816:	85 c0                	test   %eax,%eax
c0101818:	75 d2                	jne    c01017ec <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c010181a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010181e:	74 11                	je     c0101831 <ide_wait_ready+0x53>
c0101820:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101823:	83 e0 21             	and    $0x21,%eax
c0101826:	85 c0                	test   %eax,%eax
c0101828:	74 07                	je     c0101831 <ide_wait_ready+0x53>
        return -1;
c010182a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010182f:	eb 05                	jmp    c0101836 <ide_wait_ready+0x58>
    }
    return 0;
c0101831:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101836:	c9                   	leave  
c0101837:	c3                   	ret    

c0101838 <ide_init>:

void
ide_init(void) {
c0101838:	55                   	push   %ebp
c0101839:	89 e5                	mov    %esp,%ebp
c010183b:	57                   	push   %edi
c010183c:	53                   	push   %ebx
c010183d:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101843:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101849:	e9 d6 02 00 00       	jmp    c0101b24 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010184e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101852:	c1 e0 03             	shl    $0x3,%eax
c0101855:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010185c:	29 c2                	sub    %eax,%edx
c010185e:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101864:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101867:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010186b:	66 d1 e8             	shr    %ax
c010186e:	0f b7 c0             	movzwl %ax,%eax
c0101871:	0f b7 04 85 30 db 10 	movzwl -0x3fef24d0(,%eax,4),%eax
c0101878:	c0 
c0101879:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010187d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101881:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101888:	00 
c0101889:	89 04 24             	mov    %eax,(%esp)
c010188c:	e8 4d ff ff ff       	call   c01017de <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101891:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101895:	83 e0 01             	and    $0x1,%eax
c0101898:	c1 e0 04             	shl    $0x4,%eax
c010189b:	83 c8 e0             	or     $0xffffffe0,%eax
c010189e:	0f b6 c0             	movzbl %al,%eax
c01018a1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01018a5:	83 c2 06             	add    $0x6,%edx
c01018a8:	0f b7 d2             	movzwl %dx,%edx
c01018ab:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c01018af:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01018b2:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01018b6:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01018ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018c6:	00 
c01018c7:	89 04 24             	mov    %eax,(%esp)
c01018ca:	e8 0f ff ff ff       	call   c01017de <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018d3:	83 c0 07             	add    $0x7,%eax
c01018d6:	0f b7 c0             	movzwl %ax,%eax
c01018d9:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018dd:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018e1:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018e5:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018e9:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018ea:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018f5:	00 
c01018f6:	89 04 24             	mov    %eax,(%esp)
c01018f9:	e8 e0 fe ff ff       	call   c01017de <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018fe:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101902:	83 c0 07             	add    $0x7,%eax
c0101905:	0f b7 c0             	movzwl %ax,%eax
c0101908:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010190c:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0101910:	89 c2                	mov    %eax,%edx
c0101912:	ec                   	in     (%dx),%al
c0101913:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0101916:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c010191a:	84 c0                	test   %al,%al
c010191c:	0f 84 f7 01 00 00    	je     c0101b19 <ide_init+0x2e1>
c0101922:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101926:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010192d:	00 
c010192e:	89 04 24             	mov    %eax,(%esp)
c0101931:	e8 a8 fe ff ff       	call   c01017de <ide_wait_ready>
c0101936:	85 c0                	test   %eax,%eax
c0101938:	0f 85 db 01 00 00    	jne    c0101b19 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c010193e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101942:	c1 e0 03             	shl    $0x3,%eax
c0101945:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010194c:	29 c2                	sub    %eax,%edx
c010194e:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101954:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101957:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010195b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010195e:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101964:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101967:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c010196e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101971:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101974:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101977:	89 cb                	mov    %ecx,%ebx
c0101979:	89 df                	mov    %ebx,%edi
c010197b:	89 c1                	mov    %eax,%ecx
c010197d:	fc                   	cld    
c010197e:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101980:	89 c8                	mov    %ecx,%eax
c0101982:	89 fb                	mov    %edi,%ebx
c0101984:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101987:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c010198a:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101990:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101996:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010199c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010199f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019a2:	25 00 00 00 04       	and    $0x4000000,%eax
c01019a7:	85 c0                	test   %eax,%eax
c01019a9:	74 0e                	je     c01019b9 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c01019ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019ae:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c01019b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01019b7:	eb 09                	jmp    c01019c2 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c01019b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019bc:	8b 40 78             	mov    0x78(%eax),%eax
c01019bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c01019c2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019c6:	c1 e0 03             	shl    $0x3,%eax
c01019c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019d0:	29 c2                	sub    %eax,%edx
c01019d2:	81 c2 80 56 1c c0    	add    $0xc01c5680,%edx
c01019d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019db:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019de:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019e2:	c1 e0 03             	shl    $0x3,%eax
c01019e5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019ec:	29 c2                	sub    %eax,%edx
c01019ee:	81 c2 80 56 1c c0    	add    $0xc01c5680,%edx
c01019f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019f7:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019fd:	83 c0 62             	add    $0x62,%eax
c0101a00:	0f b7 00             	movzwl (%eax),%eax
c0101a03:	0f b7 c0             	movzwl %ax,%eax
c0101a06:	25 00 02 00 00       	and    $0x200,%eax
c0101a0b:	85 c0                	test   %eax,%eax
c0101a0d:	75 24                	jne    c0101a33 <ide_init+0x1fb>
c0101a0f:	c7 44 24 0c 38 db 10 	movl   $0xc010db38,0xc(%esp)
c0101a16:	c0 
c0101a17:	c7 44 24 08 7b db 10 	movl   $0xc010db7b,0x8(%esp)
c0101a1e:	c0 
c0101a1f:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101a26:	00 
c0101a27:	c7 04 24 90 db 10 c0 	movl   $0xc010db90,(%esp)
c0101a2e:	e8 bd f3 ff ff       	call   c0100df0 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a33:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a37:	c1 e0 03             	shl    $0x3,%eax
c0101a3a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a41:	29 c2                	sub    %eax,%edx
c0101a43:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101a49:	83 c0 0c             	add    $0xc,%eax
c0101a4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a52:	83 c0 36             	add    $0x36,%eax
c0101a55:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a58:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a5f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a66:	eb 34                	jmp    c0101a9c <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a6b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a6e:	01 c2                	add    %eax,%edx
c0101a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a73:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a76:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a79:	01 c8                	add    %ecx,%eax
c0101a7b:	0f b6 00             	movzbl (%eax),%eax
c0101a7e:	88 02                	mov    %al,(%edx)
c0101a80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a83:	8d 50 01             	lea    0x1(%eax),%edx
c0101a86:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a89:	01 c2                	add    %eax,%edx
c0101a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a8e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a91:	01 c8                	add    %ecx,%eax
c0101a93:	0f b6 00             	movzbl (%eax),%eax
c0101a96:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a98:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a9f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101aa2:	72 c4                	jb     c0101a68 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101aa7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101aaa:	01 d0                	add    %edx,%eax
c0101aac:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101aaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101ab2:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101ab5:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101ab8:	85 c0                	test   %eax,%eax
c0101aba:	74 0f                	je     c0101acb <ide_init+0x293>
c0101abc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101abf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101ac2:	01 d0                	add    %edx,%eax
c0101ac4:	0f b6 00             	movzbl (%eax),%eax
c0101ac7:	3c 20                	cmp    $0x20,%al
c0101ac9:	74 d9                	je     c0101aa4 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101acb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101acf:	c1 e0 03             	shl    $0x3,%eax
c0101ad2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ad9:	29 c2                	sub    %eax,%edx
c0101adb:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101ae1:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101ae4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ae8:	c1 e0 03             	shl    $0x3,%eax
c0101aeb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101af2:	29 c2                	sub    %eax,%edx
c0101af4:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101afa:	8b 50 08             	mov    0x8(%eax),%edx
c0101afd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b01:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101b05:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b0d:	c7 04 24 a2 db 10 c0 	movl   $0xc010dba2,(%esp)
c0101b14:	e8 4b e8 ff ff       	call   c0100364 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101b19:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b1d:	83 c0 01             	add    $0x1,%eax
c0101b20:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101b24:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101b29:	0f 86 1f fd ff ff    	jbe    c010184e <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b2f:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b36:	e8 7c 05 00 00       	call   c01020b7 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b3b:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b42:	e8 70 05 00 00       	call   c01020b7 <pic_enable>
}
c0101b47:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b4d:	5b                   	pop    %ebx
c0101b4e:	5f                   	pop    %edi
c0101b4f:	5d                   	pop    %ebp
c0101b50:	c3                   	ret    

c0101b51 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b51:	55                   	push   %ebp
c0101b52:	89 e5                	mov    %esp,%ebp
c0101b54:	83 ec 04             	sub    $0x4,%esp
c0101b57:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b5a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b5e:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b63:	77 24                	ja     c0101b89 <ide_device_valid+0x38>
c0101b65:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b69:	c1 e0 03             	shl    $0x3,%eax
c0101b6c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b73:	29 c2                	sub    %eax,%edx
c0101b75:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101b7b:	0f b6 00             	movzbl (%eax),%eax
c0101b7e:	84 c0                	test   %al,%al
c0101b80:	74 07                	je     c0101b89 <ide_device_valid+0x38>
c0101b82:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b87:	eb 05                	jmp    c0101b8e <ide_device_valid+0x3d>
c0101b89:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b8e:	c9                   	leave  
c0101b8f:	c3                   	ret    

c0101b90 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b90:	55                   	push   %ebp
c0101b91:	89 e5                	mov    %esp,%ebp
c0101b93:	83 ec 08             	sub    $0x8,%esp
c0101b96:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b99:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b9d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101ba1:	89 04 24             	mov    %eax,(%esp)
c0101ba4:	e8 a8 ff ff ff       	call   c0101b51 <ide_device_valid>
c0101ba9:	85 c0                	test   %eax,%eax
c0101bab:	74 1b                	je     c0101bc8 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101bad:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101bb1:	c1 e0 03             	shl    $0x3,%eax
c0101bb4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bbb:	29 c2                	sub    %eax,%edx
c0101bbd:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101bc3:	8b 40 08             	mov    0x8(%eax),%eax
c0101bc6:	eb 05                	jmp    c0101bcd <ide_device_size+0x3d>
    }
    return 0;
c0101bc8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101bcd:	c9                   	leave  
c0101bce:	c3                   	ret    

c0101bcf <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101bcf:	55                   	push   %ebp
c0101bd0:	89 e5                	mov    %esp,%ebp
c0101bd2:	57                   	push   %edi
c0101bd3:	53                   	push   %ebx
c0101bd4:	83 ec 50             	sub    $0x50,%esp
c0101bd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bda:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bde:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101be5:	77 24                	ja     c0101c0b <ide_read_secs+0x3c>
c0101be7:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bec:	77 1d                	ja     c0101c0b <ide_read_secs+0x3c>
c0101bee:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bf2:	c1 e0 03             	shl    $0x3,%eax
c0101bf5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bfc:	29 c2                	sub    %eax,%edx
c0101bfe:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101c04:	0f b6 00             	movzbl (%eax),%eax
c0101c07:	84 c0                	test   %al,%al
c0101c09:	75 24                	jne    c0101c2f <ide_read_secs+0x60>
c0101c0b:	c7 44 24 0c c0 db 10 	movl   $0xc010dbc0,0xc(%esp)
c0101c12:	c0 
c0101c13:	c7 44 24 08 7b db 10 	movl   $0xc010db7b,0x8(%esp)
c0101c1a:	c0 
c0101c1b:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101c22:	00 
c0101c23:	c7 04 24 90 db 10 c0 	movl   $0xc010db90,(%esp)
c0101c2a:	e8 c1 f1 ff ff       	call   c0100df0 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c2f:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c36:	77 0f                	ja     c0101c47 <ide_read_secs+0x78>
c0101c38:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c3b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c3e:	01 d0                	add    %edx,%eax
c0101c40:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c45:	76 24                	jbe    c0101c6b <ide_read_secs+0x9c>
c0101c47:	c7 44 24 0c e8 db 10 	movl   $0xc010dbe8,0xc(%esp)
c0101c4e:	c0 
c0101c4f:	c7 44 24 08 7b db 10 	movl   $0xc010db7b,0x8(%esp)
c0101c56:	c0 
c0101c57:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c5e:	00 
c0101c5f:	c7 04 24 90 db 10 c0 	movl   $0xc010db90,(%esp)
c0101c66:	e8 85 f1 ff ff       	call   c0100df0 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c6b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c6f:	66 d1 e8             	shr    %ax
c0101c72:	0f b7 c0             	movzwl %ax,%eax
c0101c75:	0f b7 04 85 30 db 10 	movzwl -0x3fef24d0(,%eax,4),%eax
c0101c7c:	c0 
c0101c7d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c81:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c85:	66 d1 e8             	shr    %ax
c0101c88:	0f b7 c0             	movzwl %ax,%eax
c0101c8b:	0f b7 04 85 32 db 10 	movzwl -0x3fef24ce(,%eax,4),%eax
c0101c92:	c0 
c0101c93:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c9b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ca2:	00 
c0101ca3:	89 04 24             	mov    %eax,(%esp)
c0101ca6:	e8 33 fb ff ff       	call   c01017de <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101cab:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101caf:	83 c0 02             	add    $0x2,%eax
c0101cb2:	0f b7 c0             	movzwl %ax,%eax
c0101cb5:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101cb9:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101cbd:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101cc1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101cc5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101cc6:	8b 45 14             	mov    0x14(%ebp),%eax
c0101cc9:	0f b6 c0             	movzbl %al,%eax
c0101ccc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cd0:	83 c2 02             	add    $0x2,%edx
c0101cd3:	0f b7 d2             	movzwl %dx,%edx
c0101cd6:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cda:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cdd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ce1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ce5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101ce6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce9:	0f b6 c0             	movzbl %al,%eax
c0101cec:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cf0:	83 c2 03             	add    $0x3,%edx
c0101cf3:	0f b7 d2             	movzwl %dx,%edx
c0101cf6:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101cfa:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101cfd:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101d01:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101d05:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101d06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d09:	c1 e8 08             	shr    $0x8,%eax
c0101d0c:	0f b6 c0             	movzbl %al,%eax
c0101d0f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d13:	83 c2 04             	add    $0x4,%edx
c0101d16:	0f b7 d2             	movzwl %dx,%edx
c0101d19:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101d1d:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101d20:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101d24:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d28:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d2c:	c1 e8 10             	shr    $0x10,%eax
c0101d2f:	0f b6 c0             	movzbl %al,%eax
c0101d32:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d36:	83 c2 05             	add    $0x5,%edx
c0101d39:	0f b7 d2             	movzwl %dx,%edx
c0101d3c:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d40:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d43:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d47:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d4b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d4c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d50:	83 e0 01             	and    $0x1,%eax
c0101d53:	c1 e0 04             	shl    $0x4,%eax
c0101d56:	89 c2                	mov    %eax,%edx
c0101d58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d5b:	c1 e8 18             	shr    $0x18,%eax
c0101d5e:	83 e0 0f             	and    $0xf,%eax
c0101d61:	09 d0                	or     %edx,%eax
c0101d63:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d66:	0f b6 c0             	movzbl %al,%eax
c0101d69:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d6d:	83 c2 06             	add    $0x6,%edx
c0101d70:	0f b7 d2             	movzwl %dx,%edx
c0101d73:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d77:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d7a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d7e:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d82:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d83:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d87:	83 c0 07             	add    $0x7,%eax
c0101d8a:	0f b7 c0             	movzwl %ax,%eax
c0101d8d:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d91:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d95:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d99:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d9d:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101da5:	eb 5a                	jmp    c0101e01 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101da7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101dab:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101db2:	00 
c0101db3:	89 04 24             	mov    %eax,(%esp)
c0101db6:	e8 23 fa ff ff       	call   c01017de <ide_wait_ready>
c0101dbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101dbe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101dc2:	74 02                	je     c0101dc6 <ide_read_secs+0x1f7>
            goto out;
c0101dc4:	eb 41                	jmp    c0101e07 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101dc6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101dca:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101dcd:	8b 45 10             	mov    0x10(%ebp),%eax
c0101dd0:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dd3:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101dda:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ddd:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101de0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101de3:	89 cb                	mov    %ecx,%ebx
c0101de5:	89 df                	mov    %ebx,%edi
c0101de7:	89 c1                	mov    %eax,%ecx
c0101de9:	fc                   	cld    
c0101dea:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dec:	89 c8                	mov    %ecx,%eax
c0101dee:	89 fb                	mov    %edi,%ebx
c0101df0:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101df3:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101df6:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dfa:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101e01:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101e05:	75 a0                	jne    c0101da7 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101e0a:	83 c4 50             	add    $0x50,%esp
c0101e0d:	5b                   	pop    %ebx
c0101e0e:	5f                   	pop    %edi
c0101e0f:	5d                   	pop    %ebp
c0101e10:	c3                   	ret    

c0101e11 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101e11:	55                   	push   %ebp
c0101e12:	89 e5                	mov    %esp,%ebp
c0101e14:	56                   	push   %esi
c0101e15:	53                   	push   %ebx
c0101e16:	83 ec 50             	sub    $0x50,%esp
c0101e19:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e1c:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101e20:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e27:	77 24                	ja     c0101e4d <ide_write_secs+0x3c>
c0101e29:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e2e:	77 1d                	ja     c0101e4d <ide_write_secs+0x3c>
c0101e30:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e34:	c1 e0 03             	shl    $0x3,%eax
c0101e37:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e3e:	29 c2                	sub    %eax,%edx
c0101e40:	8d 82 80 56 1c c0    	lea    -0x3fe3a980(%edx),%eax
c0101e46:	0f b6 00             	movzbl (%eax),%eax
c0101e49:	84 c0                	test   %al,%al
c0101e4b:	75 24                	jne    c0101e71 <ide_write_secs+0x60>
c0101e4d:	c7 44 24 0c c0 db 10 	movl   $0xc010dbc0,0xc(%esp)
c0101e54:	c0 
c0101e55:	c7 44 24 08 7b db 10 	movl   $0xc010db7b,0x8(%esp)
c0101e5c:	c0 
c0101e5d:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e64:	00 
c0101e65:	c7 04 24 90 db 10 c0 	movl   $0xc010db90,(%esp)
c0101e6c:	e8 7f ef ff ff       	call   c0100df0 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e71:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e78:	77 0f                	ja     c0101e89 <ide_write_secs+0x78>
c0101e7a:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e7d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e80:	01 d0                	add    %edx,%eax
c0101e82:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e87:	76 24                	jbe    c0101ead <ide_write_secs+0x9c>
c0101e89:	c7 44 24 0c e8 db 10 	movl   $0xc010dbe8,0xc(%esp)
c0101e90:	c0 
c0101e91:	c7 44 24 08 7b db 10 	movl   $0xc010db7b,0x8(%esp)
c0101e98:	c0 
c0101e99:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101ea0:	00 
c0101ea1:	c7 04 24 90 db 10 c0 	movl   $0xc010db90,(%esp)
c0101ea8:	e8 43 ef ff ff       	call   c0100df0 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101ead:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101eb1:	66 d1 e8             	shr    %ax
c0101eb4:	0f b7 c0             	movzwl %ax,%eax
c0101eb7:	0f b7 04 85 30 db 10 	movzwl -0x3fef24d0(,%eax,4),%eax
c0101ebe:	c0 
c0101ebf:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101ec3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ec7:	66 d1 e8             	shr    %ax
c0101eca:	0f b7 c0             	movzwl %ax,%eax
c0101ecd:	0f b7 04 85 32 db 10 	movzwl -0x3fef24ce(,%eax,4),%eax
c0101ed4:	c0 
c0101ed5:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101ed9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101edd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ee4:	00 
c0101ee5:	89 04 24             	mov    %eax,(%esp)
c0101ee8:	e8 f1 f8 ff ff       	call   c01017de <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101eed:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101ef1:	83 c0 02             	add    $0x2,%eax
c0101ef4:	0f b7 c0             	movzwl %ax,%eax
c0101ef7:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101efb:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101eff:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101f03:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101f07:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101f08:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f0b:	0f b6 c0             	movzbl %al,%eax
c0101f0e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f12:	83 c2 02             	add    $0x2,%edx
c0101f15:	0f b7 d2             	movzwl %dx,%edx
c0101f18:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101f1c:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101f1f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101f23:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101f27:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f2b:	0f b6 c0             	movzbl %al,%eax
c0101f2e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f32:	83 c2 03             	add    $0x3,%edx
c0101f35:	0f b7 d2             	movzwl %dx,%edx
c0101f38:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f3c:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f3f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f43:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f47:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f4b:	c1 e8 08             	shr    $0x8,%eax
c0101f4e:	0f b6 c0             	movzbl %al,%eax
c0101f51:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f55:	83 c2 04             	add    $0x4,%edx
c0101f58:	0f b7 d2             	movzwl %dx,%edx
c0101f5b:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f5f:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f62:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f66:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f6a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f6e:	c1 e8 10             	shr    $0x10,%eax
c0101f71:	0f b6 c0             	movzbl %al,%eax
c0101f74:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f78:	83 c2 05             	add    $0x5,%edx
c0101f7b:	0f b7 d2             	movzwl %dx,%edx
c0101f7e:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f82:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f85:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f89:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f8d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f8e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f92:	83 e0 01             	and    $0x1,%eax
c0101f95:	c1 e0 04             	shl    $0x4,%eax
c0101f98:	89 c2                	mov    %eax,%edx
c0101f9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f9d:	c1 e8 18             	shr    $0x18,%eax
c0101fa0:	83 e0 0f             	and    $0xf,%eax
c0101fa3:	09 d0                	or     %edx,%eax
c0101fa5:	83 c8 e0             	or     $0xffffffe0,%eax
c0101fa8:	0f b6 c0             	movzbl %al,%eax
c0101fab:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101faf:	83 c2 06             	add    $0x6,%edx
c0101fb2:	0f b7 d2             	movzwl %dx,%edx
c0101fb5:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101fb9:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101fbc:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101fc0:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101fc4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101fc5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc9:	83 c0 07             	add    $0x7,%eax
c0101fcc:	0f b7 c0             	movzwl %ax,%eax
c0101fcf:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fd3:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fd7:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fdb:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fdf:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fe7:	eb 5a                	jmp    c0102043 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fe9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fed:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101ff4:	00 
c0101ff5:	89 04 24             	mov    %eax,(%esp)
c0101ff8:	e8 e1 f7 ff ff       	call   c01017de <ide_wait_ready>
c0101ffd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102000:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102004:	74 02                	je     c0102008 <ide_write_secs+0x1f7>
            goto out;
c0102006:	eb 41                	jmp    c0102049 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102008:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010200c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010200f:	8b 45 10             	mov    0x10(%ebp),%eax
c0102012:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0102015:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c010201c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010201f:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0102022:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0102025:	89 cb                	mov    %ecx,%ebx
c0102027:	89 de                	mov    %ebx,%esi
c0102029:	89 c1                	mov    %eax,%ecx
c010202b:	fc                   	cld    
c010202c:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c010202e:	89 c8                	mov    %ecx,%eax
c0102030:	89 f3                	mov    %esi,%ebx
c0102032:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102035:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102038:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010203c:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102043:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102047:	75 a0                	jne    c0101fe9 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102049:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010204c:	83 c4 50             	add    $0x50,%esp
c010204f:	5b                   	pop    %ebx
c0102050:	5e                   	pop    %esi
c0102051:	5d                   	pop    %ebp
c0102052:	c3                   	ret    

c0102053 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102053:	55                   	push   %ebp
c0102054:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102056:	fb                   	sti    
    sti();
}
c0102057:	5d                   	pop    %ebp
c0102058:	c3                   	ret    

c0102059 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102059:	55                   	push   %ebp
c010205a:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010205c:	fa                   	cli    
    cli();
}
c010205d:	5d                   	pop    %ebp
c010205e:	c3                   	ret    

c010205f <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c010205f:	55                   	push   %ebp
c0102060:	89 e5                	mov    %esp,%ebp
c0102062:	83 ec 14             	sub    $0x14,%esp
c0102065:	8b 45 08             	mov    0x8(%ebp),%eax
c0102068:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010206c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102070:	66 a3 50 15 13 c0    	mov    %ax,0xc0131550
    if (did_init) {
c0102076:	a1 60 57 1c c0       	mov    0xc01c5760,%eax
c010207b:	85 c0                	test   %eax,%eax
c010207d:	74 36                	je     c01020b5 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010207f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102083:	0f b6 c0             	movzbl %al,%eax
c0102086:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010208c:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010208f:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102093:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102097:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102098:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010209c:	66 c1 e8 08          	shr    $0x8,%ax
c01020a0:	0f b6 c0             	movzbl %al,%eax
c01020a3:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020a9:	88 45 f9             	mov    %al,-0x7(%ebp)
c01020ac:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020b0:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020b4:	ee                   	out    %al,(%dx)
    }
}
c01020b5:	c9                   	leave  
c01020b6:	c3                   	ret    

c01020b7 <pic_enable>:

void
pic_enable(unsigned int irq) {
c01020b7:	55                   	push   %ebp
c01020b8:	89 e5                	mov    %esp,%ebp
c01020ba:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c01020bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01020c0:	ba 01 00 00 00       	mov    $0x1,%edx
c01020c5:	89 c1                	mov    %eax,%ecx
c01020c7:	d3 e2                	shl    %cl,%edx
c01020c9:	89 d0                	mov    %edx,%eax
c01020cb:	f7 d0                	not    %eax
c01020cd:	89 c2                	mov    %eax,%edx
c01020cf:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c01020d6:	21 d0                	and    %edx,%eax
c01020d8:	0f b7 c0             	movzwl %ax,%eax
c01020db:	89 04 24             	mov    %eax,(%esp)
c01020de:	e8 7c ff ff ff       	call   c010205f <pic_setmask>
}
c01020e3:	c9                   	leave  
c01020e4:	c3                   	ret    

c01020e5 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020e5:	55                   	push   %ebp
c01020e6:	89 e5                	mov    %esp,%ebp
c01020e8:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020eb:	c7 05 60 57 1c c0 01 	movl   $0x1,0xc01c5760
c01020f2:	00 00 00 
c01020f5:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020fb:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020ff:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102103:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102107:	ee                   	out    %al,(%dx)
c0102108:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010210e:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c0102112:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102116:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010211a:	ee                   	out    %al,(%dx)
c010211b:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102121:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c0102125:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102129:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010212d:	ee                   	out    %al,(%dx)
c010212e:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102134:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102138:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010213c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102140:	ee                   	out    %al,(%dx)
c0102141:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102147:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010214b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010214f:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102153:	ee                   	out    %al,(%dx)
c0102154:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010215a:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010215e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102162:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102166:	ee                   	out    %al,(%dx)
c0102167:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010216d:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102171:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102175:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102179:	ee                   	out    %al,(%dx)
c010217a:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102180:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102184:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102188:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010218c:	ee                   	out    %al,(%dx)
c010218d:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102193:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102197:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010219b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010219f:	ee                   	out    %al,(%dx)
c01021a0:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c01021a6:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c01021aa:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01021ae:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01021b2:	ee                   	out    %al,(%dx)
c01021b3:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c01021b9:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c01021bd:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01021c1:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01021c5:	ee                   	out    %al,(%dx)
c01021c6:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021cc:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021d0:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021d4:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021df:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021e3:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021e7:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021f2:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021f6:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021fa:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021ff:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102206:	66 83 f8 ff          	cmp    $0xffff,%ax
c010220a:	74 12                	je     c010221e <pic_init+0x139>
        pic_setmask(irq_mask);
c010220c:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102213:	0f b7 c0             	movzwl %ax,%eax
c0102216:	89 04 24             	mov    %eax,(%esp)
c0102219:	e8 41 fe ff ff       	call   c010205f <pic_setmask>
    }
}
c010221e:	c9                   	leave  
c010221f:	c3                   	ret    

c0102220 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c0102220:	55                   	push   %ebp
c0102221:	89 e5                	mov    %esp,%ebp
c0102223:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0102226:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010222d:	00 
c010222e:	c7 04 24 40 dc 10 c0 	movl   $0xc010dc40,(%esp)
c0102235:	e8 2a e1 ff ff       	call   c0100364 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010223a:	c7 04 24 4a dc 10 c0 	movl   $0xc010dc4a,(%esp)
c0102241:	e8 1e e1 ff ff       	call   c0100364 <cprintf>
    panic("EOT: kernel seems ok.");
c0102246:	c7 44 24 08 58 dc 10 	movl   $0xc010dc58,0x8(%esp)
c010224d:	c0 
c010224e:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102255:	00 
c0102256:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c010225d:	e8 8e eb ff ff       	call   c0100df0 <__panic>

c0102262 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102262:	55                   	push   %ebp
c0102263:	89 e5                	mov    %esp,%ebp
c0102265:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
	int i;
	for(i = 0;i < sizeof(idt) / sizeof(struct gatedesc); i++){
c0102268:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010226f:	e9 c3 00 00 00       	jmp    c0102337 <idt_init+0xd5>
		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102274:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102277:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c010227e:	89 c2                	mov    %eax,%edx
c0102280:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102283:	66 89 14 c5 80 57 1c 	mov    %dx,-0x3fe3a880(,%eax,8)
c010228a:	c0 
c010228b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228e:	66 c7 04 c5 82 57 1c 	movw   $0x8,-0x3fe3a87e(,%eax,8)
c0102295:	c0 08 00 
c0102298:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229b:	0f b6 14 c5 84 57 1c 	movzbl -0x3fe3a87c(,%eax,8),%edx
c01022a2:	c0 
c01022a3:	83 e2 e0             	and    $0xffffffe0,%edx
c01022a6:	88 14 c5 84 57 1c c0 	mov    %dl,-0x3fe3a87c(,%eax,8)
c01022ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b0:	0f b6 14 c5 84 57 1c 	movzbl -0x3fe3a87c(,%eax,8),%edx
c01022b7:	c0 
c01022b8:	83 e2 1f             	and    $0x1f,%edx
c01022bb:	88 14 c5 84 57 1c c0 	mov    %dl,-0x3fe3a87c(,%eax,8)
c01022c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c5:	0f b6 14 c5 85 57 1c 	movzbl -0x3fe3a87b(,%eax,8),%edx
c01022cc:	c0 
c01022cd:	83 e2 f0             	and    $0xfffffff0,%edx
c01022d0:	83 ca 0e             	or     $0xe,%edx
c01022d3:	88 14 c5 85 57 1c c0 	mov    %dl,-0x3fe3a87b(,%eax,8)
c01022da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022dd:	0f b6 14 c5 85 57 1c 	movzbl -0x3fe3a87b(,%eax,8),%edx
c01022e4:	c0 
c01022e5:	83 e2 ef             	and    $0xffffffef,%edx
c01022e8:	88 14 c5 85 57 1c c0 	mov    %dl,-0x3fe3a87b(,%eax,8)
c01022ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f2:	0f b6 14 c5 85 57 1c 	movzbl -0x3fe3a87b(,%eax,8),%edx
c01022f9:	c0 
c01022fa:	83 e2 9f             	and    $0xffffff9f,%edx
c01022fd:	88 14 c5 85 57 1c c0 	mov    %dl,-0x3fe3a87b(,%eax,8)
c0102304:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102307:	0f b6 14 c5 85 57 1c 	movzbl -0x3fe3a87b(,%eax,8),%edx
c010230e:	c0 
c010230f:	83 ca 80             	or     $0xffffff80,%edx
c0102312:	88 14 c5 85 57 1c c0 	mov    %dl,-0x3fe3a87b(,%eax,8)
c0102319:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010231c:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c0102323:	c1 e8 10             	shr    $0x10,%eax
c0102326:	89 c2                	mov    %eax,%edx
c0102328:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010232b:	66 89 14 c5 86 57 1c 	mov    %dx,-0x3fe3a87a(,%eax,8)
c0102332:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
	int i;
	for(i = 0;i < sizeof(idt) / sizeof(struct gatedesc); i++){
c0102333:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102337:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010233a:	3d ff 00 00 00       	cmp    $0xff,%eax
c010233f:	0f 86 2f ff ff ff    	jbe    c0102274 <idt_init+0x12>
		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
	}
	//SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
	//SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3);
	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102345:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c010234a:	66 a3 80 5b 1c c0    	mov    %ax,0xc01c5b80
c0102350:	66 c7 05 82 5b 1c c0 	movw   $0x8,0xc01c5b82
c0102357:	08 00 
c0102359:	0f b6 05 84 5b 1c c0 	movzbl 0xc01c5b84,%eax
c0102360:	83 e0 e0             	and    $0xffffffe0,%eax
c0102363:	a2 84 5b 1c c0       	mov    %al,0xc01c5b84
c0102368:	0f b6 05 84 5b 1c c0 	movzbl 0xc01c5b84,%eax
c010236f:	83 e0 1f             	and    $0x1f,%eax
c0102372:	a2 84 5b 1c c0       	mov    %al,0xc01c5b84
c0102377:	0f b6 05 85 5b 1c c0 	movzbl 0xc01c5b85,%eax
c010237e:	83 c8 0f             	or     $0xf,%eax
c0102381:	a2 85 5b 1c c0       	mov    %al,0xc01c5b85
c0102386:	0f b6 05 85 5b 1c c0 	movzbl 0xc01c5b85,%eax
c010238d:	83 e0 ef             	and    $0xffffffef,%eax
c0102390:	a2 85 5b 1c c0       	mov    %al,0xc01c5b85
c0102395:	0f b6 05 85 5b 1c c0 	movzbl 0xc01c5b85,%eax
c010239c:	83 c8 60             	or     $0x60,%eax
c010239f:	a2 85 5b 1c c0       	mov    %al,0xc01c5b85
c01023a4:	0f b6 05 85 5b 1c c0 	movzbl 0xc01c5b85,%eax
c01023ab:	83 c8 80             	or     $0xffffff80,%eax
c01023ae:	a2 85 5b 1c c0       	mov    %al,0xc01c5b85
c01023b3:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c01023b8:	c1 e8 10             	shr    $0x10,%eax
c01023bb:	66 a3 86 5b 1c c0    	mov    %ax,0xc01c5b86
c01023c1:	c7 45 f8 60 15 13 c0 	movl   $0xc0131560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023cb:	0f 01 18             	lidtl  (%eax)
	lidt(&idt_pd);
}
c01023ce:	c9                   	leave  
c01023cf:	c3                   	ret    

c01023d0 <trapname>:

static const char *
trapname(int trapno) {
c01023d0:	55                   	push   %ebp
c01023d1:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d6:	83 f8 13             	cmp    $0x13,%eax
c01023d9:	77 0c                	ja     c01023e7 <trapname+0x17>
        return excnames[trapno];
c01023db:	8b 45 08             	mov    0x8(%ebp),%eax
c01023de:	8b 04 85 e0 e0 10 c0 	mov    -0x3fef1f20(,%eax,4),%eax
c01023e5:	eb 18                	jmp    c01023ff <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023e7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023eb:	7e 0d                	jle    c01023fa <trapname+0x2a>
c01023ed:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023f1:	7f 07                	jg     c01023fa <trapname+0x2a>
        return "Hardware Interrupt";
c01023f3:	b8 7f dc 10 c0       	mov    $0xc010dc7f,%eax
c01023f8:	eb 05                	jmp    c01023ff <trapname+0x2f>
    }
    return "(unknown trap)";
c01023fa:	b8 92 dc 10 c0       	mov    $0xc010dc92,%eax
}
c01023ff:	5d                   	pop    %ebp
c0102400:	c3                   	ret    

c0102401 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102401:	55                   	push   %ebp
c0102402:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102404:	8b 45 08             	mov    0x8(%ebp),%eax
c0102407:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010240b:	66 83 f8 08          	cmp    $0x8,%ax
c010240f:	0f 94 c0             	sete   %al
c0102412:	0f b6 c0             	movzbl %al,%eax
}
c0102415:	5d                   	pop    %ebp
c0102416:	c3                   	ret    

c0102417 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102417:	55                   	push   %ebp
c0102418:	89 e5                	mov    %esp,%ebp
c010241a:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c010241d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102420:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102424:	c7 04 24 d3 dc 10 c0 	movl   $0xc010dcd3,(%esp)
c010242b:	e8 34 df ff ff       	call   c0100364 <cprintf>
    print_regs(&tf->tf_regs);
c0102430:	8b 45 08             	mov    0x8(%ebp),%eax
c0102433:	89 04 24             	mov    %eax,(%esp)
c0102436:	e8 a1 01 00 00       	call   c01025dc <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010243b:	8b 45 08             	mov    0x8(%ebp),%eax
c010243e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102442:	0f b7 c0             	movzwl %ax,%eax
c0102445:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102449:	c7 04 24 e4 dc 10 c0 	movl   $0xc010dce4,(%esp)
c0102450:	e8 0f df ff ff       	call   c0100364 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102455:	8b 45 08             	mov    0x8(%ebp),%eax
c0102458:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010245c:	0f b7 c0             	movzwl %ax,%eax
c010245f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102463:	c7 04 24 f7 dc 10 c0 	movl   $0xc010dcf7,(%esp)
c010246a:	e8 f5 de ff ff       	call   c0100364 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010246f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102472:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102476:	0f b7 c0             	movzwl %ax,%eax
c0102479:	89 44 24 04          	mov    %eax,0x4(%esp)
c010247d:	c7 04 24 0a dd 10 c0 	movl   $0xc010dd0a,(%esp)
c0102484:	e8 db de ff ff       	call   c0100364 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102489:	8b 45 08             	mov    0x8(%ebp),%eax
c010248c:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102490:	0f b7 c0             	movzwl %ax,%eax
c0102493:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102497:	c7 04 24 1d dd 10 c0 	movl   $0xc010dd1d,(%esp)
c010249e:	e8 c1 de ff ff       	call   c0100364 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a6:	8b 40 30             	mov    0x30(%eax),%eax
c01024a9:	89 04 24             	mov    %eax,(%esp)
c01024ac:	e8 1f ff ff ff       	call   c01023d0 <trapname>
c01024b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01024b4:	8b 52 30             	mov    0x30(%edx),%edx
c01024b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01024bb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01024bf:	c7 04 24 30 dd 10 c0 	movl   $0xc010dd30,(%esp)
c01024c6:	e8 99 de ff ff       	call   c0100364 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ce:	8b 40 34             	mov    0x34(%eax),%eax
c01024d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024d5:	c7 04 24 42 dd 10 c0 	movl   $0xc010dd42,(%esp)
c01024dc:	e8 83 de ff ff       	call   c0100364 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e4:	8b 40 38             	mov    0x38(%eax),%eax
c01024e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024eb:	c7 04 24 51 dd 10 c0 	movl   $0xc010dd51,(%esp)
c01024f2:	e8 6d de ff ff       	call   c0100364 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fa:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024fe:	0f b7 c0             	movzwl %ax,%eax
c0102501:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102505:	c7 04 24 60 dd 10 c0 	movl   $0xc010dd60,(%esp)
c010250c:	e8 53 de ff ff       	call   c0100364 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102511:	8b 45 08             	mov    0x8(%ebp),%eax
c0102514:	8b 40 40             	mov    0x40(%eax),%eax
c0102517:	89 44 24 04          	mov    %eax,0x4(%esp)
c010251b:	c7 04 24 73 dd 10 c0 	movl   $0xc010dd73,(%esp)
c0102522:	e8 3d de ff ff       	call   c0100364 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102527:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010252e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102535:	eb 3e                	jmp    c0102575 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102537:	8b 45 08             	mov    0x8(%ebp),%eax
c010253a:	8b 50 40             	mov    0x40(%eax),%edx
c010253d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102540:	21 d0                	and    %edx,%eax
c0102542:	85 c0                	test   %eax,%eax
c0102544:	74 28                	je     c010256e <print_trapframe+0x157>
c0102546:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102549:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c0102550:	85 c0                	test   %eax,%eax
c0102552:	74 1a                	je     c010256e <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102554:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102557:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c010255e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102562:	c7 04 24 82 dd 10 c0 	movl   $0xc010dd82,(%esp)
c0102569:	e8 f6 dd ff ff       	call   c0100364 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010256e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102572:	d1 65 f0             	shll   -0x10(%ebp)
c0102575:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102578:	83 f8 17             	cmp    $0x17,%eax
c010257b:	76 ba                	jbe    c0102537 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010257d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102580:	8b 40 40             	mov    0x40(%eax),%eax
c0102583:	25 00 30 00 00       	and    $0x3000,%eax
c0102588:	c1 e8 0c             	shr    $0xc,%eax
c010258b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258f:	c7 04 24 86 dd 10 c0 	movl   $0xc010dd86,(%esp)
c0102596:	e8 c9 dd ff ff       	call   c0100364 <cprintf>

    if (!trap_in_kernel(tf)) {
c010259b:	8b 45 08             	mov    0x8(%ebp),%eax
c010259e:	89 04 24             	mov    %eax,(%esp)
c01025a1:	e8 5b fe ff ff       	call   c0102401 <trap_in_kernel>
c01025a6:	85 c0                	test   %eax,%eax
c01025a8:	75 30                	jne    c01025da <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 44             	mov    0x44(%eax),%eax
c01025b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b4:	c7 04 24 8f dd 10 c0 	movl   $0xc010dd8f,(%esp)
c01025bb:	e8 a4 dd ff ff       	call   c0100364 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c3:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025c7:	0f b7 c0             	movzwl %ax,%eax
c01025ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ce:	c7 04 24 9e dd 10 c0 	movl   $0xc010dd9e,(%esp)
c01025d5:	e8 8a dd ff ff       	call   c0100364 <cprintf>
    }
}
c01025da:	c9                   	leave  
c01025db:	c3                   	ret    

c01025dc <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025dc:	55                   	push   %ebp
c01025dd:	89 e5                	mov    %esp,%ebp
c01025df:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e5:	8b 00                	mov    (%eax),%eax
c01025e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025eb:	c7 04 24 b1 dd 10 c0 	movl   $0xc010ddb1,(%esp)
c01025f2:	e8 6d dd ff ff       	call   c0100364 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fa:	8b 40 04             	mov    0x4(%eax),%eax
c01025fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102601:	c7 04 24 c0 dd 10 c0 	movl   $0xc010ddc0,(%esp)
c0102608:	e8 57 dd ff ff       	call   c0100364 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c010260d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102610:	8b 40 08             	mov    0x8(%eax),%eax
c0102613:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102617:	c7 04 24 cf dd 10 c0 	movl   $0xc010ddcf,(%esp)
c010261e:	e8 41 dd ff ff       	call   c0100364 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102623:	8b 45 08             	mov    0x8(%ebp),%eax
c0102626:	8b 40 0c             	mov    0xc(%eax),%eax
c0102629:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262d:	c7 04 24 de dd 10 c0 	movl   $0xc010ddde,(%esp)
c0102634:	e8 2b dd ff ff       	call   c0100364 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 40 10             	mov    0x10(%eax),%eax
c010263f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102643:	c7 04 24 ed dd 10 c0 	movl   $0xc010dded,(%esp)
c010264a:	e8 15 dd ff ff       	call   c0100364 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c010264f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102652:	8b 40 14             	mov    0x14(%eax),%eax
c0102655:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102659:	c7 04 24 fc dd 10 c0 	movl   $0xc010ddfc,(%esp)
c0102660:	e8 ff dc ff ff       	call   c0100364 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102665:	8b 45 08             	mov    0x8(%ebp),%eax
c0102668:	8b 40 18             	mov    0x18(%eax),%eax
c010266b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010266f:	c7 04 24 0b de 10 c0 	movl   $0xc010de0b,(%esp)
c0102676:	e8 e9 dc ff ff       	call   c0100364 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010267b:	8b 45 08             	mov    0x8(%ebp),%eax
c010267e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102681:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102685:	c7 04 24 1a de 10 c0 	movl   $0xc010de1a,(%esp)
c010268c:	e8 d3 dc ff ff       	call   c0100364 <cprintf>
}
c0102691:	c9                   	leave  
c0102692:	c3                   	ret    

c0102693 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102693:	55                   	push   %ebp
c0102694:	89 e5                	mov    %esp,%ebp
c0102696:	53                   	push   %ebx
c0102697:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010269a:	8b 45 08             	mov    0x8(%ebp),%eax
c010269d:	8b 40 34             	mov    0x34(%eax),%eax
c01026a0:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026a3:	85 c0                	test   %eax,%eax
c01026a5:	74 07                	je     c01026ae <print_pgfault+0x1b>
c01026a7:	b9 29 de 10 c0       	mov    $0xc010de29,%ecx
c01026ac:	eb 05                	jmp    c01026b3 <print_pgfault+0x20>
c01026ae:	b9 3a de 10 c0       	mov    $0xc010de3a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b6:	8b 40 34             	mov    0x34(%eax),%eax
c01026b9:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026bc:	85 c0                	test   %eax,%eax
c01026be:	74 07                	je     c01026c7 <print_pgfault+0x34>
c01026c0:	ba 57 00 00 00       	mov    $0x57,%edx
c01026c5:	eb 05                	jmp    c01026cc <print_pgfault+0x39>
c01026c7:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026cf:	8b 40 34             	mov    0x34(%eax),%eax
c01026d2:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026d5:	85 c0                	test   %eax,%eax
c01026d7:	74 07                	je     c01026e0 <print_pgfault+0x4d>
c01026d9:	b8 55 00 00 00       	mov    $0x55,%eax
c01026de:	eb 05                	jmp    c01026e5 <print_pgfault+0x52>
c01026e0:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026e5:	0f 20 d3             	mov    %cr2,%ebx
c01026e8:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01026eb:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026ee:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026f2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026f6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026fa:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026fe:	c7 04 24 48 de 10 c0 	movl   $0xc010de48,(%esp)
c0102705:	e8 5a dc ff ff       	call   c0100364 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010270a:	83 c4 34             	add    $0x34,%esp
c010270d:	5b                   	pop    %ebx
c010270e:	5d                   	pop    %ebp
c010270f:	c3                   	ret    

c0102710 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102710:	55                   	push   %ebp
c0102711:	89 e5                	mov    %esp,%ebp
c0102713:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102716:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c010271b:	85 c0                	test   %eax,%eax
c010271d:	74 0b                	je     c010272a <pgfault_handler+0x1a>
            print_pgfault(tf);
c010271f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102722:	89 04 24             	mov    %eax,(%esp)
c0102725:	e8 69 ff ff ff       	call   c0102693 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c010272a:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c010272f:	85 c0                	test   %eax,%eax
c0102731:	74 3d                	je     c0102770 <pgfault_handler+0x60>
        assert(current == idleproc);
c0102733:	8b 15 48 60 1c c0    	mov    0xc01c6048,%edx
c0102739:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010273e:	39 c2                	cmp    %eax,%edx
c0102740:	74 24                	je     c0102766 <pgfault_handler+0x56>
c0102742:	c7 44 24 0c 6b de 10 	movl   $0xc010de6b,0xc(%esp)
c0102749:	c0 
c010274a:	c7 44 24 08 7f de 10 	movl   $0xc010de7f,0x8(%esp)
c0102751:	c0 
c0102752:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0102759:	00 
c010275a:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c0102761:	e8 8a e6 ff ff       	call   c0100df0 <__panic>
        mm = check_mm_struct;
c0102766:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c010276b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010276e:	eb 46                	jmp    c01027b6 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102770:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c0102775:	85 c0                	test   %eax,%eax
c0102777:	75 32                	jne    c01027ab <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102779:	8b 45 08             	mov    0x8(%ebp),%eax
c010277c:	89 04 24             	mov    %eax,(%esp)
c010277f:	e8 93 fc ff ff       	call   c0102417 <print_trapframe>
            print_pgfault(tf);
c0102784:	8b 45 08             	mov    0x8(%ebp),%eax
c0102787:	89 04 24             	mov    %eax,(%esp)
c010278a:	e8 04 ff ff ff       	call   c0102693 <print_pgfault>
            panic("unhandled page fault.\n");
c010278f:	c7 44 24 08 94 de 10 	movl   $0xc010de94,0x8(%esp)
c0102796:	c0 
c0102797:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c010279e:	00 
c010279f:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c01027a6:	e8 45 e6 ff ff       	call   c0100df0 <__panic>
        }
        mm = current->mm;
c01027ab:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c01027b0:	8b 40 18             	mov    0x18(%eax),%eax
c01027b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027b6:	0f 20 d0             	mov    %cr2,%eax
c01027b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027bf:	89 c2                	mov    %eax,%edx
c01027c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027c4:	8b 40 34             	mov    0x34(%eax),%eax
c01027c7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01027cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027d2:	89 04 24             	mov    %eax,(%esp)
c01027d5:	e8 18 66 00 00       	call   c0108df2 <do_pgfault>
}
c01027da:	c9                   	leave  
c01027db:	c3                   	ret    

c01027dc <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027dc:	55                   	push   %ebp
c01027dd:	89 e5                	mov    %esp,%ebp
c01027df:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01027e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01027e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ec:	8b 40 30             	mov    0x30(%eax),%eax
c01027ef:	83 f8 2f             	cmp    $0x2f,%eax
c01027f2:	77 38                	ja     c010282c <trap_dispatch+0x50>
c01027f4:	83 f8 2e             	cmp    $0x2e,%eax
c01027f7:	0f 83 da 01 00 00    	jae    c01029d7 <trap_dispatch+0x1fb>
c01027fd:	83 f8 20             	cmp    $0x20,%eax
c0102800:	0f 84 07 01 00 00    	je     c010290d <trap_dispatch+0x131>
c0102806:	83 f8 20             	cmp    $0x20,%eax
c0102809:	77 0a                	ja     c0102815 <trap_dispatch+0x39>
c010280b:	83 f8 0e             	cmp    $0xe,%eax
c010280e:	74 3e                	je     c010284e <trap_dispatch+0x72>
c0102810:	e9 7a 01 00 00       	jmp    c010298f <trap_dispatch+0x1b3>
c0102815:	83 f8 21             	cmp    $0x21,%eax
c0102818:	0f 84 2f 01 00 00    	je     c010294d <trap_dispatch+0x171>
c010281e:	83 f8 24             	cmp    $0x24,%eax
c0102821:	0f 84 fd 00 00 00    	je     c0102924 <trap_dispatch+0x148>
c0102827:	e9 63 01 00 00       	jmp    c010298f <trap_dispatch+0x1b3>
c010282c:	83 f8 78             	cmp    $0x78,%eax
c010282f:	0f 82 5a 01 00 00    	jb     c010298f <trap_dispatch+0x1b3>
c0102835:	83 f8 79             	cmp    $0x79,%eax
c0102838:	0f 86 35 01 00 00    	jbe    c0102973 <trap_dispatch+0x197>
c010283e:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102843:	0f 84 ba 00 00 00    	je     c0102903 <trap_dispatch+0x127>
c0102849:	e9 41 01 00 00       	jmp    c010298f <trap_dispatch+0x1b3>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010284e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102851:	89 04 24             	mov    %eax,(%esp)
c0102854:	e8 b7 fe ff ff       	call   c0102710 <pgfault_handler>
c0102859:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010285c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102860:	0f 84 98 00 00 00    	je     c01028fe <trap_dispatch+0x122>
            print_trapframe(tf);
c0102866:	8b 45 08             	mov    0x8(%ebp),%eax
c0102869:	89 04 24             	mov    %eax,(%esp)
c010286c:	e8 a6 fb ff ff       	call   c0102417 <print_trapframe>
            if (current == NULL) {
c0102871:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c0102876:	85 c0                	test   %eax,%eax
c0102878:	75 23                	jne    c010289d <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010287a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010287d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102881:	c7 44 24 08 ac de 10 	movl   $0xc010deac,0x8(%esp)
c0102888:	c0 
c0102889:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0102890:	00 
c0102891:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c0102898:	e8 53 e5 ff ff       	call   c0100df0 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010289d:	8b 45 08             	mov    0x8(%ebp),%eax
c01028a0:	89 04 24             	mov    %eax,(%esp)
c01028a3:	e8 59 fb ff ff       	call   c0102401 <trap_in_kernel>
c01028a8:	85 c0                	test   %eax,%eax
c01028aa:	74 23                	je     c01028cf <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028b3:	c7 44 24 08 cc de 10 	movl   $0xc010decc,0x8(%esp)
c01028ba:	c0 
c01028bb:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c01028c2:	00 
c01028c3:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c01028ca:	e8 21 e5 ff ff       	call   c0100df0 <__panic>
                }
                cprintf("killed by kernel.\n");
c01028cf:	c7 04 24 fa de 10 c0 	movl   $0xc010defa,(%esp)
c01028d6:	e8 89 da ff ff       	call   c0100364 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028e2:	c7 44 24 08 10 df 10 	movl   $0xc010df10,0x8(%esp)
c01028e9:	c0 
c01028ea:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
c01028f1:	00 
c01028f2:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c01028f9:	e8 f2 e4 ff ff       	call   c0100df0 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028fe:	e9 d5 00 00 00       	jmp    c01029d8 <trap_dispatch+0x1fc>
    case T_SYSCALL:
        syscall();
c0102903:	e8 b4 a1 00 00       	call   c010cabc <syscall>
        break;
c0102908:	e9 cb 00 00 00       	jmp    c01029d8 <trap_dispatch+0x1fc>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
	ticks++;	
c010290d:	a1 d8 80 1c c0       	mov    0xc01c80d8,%eax
c0102912:	83 c0 01             	add    $0x1,%eax
c0102915:	a3 d8 80 1c c0       	mov    %eax,0xc01c80d8
        //assert(current != NULL);
	//sched_class_proc_tick(current);
	run_timer_list();
c010291a:	e8 e6 9e 00 00       	call   c010c805 <run_timer_list>
        break;
c010291f:	e9 b4 00 00 00       	jmp    c01029d8 <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102924:	e8 46 ee ff ff       	call   c010176f <cons_getc>
c0102929:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010292c:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102930:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102934:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102938:	89 44 24 04          	mov    %eax,0x4(%esp)
c010293c:	c7 04 24 39 df 10 c0 	movl   $0xc010df39,(%esp)
c0102943:	e8 1c da ff ff       	call   c0100364 <cprintf>
        break;
c0102948:	e9 8b 00 00 00       	jmp    c01029d8 <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c010294d:	e8 1d ee ff ff       	call   c010176f <cons_getc>
c0102952:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102955:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102959:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c010295d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102961:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102965:	c7 04 24 4b df 10 c0 	movl   $0xc010df4b,(%esp)
c010296c:	e8 f3 d9 ff ff       	call   c0100364 <cprintf>
        break;
c0102971:	eb 65                	jmp    c01029d8 <trap_dispatch+0x1fc>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102973:	c7 44 24 08 5a df 10 	movl   $0xc010df5a,0x8(%esp)
c010297a:	c0 
c010297b:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0102982:	00 
c0102983:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c010298a:	e8 61 e4 ff ff       	call   c0100df0 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c010298f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102992:	89 04 24             	mov    %eax,(%esp)
c0102995:	e8 7d fa ff ff       	call   c0102417 <print_trapframe>
        if (current != NULL) {
c010299a:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010299f:	85 c0                	test   %eax,%eax
c01029a1:	74 18                	je     c01029bb <trap_dispatch+0x1df>
            cprintf("unhandled trap.\n");
c01029a3:	c7 04 24 6a df 10 c0 	movl   $0xc010df6a,(%esp)
c01029aa:	e8 b5 d9 ff ff       	call   c0100364 <cprintf>
            do_exit(-E_KILLED);
c01029af:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029b6:	e8 cf 85 00 00       	call   c010af8a <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029bb:	c7 44 24 08 7b df 10 	movl   $0xc010df7b,0x8(%esp)
c01029c2:	c0 
c01029c3:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01029ca:	00 
c01029cb:	c7 04 24 6e dc 10 c0 	movl   $0xc010dc6e,(%esp)
c01029d2:	e8 19 e4 ff ff       	call   c0100df0 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c01029d7:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c01029d8:	c9                   	leave  
c01029d9:	c3                   	ret    

c01029da <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01029da:	55                   	push   %ebp
c01029db:	89 e5                	mov    %esp,%ebp
c01029dd:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c01029e0:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c01029e5:	85 c0                	test   %eax,%eax
c01029e7:	75 0d                	jne    c01029f6 <trap+0x1c>
        trap_dispatch(tf);
c01029e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ec:	89 04 24             	mov    %eax,(%esp)
c01029ef:	e8 e8 fd ff ff       	call   c01027dc <trap_dispatch>
c01029f4:	eb 6c                	jmp    c0102a62 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01029f6:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c01029fb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01029fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a01:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c0102a06:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a09:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a0f:	89 04 24             	mov    %eax,(%esp)
c0102a12:	e8 ea f9 ff ff       	call   c0102401 <trap_in_kernel>
c0102a17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a1d:	89 04 24             	mov    %eax,(%esp)
c0102a20:	e8 b7 fd ff ff       	call   c01027dc <trap_dispatch>
    
        current->tf = otf;
c0102a25:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c0102a2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a2d:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a34:	75 2c                	jne    c0102a62 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a36:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c0102a3b:	8b 40 44             	mov    0x44(%eax),%eax
c0102a3e:	83 e0 01             	and    $0x1,%eax
c0102a41:	85 c0                	test   %eax,%eax
c0102a43:	74 0c                	je     c0102a51 <trap+0x77>
                do_exit(-E_KILLED);
c0102a45:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a4c:	e8 39 85 00 00       	call   c010af8a <do_exit>
            }
            if (current->need_resched) {
c0102a51:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c0102a56:	8b 40 10             	mov    0x10(%eax),%eax
c0102a59:	85 c0                	test   %eax,%eax
c0102a5b:	74 05                	je     c0102a62 <trap+0x88>
                schedule();
c0102a5d:	e8 16 9b 00 00       	call   c010c578 <schedule>
            }
        }
    }
}
c0102a62:	c9                   	leave  
c0102a63:	c3                   	ret    

c0102a64 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a64:	1e                   	push   %ds
    pushl %es
c0102a65:	06                   	push   %es
    pushl %fs
c0102a66:	0f a0                	push   %fs
    pushl %gs
c0102a68:	0f a8                	push   %gs
    pushal
c0102a6a:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a6b:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102a70:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102a72:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a74:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a75:	e8 60 ff ff ff       	call   c01029da <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a7a:	5c                   	pop    %esp

c0102a7b <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102a7b:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a7c:	0f a9                	pop    %gs
    popl %fs
c0102a7e:	0f a1                	pop    %fs
    popl %es
c0102a80:	07                   	pop    %es
    popl %ds
c0102a81:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a82:	83 c4 08             	add    $0x8,%esp
    iret
c0102a85:	cf                   	iret   

c0102a86 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a86:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a8a:	e9 ec ff ff ff       	jmp    c0102a7b <__trapret>

c0102a8f <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a8f:	6a 00                	push   $0x0
  pushl $0
c0102a91:	6a 00                	push   $0x0
  jmp __alltraps
c0102a93:	e9 cc ff ff ff       	jmp    c0102a64 <__alltraps>

c0102a98 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a98:	6a 00                	push   $0x0
  pushl $1
c0102a9a:	6a 01                	push   $0x1
  jmp __alltraps
c0102a9c:	e9 c3 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102aa1 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102aa1:	6a 00                	push   $0x0
  pushl $2
c0102aa3:	6a 02                	push   $0x2
  jmp __alltraps
c0102aa5:	e9 ba ff ff ff       	jmp    c0102a64 <__alltraps>

c0102aaa <vector3>:
.globl vector3
vector3:
  pushl $0
c0102aaa:	6a 00                	push   $0x0
  pushl $3
c0102aac:	6a 03                	push   $0x3
  jmp __alltraps
c0102aae:	e9 b1 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102ab3 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102ab3:	6a 00                	push   $0x0
  pushl $4
c0102ab5:	6a 04                	push   $0x4
  jmp __alltraps
c0102ab7:	e9 a8 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102abc <vector5>:
.globl vector5
vector5:
  pushl $0
c0102abc:	6a 00                	push   $0x0
  pushl $5
c0102abe:	6a 05                	push   $0x5
  jmp __alltraps
c0102ac0:	e9 9f ff ff ff       	jmp    c0102a64 <__alltraps>

c0102ac5 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102ac5:	6a 00                	push   $0x0
  pushl $6
c0102ac7:	6a 06                	push   $0x6
  jmp __alltraps
c0102ac9:	e9 96 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102ace <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ace:	6a 00                	push   $0x0
  pushl $7
c0102ad0:	6a 07                	push   $0x7
  jmp __alltraps
c0102ad2:	e9 8d ff ff ff       	jmp    c0102a64 <__alltraps>

c0102ad7 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102ad7:	6a 08                	push   $0x8
  jmp __alltraps
c0102ad9:	e9 86 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102ade <vector9>:
.globl vector9
vector9:
  pushl $0
c0102ade:	6a 00                	push   $0x0
  pushl $9
c0102ae0:	6a 09                	push   $0x9
  jmp __alltraps
c0102ae2:	e9 7d ff ff ff       	jmp    c0102a64 <__alltraps>

c0102ae7 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102ae7:	6a 0a                	push   $0xa
  jmp __alltraps
c0102ae9:	e9 76 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102aee <vector11>:
.globl vector11
vector11:
  pushl $11
c0102aee:	6a 0b                	push   $0xb
  jmp __alltraps
c0102af0:	e9 6f ff ff ff       	jmp    c0102a64 <__alltraps>

c0102af5 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102af5:	6a 0c                	push   $0xc
  jmp __alltraps
c0102af7:	e9 68 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102afc <vector13>:
.globl vector13
vector13:
  pushl $13
c0102afc:	6a 0d                	push   $0xd
  jmp __alltraps
c0102afe:	e9 61 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b03 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b03:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b05:	e9 5a ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b0a <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b0a:	6a 00                	push   $0x0
  pushl $15
c0102b0c:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b0e:	e9 51 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b13 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b13:	6a 00                	push   $0x0
  pushl $16
c0102b15:	6a 10                	push   $0x10
  jmp __alltraps
c0102b17:	e9 48 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b1c <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b1c:	6a 11                	push   $0x11
  jmp __alltraps
c0102b1e:	e9 41 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b23 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b23:	6a 00                	push   $0x0
  pushl $18
c0102b25:	6a 12                	push   $0x12
  jmp __alltraps
c0102b27:	e9 38 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b2c <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b2c:	6a 00                	push   $0x0
  pushl $19
c0102b2e:	6a 13                	push   $0x13
  jmp __alltraps
c0102b30:	e9 2f ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b35 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b35:	6a 00                	push   $0x0
  pushl $20
c0102b37:	6a 14                	push   $0x14
  jmp __alltraps
c0102b39:	e9 26 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b3e <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b3e:	6a 00                	push   $0x0
  pushl $21
c0102b40:	6a 15                	push   $0x15
  jmp __alltraps
c0102b42:	e9 1d ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b47 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b47:	6a 00                	push   $0x0
  pushl $22
c0102b49:	6a 16                	push   $0x16
  jmp __alltraps
c0102b4b:	e9 14 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b50 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b50:	6a 00                	push   $0x0
  pushl $23
c0102b52:	6a 17                	push   $0x17
  jmp __alltraps
c0102b54:	e9 0b ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b59 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b59:	6a 00                	push   $0x0
  pushl $24
c0102b5b:	6a 18                	push   $0x18
  jmp __alltraps
c0102b5d:	e9 02 ff ff ff       	jmp    c0102a64 <__alltraps>

c0102b62 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b62:	6a 00                	push   $0x0
  pushl $25
c0102b64:	6a 19                	push   $0x19
  jmp __alltraps
c0102b66:	e9 f9 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102b6b <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b6b:	6a 00                	push   $0x0
  pushl $26
c0102b6d:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b6f:	e9 f0 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102b74 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b74:	6a 00                	push   $0x0
  pushl $27
c0102b76:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b78:	e9 e7 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102b7d <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b7d:	6a 00                	push   $0x0
  pushl $28
c0102b7f:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b81:	e9 de fe ff ff       	jmp    c0102a64 <__alltraps>

c0102b86 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b86:	6a 00                	push   $0x0
  pushl $29
c0102b88:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b8a:	e9 d5 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102b8f <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b8f:	6a 00                	push   $0x0
  pushl $30
c0102b91:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b93:	e9 cc fe ff ff       	jmp    c0102a64 <__alltraps>

c0102b98 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b98:	6a 00                	push   $0x0
  pushl $31
c0102b9a:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b9c:	e9 c3 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102ba1 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102ba1:	6a 00                	push   $0x0
  pushl $32
c0102ba3:	6a 20                	push   $0x20
  jmp __alltraps
c0102ba5:	e9 ba fe ff ff       	jmp    c0102a64 <__alltraps>

c0102baa <vector33>:
.globl vector33
vector33:
  pushl $0
c0102baa:	6a 00                	push   $0x0
  pushl $33
c0102bac:	6a 21                	push   $0x21
  jmp __alltraps
c0102bae:	e9 b1 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bb3 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102bb3:	6a 00                	push   $0x0
  pushl $34
c0102bb5:	6a 22                	push   $0x22
  jmp __alltraps
c0102bb7:	e9 a8 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bbc <vector35>:
.globl vector35
vector35:
  pushl $0
c0102bbc:	6a 00                	push   $0x0
  pushl $35
c0102bbe:	6a 23                	push   $0x23
  jmp __alltraps
c0102bc0:	e9 9f fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bc5 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bc5:	6a 00                	push   $0x0
  pushl $36
c0102bc7:	6a 24                	push   $0x24
  jmp __alltraps
c0102bc9:	e9 96 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bce <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bce:	6a 00                	push   $0x0
  pushl $37
c0102bd0:	6a 25                	push   $0x25
  jmp __alltraps
c0102bd2:	e9 8d fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bd7 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bd7:	6a 00                	push   $0x0
  pushl $38
c0102bd9:	6a 26                	push   $0x26
  jmp __alltraps
c0102bdb:	e9 84 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102be0 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102be0:	6a 00                	push   $0x0
  pushl $39
c0102be2:	6a 27                	push   $0x27
  jmp __alltraps
c0102be4:	e9 7b fe ff ff       	jmp    c0102a64 <__alltraps>

c0102be9 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102be9:	6a 00                	push   $0x0
  pushl $40
c0102beb:	6a 28                	push   $0x28
  jmp __alltraps
c0102bed:	e9 72 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bf2 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102bf2:	6a 00                	push   $0x0
  pushl $41
c0102bf4:	6a 29                	push   $0x29
  jmp __alltraps
c0102bf6:	e9 69 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102bfb <vector42>:
.globl vector42
vector42:
  pushl $0
c0102bfb:	6a 00                	push   $0x0
  pushl $42
c0102bfd:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102bff:	e9 60 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c04 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c04:	6a 00                	push   $0x0
  pushl $43
c0102c06:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c08:	e9 57 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c0d <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c0d:	6a 00                	push   $0x0
  pushl $44
c0102c0f:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c11:	e9 4e fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c16 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c16:	6a 00                	push   $0x0
  pushl $45
c0102c18:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c1a:	e9 45 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c1f <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c1f:	6a 00                	push   $0x0
  pushl $46
c0102c21:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c23:	e9 3c fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c28 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c28:	6a 00                	push   $0x0
  pushl $47
c0102c2a:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c2c:	e9 33 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c31 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c31:	6a 00                	push   $0x0
  pushl $48
c0102c33:	6a 30                	push   $0x30
  jmp __alltraps
c0102c35:	e9 2a fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c3a <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c3a:	6a 00                	push   $0x0
  pushl $49
c0102c3c:	6a 31                	push   $0x31
  jmp __alltraps
c0102c3e:	e9 21 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c43 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c43:	6a 00                	push   $0x0
  pushl $50
c0102c45:	6a 32                	push   $0x32
  jmp __alltraps
c0102c47:	e9 18 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c4c <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c4c:	6a 00                	push   $0x0
  pushl $51
c0102c4e:	6a 33                	push   $0x33
  jmp __alltraps
c0102c50:	e9 0f fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c55 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c55:	6a 00                	push   $0x0
  pushl $52
c0102c57:	6a 34                	push   $0x34
  jmp __alltraps
c0102c59:	e9 06 fe ff ff       	jmp    c0102a64 <__alltraps>

c0102c5e <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c5e:	6a 00                	push   $0x0
  pushl $53
c0102c60:	6a 35                	push   $0x35
  jmp __alltraps
c0102c62:	e9 fd fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c67 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c67:	6a 00                	push   $0x0
  pushl $54
c0102c69:	6a 36                	push   $0x36
  jmp __alltraps
c0102c6b:	e9 f4 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c70 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c70:	6a 00                	push   $0x0
  pushl $55
c0102c72:	6a 37                	push   $0x37
  jmp __alltraps
c0102c74:	e9 eb fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c79 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c79:	6a 00                	push   $0x0
  pushl $56
c0102c7b:	6a 38                	push   $0x38
  jmp __alltraps
c0102c7d:	e9 e2 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c82 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c82:	6a 00                	push   $0x0
  pushl $57
c0102c84:	6a 39                	push   $0x39
  jmp __alltraps
c0102c86:	e9 d9 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c8b <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c8b:	6a 00                	push   $0x0
  pushl $58
c0102c8d:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c8f:	e9 d0 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c94 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c94:	6a 00                	push   $0x0
  pushl $59
c0102c96:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c98:	e9 c7 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102c9d <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c9d:	6a 00                	push   $0x0
  pushl $60
c0102c9f:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102ca1:	e9 be fd ff ff       	jmp    c0102a64 <__alltraps>

c0102ca6 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102ca6:	6a 00                	push   $0x0
  pushl $61
c0102ca8:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102caa:	e9 b5 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102caf <vector62>:
.globl vector62
vector62:
  pushl $0
c0102caf:	6a 00                	push   $0x0
  pushl $62
c0102cb1:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102cb3:	e9 ac fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cb8 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102cb8:	6a 00                	push   $0x0
  pushl $63
c0102cba:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102cbc:	e9 a3 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cc1 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cc1:	6a 00                	push   $0x0
  pushl $64
c0102cc3:	6a 40                	push   $0x40
  jmp __alltraps
c0102cc5:	e9 9a fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cca <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cca:	6a 00                	push   $0x0
  pushl $65
c0102ccc:	6a 41                	push   $0x41
  jmp __alltraps
c0102cce:	e9 91 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cd3 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cd3:	6a 00                	push   $0x0
  pushl $66
c0102cd5:	6a 42                	push   $0x42
  jmp __alltraps
c0102cd7:	e9 88 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cdc <vector67>:
.globl vector67
vector67:
  pushl $0
c0102cdc:	6a 00                	push   $0x0
  pushl $67
c0102cde:	6a 43                	push   $0x43
  jmp __alltraps
c0102ce0:	e9 7f fd ff ff       	jmp    c0102a64 <__alltraps>

c0102ce5 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102ce5:	6a 00                	push   $0x0
  pushl $68
c0102ce7:	6a 44                	push   $0x44
  jmp __alltraps
c0102ce9:	e9 76 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cee <vector69>:
.globl vector69
vector69:
  pushl $0
c0102cee:	6a 00                	push   $0x0
  pushl $69
c0102cf0:	6a 45                	push   $0x45
  jmp __alltraps
c0102cf2:	e9 6d fd ff ff       	jmp    c0102a64 <__alltraps>

c0102cf7 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102cf7:	6a 00                	push   $0x0
  pushl $70
c0102cf9:	6a 46                	push   $0x46
  jmp __alltraps
c0102cfb:	e9 64 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d00 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d00:	6a 00                	push   $0x0
  pushl $71
c0102d02:	6a 47                	push   $0x47
  jmp __alltraps
c0102d04:	e9 5b fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d09 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d09:	6a 00                	push   $0x0
  pushl $72
c0102d0b:	6a 48                	push   $0x48
  jmp __alltraps
c0102d0d:	e9 52 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d12 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d12:	6a 00                	push   $0x0
  pushl $73
c0102d14:	6a 49                	push   $0x49
  jmp __alltraps
c0102d16:	e9 49 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d1b <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d1b:	6a 00                	push   $0x0
  pushl $74
c0102d1d:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d1f:	e9 40 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d24 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d24:	6a 00                	push   $0x0
  pushl $75
c0102d26:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d28:	e9 37 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d2d <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d2d:	6a 00                	push   $0x0
  pushl $76
c0102d2f:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d31:	e9 2e fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d36 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d36:	6a 00                	push   $0x0
  pushl $77
c0102d38:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d3a:	e9 25 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d3f <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d3f:	6a 00                	push   $0x0
  pushl $78
c0102d41:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d43:	e9 1c fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d48 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d48:	6a 00                	push   $0x0
  pushl $79
c0102d4a:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d4c:	e9 13 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d51 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d51:	6a 00                	push   $0x0
  pushl $80
c0102d53:	6a 50                	push   $0x50
  jmp __alltraps
c0102d55:	e9 0a fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d5a <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d5a:	6a 00                	push   $0x0
  pushl $81
c0102d5c:	6a 51                	push   $0x51
  jmp __alltraps
c0102d5e:	e9 01 fd ff ff       	jmp    c0102a64 <__alltraps>

c0102d63 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d63:	6a 00                	push   $0x0
  pushl $82
c0102d65:	6a 52                	push   $0x52
  jmp __alltraps
c0102d67:	e9 f8 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102d6c <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d6c:	6a 00                	push   $0x0
  pushl $83
c0102d6e:	6a 53                	push   $0x53
  jmp __alltraps
c0102d70:	e9 ef fc ff ff       	jmp    c0102a64 <__alltraps>

c0102d75 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d75:	6a 00                	push   $0x0
  pushl $84
c0102d77:	6a 54                	push   $0x54
  jmp __alltraps
c0102d79:	e9 e6 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102d7e <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d7e:	6a 00                	push   $0x0
  pushl $85
c0102d80:	6a 55                	push   $0x55
  jmp __alltraps
c0102d82:	e9 dd fc ff ff       	jmp    c0102a64 <__alltraps>

c0102d87 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d87:	6a 00                	push   $0x0
  pushl $86
c0102d89:	6a 56                	push   $0x56
  jmp __alltraps
c0102d8b:	e9 d4 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102d90 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d90:	6a 00                	push   $0x0
  pushl $87
c0102d92:	6a 57                	push   $0x57
  jmp __alltraps
c0102d94:	e9 cb fc ff ff       	jmp    c0102a64 <__alltraps>

c0102d99 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d99:	6a 00                	push   $0x0
  pushl $88
c0102d9b:	6a 58                	push   $0x58
  jmp __alltraps
c0102d9d:	e9 c2 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102da2 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102da2:	6a 00                	push   $0x0
  pushl $89
c0102da4:	6a 59                	push   $0x59
  jmp __alltraps
c0102da6:	e9 b9 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dab <vector90>:
.globl vector90
vector90:
  pushl $0
c0102dab:	6a 00                	push   $0x0
  pushl $90
c0102dad:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102daf:	e9 b0 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102db4 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102db4:	6a 00                	push   $0x0
  pushl $91
c0102db6:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102db8:	e9 a7 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dbd <vector92>:
.globl vector92
vector92:
  pushl $0
c0102dbd:	6a 00                	push   $0x0
  pushl $92
c0102dbf:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102dc1:	e9 9e fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dc6 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102dc6:	6a 00                	push   $0x0
  pushl $93
c0102dc8:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102dca:	e9 95 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dcf <vector94>:
.globl vector94
vector94:
  pushl $0
c0102dcf:	6a 00                	push   $0x0
  pushl $94
c0102dd1:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dd3:	e9 8c fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dd8 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102dd8:	6a 00                	push   $0x0
  pushl $95
c0102dda:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102ddc:	e9 83 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102de1 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102de1:	6a 00                	push   $0x0
  pushl $96
c0102de3:	6a 60                	push   $0x60
  jmp __alltraps
c0102de5:	e9 7a fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dea <vector97>:
.globl vector97
vector97:
  pushl $0
c0102dea:	6a 00                	push   $0x0
  pushl $97
c0102dec:	6a 61                	push   $0x61
  jmp __alltraps
c0102dee:	e9 71 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102df3 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102df3:	6a 00                	push   $0x0
  pushl $98
c0102df5:	6a 62                	push   $0x62
  jmp __alltraps
c0102df7:	e9 68 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102dfc <vector99>:
.globl vector99
vector99:
  pushl $0
c0102dfc:	6a 00                	push   $0x0
  pushl $99
c0102dfe:	6a 63                	push   $0x63
  jmp __alltraps
c0102e00:	e9 5f fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e05 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e05:	6a 00                	push   $0x0
  pushl $100
c0102e07:	6a 64                	push   $0x64
  jmp __alltraps
c0102e09:	e9 56 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e0e <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e0e:	6a 00                	push   $0x0
  pushl $101
c0102e10:	6a 65                	push   $0x65
  jmp __alltraps
c0102e12:	e9 4d fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e17 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e17:	6a 00                	push   $0x0
  pushl $102
c0102e19:	6a 66                	push   $0x66
  jmp __alltraps
c0102e1b:	e9 44 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e20 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e20:	6a 00                	push   $0x0
  pushl $103
c0102e22:	6a 67                	push   $0x67
  jmp __alltraps
c0102e24:	e9 3b fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e29 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e29:	6a 00                	push   $0x0
  pushl $104
c0102e2b:	6a 68                	push   $0x68
  jmp __alltraps
c0102e2d:	e9 32 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e32 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e32:	6a 00                	push   $0x0
  pushl $105
c0102e34:	6a 69                	push   $0x69
  jmp __alltraps
c0102e36:	e9 29 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e3b <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e3b:	6a 00                	push   $0x0
  pushl $106
c0102e3d:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e3f:	e9 20 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e44 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e44:	6a 00                	push   $0x0
  pushl $107
c0102e46:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e48:	e9 17 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e4d <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e4d:	6a 00                	push   $0x0
  pushl $108
c0102e4f:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e51:	e9 0e fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e56 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e56:	6a 00                	push   $0x0
  pushl $109
c0102e58:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e5a:	e9 05 fc ff ff       	jmp    c0102a64 <__alltraps>

c0102e5f <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e5f:	6a 00                	push   $0x0
  pushl $110
c0102e61:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e63:	e9 fc fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e68 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e68:	6a 00                	push   $0x0
  pushl $111
c0102e6a:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e6c:	e9 f3 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e71 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e71:	6a 00                	push   $0x0
  pushl $112
c0102e73:	6a 70                	push   $0x70
  jmp __alltraps
c0102e75:	e9 ea fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e7a <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e7a:	6a 00                	push   $0x0
  pushl $113
c0102e7c:	6a 71                	push   $0x71
  jmp __alltraps
c0102e7e:	e9 e1 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e83 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e83:	6a 00                	push   $0x0
  pushl $114
c0102e85:	6a 72                	push   $0x72
  jmp __alltraps
c0102e87:	e9 d8 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e8c <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e8c:	6a 00                	push   $0x0
  pushl $115
c0102e8e:	6a 73                	push   $0x73
  jmp __alltraps
c0102e90:	e9 cf fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e95 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e95:	6a 00                	push   $0x0
  pushl $116
c0102e97:	6a 74                	push   $0x74
  jmp __alltraps
c0102e99:	e9 c6 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102e9e <vector117>:
.globl vector117
vector117:
  pushl $0
c0102e9e:	6a 00                	push   $0x0
  pushl $117
c0102ea0:	6a 75                	push   $0x75
  jmp __alltraps
c0102ea2:	e9 bd fb ff ff       	jmp    c0102a64 <__alltraps>

c0102ea7 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102ea7:	6a 00                	push   $0x0
  pushl $118
c0102ea9:	6a 76                	push   $0x76
  jmp __alltraps
c0102eab:	e9 b4 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102eb0 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102eb0:	6a 00                	push   $0x0
  pushl $119
c0102eb2:	6a 77                	push   $0x77
  jmp __alltraps
c0102eb4:	e9 ab fb ff ff       	jmp    c0102a64 <__alltraps>

c0102eb9 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102eb9:	6a 00                	push   $0x0
  pushl $120
c0102ebb:	6a 78                	push   $0x78
  jmp __alltraps
c0102ebd:	e9 a2 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102ec2 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102ec2:	6a 00                	push   $0x0
  pushl $121
c0102ec4:	6a 79                	push   $0x79
  jmp __alltraps
c0102ec6:	e9 99 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102ecb <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ecb:	6a 00                	push   $0x0
  pushl $122
c0102ecd:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102ecf:	e9 90 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102ed4 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102ed4:	6a 00                	push   $0x0
  pushl $123
c0102ed6:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102ed8:	e9 87 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102edd <vector124>:
.globl vector124
vector124:
  pushl $0
c0102edd:	6a 00                	push   $0x0
  pushl $124
c0102edf:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102ee1:	e9 7e fb ff ff       	jmp    c0102a64 <__alltraps>

c0102ee6 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102ee6:	6a 00                	push   $0x0
  pushl $125
c0102ee8:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102eea:	e9 75 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102eef <vector126>:
.globl vector126
vector126:
  pushl $0
c0102eef:	6a 00                	push   $0x0
  pushl $126
c0102ef1:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102ef3:	e9 6c fb ff ff       	jmp    c0102a64 <__alltraps>

c0102ef8 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102ef8:	6a 00                	push   $0x0
  pushl $127
c0102efa:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102efc:	e9 63 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f01 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f01:	6a 00                	push   $0x0
  pushl $128
c0102f03:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f08:	e9 57 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f0d <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f0d:	6a 00                	push   $0x0
  pushl $129
c0102f0f:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f14:	e9 4b fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f19 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f19:	6a 00                	push   $0x0
  pushl $130
c0102f1b:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f20:	e9 3f fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f25 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f25:	6a 00                	push   $0x0
  pushl $131
c0102f27:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f2c:	e9 33 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f31 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f31:	6a 00                	push   $0x0
  pushl $132
c0102f33:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f38:	e9 27 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f3d <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $133
c0102f3f:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f44:	e9 1b fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f49 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f49:	6a 00                	push   $0x0
  pushl $134
c0102f4b:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f50:	e9 0f fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f55 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f55:	6a 00                	push   $0x0
  pushl $135
c0102f57:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f5c:	e9 03 fb ff ff       	jmp    c0102a64 <__alltraps>

c0102f61 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $136
c0102f63:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f68:	e9 f7 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102f6d <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f6d:	6a 00                	push   $0x0
  pushl $137
c0102f6f:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f74:	e9 eb fa ff ff       	jmp    c0102a64 <__alltraps>

c0102f79 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f79:	6a 00                	push   $0x0
  pushl $138
c0102f7b:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f80:	e9 df fa ff ff       	jmp    c0102a64 <__alltraps>

c0102f85 <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $139
c0102f87:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f8c:	e9 d3 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102f91 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f91:	6a 00                	push   $0x0
  pushl $140
c0102f93:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f98:	e9 c7 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102f9d <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f9d:	6a 00                	push   $0x0
  pushl $141
c0102f9f:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102fa4:	e9 bb fa ff ff       	jmp    c0102a64 <__alltraps>

c0102fa9 <vector142>:
.globl vector142
vector142:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $142
c0102fab:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fb0:	e9 af fa ff ff       	jmp    c0102a64 <__alltraps>

c0102fb5 <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fb5:	6a 00                	push   $0x0
  pushl $143
c0102fb7:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fbc:	e9 a3 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102fc1 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fc1:	6a 00                	push   $0x0
  pushl $144
c0102fc3:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fc8:	e9 97 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102fcd <vector145>:
.globl vector145
vector145:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $145
c0102fcf:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fd4:	e9 8b fa ff ff       	jmp    c0102a64 <__alltraps>

c0102fd9 <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fd9:	6a 00                	push   $0x0
  pushl $146
c0102fdb:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102fe0:	e9 7f fa ff ff       	jmp    c0102a64 <__alltraps>

c0102fe5 <vector147>:
.globl vector147
vector147:
  pushl $0
c0102fe5:	6a 00                	push   $0x0
  pushl $147
c0102fe7:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102fec:	e9 73 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102ff1 <vector148>:
.globl vector148
vector148:
  pushl $0
c0102ff1:	6a 00                	push   $0x0
  pushl $148
c0102ff3:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102ff8:	e9 67 fa ff ff       	jmp    c0102a64 <__alltraps>

c0102ffd <vector149>:
.globl vector149
vector149:
  pushl $0
c0102ffd:	6a 00                	push   $0x0
  pushl $149
c0102fff:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103004:	e9 5b fa ff ff       	jmp    c0102a64 <__alltraps>

c0103009 <vector150>:
.globl vector150
vector150:
  pushl $0
c0103009:	6a 00                	push   $0x0
  pushl $150
c010300b:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103010:	e9 4f fa ff ff       	jmp    c0102a64 <__alltraps>

c0103015 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103015:	6a 00                	push   $0x0
  pushl $151
c0103017:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c010301c:	e9 43 fa ff ff       	jmp    c0102a64 <__alltraps>

c0103021 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103021:	6a 00                	push   $0x0
  pushl $152
c0103023:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103028:	e9 37 fa ff ff       	jmp    c0102a64 <__alltraps>

c010302d <vector153>:
.globl vector153
vector153:
  pushl $0
c010302d:	6a 00                	push   $0x0
  pushl $153
c010302f:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103034:	e9 2b fa ff ff       	jmp    c0102a64 <__alltraps>

c0103039 <vector154>:
.globl vector154
vector154:
  pushl $0
c0103039:	6a 00                	push   $0x0
  pushl $154
c010303b:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103040:	e9 1f fa ff ff       	jmp    c0102a64 <__alltraps>

c0103045 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103045:	6a 00                	push   $0x0
  pushl $155
c0103047:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010304c:	e9 13 fa ff ff       	jmp    c0102a64 <__alltraps>

c0103051 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103051:	6a 00                	push   $0x0
  pushl $156
c0103053:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103058:	e9 07 fa ff ff       	jmp    c0102a64 <__alltraps>

c010305d <vector157>:
.globl vector157
vector157:
  pushl $0
c010305d:	6a 00                	push   $0x0
  pushl $157
c010305f:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103064:	e9 fb f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103069 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103069:	6a 00                	push   $0x0
  pushl $158
c010306b:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103070:	e9 ef f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103075 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103075:	6a 00                	push   $0x0
  pushl $159
c0103077:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010307c:	e9 e3 f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103081 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103081:	6a 00                	push   $0x0
  pushl $160
c0103083:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103088:	e9 d7 f9 ff ff       	jmp    c0102a64 <__alltraps>

c010308d <vector161>:
.globl vector161
vector161:
  pushl $0
c010308d:	6a 00                	push   $0x0
  pushl $161
c010308f:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103094:	e9 cb f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103099 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103099:	6a 00                	push   $0x0
  pushl $162
c010309b:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01030a0:	e9 bf f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030a5 <vector163>:
.globl vector163
vector163:
  pushl $0
c01030a5:	6a 00                	push   $0x0
  pushl $163
c01030a7:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030ac:	e9 b3 f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030b1 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030b1:	6a 00                	push   $0x0
  pushl $164
c01030b3:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030b8:	e9 a7 f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030bd <vector165>:
.globl vector165
vector165:
  pushl $0
c01030bd:	6a 00                	push   $0x0
  pushl $165
c01030bf:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030c4:	e9 9b f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030c9 <vector166>:
.globl vector166
vector166:
  pushl $0
c01030c9:	6a 00                	push   $0x0
  pushl $166
c01030cb:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030d0:	e9 8f f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030d5 <vector167>:
.globl vector167
vector167:
  pushl $0
c01030d5:	6a 00                	push   $0x0
  pushl $167
c01030d7:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01030dc:	e9 83 f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030e1 <vector168>:
.globl vector168
vector168:
  pushl $0
c01030e1:	6a 00                	push   $0x0
  pushl $168
c01030e3:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01030e8:	e9 77 f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030ed <vector169>:
.globl vector169
vector169:
  pushl $0
c01030ed:	6a 00                	push   $0x0
  pushl $169
c01030ef:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030f4:	e9 6b f9 ff ff       	jmp    c0102a64 <__alltraps>

c01030f9 <vector170>:
.globl vector170
vector170:
  pushl $0
c01030f9:	6a 00                	push   $0x0
  pushl $170
c01030fb:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103100:	e9 5f f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103105 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103105:	6a 00                	push   $0x0
  pushl $171
c0103107:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c010310c:	e9 53 f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103111 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103111:	6a 00                	push   $0x0
  pushl $172
c0103113:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103118:	e9 47 f9 ff ff       	jmp    c0102a64 <__alltraps>

c010311d <vector173>:
.globl vector173
vector173:
  pushl $0
c010311d:	6a 00                	push   $0x0
  pushl $173
c010311f:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103124:	e9 3b f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103129 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103129:	6a 00                	push   $0x0
  pushl $174
c010312b:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103130:	e9 2f f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103135 <vector175>:
.globl vector175
vector175:
  pushl $0
c0103135:	6a 00                	push   $0x0
  pushl $175
c0103137:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c010313c:	e9 23 f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103141 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103141:	6a 00                	push   $0x0
  pushl $176
c0103143:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103148:	e9 17 f9 ff ff       	jmp    c0102a64 <__alltraps>

c010314d <vector177>:
.globl vector177
vector177:
  pushl $0
c010314d:	6a 00                	push   $0x0
  pushl $177
c010314f:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103154:	e9 0b f9 ff ff       	jmp    c0102a64 <__alltraps>

c0103159 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103159:	6a 00                	push   $0x0
  pushl $178
c010315b:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103160:	e9 ff f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103165 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103165:	6a 00                	push   $0x0
  pushl $179
c0103167:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010316c:	e9 f3 f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103171 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103171:	6a 00                	push   $0x0
  pushl $180
c0103173:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103178:	e9 e7 f8 ff ff       	jmp    c0102a64 <__alltraps>

c010317d <vector181>:
.globl vector181
vector181:
  pushl $0
c010317d:	6a 00                	push   $0x0
  pushl $181
c010317f:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103184:	e9 db f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103189 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103189:	6a 00                	push   $0x0
  pushl $182
c010318b:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103190:	e9 cf f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103195 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103195:	6a 00                	push   $0x0
  pushl $183
c0103197:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010319c:	e9 c3 f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031a1 <vector184>:
.globl vector184
vector184:
  pushl $0
c01031a1:	6a 00                	push   $0x0
  pushl $184
c01031a3:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01031a8:	e9 b7 f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031ad <vector185>:
.globl vector185
vector185:
  pushl $0
c01031ad:	6a 00                	push   $0x0
  pushl $185
c01031af:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031b4:	e9 ab f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031b9 <vector186>:
.globl vector186
vector186:
  pushl $0
c01031b9:	6a 00                	push   $0x0
  pushl $186
c01031bb:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031c0:	e9 9f f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031c5 <vector187>:
.globl vector187
vector187:
  pushl $0
c01031c5:	6a 00                	push   $0x0
  pushl $187
c01031c7:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031cc:	e9 93 f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031d1 <vector188>:
.globl vector188
vector188:
  pushl $0
c01031d1:	6a 00                	push   $0x0
  pushl $188
c01031d3:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031d8:	e9 87 f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031dd <vector189>:
.globl vector189
vector189:
  pushl $0
c01031dd:	6a 00                	push   $0x0
  pushl $189
c01031df:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01031e4:	e9 7b f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031e9 <vector190>:
.globl vector190
vector190:
  pushl $0
c01031e9:	6a 00                	push   $0x0
  pushl $190
c01031eb:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031f0:	e9 6f f8 ff ff       	jmp    c0102a64 <__alltraps>

c01031f5 <vector191>:
.globl vector191
vector191:
  pushl $0
c01031f5:	6a 00                	push   $0x0
  pushl $191
c01031f7:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01031fc:	e9 63 f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103201 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103201:	6a 00                	push   $0x0
  pushl $192
c0103203:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0103208:	e9 57 f8 ff ff       	jmp    c0102a64 <__alltraps>

c010320d <vector193>:
.globl vector193
vector193:
  pushl $0
c010320d:	6a 00                	push   $0x0
  pushl $193
c010320f:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103214:	e9 4b f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103219 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103219:	6a 00                	push   $0x0
  pushl $194
c010321b:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103220:	e9 3f f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103225 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103225:	6a 00                	push   $0x0
  pushl $195
c0103227:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c010322c:	e9 33 f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103231 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103231:	6a 00                	push   $0x0
  pushl $196
c0103233:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103238:	e9 27 f8 ff ff       	jmp    c0102a64 <__alltraps>

c010323d <vector197>:
.globl vector197
vector197:
  pushl $0
c010323d:	6a 00                	push   $0x0
  pushl $197
c010323f:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103244:	e9 1b f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103249 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103249:	6a 00                	push   $0x0
  pushl $198
c010324b:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103250:	e9 0f f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103255 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103255:	6a 00                	push   $0x0
  pushl $199
c0103257:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010325c:	e9 03 f8 ff ff       	jmp    c0102a64 <__alltraps>

c0103261 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103261:	6a 00                	push   $0x0
  pushl $200
c0103263:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103268:	e9 f7 f7 ff ff       	jmp    c0102a64 <__alltraps>

c010326d <vector201>:
.globl vector201
vector201:
  pushl $0
c010326d:	6a 00                	push   $0x0
  pushl $201
c010326f:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103274:	e9 eb f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103279 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103279:	6a 00                	push   $0x0
  pushl $202
c010327b:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103280:	e9 df f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103285 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103285:	6a 00                	push   $0x0
  pushl $203
c0103287:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010328c:	e9 d3 f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103291 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103291:	6a 00                	push   $0x0
  pushl $204
c0103293:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103298:	e9 c7 f7 ff ff       	jmp    c0102a64 <__alltraps>

c010329d <vector205>:
.globl vector205
vector205:
  pushl $0
c010329d:	6a 00                	push   $0x0
  pushl $205
c010329f:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01032a4:	e9 bb f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032a9 <vector206>:
.globl vector206
vector206:
  pushl $0
c01032a9:	6a 00                	push   $0x0
  pushl $206
c01032ab:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032b0:	e9 af f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032b5 <vector207>:
.globl vector207
vector207:
  pushl $0
c01032b5:	6a 00                	push   $0x0
  pushl $207
c01032b7:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032bc:	e9 a3 f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032c1 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032c1:	6a 00                	push   $0x0
  pushl $208
c01032c3:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032c8:	e9 97 f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032cd <vector209>:
.globl vector209
vector209:
  pushl $0
c01032cd:	6a 00                	push   $0x0
  pushl $209
c01032cf:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032d4:	e9 8b f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032d9 <vector210>:
.globl vector210
vector210:
  pushl $0
c01032d9:	6a 00                	push   $0x0
  pushl $210
c01032db:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01032e0:	e9 7f f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032e5 <vector211>:
.globl vector211
vector211:
  pushl $0
c01032e5:	6a 00                	push   $0x0
  pushl $211
c01032e7:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01032ec:	e9 73 f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032f1 <vector212>:
.globl vector212
vector212:
  pushl $0
c01032f1:	6a 00                	push   $0x0
  pushl $212
c01032f3:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032f8:	e9 67 f7 ff ff       	jmp    c0102a64 <__alltraps>

c01032fd <vector213>:
.globl vector213
vector213:
  pushl $0
c01032fd:	6a 00                	push   $0x0
  pushl $213
c01032ff:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103304:	e9 5b f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103309 <vector214>:
.globl vector214
vector214:
  pushl $0
c0103309:	6a 00                	push   $0x0
  pushl $214
c010330b:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103310:	e9 4f f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103315 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103315:	6a 00                	push   $0x0
  pushl $215
c0103317:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c010331c:	e9 43 f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103321 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103321:	6a 00                	push   $0x0
  pushl $216
c0103323:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103328:	e9 37 f7 ff ff       	jmp    c0102a64 <__alltraps>

c010332d <vector217>:
.globl vector217
vector217:
  pushl $0
c010332d:	6a 00                	push   $0x0
  pushl $217
c010332f:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103334:	e9 2b f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103339 <vector218>:
.globl vector218
vector218:
  pushl $0
c0103339:	6a 00                	push   $0x0
  pushl $218
c010333b:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103340:	e9 1f f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103345 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103345:	6a 00                	push   $0x0
  pushl $219
c0103347:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010334c:	e9 13 f7 ff ff       	jmp    c0102a64 <__alltraps>

c0103351 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103351:	6a 00                	push   $0x0
  pushl $220
c0103353:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103358:	e9 07 f7 ff ff       	jmp    c0102a64 <__alltraps>

c010335d <vector221>:
.globl vector221
vector221:
  pushl $0
c010335d:	6a 00                	push   $0x0
  pushl $221
c010335f:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103364:	e9 fb f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103369 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103369:	6a 00                	push   $0x0
  pushl $222
c010336b:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103370:	e9 ef f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103375 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103375:	6a 00                	push   $0x0
  pushl $223
c0103377:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010337c:	e9 e3 f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103381 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103381:	6a 00                	push   $0x0
  pushl $224
c0103383:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103388:	e9 d7 f6 ff ff       	jmp    c0102a64 <__alltraps>

c010338d <vector225>:
.globl vector225
vector225:
  pushl $0
c010338d:	6a 00                	push   $0x0
  pushl $225
c010338f:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103394:	e9 cb f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103399 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103399:	6a 00                	push   $0x0
  pushl $226
c010339b:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01033a0:	e9 bf f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033a5 <vector227>:
.globl vector227
vector227:
  pushl $0
c01033a5:	6a 00                	push   $0x0
  pushl $227
c01033a7:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033ac:	e9 b3 f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033b1 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033b1:	6a 00                	push   $0x0
  pushl $228
c01033b3:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033b8:	e9 a7 f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033bd <vector229>:
.globl vector229
vector229:
  pushl $0
c01033bd:	6a 00                	push   $0x0
  pushl $229
c01033bf:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033c4:	e9 9b f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033c9 <vector230>:
.globl vector230
vector230:
  pushl $0
c01033c9:	6a 00                	push   $0x0
  pushl $230
c01033cb:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033d0:	e9 8f f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033d5 <vector231>:
.globl vector231
vector231:
  pushl $0
c01033d5:	6a 00                	push   $0x0
  pushl $231
c01033d7:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01033dc:	e9 83 f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033e1 <vector232>:
.globl vector232
vector232:
  pushl $0
c01033e1:	6a 00                	push   $0x0
  pushl $232
c01033e3:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01033e8:	e9 77 f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033ed <vector233>:
.globl vector233
vector233:
  pushl $0
c01033ed:	6a 00                	push   $0x0
  pushl $233
c01033ef:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033f4:	e9 6b f6 ff ff       	jmp    c0102a64 <__alltraps>

c01033f9 <vector234>:
.globl vector234
vector234:
  pushl $0
c01033f9:	6a 00                	push   $0x0
  pushl $234
c01033fb:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103400:	e9 5f f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103405 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103405:	6a 00                	push   $0x0
  pushl $235
c0103407:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c010340c:	e9 53 f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103411 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103411:	6a 00                	push   $0x0
  pushl $236
c0103413:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103418:	e9 47 f6 ff ff       	jmp    c0102a64 <__alltraps>

c010341d <vector237>:
.globl vector237
vector237:
  pushl $0
c010341d:	6a 00                	push   $0x0
  pushl $237
c010341f:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103424:	e9 3b f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103429 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103429:	6a 00                	push   $0x0
  pushl $238
c010342b:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103430:	e9 2f f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103435 <vector239>:
.globl vector239
vector239:
  pushl $0
c0103435:	6a 00                	push   $0x0
  pushl $239
c0103437:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c010343c:	e9 23 f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103441 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103441:	6a 00                	push   $0x0
  pushl $240
c0103443:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103448:	e9 17 f6 ff ff       	jmp    c0102a64 <__alltraps>

c010344d <vector241>:
.globl vector241
vector241:
  pushl $0
c010344d:	6a 00                	push   $0x0
  pushl $241
c010344f:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103454:	e9 0b f6 ff ff       	jmp    c0102a64 <__alltraps>

c0103459 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103459:	6a 00                	push   $0x0
  pushl $242
c010345b:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103460:	e9 ff f5 ff ff       	jmp    c0102a64 <__alltraps>

c0103465 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103465:	6a 00                	push   $0x0
  pushl $243
c0103467:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010346c:	e9 f3 f5 ff ff       	jmp    c0102a64 <__alltraps>

c0103471 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103471:	6a 00                	push   $0x0
  pushl $244
c0103473:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103478:	e9 e7 f5 ff ff       	jmp    c0102a64 <__alltraps>

c010347d <vector245>:
.globl vector245
vector245:
  pushl $0
c010347d:	6a 00                	push   $0x0
  pushl $245
c010347f:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103484:	e9 db f5 ff ff       	jmp    c0102a64 <__alltraps>

c0103489 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103489:	6a 00                	push   $0x0
  pushl $246
c010348b:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103490:	e9 cf f5 ff ff       	jmp    c0102a64 <__alltraps>

c0103495 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103495:	6a 00                	push   $0x0
  pushl $247
c0103497:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010349c:	e9 c3 f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034a1 <vector248>:
.globl vector248
vector248:
  pushl $0
c01034a1:	6a 00                	push   $0x0
  pushl $248
c01034a3:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01034a8:	e9 b7 f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034ad <vector249>:
.globl vector249
vector249:
  pushl $0
c01034ad:	6a 00                	push   $0x0
  pushl $249
c01034af:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034b4:	e9 ab f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034b9 <vector250>:
.globl vector250
vector250:
  pushl $0
c01034b9:	6a 00                	push   $0x0
  pushl $250
c01034bb:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034c0:	e9 9f f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034c5 <vector251>:
.globl vector251
vector251:
  pushl $0
c01034c5:	6a 00                	push   $0x0
  pushl $251
c01034c7:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034cc:	e9 93 f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034d1 <vector252>:
.globl vector252
vector252:
  pushl $0
c01034d1:	6a 00                	push   $0x0
  pushl $252
c01034d3:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034d8:	e9 87 f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034dd <vector253>:
.globl vector253
vector253:
  pushl $0
c01034dd:	6a 00                	push   $0x0
  pushl $253
c01034df:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01034e4:	e9 7b f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034e9 <vector254>:
.globl vector254
vector254:
  pushl $0
c01034e9:	6a 00                	push   $0x0
  pushl $254
c01034eb:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034f0:	e9 6f f5 ff ff       	jmp    c0102a64 <__alltraps>

c01034f5 <vector255>:
.globl vector255
vector255:
  pushl $0
c01034f5:	6a 00                	push   $0x0
  pushl $255
c01034f7:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01034fc:	e9 63 f5 ff ff       	jmp    c0102a64 <__alltraps>

c0103501 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0103501:	55                   	push   %ebp
c0103502:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0103504:	8b 55 08             	mov    0x8(%ebp),%edx
c0103507:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c010350c:	29 c2                	sub    %eax,%edx
c010350e:	89 d0                	mov    %edx,%eax
c0103510:	c1 f8 05             	sar    $0x5,%eax
}
c0103513:	5d                   	pop    %ebp
c0103514:	c3                   	ret    

c0103515 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0103515:	55                   	push   %ebp
c0103516:	89 e5                	mov    %esp,%ebp
c0103518:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010351b:	8b 45 08             	mov    0x8(%ebp),%eax
c010351e:	89 04 24             	mov    %eax,(%esp)
c0103521:	e8 db ff ff ff       	call   c0103501 <page2ppn>
c0103526:	c1 e0 0c             	shl    $0xc,%eax
}
c0103529:	c9                   	leave  
c010352a:	c3                   	ret    

c010352b <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c010352b:	55                   	push   %ebp
c010352c:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010352e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103531:	8b 00                	mov    (%eax),%eax
}
c0103533:	5d                   	pop    %ebp
c0103534:	c3                   	ret    

c0103535 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0103535:	55                   	push   %ebp
c0103536:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0103538:	8b 45 08             	mov    0x8(%ebp),%eax
c010353b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010353e:	89 10                	mov    %edx,(%eax)
}
c0103540:	5d                   	pop    %ebp
c0103541:	c3                   	ret    

c0103542 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103542:	55                   	push   %ebp
c0103543:	89 e5                	mov    %esp,%ebp
c0103545:	83 ec 10             	sub    $0x10,%esp
c0103548:	c7 45 fc dc 80 1c c0 	movl   $0xc01c80dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010354f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103552:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103555:	89 50 04             	mov    %edx,0x4(%eax)
c0103558:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010355b:	8b 50 04             	mov    0x4(%eax),%edx
c010355e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103561:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103563:	c7 05 e4 80 1c c0 00 	movl   $0x0,0xc01c80e4
c010356a:	00 00 00 
}
c010356d:	c9                   	leave  
c010356e:	c3                   	ret    

c010356f <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010356f:	55                   	push   %ebp
c0103570:	89 e5                	mov    %esp,%ebp
c0103572:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103575:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103579:	75 24                	jne    c010359f <default_init_memmap+0x30>
c010357b:	c7 44 24 0c 30 e1 10 	movl   $0xc010e130,0xc(%esp)
c0103582:	c0 
c0103583:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010358a:	c0 
c010358b:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0103592:	00 
c0103593:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c010359a:	e8 51 d8 ff ff       	call   c0100df0 <__panic>
    struct Page *p = base;
c010359f:	8b 45 08             	mov    0x8(%ebp),%eax
c01035a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01035a5:	eb 7d                	jmp    c0103624 <default_init_memmap+0xb5>
        assert(PageReserved(p));
c01035a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035aa:	83 c0 04             	add    $0x4,%eax
c01035ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01035b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01035b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01035ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035bd:	0f a3 10             	bt     %edx,(%eax)
c01035c0:	19 c0                	sbb    %eax,%eax
c01035c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01035c5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01035c9:	0f 95 c0             	setne  %al
c01035cc:	0f b6 c0             	movzbl %al,%eax
c01035cf:	85 c0                	test   %eax,%eax
c01035d1:	75 24                	jne    c01035f7 <default_init_memmap+0x88>
c01035d3:	c7 44 24 0c 61 e1 10 	movl   $0xc010e161,0xc(%esp)
c01035da:	c0 
c01035db:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01035e2:	c0 
c01035e3:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01035ea:	00 
c01035eb:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01035f2:	e8 f9 d7 ff ff       	call   c0100df0 <__panic>
        p->flags = p->property = 0;
c01035f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035fa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0103601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103604:	8b 50 08             	mov    0x8(%eax),%edx
c0103607:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010360a:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c010360d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103614:	00 
c0103615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103618:	89 04 24             	mov    %eax,(%esp)
c010361b:	e8 15 ff ff ff       	call   c0103535 <set_page_ref>

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103620:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103624:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103627:	c1 e0 05             	shl    $0x5,%eax
c010362a:	89 c2                	mov    %eax,%edx
c010362c:	8b 45 08             	mov    0x8(%ebp),%eax
c010362f:	01 d0                	add    %edx,%eax
c0103631:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103634:	0f 85 6d ff ff ff    	jne    c01035a7 <default_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010363a:	8b 45 08             	mov    0x8(%ebp),%eax
c010363d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103640:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103643:	8b 45 08             	mov    0x8(%ebp),%eax
c0103646:	83 c0 04             	add    $0x4,%eax
c0103649:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0103650:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103653:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103656:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103659:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c010365c:	8b 15 e4 80 1c c0    	mov    0xc01c80e4,%edx
c0103662:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103665:	01 d0                	add    %edx,%eax
c0103667:	a3 e4 80 1c c0       	mov    %eax,0xc01c80e4
    list_add_before(&free_list, &(base->page_link));
c010366c:	8b 45 08             	mov    0x8(%ebp),%eax
c010366f:	83 c0 0c             	add    $0xc,%eax
c0103672:	c7 45 dc dc 80 1c c0 	movl   $0xc01c80dc,-0x24(%ebp)
c0103679:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010367c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010367f:	8b 00                	mov    (%eax),%eax
c0103681:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103684:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103687:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010368a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010368d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103690:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103693:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103696:	89 10                	mov    %edx,(%eax)
c0103698:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010369b:	8b 10                	mov    (%eax),%edx
c010369d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01036a0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01036a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01036a6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01036a9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01036ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01036af:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01036b2:	89 10                	mov    %edx,(%eax)
}
c01036b4:	c9                   	leave  
c01036b5:	c3                   	ret    

c01036b6 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01036b6:	55                   	push   %ebp
c01036b7:	89 e5                	mov    %esp,%ebp
c01036b9:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01036bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01036c0:	75 24                	jne    c01036e6 <default_alloc_pages+0x30>
c01036c2:	c7 44 24 0c 30 e1 10 	movl   $0xc010e130,0xc(%esp)
c01036c9:	c0 
c01036ca:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01036d1:	c0 
c01036d2:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c01036d9:	00 
c01036da:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01036e1:	e8 0a d7 ff ff       	call   c0100df0 <__panic>
    if (n > nr_free) {
c01036e6:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c01036eb:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036ee:	73 0a                	jae    c01036fa <default_alloc_pages+0x44>
        return NULL;
c01036f0:	b8 00 00 00 00       	mov    $0x0,%eax
c01036f5:	e9 36 01 00 00       	jmp    c0103830 <default_alloc_pages+0x17a>
    }
    struct Page *page = NULL;
c01036fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0103701:	c7 45 f0 dc 80 1c c0 	movl   $0xc01c80dc,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103708:	eb 1c                	jmp    c0103726 <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c010370a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010370d:	83 e8 0c             	sub    $0xc,%eax
c0103710:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c0103713:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103716:	8b 40 08             	mov    0x8(%eax),%eax
c0103719:	3b 45 08             	cmp    0x8(%ebp),%eax
c010371c:	72 08                	jb     c0103726 <default_alloc_pages+0x70>
            page = p;
c010371e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103721:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0103724:	eb 18                	jmp    c010373e <default_alloc_pages+0x88>
c0103726:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103729:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010372c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010372f:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0103732:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103735:	81 7d f0 dc 80 1c c0 	cmpl   $0xc01c80dc,-0x10(%ebp)
c010373c:	75 cc                	jne    c010370a <default_alloc_pages+0x54>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c010373e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103742:	0f 84 e5 00 00 00    	je     c010382d <default_alloc_pages+0x177>
        if (page->property > n) {
c0103748:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010374b:	8b 40 08             	mov    0x8(%eax),%eax
c010374e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103751:	0f 86 85 00 00 00    	jbe    c01037dc <default_alloc_pages+0x126>
            struct Page *p = page + n;
c0103757:	8b 45 08             	mov    0x8(%ebp),%eax
c010375a:	c1 e0 05             	shl    $0x5,%eax
c010375d:	89 c2                	mov    %eax,%edx
c010375f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103762:	01 d0                	add    %edx,%eax
c0103764:	89 45 e8             	mov    %eax,-0x18(%ebp)
			SetPageProperty(p);
c0103767:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010376a:	83 c0 04             	add    $0x4,%eax
c010376d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0103774:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103777:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010377a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010377d:	0f ab 10             	bts    %edx,(%eax)
            p->property = page->property - n;
c0103780:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103783:	8b 40 08             	mov    0x8(%eax),%eax
c0103786:	2b 45 08             	sub    0x8(%ebp),%eax
c0103789:	89 c2                	mov    %eax,%edx
c010378b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010378e:	89 50 08             	mov    %edx,0x8(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c0103791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103794:	83 c0 0c             	add    $0xc,%eax
c0103797:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010379a:	83 c2 0c             	add    $0xc,%edx
c010379d:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01037a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01037a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037a6:	8b 40 04             	mov    0x4(%eax),%eax
c01037a9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01037ac:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01037af:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01037b2:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01037b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01037b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01037bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01037be:	89 10                	mov    %edx,(%eax)
c01037c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01037c3:	8b 10                	mov    (%eax),%edx
c01037c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01037c8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01037cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01037ce:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01037d1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01037d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01037d7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01037da:	89 10                	mov    %edx,(%eax)
    }
	list_del(&(page->page_link));
c01037dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037df:	83 c0 0c             	add    $0xc,%eax
c01037e2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01037e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01037e8:	8b 40 04             	mov    0x4(%eax),%eax
c01037eb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01037ee:	8b 12                	mov    (%edx),%edx
c01037f0:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01037f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01037f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01037f9:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01037fc:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01037ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103802:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103805:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c0103807:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c010380c:	2b 45 08             	sub    0x8(%ebp),%eax
c010380f:	a3 e4 80 1c c0       	mov    %eax,0xc01c80e4
        ClearPageProperty(page);
c0103814:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103817:	83 c0 04             	add    $0x4,%eax
c010381a:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
c0103821:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103824:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103827:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010382a:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c010382d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103830:	c9                   	leave  
c0103831:	c3                   	ret    

c0103832 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0103832:	55                   	push   %ebp
c0103833:	89 e5                	mov    %esp,%ebp
c0103835:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c010383b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010383f:	75 24                	jne    c0103865 <default_free_pages+0x33>
c0103841:	c7 44 24 0c 30 e1 10 	movl   $0xc010e130,0xc(%esp)
c0103848:	c0 
c0103849:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103850:	c0 
c0103851:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c0103858:	00 
c0103859:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103860:	e8 8b d5 ff ff       	call   c0100df0 <__panic>
    struct Page *p = base;
c0103865:	8b 45 08             	mov    0x8(%ebp),%eax
c0103868:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010386b:	e9 9d 00 00 00       	jmp    c010390d <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c0103870:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103873:	83 c0 04             	add    $0x4,%eax
c0103876:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010387d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103880:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103883:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103886:	0f a3 10             	bt     %edx,(%eax)
c0103889:	19 c0                	sbb    %eax,%eax
c010388b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c010388e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103892:	0f 95 c0             	setne  %al
c0103895:	0f b6 c0             	movzbl %al,%eax
c0103898:	85 c0                	test   %eax,%eax
c010389a:	75 2c                	jne    c01038c8 <default_free_pages+0x96>
c010389c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010389f:	83 c0 04             	add    $0x4,%eax
c01038a2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01038a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01038ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038af:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01038b2:	0f a3 10             	bt     %edx,(%eax)
c01038b5:	19 c0                	sbb    %eax,%eax
c01038b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c01038ba:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01038be:	0f 95 c0             	setne  %al
c01038c1:	0f b6 c0             	movzbl %al,%eax
c01038c4:	85 c0                	test   %eax,%eax
c01038c6:	74 24                	je     c01038ec <default_free_pages+0xba>
c01038c8:	c7 44 24 0c 74 e1 10 	movl   $0xc010e174,0xc(%esp)
c01038cf:	c0 
c01038d0:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01038d7:	c0 
c01038d8:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01038df:	00 
c01038e0:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01038e7:	e8 04 d5 ff ff       	call   c0100df0 <__panic>
        p->flags = 0;
c01038ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038ef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01038f6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01038fd:	00 
c01038fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103901:	89 04 24             	mov    %eax,(%esp)
c0103904:	e8 2c fc ff ff       	call   c0103535 <set_page_ref>

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103909:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010390d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103910:	c1 e0 05             	shl    $0x5,%eax
c0103913:	89 c2                	mov    %eax,%edx
c0103915:	8b 45 08             	mov    0x8(%ebp),%eax
c0103918:	01 d0                	add    %edx,%eax
c010391a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010391d:	0f 85 4d ff ff ff    	jne    c0103870 <default_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0103923:	8b 45 08             	mov    0x8(%ebp),%eax
c0103926:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103929:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010392c:	8b 45 08             	mov    0x8(%ebp),%eax
c010392f:	83 c0 04             	add    $0x4,%eax
c0103932:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103939:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010393c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010393f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103942:	0f ab 10             	bts    %edx,(%eax)
c0103945:	c7 45 cc dc 80 1c c0 	movl   $0xc01c80dc,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010394c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010394f:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0103952:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103955:	e9 fa 00 00 00       	jmp    c0103a54 <default_free_pages+0x222>
        p = le2page(le, page_link);
c010395a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010395d:	83 e8 0c             	sub    $0xc,%eax
c0103960:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103963:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103966:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0103969:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010396c:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010396f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // TODO: optimize
        if (base + base->property == p) {
c0103972:	8b 45 08             	mov    0x8(%ebp),%eax
c0103975:	8b 40 08             	mov    0x8(%eax),%eax
c0103978:	c1 e0 05             	shl    $0x5,%eax
c010397b:	89 c2                	mov    %eax,%edx
c010397d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103980:	01 d0                	add    %edx,%eax
c0103982:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103985:	75 5a                	jne    c01039e1 <default_free_pages+0x1af>
            base->property += p->property;
c0103987:	8b 45 08             	mov    0x8(%ebp),%eax
c010398a:	8b 50 08             	mov    0x8(%eax),%edx
c010398d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103990:	8b 40 08             	mov    0x8(%eax),%eax
c0103993:	01 c2                	add    %eax,%edx
c0103995:	8b 45 08             	mov    0x8(%ebp),%eax
c0103998:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c010399b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010399e:	83 c0 04             	add    $0x4,%eax
c01039a1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01039a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01039ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01039ae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01039b1:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c01039b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b7:	83 c0 0c             	add    $0xc,%eax
c01039ba:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01039bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01039c0:	8b 40 04             	mov    0x4(%eax),%eax
c01039c3:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01039c6:	8b 12                	mov    (%edx),%edx
c01039c8:	89 55 b8             	mov    %edx,-0x48(%ebp)
c01039cb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01039ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01039d1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01039d4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01039d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01039da:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01039dd:	89 10                	mov    %edx,(%eax)
c01039df:	eb 73                	jmp    c0103a54 <default_free_pages+0x222>
        }
        else if (p + p->property == base) {
c01039e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039e4:	8b 40 08             	mov    0x8(%eax),%eax
c01039e7:	c1 e0 05             	shl    $0x5,%eax
c01039ea:	89 c2                	mov    %eax,%edx
c01039ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ef:	01 d0                	add    %edx,%eax
c01039f1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01039f4:	75 5e                	jne    c0103a54 <default_free_pages+0x222>
            p->property += base->property;
c01039f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039f9:	8b 50 08             	mov    0x8(%eax),%edx
c01039fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01039ff:	8b 40 08             	mov    0x8(%eax),%eax
c0103a02:	01 c2                	add    %eax,%edx
c0103a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a07:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0103a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0d:	83 c0 04             	add    $0x4,%eax
c0103a10:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0103a17:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0103a1a:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103a1d:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103a20:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0103a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a26:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0103a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a2c:	83 c0 0c             	add    $0xc,%eax
c0103a2f:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103a32:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103a35:	8b 40 04             	mov    0x4(%eax),%eax
c0103a38:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0103a3b:	8b 12                	mov    (%edx),%edx
c0103a3d:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0103a40:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103a43:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103a46:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103a49:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a4c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103a4f:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103a52:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0103a54:	81 7d f0 dc 80 1c c0 	cmpl   $0xc01c80dc,-0x10(%ebp)
c0103a5b:	0f 85 f9 fe ff ff    	jne    c010395a <default_free_pages+0x128>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c0103a61:	8b 15 e4 80 1c c0    	mov    0xc01c80e4,%edx
c0103a67:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a6a:	01 d0                	add    %edx,%eax
c0103a6c:	a3 e4 80 1c c0       	mov    %eax,0xc01c80e4
c0103a71:	c7 45 9c dc 80 1c c0 	movl   $0xc01c80dc,-0x64(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103a78:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103a7b:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c0103a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103a81:	eb 68                	jmp    c0103aeb <default_free_pages+0x2b9>
        p = le2page(le, page_link);
c0103a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a86:	83 e8 0c             	sub    $0xc,%eax
c0103a89:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c0103a8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a8f:	8b 40 08             	mov    0x8(%eax),%eax
c0103a92:	c1 e0 05             	shl    $0x5,%eax
c0103a95:	89 c2                	mov    %eax,%edx
c0103a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a9a:	01 d0                	add    %edx,%eax
c0103a9c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a9f:	77 3b                	ja     c0103adc <default_free_pages+0x2aa>
            assert(base + base->property != p);
c0103aa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa4:	8b 40 08             	mov    0x8(%eax),%eax
c0103aa7:	c1 e0 05             	shl    $0x5,%eax
c0103aaa:	89 c2                	mov    %eax,%edx
c0103aac:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aaf:	01 d0                	add    %edx,%eax
c0103ab1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ab4:	75 24                	jne    c0103ada <default_free_pages+0x2a8>
c0103ab6:	c7 44 24 0c 99 e1 10 	movl   $0xc010e199,0xc(%esp)
c0103abd:	c0 
c0103abe:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103ac5:	c0 
c0103ac6:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103acd:	00 
c0103ace:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103ad5:	e8 16 d3 ff ff       	call   c0100df0 <__panic>
            break;
c0103ada:	eb 18                	jmp    c0103af4 <default_free_pages+0x2c2>
c0103adc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103adf:	89 45 98             	mov    %eax,-0x68(%ebp)
c0103ae2:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103ae5:	8b 40 04             	mov    0x4(%eax),%eax
        }
        le = list_next(le);
c0103ae8:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    le = list_next(&free_list);
    while (le != &free_list) {
c0103aeb:	81 7d f0 dc 80 1c c0 	cmpl   $0xc01c80dc,-0x10(%ebp)
c0103af2:	75 8f                	jne    c0103a83 <default_free_pages+0x251>
            assert(base + base->property != p);
            break;
        }
        le = list_next(le);
    }
    list_add_before(le, &(base->page_link));
c0103af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103af7:	8d 50 0c             	lea    0xc(%eax),%edx
c0103afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103afd:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0103b00:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103b03:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103b06:	8b 00                	mov    (%eax),%eax
c0103b08:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103b0b:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0103b0e:	89 45 88             	mov    %eax,-0x78(%ebp)
c0103b11:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103b14:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103b17:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103b1a:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0103b1d:	89 10                	mov    %edx,(%eax)
c0103b1f:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103b22:	8b 10                	mov    (%eax),%edx
c0103b24:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103b27:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103b2a:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103b2d:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103b30:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103b33:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103b36:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103b39:	89 10                	mov    %edx,(%eax)
}
c0103b3b:	c9                   	leave  
c0103b3c:	c3                   	ret    

c0103b3d <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b3d:	55                   	push   %ebp
c0103b3e:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b40:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
}
c0103b45:	5d                   	pop    %ebp
c0103b46:	c3                   	ret    

c0103b47 <basic_check>:

static void
basic_check(void) {
c0103b47:	55                   	push   %ebp
c0103b48:	89 e5                	mov    %esp,%ebp
c0103b4a:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b57:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b67:	e8 dc 15 00 00       	call   c0105148 <alloc_pages>
c0103b6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b6f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b73:	75 24                	jne    c0103b99 <basic_check+0x52>
c0103b75:	c7 44 24 0c b4 e1 10 	movl   $0xc010e1b4,0xc(%esp)
c0103b7c:	c0 
c0103b7d:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103b84:	c0 
c0103b85:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0103b8c:	00 
c0103b8d:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103b94:	e8 57 d2 ff ff       	call   c0100df0 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b99:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ba0:	e8 a3 15 00 00       	call   c0105148 <alloc_pages>
c0103ba5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ba8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103bac:	75 24                	jne    c0103bd2 <basic_check+0x8b>
c0103bae:	c7 44 24 0c d0 e1 10 	movl   $0xc010e1d0,0xc(%esp)
c0103bb5:	c0 
c0103bb6:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103bbd:	c0 
c0103bbe:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103bc5:	00 
c0103bc6:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103bcd:	e8 1e d2 ff ff       	call   c0100df0 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103bd2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bd9:	e8 6a 15 00 00       	call   c0105148 <alloc_pages>
c0103bde:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103be1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103be5:	75 24                	jne    c0103c0b <basic_check+0xc4>
c0103be7:	c7 44 24 0c ec e1 10 	movl   $0xc010e1ec,0xc(%esp)
c0103bee:	c0 
c0103bef:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103bf6:	c0 
c0103bf7:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103bfe:	00 
c0103bff:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103c06:	e8 e5 d1 ff ff       	call   c0100df0 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103c0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c0e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c11:	74 10                	je     c0103c23 <basic_check+0xdc>
c0103c13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c19:	74 08                	je     c0103c23 <basic_check+0xdc>
c0103c1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c1e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c21:	75 24                	jne    c0103c47 <basic_check+0x100>
c0103c23:	c7 44 24 0c 08 e2 10 	movl   $0xc010e208,0xc(%esp)
c0103c2a:	c0 
c0103c2b:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103c32:	c0 
c0103c33:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103c3a:	00 
c0103c3b:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103c42:	e8 a9 d1 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c4a:	89 04 24             	mov    %eax,(%esp)
c0103c4d:	e8 d9 f8 ff ff       	call   c010352b <page_ref>
c0103c52:	85 c0                	test   %eax,%eax
c0103c54:	75 1e                	jne    c0103c74 <basic_check+0x12d>
c0103c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c59:	89 04 24             	mov    %eax,(%esp)
c0103c5c:	e8 ca f8 ff ff       	call   c010352b <page_ref>
c0103c61:	85 c0                	test   %eax,%eax
c0103c63:	75 0f                	jne    c0103c74 <basic_check+0x12d>
c0103c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c68:	89 04 24             	mov    %eax,(%esp)
c0103c6b:	e8 bb f8 ff ff       	call   c010352b <page_ref>
c0103c70:	85 c0                	test   %eax,%eax
c0103c72:	74 24                	je     c0103c98 <basic_check+0x151>
c0103c74:	c7 44 24 0c 2c e2 10 	movl   $0xc010e22c,0xc(%esp)
c0103c7b:	c0 
c0103c7c:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103c83:	c0 
c0103c84:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0103c8b:	00 
c0103c8c:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103c93:	e8 58 d1 ff ff       	call   c0100df0 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c9b:	89 04 24             	mov    %eax,(%esp)
c0103c9e:	e8 72 f8 ff ff       	call   c0103515 <page2pa>
c0103ca3:	8b 15 a0 5f 1c c0    	mov    0xc01c5fa0,%edx
c0103ca9:	c1 e2 0c             	shl    $0xc,%edx
c0103cac:	39 d0                	cmp    %edx,%eax
c0103cae:	72 24                	jb     c0103cd4 <basic_check+0x18d>
c0103cb0:	c7 44 24 0c 68 e2 10 	movl   $0xc010e268,0xc(%esp)
c0103cb7:	c0 
c0103cb8:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103cbf:	c0 
c0103cc0:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103cc7:	00 
c0103cc8:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103ccf:	e8 1c d1 ff ff       	call   c0100df0 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103cd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cd7:	89 04 24             	mov    %eax,(%esp)
c0103cda:	e8 36 f8 ff ff       	call   c0103515 <page2pa>
c0103cdf:	8b 15 a0 5f 1c c0    	mov    0xc01c5fa0,%edx
c0103ce5:	c1 e2 0c             	shl    $0xc,%edx
c0103ce8:	39 d0                	cmp    %edx,%eax
c0103cea:	72 24                	jb     c0103d10 <basic_check+0x1c9>
c0103cec:	c7 44 24 0c 85 e2 10 	movl   $0xc010e285,0xc(%esp)
c0103cf3:	c0 
c0103cf4:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103cfb:	c0 
c0103cfc:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103d03:	00 
c0103d04:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103d0b:	e8 e0 d0 ff ff       	call   c0100df0 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d13:	89 04 24             	mov    %eax,(%esp)
c0103d16:	e8 fa f7 ff ff       	call   c0103515 <page2pa>
c0103d1b:	8b 15 a0 5f 1c c0    	mov    0xc01c5fa0,%edx
c0103d21:	c1 e2 0c             	shl    $0xc,%edx
c0103d24:	39 d0                	cmp    %edx,%eax
c0103d26:	72 24                	jb     c0103d4c <basic_check+0x205>
c0103d28:	c7 44 24 0c a2 e2 10 	movl   $0xc010e2a2,0xc(%esp)
c0103d2f:	c0 
c0103d30:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103d37:	c0 
c0103d38:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103d3f:	00 
c0103d40:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103d47:	e8 a4 d0 ff ff       	call   c0100df0 <__panic>

    list_entry_t free_list_store = free_list;
c0103d4c:	a1 dc 80 1c c0       	mov    0xc01c80dc,%eax
c0103d51:	8b 15 e0 80 1c c0    	mov    0xc01c80e0,%edx
c0103d57:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d5a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d5d:	c7 45 e0 dc 80 1c c0 	movl   $0xc01c80dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d64:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d67:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d6a:	89 50 04             	mov    %edx,0x4(%eax)
c0103d6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d70:	8b 50 04             	mov    0x4(%eax),%edx
c0103d73:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d76:	89 10                	mov    %edx,(%eax)
c0103d78:	c7 45 dc dc 80 1c c0 	movl   $0xc01c80dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d82:	8b 40 04             	mov    0x4(%eax),%eax
c0103d85:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d88:	0f 94 c0             	sete   %al
c0103d8b:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d8e:	85 c0                	test   %eax,%eax
c0103d90:	75 24                	jne    c0103db6 <basic_check+0x26f>
c0103d92:	c7 44 24 0c bf e2 10 	movl   $0xc010e2bf,0xc(%esp)
c0103d99:	c0 
c0103d9a:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103da1:	c0 
c0103da2:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103da9:	00 
c0103daa:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103db1:	e8 3a d0 ff ff       	call   c0100df0 <__panic>

    unsigned int nr_free_store = nr_free;
c0103db6:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c0103dbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103dbe:	c7 05 e4 80 1c c0 00 	movl   $0x0,0xc01c80e4
c0103dc5:	00 00 00 

    assert(alloc_page() == NULL);
c0103dc8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103dcf:	e8 74 13 00 00       	call   c0105148 <alloc_pages>
c0103dd4:	85 c0                	test   %eax,%eax
c0103dd6:	74 24                	je     c0103dfc <basic_check+0x2b5>
c0103dd8:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0103ddf:	c0 
c0103de0:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103de7:	c0 
c0103de8:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0103def:	00 
c0103df0:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103df7:	e8 f4 cf ff ff       	call   c0100df0 <__panic>

    free_page(p0);
c0103dfc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e03:	00 
c0103e04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e07:	89 04 24             	mov    %eax,(%esp)
c0103e0a:	e8 a4 13 00 00       	call   c01051b3 <free_pages>
    free_page(p1);
c0103e0f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e16:	00 
c0103e17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e1a:	89 04 24             	mov    %eax,(%esp)
c0103e1d:	e8 91 13 00 00       	call   c01051b3 <free_pages>
    free_page(p2);
c0103e22:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e29:	00 
c0103e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e2d:	89 04 24             	mov    %eax,(%esp)
c0103e30:	e8 7e 13 00 00       	call   c01051b3 <free_pages>
    assert(nr_free == 3);
c0103e35:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c0103e3a:	83 f8 03             	cmp    $0x3,%eax
c0103e3d:	74 24                	je     c0103e63 <basic_check+0x31c>
c0103e3f:	c7 44 24 0c eb e2 10 	movl   $0xc010e2eb,0xc(%esp)
c0103e46:	c0 
c0103e47:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103e4e:	c0 
c0103e4f:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0103e56:	00 
c0103e57:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103e5e:	e8 8d cf ff ff       	call   c0100df0 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e63:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e6a:	e8 d9 12 00 00       	call   c0105148 <alloc_pages>
c0103e6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e76:	75 24                	jne    c0103e9c <basic_check+0x355>
c0103e78:	c7 44 24 0c b4 e1 10 	movl   $0xc010e1b4,0xc(%esp)
c0103e7f:	c0 
c0103e80:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103e87:	c0 
c0103e88:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c0103e8f:	00 
c0103e90:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103e97:	e8 54 cf ff ff       	call   c0100df0 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e9c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ea3:	e8 a0 12 00 00       	call   c0105148 <alloc_pages>
c0103ea8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103eab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103eaf:	75 24                	jne    c0103ed5 <basic_check+0x38e>
c0103eb1:	c7 44 24 0c d0 e1 10 	movl   $0xc010e1d0,0xc(%esp)
c0103eb8:	c0 
c0103eb9:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103ec0:	c0 
c0103ec1:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c0103ec8:	00 
c0103ec9:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103ed0:	e8 1b cf ff ff       	call   c0100df0 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ed5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103edc:	e8 67 12 00 00       	call   c0105148 <alloc_pages>
c0103ee1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ee4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ee8:	75 24                	jne    c0103f0e <basic_check+0x3c7>
c0103eea:	c7 44 24 0c ec e1 10 	movl   $0xc010e1ec,0xc(%esp)
c0103ef1:	c0 
c0103ef2:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103ef9:	c0 
c0103efa:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0103f01:	00 
c0103f02:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103f09:	e8 e2 ce ff ff       	call   c0100df0 <__panic>

    assert(alloc_page() == NULL);
c0103f0e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f15:	e8 2e 12 00 00       	call   c0105148 <alloc_pages>
c0103f1a:	85 c0                	test   %eax,%eax
c0103f1c:	74 24                	je     c0103f42 <basic_check+0x3fb>
c0103f1e:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0103f25:	c0 
c0103f26:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103f2d:	c0 
c0103f2e:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0103f35:	00 
c0103f36:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103f3d:	e8 ae ce ff ff       	call   c0100df0 <__panic>

    free_page(p0);
c0103f42:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f49:	00 
c0103f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f4d:	89 04 24             	mov    %eax,(%esp)
c0103f50:	e8 5e 12 00 00       	call   c01051b3 <free_pages>
c0103f55:	c7 45 d8 dc 80 1c c0 	movl   $0xc01c80dc,-0x28(%ebp)
c0103f5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f5f:	8b 40 04             	mov    0x4(%eax),%eax
c0103f62:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f65:	0f 94 c0             	sete   %al
c0103f68:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f6b:	85 c0                	test   %eax,%eax
c0103f6d:	74 24                	je     c0103f93 <basic_check+0x44c>
c0103f6f:	c7 44 24 0c f8 e2 10 	movl   $0xc010e2f8,0xc(%esp)
c0103f76:	c0 
c0103f77:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103f7e:	c0 
c0103f7f:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0103f86:	00 
c0103f87:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103f8e:	e8 5d ce ff ff       	call   c0100df0 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f93:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f9a:	e8 a9 11 00 00       	call   c0105148 <alloc_pages>
c0103f9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103fa2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fa5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103fa8:	74 24                	je     c0103fce <basic_check+0x487>
c0103faa:	c7 44 24 0c 10 e3 10 	movl   $0xc010e310,0xc(%esp)
c0103fb1:	c0 
c0103fb2:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103fb9:	c0 
c0103fba:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c0103fc1:	00 
c0103fc2:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103fc9:	e8 22 ce ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c0103fce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fd5:	e8 6e 11 00 00       	call   c0105148 <alloc_pages>
c0103fda:	85 c0                	test   %eax,%eax
c0103fdc:	74 24                	je     c0104002 <basic_check+0x4bb>
c0103fde:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0103fe5:	c0 
c0103fe6:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0103fed:	c0 
c0103fee:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c0103ff5:	00 
c0103ff6:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0103ffd:	e8 ee cd ff ff       	call   c0100df0 <__panic>

    assert(nr_free == 0);
c0104002:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c0104007:	85 c0                	test   %eax,%eax
c0104009:	74 24                	je     c010402f <basic_check+0x4e8>
c010400b:	c7 44 24 0c 29 e3 10 	movl   $0xc010e329,0xc(%esp)
c0104012:	c0 
c0104013:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010401a:	c0 
c010401b:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c0104022:	00 
c0104023:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c010402a:	e8 c1 cd ff ff       	call   c0100df0 <__panic>
    free_list = free_list_store;
c010402f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104032:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104035:	a3 dc 80 1c c0       	mov    %eax,0xc01c80dc
c010403a:	89 15 e0 80 1c c0    	mov    %edx,0xc01c80e0
    nr_free = nr_free_store;
c0104040:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104043:	a3 e4 80 1c c0       	mov    %eax,0xc01c80e4

    free_page(p);
c0104048:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010404f:	00 
c0104050:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104053:	89 04 24             	mov    %eax,(%esp)
c0104056:	e8 58 11 00 00       	call   c01051b3 <free_pages>
    free_page(p1);
c010405b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104062:	00 
c0104063:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104066:	89 04 24             	mov    %eax,(%esp)
c0104069:	e8 45 11 00 00       	call   c01051b3 <free_pages>
    free_page(p2);
c010406e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104075:	00 
c0104076:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104079:	89 04 24             	mov    %eax,(%esp)
c010407c:	e8 32 11 00 00       	call   c01051b3 <free_pages>
}
c0104081:	c9                   	leave  
c0104082:	c3                   	ret    

c0104083 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104083:	55                   	push   %ebp
c0104084:	89 e5                	mov    %esp,%ebp
c0104086:	53                   	push   %ebx
c0104087:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c010408d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104094:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010409b:	c7 45 ec dc 80 1c c0 	movl   $0xc01c80dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01040a2:	eb 6b                	jmp    c010410f <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c01040a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040a7:	83 e8 0c             	sub    $0xc,%eax
c01040aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c01040ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040b0:	83 c0 04             	add    $0x4,%eax
c01040b3:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01040ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01040c3:	0f a3 10             	bt     %edx,(%eax)
c01040c6:	19 c0                	sbb    %eax,%eax
c01040c8:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01040cb:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040cf:	0f 95 c0             	setne  %al
c01040d2:	0f b6 c0             	movzbl %al,%eax
c01040d5:	85 c0                	test   %eax,%eax
c01040d7:	75 24                	jne    c01040fd <default_check+0x7a>
c01040d9:	c7 44 24 0c 36 e3 10 	movl   $0xc010e336,0xc(%esp)
c01040e0:	c0 
c01040e1:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01040e8:	c0 
c01040e9:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01040f0:	00 
c01040f1:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01040f8:	e8 f3 cc ff ff       	call   c0100df0 <__panic>
        count ++, total += p->property;
c01040fd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104101:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104104:	8b 50 08             	mov    0x8(%eax),%edx
c0104107:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010410a:	01 d0                	add    %edx,%eax
c010410c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010410f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104112:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104115:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104118:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010411b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010411e:	81 7d ec dc 80 1c c0 	cmpl   $0xc01c80dc,-0x14(%ebp)
c0104125:	0f 85 79 ff ff ff    	jne    c01040a4 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010412b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010412e:	e8 b2 10 00 00       	call   c01051e5 <nr_free_pages>
c0104133:	39 c3                	cmp    %eax,%ebx
c0104135:	74 24                	je     c010415b <default_check+0xd8>
c0104137:	c7 44 24 0c 46 e3 10 	movl   $0xc010e346,0xc(%esp)
c010413e:	c0 
c010413f:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0104146:	c0 
c0104147:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c010414e:	00 
c010414f:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0104156:	e8 95 cc ff ff       	call   c0100df0 <__panic>

    basic_check();
c010415b:	e8 e7 f9 ff ff       	call   c0103b47 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104160:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104167:	e8 dc 0f 00 00       	call   c0105148 <alloc_pages>
c010416c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010416f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104173:	75 24                	jne    c0104199 <default_check+0x116>
c0104175:	c7 44 24 0c 5f e3 10 	movl   $0xc010e35f,0xc(%esp)
c010417c:	c0 
c010417d:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0104184:	c0 
c0104185:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010418c:	00 
c010418d:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0104194:	e8 57 cc ff ff       	call   c0100df0 <__panic>
    assert(!PageProperty(p0));
c0104199:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010419c:	83 c0 04             	add    $0x4,%eax
c010419f:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01041a6:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041a9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01041ac:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01041af:	0f a3 10             	bt     %edx,(%eax)
c01041b2:	19 c0                	sbb    %eax,%eax
c01041b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01041b7:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01041bb:	0f 95 c0             	setne  %al
c01041be:	0f b6 c0             	movzbl %al,%eax
c01041c1:	85 c0                	test   %eax,%eax
c01041c3:	74 24                	je     c01041e9 <default_check+0x166>
c01041c5:	c7 44 24 0c 6a e3 10 	movl   $0xc010e36a,0xc(%esp)
c01041cc:	c0 
c01041cd:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01041d4:	c0 
c01041d5:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c01041dc:	00 
c01041dd:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01041e4:	e8 07 cc ff ff       	call   c0100df0 <__panic>

    list_entry_t free_list_store = free_list;
c01041e9:	a1 dc 80 1c c0       	mov    0xc01c80dc,%eax
c01041ee:	8b 15 e0 80 1c c0    	mov    0xc01c80e0,%edx
c01041f4:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041f7:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041fa:	c7 45 b4 dc 80 1c c0 	movl   $0xc01c80dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104201:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104204:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104207:	89 50 04             	mov    %edx,0x4(%eax)
c010420a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010420d:	8b 50 04             	mov    0x4(%eax),%edx
c0104210:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104213:	89 10                	mov    %edx,(%eax)
c0104215:	c7 45 b0 dc 80 1c c0 	movl   $0xc01c80dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010421c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010421f:	8b 40 04             	mov    0x4(%eax),%eax
c0104222:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104225:	0f 94 c0             	sete   %al
c0104228:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010422b:	85 c0                	test   %eax,%eax
c010422d:	75 24                	jne    c0104253 <default_check+0x1d0>
c010422f:	c7 44 24 0c bf e2 10 	movl   $0xc010e2bf,0xc(%esp)
c0104236:	c0 
c0104237:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010423e:	c0 
c010423f:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c0104246:	00 
c0104247:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c010424e:	e8 9d cb ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c0104253:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010425a:	e8 e9 0e 00 00       	call   c0105148 <alloc_pages>
c010425f:	85 c0                	test   %eax,%eax
c0104261:	74 24                	je     c0104287 <default_check+0x204>
c0104263:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c010426a:	c0 
c010426b:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0104272:	c0 
c0104273:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010427a:	00 
c010427b:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0104282:	e8 69 cb ff ff       	call   c0100df0 <__panic>

    unsigned int nr_free_store = nr_free;
c0104287:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c010428c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010428f:	c7 05 e4 80 1c c0 00 	movl   $0x0,0xc01c80e4
c0104296:	00 00 00 

    free_pages(p0 + 2, 3);
c0104299:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010429c:	83 c0 40             	add    $0x40,%eax
c010429f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01042a6:	00 
c01042a7:	89 04 24             	mov    %eax,(%esp)
c01042aa:	e8 04 0f 00 00       	call   c01051b3 <free_pages>
    assert(alloc_pages(4) == NULL);
c01042af:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01042b6:	e8 8d 0e 00 00       	call   c0105148 <alloc_pages>
c01042bb:	85 c0                	test   %eax,%eax
c01042bd:	74 24                	je     c01042e3 <default_check+0x260>
c01042bf:	c7 44 24 0c 7c e3 10 	movl   $0xc010e37c,0xc(%esp)
c01042c6:	c0 
c01042c7:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01042ce:	c0 
c01042cf:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
c01042d6:	00 
c01042d7:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01042de:	e8 0d cb ff ff       	call   c0100df0 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042e6:	83 c0 40             	add    $0x40,%eax
c01042e9:	83 c0 04             	add    $0x4,%eax
c01042ec:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042f3:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042f6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042f9:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042fc:	0f a3 10             	bt     %edx,(%eax)
c01042ff:	19 c0                	sbb    %eax,%eax
c0104301:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0104304:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0104308:	0f 95 c0             	setne  %al
c010430b:	0f b6 c0             	movzbl %al,%eax
c010430e:	85 c0                	test   %eax,%eax
c0104310:	74 0e                	je     c0104320 <default_check+0x29d>
c0104312:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104315:	83 c0 40             	add    $0x40,%eax
c0104318:	8b 40 08             	mov    0x8(%eax),%eax
c010431b:	83 f8 03             	cmp    $0x3,%eax
c010431e:	74 24                	je     c0104344 <default_check+0x2c1>
c0104320:	c7 44 24 0c 94 e3 10 	movl   $0xc010e394,0xc(%esp)
c0104327:	c0 
c0104328:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010432f:	c0 
c0104330:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c0104337:	00 
c0104338:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c010433f:	e8 ac ca ff ff       	call   c0100df0 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104344:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010434b:	e8 f8 0d 00 00       	call   c0105148 <alloc_pages>
c0104350:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104353:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104357:	75 24                	jne    c010437d <default_check+0x2fa>
c0104359:	c7 44 24 0c c0 e3 10 	movl   $0xc010e3c0,0xc(%esp)
c0104360:	c0 
c0104361:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0104368:	c0 
c0104369:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c0104370:	00 
c0104371:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0104378:	e8 73 ca ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c010437d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104384:	e8 bf 0d 00 00       	call   c0105148 <alloc_pages>
c0104389:	85 c0                	test   %eax,%eax
c010438b:	74 24                	je     c01043b1 <default_check+0x32e>
c010438d:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0104394:	c0 
c0104395:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010439c:	c0 
c010439d:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c01043a4:	00 
c01043a5:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01043ac:	e8 3f ca ff ff       	call   c0100df0 <__panic>
    assert(p0 + 2 == p1);
c01043b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043b4:	83 c0 40             	add    $0x40,%eax
c01043b7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01043ba:	74 24                	je     c01043e0 <default_check+0x35d>
c01043bc:	c7 44 24 0c de e3 10 	movl   $0xc010e3de,0xc(%esp)
c01043c3:	c0 
c01043c4:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01043cb:	c0 
c01043cc:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01043d3:	00 
c01043d4:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01043db:	e8 10 ca ff ff       	call   c0100df0 <__panic>

    p2 = p0 + 1;
c01043e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043e3:	83 c0 20             	add    $0x20,%eax
c01043e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043e9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043f0:	00 
c01043f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043f4:	89 04 24             	mov    %eax,(%esp)
c01043f7:	e8 b7 0d 00 00       	call   c01051b3 <free_pages>
    free_pages(p1, 3);
c01043fc:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104403:	00 
c0104404:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104407:	89 04 24             	mov    %eax,(%esp)
c010440a:	e8 a4 0d 00 00       	call   c01051b3 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c010440f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104412:	83 c0 04             	add    $0x4,%eax
c0104415:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c010441c:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010441f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104422:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104425:	0f a3 10             	bt     %edx,(%eax)
c0104428:	19 c0                	sbb    %eax,%eax
c010442a:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c010442d:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104431:	0f 95 c0             	setne  %al
c0104434:	0f b6 c0             	movzbl %al,%eax
c0104437:	85 c0                	test   %eax,%eax
c0104439:	74 0b                	je     c0104446 <default_check+0x3c3>
c010443b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010443e:	8b 40 08             	mov    0x8(%eax),%eax
c0104441:	83 f8 01             	cmp    $0x1,%eax
c0104444:	74 24                	je     c010446a <default_check+0x3e7>
c0104446:	c7 44 24 0c ec e3 10 	movl   $0xc010e3ec,0xc(%esp)
c010444d:	c0 
c010444e:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0104455:	c0 
c0104456:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c010445d:	00 
c010445e:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c0104465:	e8 86 c9 ff ff       	call   c0100df0 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010446a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010446d:	83 c0 04             	add    $0x4,%eax
c0104470:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104477:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010447a:	8b 45 90             	mov    -0x70(%ebp),%eax
c010447d:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104480:	0f a3 10             	bt     %edx,(%eax)
c0104483:	19 c0                	sbb    %eax,%eax
c0104485:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104488:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010448c:	0f 95 c0             	setne  %al
c010448f:	0f b6 c0             	movzbl %al,%eax
c0104492:	85 c0                	test   %eax,%eax
c0104494:	74 0b                	je     c01044a1 <default_check+0x41e>
c0104496:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104499:	8b 40 08             	mov    0x8(%eax),%eax
c010449c:	83 f8 03             	cmp    $0x3,%eax
c010449f:	74 24                	je     c01044c5 <default_check+0x442>
c01044a1:	c7 44 24 0c 14 e4 10 	movl   $0xc010e414,0xc(%esp)
c01044a8:	c0 
c01044a9:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01044b0:	c0 
c01044b1:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c01044b8:	00 
c01044b9:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01044c0:	e8 2b c9 ff ff       	call   c0100df0 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01044c5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044cc:	e8 77 0c 00 00       	call   c0105148 <alloc_pages>
c01044d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044d7:	83 e8 20             	sub    $0x20,%eax
c01044da:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044dd:	74 24                	je     c0104503 <default_check+0x480>
c01044df:	c7 44 24 0c 3a e4 10 	movl   $0xc010e43a,0xc(%esp)
c01044e6:	c0 
c01044e7:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01044ee:	c0 
c01044ef:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01044f6:	00 
c01044f7:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01044fe:	e8 ed c8 ff ff       	call   c0100df0 <__panic>
    free_page(p0);
c0104503:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010450a:	00 
c010450b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010450e:	89 04 24             	mov    %eax,(%esp)
c0104511:	e8 9d 0c 00 00       	call   c01051b3 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0104516:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010451d:	e8 26 0c 00 00       	call   c0105148 <alloc_pages>
c0104522:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104525:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104528:	83 c0 20             	add    $0x20,%eax
c010452b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010452e:	74 24                	je     c0104554 <default_check+0x4d1>
c0104530:	c7 44 24 0c 58 e4 10 	movl   $0xc010e458,0xc(%esp)
c0104537:	c0 
c0104538:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010453f:	c0 
c0104540:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0104547:	00 
c0104548:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c010454f:	e8 9c c8 ff ff       	call   c0100df0 <__panic>

    free_pages(p0, 2);
c0104554:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010455b:	00 
c010455c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010455f:	89 04 24             	mov    %eax,(%esp)
c0104562:	e8 4c 0c 00 00       	call   c01051b3 <free_pages>
    free_page(p2);
c0104567:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010456e:	00 
c010456f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104572:	89 04 24             	mov    %eax,(%esp)
c0104575:	e8 39 0c 00 00       	call   c01051b3 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010457a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104581:	e8 c2 0b 00 00       	call   c0105148 <alloc_pages>
c0104586:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104589:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010458d:	75 24                	jne    c01045b3 <default_check+0x530>
c010458f:	c7 44 24 0c 78 e4 10 	movl   $0xc010e478,0xc(%esp)
c0104596:	c0 
c0104597:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c010459e:	c0 
c010459f:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
c01045a6:	00 
c01045a7:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01045ae:	e8 3d c8 ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c01045b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01045ba:	e8 89 0b 00 00       	call   c0105148 <alloc_pages>
c01045bf:	85 c0                	test   %eax,%eax
c01045c1:	74 24                	je     c01045e7 <default_check+0x564>
c01045c3:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c01045ca:	c0 
c01045cb:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01045d2:	c0 
c01045d3:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01045da:	00 
c01045db:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01045e2:	e8 09 c8 ff ff       	call   c0100df0 <__panic>

    assert(nr_free == 0);
c01045e7:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c01045ec:	85 c0                	test   %eax,%eax
c01045ee:	74 24                	je     c0104614 <default_check+0x591>
c01045f0:	c7 44 24 0c 29 e3 10 	movl   $0xc010e329,0xc(%esp)
c01045f7:	c0 
c01045f8:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01045ff:	c0 
c0104600:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0104607:	00 
c0104608:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c010460f:	e8 dc c7 ff ff       	call   c0100df0 <__panic>
    nr_free = nr_free_store;
c0104614:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104617:	a3 e4 80 1c c0       	mov    %eax,0xc01c80e4

    free_list = free_list_store;
c010461c:	8b 45 80             	mov    -0x80(%ebp),%eax
c010461f:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104622:	a3 dc 80 1c c0       	mov    %eax,0xc01c80dc
c0104627:	89 15 e0 80 1c c0    	mov    %edx,0xc01c80e0
    free_pages(p0, 5);
c010462d:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104634:	00 
c0104635:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104638:	89 04 24             	mov    %eax,(%esp)
c010463b:	e8 73 0b 00 00       	call   c01051b3 <free_pages>

    le = &free_list;
c0104640:	c7 45 ec dc 80 1c c0 	movl   $0xc01c80dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104647:	eb 1d                	jmp    c0104666 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104649:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010464c:	83 e8 0c             	sub    $0xc,%eax
c010464f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104652:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104656:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104659:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010465c:	8b 40 08             	mov    0x8(%eax),%eax
c010465f:	29 c2                	sub    %eax,%edx
c0104661:	89 d0                	mov    %edx,%eax
c0104663:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104666:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104669:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010466c:	8b 45 88             	mov    -0x78(%ebp),%eax
c010466f:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104672:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104675:	81 7d ec dc 80 1c c0 	cmpl   $0xc01c80dc,-0x14(%ebp)
c010467c:	75 cb                	jne    c0104649 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010467e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104682:	74 24                	je     c01046a8 <default_check+0x625>
c0104684:	c7 44 24 0c 96 e4 10 	movl   $0xc010e496,0xc(%esp)
c010468b:	c0 
c010468c:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c0104693:	c0 
c0104694:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c010469b:	00 
c010469c:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01046a3:	e8 48 c7 ff ff       	call   c0100df0 <__panic>
    assert(total == 0);
c01046a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01046ac:	74 24                	je     c01046d2 <default_check+0x64f>
c01046ae:	c7 44 24 0c a1 e4 10 	movl   $0xc010e4a1,0xc(%esp)
c01046b5:	c0 
c01046b6:	c7 44 24 08 36 e1 10 	movl   $0xc010e136,0x8(%esp)
c01046bd:	c0 
c01046be:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
c01046c5:	00 
c01046c6:	c7 04 24 4b e1 10 c0 	movl   $0xc010e14b,(%esp)
c01046cd:	e8 1e c7 ff ff       	call   c0100df0 <__panic>
}
c01046d2:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046d8:	5b                   	pop    %ebx
c01046d9:	5d                   	pop    %ebp
c01046da:	c3                   	ret    

c01046db <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046db:	55                   	push   %ebp
c01046dc:	89 e5                	mov    %esp,%ebp
c01046de:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046e1:	9c                   	pushf  
c01046e2:	58                   	pop    %eax
c01046e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01046e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046e9:	25 00 02 00 00       	and    $0x200,%eax
c01046ee:	85 c0                	test   %eax,%eax
c01046f0:	74 0c                	je     c01046fe <__intr_save+0x23>
        intr_disable();
c01046f2:	e8 62 d9 ff ff       	call   c0102059 <intr_disable>
        return 1;
c01046f7:	b8 01 00 00 00       	mov    $0x1,%eax
c01046fc:	eb 05                	jmp    c0104703 <__intr_save+0x28>
    }
    return 0;
c01046fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104703:	c9                   	leave  
c0104704:	c3                   	ret    

c0104705 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104705:	55                   	push   %ebp
c0104706:	89 e5                	mov    %esp,%ebp
c0104708:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010470b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010470f:	74 05                	je     c0104716 <__intr_restore+0x11>
        intr_enable();
c0104711:	e8 3d d9 ff ff       	call   c0102053 <intr_enable>
    }
}
c0104716:	c9                   	leave  
c0104717:	c3                   	ret    

c0104718 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104718:	55                   	push   %ebp
c0104719:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010471b:	8b 55 08             	mov    0x8(%ebp),%edx
c010471e:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c0104723:	29 c2                	sub    %eax,%edx
c0104725:	89 d0                	mov    %edx,%eax
c0104727:	c1 f8 05             	sar    $0x5,%eax
}
c010472a:	5d                   	pop    %ebp
c010472b:	c3                   	ret    

c010472c <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010472c:	55                   	push   %ebp
c010472d:	89 e5                	mov    %esp,%ebp
c010472f:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104732:	8b 45 08             	mov    0x8(%ebp),%eax
c0104735:	89 04 24             	mov    %eax,(%esp)
c0104738:	e8 db ff ff ff       	call   c0104718 <page2ppn>
c010473d:	c1 e0 0c             	shl    $0xc,%eax
}
c0104740:	c9                   	leave  
c0104741:	c3                   	ret    

c0104742 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104742:	55                   	push   %ebp
c0104743:	89 e5                	mov    %esp,%ebp
c0104745:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104748:	8b 45 08             	mov    0x8(%ebp),%eax
c010474b:	c1 e8 0c             	shr    $0xc,%eax
c010474e:	89 c2                	mov    %eax,%edx
c0104750:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0104755:	39 c2                	cmp    %eax,%edx
c0104757:	72 1c                	jb     c0104775 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104759:	c7 44 24 08 dc e4 10 	movl   $0xc010e4dc,0x8(%esp)
c0104760:	c0 
c0104761:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104768:	00 
c0104769:	c7 04 24 fb e4 10 c0 	movl   $0xc010e4fb,(%esp)
c0104770:	e8 7b c6 ff ff       	call   c0100df0 <__panic>
    }
    return &pages[PPN(pa)];
c0104775:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c010477a:	8b 55 08             	mov    0x8(%ebp),%edx
c010477d:	c1 ea 0c             	shr    $0xc,%edx
c0104780:	c1 e2 05             	shl    $0x5,%edx
c0104783:	01 d0                	add    %edx,%eax
}
c0104785:	c9                   	leave  
c0104786:	c3                   	ret    

c0104787 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104787:	55                   	push   %ebp
c0104788:	89 e5                	mov    %esp,%ebp
c010478a:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010478d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104790:	89 04 24             	mov    %eax,(%esp)
c0104793:	e8 94 ff ff ff       	call   c010472c <page2pa>
c0104798:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010479b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010479e:	c1 e8 0c             	shr    $0xc,%eax
c01047a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01047a4:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c01047a9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01047ac:	72 23                	jb     c01047d1 <page2kva+0x4a>
c01047ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047b5:	c7 44 24 08 0c e5 10 	movl   $0xc010e50c,0x8(%esp)
c01047bc:	c0 
c01047bd:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01047c4:	00 
c01047c5:	c7 04 24 fb e4 10 c0 	movl   $0xc010e4fb,(%esp)
c01047cc:	e8 1f c6 ff ff       	call   c0100df0 <__panic>
c01047d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047d4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047d9:	c9                   	leave  
c01047da:	c3                   	ret    

c01047db <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047db:	55                   	push   %ebp
c01047dc:	89 e5                	mov    %esp,%ebp
c01047de:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01047e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047e7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047ee:	77 23                	ja     c0104813 <kva2page+0x38>
c01047f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047f7:	c7 44 24 08 30 e5 10 	movl   $0xc010e530,0x8(%esp)
c01047fe:	c0 
c01047ff:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104806:	00 
c0104807:	c7 04 24 fb e4 10 c0 	movl   $0xc010e4fb,(%esp)
c010480e:	e8 dd c5 ff ff       	call   c0100df0 <__panic>
c0104813:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104816:	05 00 00 00 40       	add    $0x40000000,%eax
c010481b:	89 04 24             	mov    %eax,(%esp)
c010481e:	e8 1f ff ff ff       	call   c0104742 <pa2page>
}
c0104823:	c9                   	leave  
c0104824:	c3                   	ret    

c0104825 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104825:	55                   	push   %ebp
c0104826:	89 e5                	mov    %esp,%ebp
c0104828:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010482b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010482e:	ba 01 00 00 00       	mov    $0x1,%edx
c0104833:	89 c1                	mov    %eax,%ecx
c0104835:	d3 e2                	shl    %cl,%edx
c0104837:	89 d0                	mov    %edx,%eax
c0104839:	89 04 24             	mov    %eax,(%esp)
c010483c:	e8 07 09 00 00       	call   c0105148 <alloc_pages>
c0104841:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104844:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104848:	75 07                	jne    c0104851 <__slob_get_free_pages+0x2c>
    return NULL;
c010484a:	b8 00 00 00 00       	mov    $0x0,%eax
c010484f:	eb 0b                	jmp    c010485c <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104851:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104854:	89 04 24             	mov    %eax,(%esp)
c0104857:	e8 2b ff ff ff       	call   c0104787 <page2kva>
}
c010485c:	c9                   	leave  
c010485d:	c3                   	ret    

c010485e <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c010485e:	55                   	push   %ebp
c010485f:	89 e5                	mov    %esp,%ebp
c0104861:	53                   	push   %ebx
c0104862:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104865:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104868:	ba 01 00 00 00       	mov    $0x1,%edx
c010486d:	89 c1                	mov    %eax,%ecx
c010486f:	d3 e2                	shl    %cl,%edx
c0104871:	89 d0                	mov    %edx,%eax
c0104873:	89 c3                	mov    %eax,%ebx
c0104875:	8b 45 08             	mov    0x8(%ebp),%eax
c0104878:	89 04 24             	mov    %eax,(%esp)
c010487b:	e8 5b ff ff ff       	call   c01047db <kva2page>
c0104880:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104884:	89 04 24             	mov    %eax,(%esp)
c0104887:	e8 27 09 00 00       	call   c01051b3 <free_pages>
}
c010488c:	83 c4 14             	add    $0x14,%esp
c010488f:	5b                   	pop    %ebx
c0104890:	5d                   	pop    %ebp
c0104891:	c3                   	ret    

c0104892 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104892:	55                   	push   %ebp
c0104893:	89 e5                	mov    %esp,%ebp
c0104895:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104898:	8b 45 08             	mov    0x8(%ebp),%eax
c010489b:	83 c0 08             	add    $0x8,%eax
c010489e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01048a3:	76 24                	jbe    c01048c9 <slob_alloc+0x37>
c01048a5:	c7 44 24 0c 54 e5 10 	movl   $0xc010e554,0xc(%esp)
c01048ac:	c0 
c01048ad:	c7 44 24 08 73 e5 10 	movl   $0xc010e573,0x8(%esp)
c01048b4:	c0 
c01048b5:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01048bc:	00 
c01048bd:	c7 04 24 88 e5 10 c0 	movl   $0xc010e588,(%esp)
c01048c4:	e8 27 c5 ff ff       	call   c0100df0 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048c9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048d0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01048da:	83 c0 07             	add    $0x7,%eax
c01048dd:	c1 e8 03             	shr    $0x3,%eax
c01048e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048e3:	e8 f3 fd ff ff       	call   c01046db <__intr_save>
c01048e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048eb:	a1 e8 19 13 c0       	mov    0xc01319e8,%eax
c01048f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048f6:	8b 40 04             	mov    0x4(%eax),%eax
c01048f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104900:	74 25                	je     c0104927 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104902:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104905:	8b 45 10             	mov    0x10(%ebp),%eax
c0104908:	01 d0                	add    %edx,%eax
c010490a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010490d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104910:	f7 d8                	neg    %eax
c0104912:	21 d0                	and    %edx,%eax
c0104914:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104917:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010491a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010491d:	29 c2                	sub    %eax,%edx
c010491f:	89 d0                	mov    %edx,%eax
c0104921:	c1 f8 03             	sar    $0x3,%eax
c0104924:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010492a:	8b 00                	mov    (%eax),%eax
c010492c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010492f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104932:	01 ca                	add    %ecx,%edx
c0104934:	39 d0                	cmp    %edx,%eax
c0104936:	0f 8c aa 00 00 00    	jl     c01049e6 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010493c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104940:	74 38                	je     c010497a <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104942:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104945:	8b 00                	mov    (%eax),%eax
c0104947:	2b 45 e8             	sub    -0x18(%ebp),%eax
c010494a:	89 c2                	mov    %eax,%edx
c010494c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010494f:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104951:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104954:	8b 50 04             	mov    0x4(%eax),%edx
c0104957:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010495a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010495d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104960:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104963:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104966:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104969:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010496c:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010496e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104971:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104974:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104977:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c010497a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010497d:	8b 00                	mov    (%eax),%eax
c010497f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104982:	75 0e                	jne    c0104992 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104984:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104987:	8b 50 04             	mov    0x4(%eax),%edx
c010498a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010498d:	89 50 04             	mov    %edx,0x4(%eax)
c0104990:	eb 3c                	jmp    c01049ce <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104992:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104995:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010499c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010499f:	01 c2                	add    %eax,%edx
c01049a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049a4:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01049a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049aa:	8b 40 04             	mov    0x4(%eax),%eax
c01049ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049b0:	8b 12                	mov    (%edx),%edx
c01049b2:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01049b5:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01049b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ba:	8b 40 04             	mov    0x4(%eax),%eax
c01049bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049c0:	8b 52 04             	mov    0x4(%edx),%edx
c01049c3:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01049c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049cc:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049d1:	a3 e8 19 13 c0       	mov    %eax,0xc01319e8
			spin_unlock_irqrestore(&slob_lock, flags);
c01049d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049d9:	89 04 24             	mov    %eax,(%esp)
c01049dc:	e8 24 fd ff ff       	call   c0104705 <__intr_restore>
			return cur;
c01049e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049e4:	eb 7f                	jmp    c0104a65 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01049e6:	a1 e8 19 13 c0       	mov    0xc01319e8,%eax
c01049eb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049ee:	75 61                	jne    c0104a51 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049f3:	89 04 24             	mov    %eax,(%esp)
c01049f6:	e8 0a fd ff ff       	call   c0104705 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049fb:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104a02:	75 07                	jne    c0104a0b <slob_alloc+0x179>
				return 0;
c0104a04:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a09:	eb 5a                	jmp    c0104a65 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104a0b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a12:	00 
c0104a13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a16:	89 04 24             	mov    %eax,(%esp)
c0104a19:	e8 07 fe ff ff       	call   c0104825 <__slob_get_free_pages>
c0104a1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104a21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a25:	75 07                	jne    c0104a2e <slob_alloc+0x19c>
				return 0;
c0104a27:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a2c:	eb 37                	jmp    c0104a65 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104a2e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a35:	00 
c0104a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a39:	89 04 24             	mov    %eax,(%esp)
c0104a3c:	e8 26 00 00 00       	call   c0104a67 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a41:	e8 95 fc ff ff       	call   c01046db <__intr_save>
c0104a46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a49:	a1 e8 19 13 c0       	mov    0xc01319e8,%eax
c0104a4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a54:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a5a:	8b 40 04             	mov    0x4(%eax),%eax
c0104a5d:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a60:	e9 97 fe ff ff       	jmp    c01048fc <slob_alloc+0x6a>
}
c0104a65:	c9                   	leave  
c0104a66:	c3                   	ret    

c0104a67 <slob_free>:

static void slob_free(void *block, int size)
{
c0104a67:	55                   	push   %ebp
c0104a68:	89 e5                	mov    %esp,%ebp
c0104a6a:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a77:	75 05                	jne    c0104a7e <slob_free+0x17>
		return;
c0104a79:	e9 ff 00 00 00       	jmp    c0104b7d <slob_free+0x116>

	if (size)
c0104a7e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a82:	74 10                	je     c0104a94 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a87:	83 c0 07             	add    $0x7,%eax
c0104a8a:	c1 e8 03             	shr    $0x3,%eax
c0104a8d:	89 c2                	mov    %eax,%edx
c0104a8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a92:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a94:	e8 42 fc ff ff       	call   c01046db <__intr_save>
c0104a99:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a9c:	a1 e8 19 13 c0       	mov    0xc01319e8,%eax
c0104aa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104aa4:	eb 27                	jmp    c0104acd <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aa9:	8b 40 04             	mov    0x4(%eax),%eax
c0104aac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aaf:	77 13                	ja     c0104ac4 <slob_free+0x5d>
c0104ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ab4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ab7:	77 27                	ja     c0104ae0 <slob_free+0x79>
c0104ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104abc:	8b 40 04             	mov    0x4(%eax),%eax
c0104abf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ac2:	77 1c                	ja     c0104ae0 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac7:	8b 40 04             	mov    0x4(%eax),%eax
c0104aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104acd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ad3:	76 d1                	jbe    c0104aa6 <slob_free+0x3f>
c0104ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad8:	8b 40 04             	mov    0x4(%eax),%eax
c0104adb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ade:	76 c6                	jbe    c0104aa6 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae3:	8b 00                	mov    (%eax),%eax
c0104ae5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aef:	01 c2                	add    %eax,%edx
c0104af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af4:	8b 40 04             	mov    0x4(%eax),%eax
c0104af7:	39 c2                	cmp    %eax,%edx
c0104af9:	75 25                	jne    c0104b20 <slob_free+0xb9>
		b->units += cur->next->units;
c0104afb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104afe:	8b 10                	mov    (%eax),%edx
c0104b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b03:	8b 40 04             	mov    0x4(%eax),%eax
c0104b06:	8b 00                	mov    (%eax),%eax
c0104b08:	01 c2                	add    %eax,%edx
c0104b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b0d:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b12:	8b 40 04             	mov    0x4(%eax),%eax
c0104b15:	8b 50 04             	mov    0x4(%eax),%edx
c0104b18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1b:	89 50 04             	mov    %edx,0x4(%eax)
c0104b1e:	eb 0c                	jmp    c0104b2c <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b23:	8b 50 04             	mov    0x4(%eax),%edx
c0104b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b29:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2f:	8b 00                	mov    (%eax),%eax
c0104b31:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b3b:	01 d0                	add    %edx,%eax
c0104b3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b40:	75 1f                	jne    c0104b61 <slob_free+0xfa>
		cur->units += b->units;
c0104b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b45:	8b 10                	mov    (%eax),%edx
c0104b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b4a:	8b 00                	mov    (%eax),%eax
c0104b4c:	01 c2                	add    %eax,%edx
c0104b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b51:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b56:	8b 50 04             	mov    0x4(%eax),%edx
c0104b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b5c:	89 50 04             	mov    %edx,0x4(%eax)
c0104b5f:	eb 09                	jmp    c0104b6a <slob_free+0x103>
	} else
		cur->next = b;
c0104b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b64:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b67:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b6d:	a3 e8 19 13 c0       	mov    %eax,0xc01319e8

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b75:	89 04 24             	mov    %eax,(%esp)
c0104b78:	e8 88 fb ff ff       	call   c0104705 <__intr_restore>
}
c0104b7d:	c9                   	leave  
c0104b7e:	c3                   	ret    

c0104b7f <slob_init>:



void
slob_init(void) {
c0104b7f:	55                   	push   %ebp
c0104b80:	89 e5                	mov    %esp,%ebp
c0104b82:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b85:	c7 04 24 9a e5 10 c0 	movl   $0xc010e59a,(%esp)
c0104b8c:	e8 d3 b7 ff ff       	call   c0100364 <cprintf>
}
c0104b91:	c9                   	leave  
c0104b92:	c3                   	ret    

c0104b93 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b93:	55                   	push   %ebp
c0104b94:	89 e5                	mov    %esp,%ebp
c0104b96:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104b99:	e8 e1 ff ff ff       	call   c0104b7f <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b9e:	c7 04 24 ae e5 10 c0 	movl   $0xc010e5ae,(%esp)
c0104ba5:	e8 ba b7 ff ff       	call   c0100364 <cprintf>
}
c0104baa:	c9                   	leave  
c0104bab:	c3                   	ret    

c0104bac <slob_allocated>:

size_t
slob_allocated(void) {
c0104bac:	55                   	push   %ebp
c0104bad:	89 e5                	mov    %esp,%ebp
  return 0;
c0104baf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bb4:	5d                   	pop    %ebp
c0104bb5:	c3                   	ret    

c0104bb6 <kallocated>:

size_t
kallocated(void) {
c0104bb6:	55                   	push   %ebp
c0104bb7:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104bb9:	e8 ee ff ff ff       	call   c0104bac <slob_allocated>
}
c0104bbe:	5d                   	pop    %ebp
c0104bbf:	c3                   	ret    

c0104bc0 <find_order>:

static int find_order(int size)
{
c0104bc0:	55                   	push   %ebp
c0104bc1:	89 e5                	mov    %esp,%ebp
c0104bc3:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104bc6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bcd:	eb 07                	jmp    c0104bd6 <find_order+0x16>
		order++;
c0104bcf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bd3:	d1 7d 08             	sarl   0x8(%ebp)
c0104bd6:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104bdd:	7f f0                	jg     c0104bcf <find_order+0xf>
		order++;
	return order;
c0104bdf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104be2:	c9                   	leave  
c0104be3:	c3                   	ret    

c0104be4 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104be4:	55                   	push   %ebp
c0104be5:	89 e5                	mov    %esp,%ebp
c0104be7:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104bea:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104bf1:	77 38                	ja     c0104c2b <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bf6:	8d 50 08             	lea    0x8(%eax),%edx
c0104bf9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c00:	00 
c0104c01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c08:	89 14 24             	mov    %edx,(%esp)
c0104c0b:	e8 82 fc ff ff       	call   c0104892 <slob_alloc>
c0104c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104c13:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c17:	74 08                	je     c0104c21 <__kmalloc+0x3d>
c0104c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c1c:	83 c0 08             	add    $0x8,%eax
c0104c1f:	eb 05                	jmp    c0104c26 <__kmalloc+0x42>
c0104c21:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c26:	e9 a6 00 00 00       	jmp    c0104cd1 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c32:	00 
c0104c33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c3a:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c41:	e8 4c fc ff ff       	call   c0104892 <slob_alloc>
c0104c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c4d:	75 07                	jne    c0104c56 <__kmalloc+0x72>
		return 0;
c0104c4f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c54:	eb 7b                	jmp    c0104cd1 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c56:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c59:	89 04 24             	mov    %eax,(%esp)
c0104c5c:	e8 5f ff ff ff       	call   c0104bc0 <find_order>
c0104c61:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c64:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c69:	8b 00                	mov    (%eax),%eax
c0104c6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c72:	89 04 24             	mov    %eax,(%esp)
c0104c75:	e8 ab fb ff ff       	call   c0104825 <__slob_get_free_pages>
c0104c7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c7d:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c83:	8b 40 04             	mov    0x4(%eax),%eax
c0104c86:	85 c0                	test   %eax,%eax
c0104c88:	74 2f                	je     c0104cb9 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c8a:	e8 4c fa ff ff       	call   c01046db <__intr_save>
c0104c8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c92:	8b 15 84 5f 1c c0    	mov    0xc01c5f84,%edx
c0104c98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c9b:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca1:	a3 84 5f 1c c0       	mov    %eax,0xc01c5f84
		spin_unlock_irqrestore(&block_lock, flags);
c0104ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ca9:	89 04 24             	mov    %eax,(%esp)
c0104cac:	e8 54 fa ff ff       	call   c0104705 <__intr_restore>
		return bb->pages;
c0104cb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cb4:	8b 40 04             	mov    0x4(%eax),%eax
c0104cb7:	eb 18                	jmp    c0104cd1 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104cb9:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104cc0:	00 
c0104cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cc4:	89 04 24             	mov    %eax,(%esp)
c0104cc7:	e8 9b fd ff ff       	call   c0104a67 <slob_free>
	return 0;
c0104ccc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cd1:	c9                   	leave  
c0104cd2:	c3                   	ret    

c0104cd3 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cd3:	55                   	push   %ebp
c0104cd4:	89 e5                	mov    %esp,%ebp
c0104cd6:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104cd9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ce0:	00 
c0104ce1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ce4:	89 04 24             	mov    %eax,(%esp)
c0104ce7:	e8 f8 fe ff ff       	call   c0104be4 <__kmalloc>
}
c0104cec:	c9                   	leave  
c0104ced:	c3                   	ret    

c0104cee <kfree>:


void kfree(void *block)
{
c0104cee:	55                   	push   %ebp
c0104cef:	89 e5                	mov    %esp,%ebp
c0104cf1:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104cf4:	c7 45 f0 84 5f 1c c0 	movl   $0xc01c5f84,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104cfb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104cff:	75 05                	jne    c0104d06 <kfree+0x18>
		return;
c0104d01:	e9 a2 00 00 00       	jmp    c0104da8 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d06:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d09:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d0e:	85 c0                	test   %eax,%eax
c0104d10:	75 7f                	jne    c0104d91 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104d12:	e8 c4 f9 ff ff       	call   c01046db <__intr_save>
c0104d17:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d1a:	a1 84 5f 1c c0       	mov    0xc01c5f84,%eax
c0104d1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d22:	eb 5c                	jmp    c0104d80 <kfree+0x92>
			if (bb->pages == block) {
c0104d24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d27:	8b 40 04             	mov    0x4(%eax),%eax
c0104d2a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d2d:	75 3f                	jne    c0104d6e <kfree+0x80>
				*last = bb->next;
c0104d2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d32:	8b 50 08             	mov    0x8(%eax),%edx
c0104d35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d38:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d3d:	89 04 24             	mov    %eax,(%esp)
c0104d40:	e8 c0 f9 ff ff       	call   c0104705 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d48:	8b 10                	mov    (%eax),%edx
c0104d4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d4d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d51:	89 04 24             	mov    %eax,(%esp)
c0104d54:	e8 05 fb ff ff       	call   c010485e <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d59:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d60:	00 
c0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d64:	89 04 24             	mov    %eax,(%esp)
c0104d67:	e8 fb fc ff ff       	call   c0104a67 <slob_free>
				return;
c0104d6c:	eb 3a                	jmp    c0104da8 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d71:	83 c0 08             	add    $0x8,%eax
c0104d74:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7a:	8b 40 08             	mov    0x8(%eax),%eax
c0104d7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d84:	75 9e                	jne    c0104d24 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d89:	89 04 24             	mov    %eax,(%esp)
c0104d8c:	e8 74 f9 ff ff       	call   c0104705 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d91:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d94:	83 e8 08             	sub    $0x8,%eax
c0104d97:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d9e:	00 
c0104d9f:	89 04 24             	mov    %eax,(%esp)
c0104da2:	e8 c0 fc ff ff       	call   c0104a67 <slob_free>
	return;
c0104da7:	90                   	nop
}
c0104da8:	c9                   	leave  
c0104da9:	c3                   	ret    

c0104daa <ksize>:


unsigned int ksize(const void *block)
{
c0104daa:	55                   	push   %ebp
c0104dab:	89 e5                	mov    %esp,%ebp
c0104dad:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104db4:	75 07                	jne    c0104dbd <ksize+0x13>
		return 0;
c0104db6:	b8 00 00 00 00       	mov    $0x0,%eax
c0104dbb:	eb 6b                	jmp    c0104e28 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dc0:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104dc5:	85 c0                	test   %eax,%eax
c0104dc7:	75 54                	jne    c0104e1d <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104dc9:	e8 0d f9 ff ff       	call   c01046db <__intr_save>
c0104dce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104dd1:	a1 84 5f 1c c0       	mov    0xc01c5f84,%eax
c0104dd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dd9:	eb 31                	jmp    c0104e0c <ksize+0x62>
			if (bb->pages == block) {
c0104ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dde:	8b 40 04             	mov    0x4(%eax),%eax
c0104de1:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104de4:	75 1d                	jne    c0104e03 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104de6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104de9:	89 04 24             	mov    %eax,(%esp)
c0104dec:	e8 14 f9 ff ff       	call   c0104705 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df4:	8b 00                	mov    (%eax),%eax
c0104df6:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104dfb:	89 c1                	mov    %eax,%ecx
c0104dfd:	d3 e2                	shl    %cl,%edx
c0104dff:	89 d0                	mov    %edx,%eax
c0104e01:	eb 25                	jmp    c0104e28 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e06:	8b 40 08             	mov    0x8(%eax),%eax
c0104e09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e10:	75 c9                	jne    c0104ddb <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e15:	89 04 24             	mov    %eax,(%esp)
c0104e18:	e8 e8 f8 ff ff       	call   c0104705 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e20:	83 e8 08             	sub    $0x8,%eax
c0104e23:	8b 00                	mov    (%eax),%eax
c0104e25:	c1 e0 03             	shl    $0x3,%eax
}
c0104e28:	c9                   	leave  
c0104e29:	c3                   	ret    

c0104e2a <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e2a:	55                   	push   %ebp
c0104e2b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e2d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e30:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c0104e35:	29 c2                	sub    %eax,%edx
c0104e37:	89 d0                	mov    %edx,%eax
c0104e39:	c1 f8 05             	sar    $0x5,%eax
}
c0104e3c:	5d                   	pop    %ebp
c0104e3d:	c3                   	ret    

c0104e3e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e3e:	55                   	push   %ebp
c0104e3f:	89 e5                	mov    %esp,%ebp
c0104e41:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e47:	89 04 24             	mov    %eax,(%esp)
c0104e4a:	e8 db ff ff ff       	call   c0104e2a <page2ppn>
c0104e4f:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e52:	c9                   	leave  
c0104e53:	c3                   	ret    

c0104e54 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e54:	55                   	push   %ebp
c0104e55:	89 e5                	mov    %esp,%ebp
c0104e57:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e5d:	c1 e8 0c             	shr    $0xc,%eax
c0104e60:	89 c2                	mov    %eax,%edx
c0104e62:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0104e67:	39 c2                	cmp    %eax,%edx
c0104e69:	72 1c                	jb     c0104e87 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e6b:	c7 44 24 08 cc e5 10 	movl   $0xc010e5cc,0x8(%esp)
c0104e72:	c0 
c0104e73:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e7a:	00 
c0104e7b:	c7 04 24 eb e5 10 c0 	movl   $0xc010e5eb,(%esp)
c0104e82:	e8 69 bf ff ff       	call   c0100df0 <__panic>
    }
    return &pages[PPN(pa)];
c0104e87:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c0104e8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e8f:	c1 ea 0c             	shr    $0xc,%edx
c0104e92:	c1 e2 05             	shl    $0x5,%edx
c0104e95:	01 d0                	add    %edx,%eax
}
c0104e97:	c9                   	leave  
c0104e98:	c3                   	ret    

c0104e99 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e99:	55                   	push   %ebp
c0104e9a:	89 e5                	mov    %esp,%ebp
c0104e9c:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea2:	89 04 24             	mov    %eax,(%esp)
c0104ea5:	e8 94 ff ff ff       	call   c0104e3e <page2pa>
c0104eaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eb0:	c1 e8 0c             	shr    $0xc,%eax
c0104eb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104eb6:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0104ebb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ebe:	72 23                	jb     c0104ee3 <page2kva+0x4a>
c0104ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ec3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104ec7:	c7 44 24 08 fc e5 10 	movl   $0xc010e5fc,0x8(%esp)
c0104ece:	c0 
c0104ecf:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104ed6:	00 
c0104ed7:	c7 04 24 eb e5 10 c0 	movl   $0xc010e5eb,(%esp)
c0104ede:	e8 0d bf ff ff       	call   c0100df0 <__panic>
c0104ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ee6:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104eeb:	c9                   	leave  
c0104eec:	c3                   	ret    

c0104eed <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104eed:	55                   	push   %ebp
c0104eee:	89 e5                	mov    %esp,%ebp
c0104ef0:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104ef3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef6:	83 e0 01             	and    $0x1,%eax
c0104ef9:	85 c0                	test   %eax,%eax
c0104efb:	75 1c                	jne    c0104f19 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104efd:	c7 44 24 08 20 e6 10 	movl   $0xc010e620,0x8(%esp)
c0104f04:	c0 
c0104f05:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104f0c:	00 
c0104f0d:	c7 04 24 eb e5 10 c0 	movl   $0xc010e5eb,(%esp)
c0104f14:	e8 d7 be ff ff       	call   c0100df0 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f21:	89 04 24             	mov    %eax,(%esp)
c0104f24:	e8 2b ff ff ff       	call   c0104e54 <pa2page>
}
c0104f29:	c9                   	leave  
c0104f2a:	c3                   	ret    

c0104f2b <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f2b:	55                   	push   %ebp
c0104f2c:	89 e5                	mov    %esp,%ebp
c0104f2e:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f31:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f39:	89 04 24             	mov    %eax,(%esp)
c0104f3c:	e8 13 ff ff ff       	call   c0104e54 <pa2page>
}
c0104f41:	c9                   	leave  
c0104f42:	c3                   	ret    

c0104f43 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f43:	55                   	push   %ebp
c0104f44:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f49:	8b 00                	mov    (%eax),%eax
}
c0104f4b:	5d                   	pop    %ebp
c0104f4c:	c3                   	ret    

c0104f4d <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f4d:	55                   	push   %ebp
c0104f4e:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f53:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f56:	89 10                	mov    %edx,(%eax)
}
c0104f58:	5d                   	pop    %ebp
c0104f59:	c3                   	ret    

c0104f5a <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f5a:	55                   	push   %ebp
c0104f5b:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f60:	8b 00                	mov    (%eax),%eax
c0104f62:	8d 50 01             	lea    0x1(%eax),%edx
c0104f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f68:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6d:	8b 00                	mov    (%eax),%eax
}
c0104f6f:	5d                   	pop    %ebp
c0104f70:	c3                   	ret    

c0104f71 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f71:	55                   	push   %ebp
c0104f72:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f74:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f77:	8b 00                	mov    (%eax),%eax
c0104f79:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7f:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f84:	8b 00                	mov    (%eax),%eax
}
c0104f86:	5d                   	pop    %ebp
c0104f87:	c3                   	ret    

c0104f88 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f88:	55                   	push   %ebp
c0104f89:	89 e5                	mov    %esp,%ebp
c0104f8b:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f8e:	9c                   	pushf  
c0104f8f:	58                   	pop    %eax
c0104f90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f96:	25 00 02 00 00       	and    $0x200,%eax
c0104f9b:	85 c0                	test   %eax,%eax
c0104f9d:	74 0c                	je     c0104fab <__intr_save+0x23>
        intr_disable();
c0104f9f:	e8 b5 d0 ff ff       	call   c0102059 <intr_disable>
        return 1;
c0104fa4:	b8 01 00 00 00       	mov    $0x1,%eax
c0104fa9:	eb 05                	jmp    c0104fb0 <__intr_save+0x28>
    }
    return 0;
c0104fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fb0:	c9                   	leave  
c0104fb1:	c3                   	ret    

c0104fb2 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104fb2:	55                   	push   %ebp
c0104fb3:	89 e5                	mov    %esp,%ebp
c0104fb5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104fb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104fbc:	74 05                	je     c0104fc3 <__intr_restore+0x11>
        intr_enable();
c0104fbe:	e8 90 d0 ff ff       	call   c0102053 <intr_enable>
    }
}
c0104fc3:	c9                   	leave  
c0104fc4:	c3                   	ret    

c0104fc5 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104fc5:	55                   	push   %ebp
c0104fc6:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104fc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fcb:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104fce:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fd3:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104fd5:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fda:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104fdc:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fe1:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104fe3:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fe8:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104fea:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fef:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104ff1:	ea f8 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104ff8
}
c0104ff8:	5d                   	pop    %ebp
c0104ff9:	c3                   	ret    

c0104ffa <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104ffa:	55                   	push   %ebp
c0104ffb:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104ffd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105000:	a3 c4 5f 1c c0       	mov    %eax,0xc01c5fc4
}
c0105005:	5d                   	pop    %ebp
c0105006:	c3                   	ret    

c0105007 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0105007:	55                   	push   %ebp
c0105008:	89 e5                	mov    %esp,%ebp
c010500a:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c010500d:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0105012:	89 04 24             	mov    %eax,(%esp)
c0105015:	e8 e0 ff ff ff       	call   c0104ffa <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c010501a:	66 c7 05 c8 5f 1c c0 	movw   $0x10,0xc01c5fc8
c0105021:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105023:	66 c7 05 48 1a 13 c0 	movw   $0x68,0xc0131a48
c010502a:	68 00 
c010502c:	b8 c0 5f 1c c0       	mov    $0xc01c5fc0,%eax
c0105031:	66 a3 4a 1a 13 c0    	mov    %ax,0xc0131a4a
c0105037:	b8 c0 5f 1c c0       	mov    $0xc01c5fc0,%eax
c010503c:	c1 e8 10             	shr    $0x10,%eax
c010503f:	a2 4c 1a 13 c0       	mov    %al,0xc0131a4c
c0105044:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c010504b:	83 e0 f0             	and    $0xfffffff0,%eax
c010504e:	83 c8 09             	or     $0x9,%eax
c0105051:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105056:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c010505d:	83 e0 ef             	and    $0xffffffef,%eax
c0105060:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105065:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c010506c:	83 e0 9f             	and    $0xffffff9f,%eax
c010506f:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105074:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c010507b:	83 c8 80             	or     $0xffffff80,%eax
c010507e:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105083:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010508a:	83 e0 f0             	and    $0xfffffff0,%eax
c010508d:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105092:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0105099:	83 e0 ef             	and    $0xffffffef,%eax
c010509c:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050a1:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c01050a8:	83 e0 df             	and    $0xffffffdf,%eax
c01050ab:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050b0:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c01050b7:	83 c8 40             	or     $0x40,%eax
c01050ba:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050bf:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c01050c6:	83 e0 7f             	and    $0x7f,%eax
c01050c9:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050ce:	b8 c0 5f 1c c0       	mov    $0xc01c5fc0,%eax
c01050d3:	c1 e8 18             	shr    $0x18,%eax
c01050d6:	a2 4f 1a 13 c0       	mov    %al,0xc0131a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01050db:	c7 04 24 50 1a 13 c0 	movl   $0xc0131a50,(%esp)
c01050e2:	e8 de fe ff ff       	call   c0104fc5 <lgdt>
c01050e7:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01050ed:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01050f1:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01050f4:	c9                   	leave  
c01050f5:	c3                   	ret    

c01050f6 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01050f6:	55                   	push   %ebp
c01050f7:	89 e5                	mov    %esp,%ebp
c01050f9:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01050fc:	c7 05 e8 80 1c c0 c0 	movl   $0xc010e4c0,0xc01c80e8
c0105103:	e4 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0105106:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c010510b:	8b 00                	mov    (%eax),%eax
c010510d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105111:	c7 04 24 4c e6 10 c0 	movl   $0xc010e64c,(%esp)
c0105118:	e8 47 b2 ff ff       	call   c0100364 <cprintf>
    pmm_manager->init();
c010511d:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c0105122:	8b 40 04             	mov    0x4(%eax),%eax
c0105125:	ff d0                	call   *%eax
}
c0105127:	c9                   	leave  
c0105128:	c3                   	ret    

c0105129 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105129:	55                   	push   %ebp
c010512a:	89 e5                	mov    %esp,%ebp
c010512c:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010512f:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c0105134:	8b 40 08             	mov    0x8(%eax),%eax
c0105137:	8b 55 0c             	mov    0xc(%ebp),%edx
c010513a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010513e:	8b 55 08             	mov    0x8(%ebp),%edx
c0105141:	89 14 24             	mov    %edx,(%esp)
c0105144:	ff d0                	call   *%eax
}
c0105146:	c9                   	leave  
c0105147:	c3                   	ret    

c0105148 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105148:	55                   	push   %ebp
c0105149:	89 e5                	mov    %esp,%ebp
c010514b:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c010514e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105155:	e8 2e fe ff ff       	call   c0104f88 <__intr_save>
c010515a:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c010515d:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c0105162:	8b 40 0c             	mov    0xc(%eax),%eax
c0105165:	8b 55 08             	mov    0x8(%ebp),%edx
c0105168:	89 14 24             	mov    %edx,(%esp)
c010516b:	ff d0                	call   *%eax
c010516d:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105170:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105173:	89 04 24             	mov    %eax,(%esp)
c0105176:	e8 37 fe ff ff       	call   c0104fb2 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010517b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010517f:	75 2d                	jne    c01051ae <alloc_pages+0x66>
c0105181:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0105185:	77 27                	ja     c01051ae <alloc_pages+0x66>
c0105187:	a1 2c 60 1c c0       	mov    0xc01c602c,%eax
c010518c:	85 c0                	test   %eax,%eax
c010518e:	74 1e                	je     c01051ae <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105190:	8b 55 08             	mov    0x8(%ebp),%edx
c0105193:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c0105198:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010519f:	00 
c01051a0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051a4:	89 04 24             	mov    %eax,(%esp)
c01051a7:	e8 19 1d 00 00       	call   c0106ec5 <swap_out>
    }
c01051ac:	eb a7                	jmp    c0105155 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01051ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01051b1:	c9                   	leave  
c01051b2:	c3                   	ret    

c01051b3 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051b3:	55                   	push   %ebp
c01051b4:	89 e5                	mov    %esp,%ebp
c01051b6:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051b9:	e8 ca fd ff ff       	call   c0104f88 <__intr_save>
c01051be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051c1:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c01051c6:	8b 40 10             	mov    0x10(%eax),%eax
c01051c9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01051cc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051d0:	8b 55 08             	mov    0x8(%ebp),%edx
c01051d3:	89 14 24             	mov    %edx,(%esp)
c01051d6:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01051d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051db:	89 04 24             	mov    %eax,(%esp)
c01051de:	e8 cf fd ff ff       	call   c0104fb2 <__intr_restore>
}
c01051e3:	c9                   	leave  
c01051e4:	c3                   	ret    

c01051e5 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01051e5:	55                   	push   %ebp
c01051e6:	89 e5                	mov    %esp,%ebp
c01051e8:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01051eb:	e8 98 fd ff ff       	call   c0104f88 <__intr_save>
c01051f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01051f3:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c01051f8:	8b 40 14             	mov    0x14(%eax),%eax
c01051fb:	ff d0                	call   *%eax
c01051fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105200:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105203:	89 04 24             	mov    %eax,(%esp)
c0105206:	e8 a7 fd ff ff       	call   c0104fb2 <__intr_restore>
    return ret;
c010520b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010520e:	c9                   	leave  
c010520f:	c3                   	ret    

c0105210 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0105210:	55                   	push   %ebp
c0105211:	89 e5                	mov    %esp,%ebp
c0105213:	57                   	push   %edi
c0105214:	56                   	push   %esi
c0105215:	53                   	push   %ebx
c0105216:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010521c:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105223:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010522a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105231:	c7 04 24 63 e6 10 c0 	movl   $0xc010e663,(%esp)
c0105238:	e8 27 b1 ff ff       	call   c0100364 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010523d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105244:	e9 15 01 00 00       	jmp    c010535e <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105249:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010524c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010524f:	89 d0                	mov    %edx,%eax
c0105251:	c1 e0 02             	shl    $0x2,%eax
c0105254:	01 d0                	add    %edx,%eax
c0105256:	c1 e0 02             	shl    $0x2,%eax
c0105259:	01 c8                	add    %ecx,%eax
c010525b:	8b 50 08             	mov    0x8(%eax),%edx
c010525e:	8b 40 04             	mov    0x4(%eax),%eax
c0105261:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105264:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105267:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010526a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010526d:	89 d0                	mov    %edx,%eax
c010526f:	c1 e0 02             	shl    $0x2,%eax
c0105272:	01 d0                	add    %edx,%eax
c0105274:	c1 e0 02             	shl    $0x2,%eax
c0105277:	01 c8                	add    %ecx,%eax
c0105279:	8b 48 0c             	mov    0xc(%eax),%ecx
c010527c:	8b 58 10             	mov    0x10(%eax),%ebx
c010527f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105282:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105285:	01 c8                	add    %ecx,%eax
c0105287:	11 da                	adc    %ebx,%edx
c0105289:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010528c:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010528f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105292:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105295:	89 d0                	mov    %edx,%eax
c0105297:	c1 e0 02             	shl    $0x2,%eax
c010529a:	01 d0                	add    %edx,%eax
c010529c:	c1 e0 02             	shl    $0x2,%eax
c010529f:	01 c8                	add    %ecx,%eax
c01052a1:	83 c0 14             	add    $0x14,%eax
c01052a4:	8b 00                	mov    (%eax),%eax
c01052a6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01052ac:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01052af:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052b2:	83 c0 ff             	add    $0xffffffff,%eax
c01052b5:	83 d2 ff             	adc    $0xffffffff,%edx
c01052b8:	89 c6                	mov    %eax,%esi
c01052ba:	89 d7                	mov    %edx,%edi
c01052bc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052c2:	89 d0                	mov    %edx,%eax
c01052c4:	c1 e0 02             	shl    $0x2,%eax
c01052c7:	01 d0                	add    %edx,%eax
c01052c9:	c1 e0 02             	shl    $0x2,%eax
c01052cc:	01 c8                	add    %ecx,%eax
c01052ce:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052d1:	8b 58 10             	mov    0x10(%eax),%ebx
c01052d4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01052da:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01052de:	89 74 24 14          	mov    %esi,0x14(%esp)
c01052e2:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01052e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052e9:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052f0:	89 54 24 10          	mov    %edx,0x10(%esp)
c01052f4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01052f8:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01052fc:	c7 04 24 70 e6 10 c0 	movl   $0xc010e670,(%esp)
c0105303:	e8 5c b0 ff ff       	call   c0100364 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105308:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010530b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010530e:	89 d0                	mov    %edx,%eax
c0105310:	c1 e0 02             	shl    $0x2,%eax
c0105313:	01 d0                	add    %edx,%eax
c0105315:	c1 e0 02             	shl    $0x2,%eax
c0105318:	01 c8                	add    %ecx,%eax
c010531a:	83 c0 14             	add    $0x14,%eax
c010531d:	8b 00                	mov    (%eax),%eax
c010531f:	83 f8 01             	cmp    $0x1,%eax
c0105322:	75 36                	jne    c010535a <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105324:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105327:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010532a:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010532d:	77 2b                	ja     c010535a <page_init+0x14a>
c010532f:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105332:	72 05                	jb     c0105339 <page_init+0x129>
c0105334:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105337:	73 21                	jae    c010535a <page_init+0x14a>
c0105339:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010533d:	77 1b                	ja     c010535a <page_init+0x14a>
c010533f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105343:	72 09                	jb     c010534e <page_init+0x13e>
c0105345:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010534c:	77 0c                	ja     c010535a <page_init+0x14a>
                maxpa = end;
c010534e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105351:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105354:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105357:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010535a:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010535e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105361:	8b 00                	mov    (%eax),%eax
c0105363:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105366:	0f 8f dd fe ff ff    	jg     c0105249 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010536c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105370:	72 1d                	jb     c010538f <page_init+0x17f>
c0105372:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105376:	77 09                	ja     c0105381 <page_init+0x171>
c0105378:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010537f:	76 0e                	jbe    c010538f <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105381:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105388:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010538f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105392:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105395:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105399:	c1 ea 0c             	shr    $0xc,%edx
c010539c:	a3 a0 5f 1c c0       	mov    %eax,0xc01c5fa0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01053a1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01053a8:	b8 c4 82 1c c0       	mov    $0xc01c82c4,%eax
c01053ad:	8d 50 ff             	lea    -0x1(%eax),%edx
c01053b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01053b3:	01 d0                	add    %edx,%eax
c01053b5:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053b8:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053bb:	ba 00 00 00 00       	mov    $0x0,%edx
c01053c0:	f7 75 ac             	divl   -0x54(%ebp)
c01053c3:	89 d0                	mov    %edx,%eax
c01053c5:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053c8:	29 c2                	sub    %eax,%edx
c01053ca:	89 d0                	mov    %edx,%eax
c01053cc:	a3 f0 80 1c c0       	mov    %eax,0xc01c80f0

    for (i = 0; i < npage; i ++) {
c01053d1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053d8:	eb 27                	jmp    c0105401 <page_init+0x1f1>
        SetPageReserved(pages + i);
c01053da:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c01053df:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053e2:	c1 e2 05             	shl    $0x5,%edx
c01053e5:	01 d0                	add    %edx,%eax
c01053e7:	83 c0 04             	add    $0x4,%eax
c01053ea:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01053f1:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01053f4:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01053f7:	8b 55 90             	mov    -0x70(%ebp),%edx
c01053fa:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01053fd:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105401:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105404:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0105409:	39 c2                	cmp    %eax,%edx
c010540b:	72 cd                	jb     c01053da <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010540d:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0105412:	c1 e0 05             	shl    $0x5,%eax
c0105415:	89 c2                	mov    %eax,%edx
c0105417:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c010541c:	01 d0                	add    %edx,%eax
c010541e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105421:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105428:	77 23                	ja     c010544d <page_init+0x23d>
c010542a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010542d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105431:	c7 44 24 08 a0 e6 10 	movl   $0xc010e6a0,0x8(%esp)
c0105438:	c0 
c0105439:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0105440:	00 
c0105441:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105448:	e8 a3 b9 ff ff       	call   c0100df0 <__panic>
c010544d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105450:	05 00 00 00 40       	add    $0x40000000,%eax
c0105455:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105458:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010545f:	e9 74 01 00 00       	jmp    c01055d8 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105464:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105467:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010546a:	89 d0                	mov    %edx,%eax
c010546c:	c1 e0 02             	shl    $0x2,%eax
c010546f:	01 d0                	add    %edx,%eax
c0105471:	c1 e0 02             	shl    $0x2,%eax
c0105474:	01 c8                	add    %ecx,%eax
c0105476:	8b 50 08             	mov    0x8(%eax),%edx
c0105479:	8b 40 04             	mov    0x4(%eax),%eax
c010547c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010547f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105482:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105485:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105488:	89 d0                	mov    %edx,%eax
c010548a:	c1 e0 02             	shl    $0x2,%eax
c010548d:	01 d0                	add    %edx,%eax
c010548f:	c1 e0 02             	shl    $0x2,%eax
c0105492:	01 c8                	add    %ecx,%eax
c0105494:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105497:	8b 58 10             	mov    0x10(%eax),%ebx
c010549a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010549d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054a0:	01 c8                	add    %ecx,%eax
c01054a2:	11 da                	adc    %ebx,%edx
c01054a4:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01054a7:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01054aa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054b0:	89 d0                	mov    %edx,%eax
c01054b2:	c1 e0 02             	shl    $0x2,%eax
c01054b5:	01 d0                	add    %edx,%eax
c01054b7:	c1 e0 02             	shl    $0x2,%eax
c01054ba:	01 c8                	add    %ecx,%eax
c01054bc:	83 c0 14             	add    $0x14,%eax
c01054bf:	8b 00                	mov    (%eax),%eax
c01054c1:	83 f8 01             	cmp    $0x1,%eax
c01054c4:	0f 85 0a 01 00 00    	jne    c01055d4 <page_init+0x3c4>
            if (begin < freemem) {
c01054ca:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054cd:	ba 00 00 00 00       	mov    $0x0,%edx
c01054d2:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054d5:	72 17                	jb     c01054ee <page_init+0x2de>
c01054d7:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054da:	77 05                	ja     c01054e1 <page_init+0x2d1>
c01054dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01054df:	76 0d                	jbe    c01054ee <page_init+0x2de>
                begin = freemem;
c01054e1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054e7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01054ee:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054f2:	72 1d                	jb     c0105511 <page_init+0x301>
c01054f4:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054f8:	77 09                	ja     c0105503 <page_init+0x2f3>
c01054fa:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0105501:	76 0e                	jbe    c0105511 <page_init+0x301>
                end = KMEMSIZE;
c0105503:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010550a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105511:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105514:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105517:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010551a:	0f 87 b4 00 00 00    	ja     c01055d4 <page_init+0x3c4>
c0105520:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105523:	72 09                	jb     c010552e <page_init+0x31e>
c0105525:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105528:	0f 83 a6 00 00 00    	jae    c01055d4 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c010552e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105535:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105538:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010553b:	01 d0                	add    %edx,%eax
c010553d:	83 e8 01             	sub    $0x1,%eax
c0105540:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105543:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105546:	ba 00 00 00 00       	mov    $0x0,%edx
c010554b:	f7 75 9c             	divl   -0x64(%ebp)
c010554e:	89 d0                	mov    %edx,%eax
c0105550:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105553:	29 c2                	sub    %eax,%edx
c0105555:	89 d0                	mov    %edx,%eax
c0105557:	ba 00 00 00 00       	mov    $0x0,%edx
c010555c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010555f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105562:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105565:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105568:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010556b:	ba 00 00 00 00       	mov    $0x0,%edx
c0105570:	89 c7                	mov    %eax,%edi
c0105572:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105578:	89 7d 80             	mov    %edi,-0x80(%ebp)
c010557b:	89 d0                	mov    %edx,%eax
c010557d:	83 e0 00             	and    $0x0,%eax
c0105580:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105583:	8b 45 80             	mov    -0x80(%ebp),%eax
c0105586:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105589:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010558c:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010558f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105592:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105595:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105598:	77 3a                	ja     c01055d4 <page_init+0x3c4>
c010559a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010559d:	72 05                	jb     c01055a4 <page_init+0x394>
c010559f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01055a2:	73 30                	jae    c01055d4 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01055a4:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01055a7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01055aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055ad:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01055b0:	29 c8                	sub    %ecx,%eax
c01055b2:	19 da                	sbb    %ebx,%edx
c01055b4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01055b8:	c1 ea 0c             	shr    $0xc,%edx
c01055bb:	89 c3                	mov    %eax,%ebx
c01055bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055c0:	89 04 24             	mov    %eax,(%esp)
c01055c3:	e8 8c f8 ff ff       	call   c0104e54 <pa2page>
c01055c8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01055cc:	89 04 24             	mov    %eax,(%esp)
c01055cf:	e8 55 fb ff ff       	call   c0105129 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01055d4:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01055d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01055db:	8b 00                	mov    (%eax),%eax
c01055dd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01055e0:	0f 8f 7e fe ff ff    	jg     c0105464 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01055e6:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01055ec:	5b                   	pop    %ebx
c01055ed:	5e                   	pop    %esi
c01055ee:	5f                   	pop    %edi
c01055ef:	5d                   	pop    %ebp
c01055f0:	c3                   	ret    

c01055f1 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01055f1:	55                   	push   %ebp
c01055f2:	89 e5                	mov    %esp,%ebp
c01055f4:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01055f7:	8b 45 14             	mov    0x14(%ebp),%eax
c01055fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01055fd:	31 d0                	xor    %edx,%eax
c01055ff:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105604:	85 c0                	test   %eax,%eax
c0105606:	74 24                	je     c010562c <boot_map_segment+0x3b>
c0105608:	c7 44 24 0c d2 e6 10 	movl   $0xc010e6d2,0xc(%esp)
c010560f:	c0 
c0105610:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105617:	c0 
c0105618:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010561f:	00 
c0105620:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105627:	e8 c4 b7 ff ff       	call   c0100df0 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010562c:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105636:	25 ff 0f 00 00       	and    $0xfff,%eax
c010563b:	89 c2                	mov    %eax,%edx
c010563d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105640:	01 c2                	add    %eax,%edx
c0105642:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105645:	01 d0                	add    %edx,%eax
c0105647:	83 e8 01             	sub    $0x1,%eax
c010564a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010564d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105650:	ba 00 00 00 00       	mov    $0x0,%edx
c0105655:	f7 75 f0             	divl   -0x10(%ebp)
c0105658:	89 d0                	mov    %edx,%eax
c010565a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010565d:	29 c2                	sub    %eax,%edx
c010565f:	89 d0                	mov    %edx,%eax
c0105661:	c1 e8 0c             	shr    $0xc,%eax
c0105664:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105667:	8b 45 0c             	mov    0xc(%ebp),%eax
c010566a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010566d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105670:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105675:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105678:	8b 45 14             	mov    0x14(%ebp),%eax
c010567b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010567e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105681:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105686:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105689:	eb 6b                	jmp    c01056f6 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010568b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105692:	00 
c0105693:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105696:	89 44 24 04          	mov    %eax,0x4(%esp)
c010569a:	8b 45 08             	mov    0x8(%ebp),%eax
c010569d:	89 04 24             	mov    %eax,(%esp)
c01056a0:	e8 87 01 00 00       	call   c010582c <get_pte>
c01056a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01056a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01056ac:	75 24                	jne    c01056d2 <boot_map_segment+0xe1>
c01056ae:	c7 44 24 0c fe e6 10 	movl   $0xc010e6fe,0xc(%esp)
c01056b5:	c0 
c01056b6:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01056bd:	c0 
c01056be:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01056c5:	00 
c01056c6:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01056cd:	e8 1e b7 ff ff       	call   c0100df0 <__panic>
        *ptep = pa | PTE_P | perm;
c01056d2:	8b 45 18             	mov    0x18(%ebp),%eax
c01056d5:	8b 55 14             	mov    0x14(%ebp),%edx
c01056d8:	09 d0                	or     %edx,%eax
c01056da:	83 c8 01             	or     $0x1,%eax
c01056dd:	89 c2                	mov    %eax,%edx
c01056df:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056e2:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056e4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01056e8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01056ef:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01056f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01056fa:	75 8f                	jne    c010568b <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01056fc:	c9                   	leave  
c01056fd:	c3                   	ret    

c01056fe <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01056fe:	55                   	push   %ebp
c01056ff:	89 e5                	mov    %esp,%ebp
c0105701:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105704:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010570b:	e8 38 fa ff ff       	call   c0105148 <alloc_pages>
c0105710:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105713:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105717:	75 1c                	jne    c0105735 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105719:	c7 44 24 08 0b e7 10 	movl   $0xc010e70b,0x8(%esp)
c0105720:	c0 
c0105721:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0105728:	00 
c0105729:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105730:	e8 bb b6 ff ff       	call   c0100df0 <__panic>
    }
    return page2kva(p);
c0105735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105738:	89 04 24             	mov    %eax,(%esp)
c010573b:	e8 59 f7 ff ff       	call   c0104e99 <page2kva>
}
c0105740:	c9                   	leave  
c0105741:	c3                   	ret    

c0105742 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105742:	55                   	push   %ebp
c0105743:	89 e5                	mov    %esp,%ebp
c0105745:	83 ec 38             	sub    $0x38,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0105748:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c010574d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105750:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105757:	77 23                	ja     c010577c <pmm_init+0x3a>
c0105759:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010575c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105760:	c7 44 24 08 a0 e6 10 	movl   $0xc010e6a0,0x8(%esp)
c0105767:	c0 
c0105768:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010576f:	00 
c0105770:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105777:	e8 74 b6 ff ff       	call   c0100df0 <__panic>
c010577c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010577f:	05 00 00 00 40       	add    $0x40000000,%eax
c0105784:	a3 ec 80 1c c0       	mov    %eax,0xc01c80ec
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105789:	e8 68 f9 ff ff       	call   c01050f6 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010578e:	e8 7d fa ff ff       	call   c0105210 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105793:	e8 d2 08 00 00       	call   c010606a <check_alloc_page>

    check_pgdir();
c0105798:	e8 eb 08 00 00       	call   c0106088 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c010579d:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01057a2:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01057a8:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01057ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01057b0:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01057b7:	77 23                	ja     c01057dc <pmm_init+0x9a>
c01057b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057bc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057c0:	c7 44 24 08 a0 e6 10 	movl   $0xc010e6a0,0x8(%esp)
c01057c7:	c0 
c01057c8:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c01057cf:	00 
c01057d0:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01057d7:	e8 14 b6 ff ff       	call   c0100df0 <__panic>
c01057dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057df:	05 00 00 00 40       	add    $0x40000000,%eax
c01057e4:	83 c8 03             	or     $0x3,%eax
c01057e7:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01057e9:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01057ee:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c01057f5:	00 
c01057f6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01057fd:	00 
c01057fe:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105805:	38 
c0105806:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c010580d:	c0 
c010580e:	89 04 24             	mov    %eax,(%esp)
c0105811:	e8 db fd ff ff       	call   c01055f1 <boot_map_segment>

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105816:	e8 ec f7 ff ff       	call   c0105007 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c010581b:	e8 03 0f 00 00       	call   c0106723 <check_boot_pgdir>

    print_pgdir();
c0105820:	e8 8b 13 00 00       	call   c0106bb0 <print_pgdir>
    
    kmalloc_init();
c0105825:	e8 69 f3 ff ff       	call   c0104b93 <kmalloc_init>

}
c010582a:	c9                   	leave  
c010582b:	c3                   	ret    

c010582c <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c010582c:	55                   	push   %ebp
c010582d:	89 e5                	mov    %esp,%ebp
c010582f:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0105832:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105835:	c1 e8 16             	shr    $0x16,%eax
c0105838:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010583f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105842:	01 d0                	add    %edx,%eax
c0105844:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0105847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010584a:	8b 00                	mov    (%eax),%eax
c010584c:	83 e0 01             	and    $0x1,%eax
c010584f:	85 c0                	test   %eax,%eax
c0105851:	0f 85 af 00 00 00    	jne    c0105906 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0105857:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010585b:	74 15                	je     c0105872 <get_pte+0x46>
c010585d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105864:	e8 df f8 ff ff       	call   c0105148 <alloc_pages>
c0105869:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010586c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105870:	75 0a                	jne    c010587c <get_pte+0x50>
            return NULL;
c0105872:	b8 00 00 00 00       	mov    $0x0,%eax
c0105877:	e9 e6 00 00 00       	jmp    c0105962 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c010587c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105883:	00 
c0105884:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105887:	89 04 24             	mov    %eax,(%esp)
c010588a:	e8 be f6 ff ff       	call   c0104f4d <set_page_ref>
        uintptr_t pa = page2pa(page);
c010588f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105892:	89 04 24             	mov    %eax,(%esp)
c0105895:	e8 a4 f5 ff ff       	call   c0104e3e <page2pa>
c010589a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c010589d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01058a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058a6:	c1 e8 0c             	shr    $0xc,%eax
c01058a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058ac:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c01058b1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01058b4:	72 23                	jb     c01058d9 <get_pte+0xad>
c01058b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058bd:	c7 44 24 08 fc e5 10 	movl   $0xc010e5fc,0x8(%esp)
c01058c4:	c0 
c01058c5:	c7 44 24 04 82 01 00 	movl   $0x182,0x4(%esp)
c01058cc:	00 
c01058cd:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01058d4:	e8 17 b5 ff ff       	call   c0100df0 <__panic>
c01058d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058dc:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01058e1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01058e8:	00 
c01058e9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01058f0:	00 
c01058f1:	89 04 24             	mov    %eax,(%esp)
c01058f4:	e8 38 7d 00 00       	call   c010d631 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01058f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058fc:	83 c8 07             	or     $0x7,%eax
c01058ff:	89 c2                	mov    %eax,%edx
c0105901:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105904:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0105906:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105909:	8b 00                	mov    (%eax),%eax
c010590b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105910:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105913:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105916:	c1 e8 0c             	shr    $0xc,%eax
c0105919:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010591c:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0105921:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105924:	72 23                	jb     c0105949 <get_pte+0x11d>
c0105926:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105929:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010592d:	c7 44 24 08 fc e5 10 	movl   $0xc010e5fc,0x8(%esp)
c0105934:	c0 
c0105935:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c010593c:	00 
c010593d:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105944:	e8 a7 b4 ff ff       	call   c0100df0 <__panic>
c0105949:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010594c:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105951:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105954:	c1 ea 0c             	shr    $0xc,%edx
c0105957:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c010595d:	c1 e2 02             	shl    $0x2,%edx
c0105960:	01 d0                	add    %edx,%eax
}
c0105962:	c9                   	leave  
c0105963:	c3                   	ret    

c0105964 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105964:	55                   	push   %ebp
c0105965:	89 e5                	mov    %esp,%ebp
c0105967:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010596a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105971:	00 
c0105972:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105975:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105979:	8b 45 08             	mov    0x8(%ebp),%eax
c010597c:	89 04 24             	mov    %eax,(%esp)
c010597f:	e8 a8 fe ff ff       	call   c010582c <get_pte>
c0105984:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105987:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010598b:	74 08                	je     c0105995 <get_page+0x31>
        *ptep_store = ptep;
c010598d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105990:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105993:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105995:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105999:	74 1b                	je     c01059b6 <get_page+0x52>
c010599b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010599e:	8b 00                	mov    (%eax),%eax
c01059a0:	83 e0 01             	and    $0x1,%eax
c01059a3:	85 c0                	test   %eax,%eax
c01059a5:	74 0f                	je     c01059b6 <get_page+0x52>
        return pte2page(*ptep);
c01059a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059aa:	8b 00                	mov    (%eax),%eax
c01059ac:	89 04 24             	mov    %eax,(%esp)
c01059af:	e8 39 f5 ff ff       	call   c0104eed <pte2page>
c01059b4:	eb 05                	jmp    c01059bb <get_page+0x57>
    }
    return NULL;
c01059b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01059bb:	c9                   	leave  
c01059bc:	c3                   	ret    

c01059bd <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c01059bd:	55                   	push   %ebp
c01059be:	89 e5                	mov    %esp,%ebp
c01059c0:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c01059c3:	8b 45 10             	mov    0x10(%ebp),%eax
c01059c6:	8b 00                	mov    (%eax),%eax
c01059c8:	83 e0 01             	and    $0x1,%eax
c01059cb:	85 c0                	test   %eax,%eax
c01059cd:	74 4d                	je     c0105a1c <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c01059cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01059d2:	8b 00                	mov    (%eax),%eax
c01059d4:	89 04 24             	mov    %eax,(%esp)
c01059d7:	e8 11 f5 ff ff       	call   c0104eed <pte2page>
c01059dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c01059df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059e2:	89 04 24             	mov    %eax,(%esp)
c01059e5:	e8 87 f5 ff ff       	call   c0104f71 <page_ref_dec>
c01059ea:	85 c0                	test   %eax,%eax
c01059ec:	75 13                	jne    c0105a01 <page_remove_pte+0x44>
            free_page(page);
c01059ee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01059f5:	00 
c01059f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059f9:	89 04 24             	mov    %eax,(%esp)
c01059fc:	e8 b2 f7 ff ff       	call   c01051b3 <free_pages>
        }
        *ptep = 0;
c0105a01:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a11:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a14:	89 04 24             	mov    %eax,(%esp)
c0105a17:	e8 1d 05 00 00       	call   c0105f39 <tlb_invalidate>
    }
}
c0105a1c:	c9                   	leave  
c0105a1d:	c3                   	ret    

c0105a1e <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105a1e:	55                   	push   %ebp
c0105a1f:	89 e5                	mov    %esp,%ebp
c0105a21:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a27:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a2c:	85 c0                	test   %eax,%eax
c0105a2e:	75 0c                	jne    c0105a3c <unmap_range+0x1e>
c0105a30:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a33:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a38:	85 c0                	test   %eax,%eax
c0105a3a:	74 24                	je     c0105a60 <unmap_range+0x42>
c0105a3c:	c7 44 24 0c 24 e7 10 	movl   $0xc010e724,0xc(%esp)
c0105a43:	c0 
c0105a44:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105a4b:	c0 
c0105a4c:	c7 44 24 04 bf 01 00 	movl   $0x1bf,0x4(%esp)
c0105a53:	00 
c0105a54:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105a5b:	e8 90 b3 ff ff       	call   c0100df0 <__panic>
    assert(USER_ACCESS(start, end));
c0105a60:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105a67:	76 11                	jbe    c0105a7a <unmap_range+0x5c>
c0105a69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a6c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105a6f:	73 09                	jae    c0105a7a <unmap_range+0x5c>
c0105a71:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105a78:	76 24                	jbe    c0105a9e <unmap_range+0x80>
c0105a7a:	c7 44 24 0c 4d e7 10 	movl   $0xc010e74d,0xc(%esp)
c0105a81:	c0 
c0105a82:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105a89:	c0 
c0105a8a:	c7 44 24 04 c0 01 00 	movl   $0x1c0,0x4(%esp)
c0105a91:	00 
c0105a92:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105a99:	e8 52 b3 ff ff       	call   c0100df0 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105a9e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105aa5:	00 
c0105aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aa9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105aad:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ab0:	89 04 24             	mov    %eax,(%esp)
c0105ab3:	e8 74 fd ff ff       	call   c010582c <get_pte>
c0105ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105abb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105abf:	75 18                	jne    c0105ad9 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105ac1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ac4:	05 00 00 40 00       	add    $0x400000,%eax
c0105ac9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105acc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105acf:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105ad4:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105ad7:	eb 29                	jmp    c0105b02 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105adc:	8b 00                	mov    (%eax),%eax
c0105ade:	85 c0                	test   %eax,%eax
c0105ae0:	74 19                	je     c0105afb <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ae5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ae9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aec:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105af0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105af3:	89 04 24             	mov    %eax,(%esp)
c0105af6:	e8 c2 fe ff ff       	call   c01059bd <page_remove_pte>
        }
        start += PGSIZE;
c0105afb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b02:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b06:	74 08                	je     c0105b10 <unmap_range+0xf2>
c0105b08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b0b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b0e:	72 8e                	jb     c0105a9e <unmap_range+0x80>
}
c0105b10:	c9                   	leave  
c0105b11:	c3                   	ret    

c0105b12 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b12:	55                   	push   %ebp
c0105b13:	89 e5                	mov    %esp,%ebp
c0105b15:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b1b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b20:	85 c0                	test   %eax,%eax
c0105b22:	75 0c                	jne    c0105b30 <exit_range+0x1e>
c0105b24:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b27:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b2c:	85 c0                	test   %eax,%eax
c0105b2e:	74 24                	je     c0105b54 <exit_range+0x42>
c0105b30:	c7 44 24 0c 24 e7 10 	movl   $0xc010e724,0xc(%esp)
c0105b37:	c0 
c0105b38:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105b3f:	c0 
c0105b40:	c7 44 24 04 d1 01 00 	movl   $0x1d1,0x4(%esp)
c0105b47:	00 
c0105b48:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105b4f:	e8 9c b2 ff ff       	call   c0100df0 <__panic>
    assert(USER_ACCESS(start, end));
c0105b54:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b5b:	76 11                	jbe    c0105b6e <exit_range+0x5c>
c0105b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b60:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b63:	73 09                	jae    c0105b6e <exit_range+0x5c>
c0105b65:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b6c:	76 24                	jbe    c0105b92 <exit_range+0x80>
c0105b6e:	c7 44 24 0c 4d e7 10 	movl   $0xc010e74d,0xc(%esp)
c0105b75:	c0 
c0105b76:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105b7d:	c0 
c0105b7e:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
c0105b85:	00 
c0105b86:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105b8d:	e8 5e b2 ff ff       	call   c0100df0 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105b92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b9b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105ba0:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ba6:	c1 e8 16             	shr    $0x16,%eax
c0105ba9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105bac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105baf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bb9:	01 d0                	add    %edx,%eax
c0105bbb:	8b 00                	mov    (%eax),%eax
c0105bbd:	83 e0 01             	and    $0x1,%eax
c0105bc0:	85 c0                	test   %eax,%eax
c0105bc2:	74 3e                	je     c0105c02 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bc7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bd1:	01 d0                	add    %edx,%eax
c0105bd3:	8b 00                	mov    (%eax),%eax
c0105bd5:	89 04 24             	mov    %eax,(%esp)
c0105bd8:	e8 4e f3 ff ff       	call   c0104f2b <pde2page>
c0105bdd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105be4:	00 
c0105be5:	89 04 24             	mov    %eax,(%esp)
c0105be8:	e8 c6 f5 ff ff       	call   c01051b3 <free_pages>
            pgdir[pde_idx] = 0;
c0105bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bf0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bfa:	01 d0                	add    %edx,%eax
c0105bfc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c02:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c09:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c0d:	74 08                	je     c0105c17 <exit_range+0x105>
c0105c0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c12:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c15:	72 8c                	jb     c0105ba3 <exit_range+0x91>
}
c0105c17:	c9                   	leave  
c0105c18:	c3                   	ret    

c0105c19 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c19:	55                   	push   %ebp
c0105c1a:	89 e5                	mov    %esp,%ebp
c0105c1c:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c1f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c22:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c27:	85 c0                	test   %eax,%eax
c0105c29:	75 0c                	jne    c0105c37 <copy_range+0x1e>
c0105c2b:	8b 45 14             	mov    0x14(%ebp),%eax
c0105c2e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c33:	85 c0                	test   %eax,%eax
c0105c35:	74 24                	je     c0105c5b <copy_range+0x42>
c0105c37:	c7 44 24 0c 24 e7 10 	movl   $0xc010e724,0xc(%esp)
c0105c3e:	c0 
c0105c3f:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105c46:	c0 
c0105c47:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105c4e:	00 
c0105c4f:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105c56:	e8 95 b1 ff ff       	call   c0100df0 <__panic>
    assert(USER_ACCESS(start, end));
c0105c5b:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105c62:	76 11                	jbe    c0105c75 <copy_range+0x5c>
c0105c64:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c67:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105c6a:	73 09                	jae    c0105c75 <copy_range+0x5c>
c0105c6c:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105c73:	76 24                	jbe    c0105c99 <copy_range+0x80>
c0105c75:	c7 44 24 0c 4d e7 10 	movl   $0xc010e74d,0xc(%esp)
c0105c7c:	c0 
c0105c7d:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105c84:	c0 
c0105c85:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105c8c:	00 
c0105c8d:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105c94:	e8 57 b1 ff ff       	call   c0100df0 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105c99:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ca0:	00 
c0105ca1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ca4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ca8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cab:	89 04 24             	mov    %eax,(%esp)
c0105cae:	e8 79 fb ff ff       	call   c010582c <get_pte>
c0105cb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105cb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105cba:	75 1b                	jne    c0105cd7 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105cbc:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cbf:	05 00 00 40 00       	add    $0x400000,%eax
c0105cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105cc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cca:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105ccf:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105cd2:	e9 4c 01 00 00       	jmp    c0105e23 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cda:	8b 00                	mov    (%eax),%eax
c0105cdc:	83 e0 01             	and    $0x1,%eax
c0105cdf:	85 c0                	test   %eax,%eax
c0105ce1:	0f 84 35 01 00 00    	je     c0105e1c <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105ce7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105cee:	00 
c0105cef:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cf2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cf9:	89 04 24             	mov    %eax,(%esp)
c0105cfc:	e8 2b fb ff ff       	call   c010582c <get_pte>
c0105d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d08:	75 0a                	jne    c0105d14 <copy_range+0xfb>
                return -E_NO_MEM;
c0105d0a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d0f:	e9 26 01 00 00       	jmp    c0105e3a <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d17:	8b 00                	mov    (%eax),%eax
c0105d19:	83 e0 07             	and    $0x7,%eax
c0105d1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d22:	8b 00                	mov    (%eax),%eax
c0105d24:	89 04 24             	mov    %eax,(%esp)
c0105d27:	e8 c1 f1 ff ff       	call   c0104eed <pte2page>
c0105d2c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105d2f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105d36:	e8 0d f4 ff ff       	call   c0105148 <alloc_pages>
c0105d3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105d3e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105d42:	75 24                	jne    c0105d68 <copy_range+0x14f>
c0105d44:	c7 44 24 0c 65 e7 10 	movl   $0xc010e765,0xc(%esp)
c0105d4b:	c0 
c0105d4c:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105d53:	c0 
c0105d54:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c0105d5b:	00 
c0105d5c:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105d63:	e8 88 b0 ff ff       	call   c0100df0 <__panic>
        assert(npage!=NULL);
c0105d68:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105d6c:	75 24                	jne    c0105d92 <copy_range+0x179>
c0105d6e:	c7 44 24 0c 70 e7 10 	movl   $0xc010e770,0xc(%esp)
c0105d75:	c0 
c0105d76:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105d7d:	c0 
c0105d7e:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105d85:	00 
c0105d86:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105d8d:	e8 5e b0 ff ff       	call   c0100df0 <__panic>
        int ret=0;
c0105d92:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105d99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105d9c:	89 04 24             	mov    %eax,(%esp)
c0105d9f:	e8 f5 f0 ff ff       	call   c0104e99 <page2kva>
c0105da4:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105da7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105daa:	89 04 24             	mov    %eax,(%esp)
c0105dad:	e8 e7 f0 ff ff       	call   c0104e99 <page2kva>
c0105db2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105db5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105dbc:	00 
c0105dbd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105dc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dc4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105dc7:	89 04 24             	mov    %eax,(%esp)
c0105dca:	e8 44 79 00 00       	call   c010d713 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105dcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105dd2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105dd6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dd9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ddd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105de0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105de4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105de7:	89 04 24             	mov    %eax,(%esp)
c0105dea:	e8 91 00 00 00       	call   c0105e80 <page_insert>
c0105def:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105df2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105df6:	74 24                	je     c0105e1c <copy_range+0x203>
c0105df8:	c7 44 24 0c 7c e7 10 	movl   $0xc010e77c,0xc(%esp)
c0105dff:	c0 
c0105e00:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0105e07:	c0 
c0105e08:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0105e0f:	00 
c0105e10:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105e17:	e8 d4 af ff ff       	call   c0100df0 <__panic>
        }
        start += PGSIZE;
c0105e1c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105e23:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105e27:	74 0c                	je     c0105e35 <copy_range+0x21c>
c0105e29:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e2c:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105e2f:	0f 82 64 fe ff ff    	jb     c0105c99 <copy_range+0x80>
    return 0;
c0105e35:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e3a:	c9                   	leave  
c0105e3b:	c3                   	ret    

c0105e3c <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105e3c:	55                   	push   %ebp
c0105e3d:	89 e5                	mov    %esp,%ebp
c0105e3f:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105e42:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e49:	00 
c0105e4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e54:	89 04 24             	mov    %eax,(%esp)
c0105e57:	e8 d0 f9 ff ff       	call   c010582c <get_pte>
c0105e5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105e5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e63:	74 19                	je     c0105e7e <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e68:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e73:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e76:	89 04 24             	mov    %eax,(%esp)
c0105e79:	e8 3f fb ff ff       	call   c01059bd <page_remove_pte>
    }
}
c0105e7e:	c9                   	leave  
c0105e7f:	c3                   	ret    

c0105e80 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105e80:	55                   	push   %ebp
c0105e81:	89 e5                	mov    %esp,%ebp
c0105e83:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105e86:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105e8d:	00 
c0105e8e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e98:	89 04 24             	mov    %eax,(%esp)
c0105e9b:	e8 8c f9 ff ff       	call   c010582c <get_pte>
c0105ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105ea3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ea7:	75 0a                	jne    c0105eb3 <page_insert+0x33>
        return -E_NO_MEM;
c0105ea9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105eae:	e9 84 00 00 00       	jmp    c0105f37 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105eb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105eb6:	89 04 24             	mov    %eax,(%esp)
c0105eb9:	e8 9c f0 ff ff       	call   c0104f5a <page_ref_inc>
    if (*ptep & PTE_P) {
c0105ebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ec1:	8b 00                	mov    (%eax),%eax
c0105ec3:	83 e0 01             	and    $0x1,%eax
c0105ec6:	85 c0                	test   %eax,%eax
c0105ec8:	74 3e                	je     c0105f08 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ecd:	8b 00                	mov    (%eax),%eax
c0105ecf:	89 04 24             	mov    %eax,(%esp)
c0105ed2:	e8 16 f0 ff ff       	call   c0104eed <pte2page>
c0105ed7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105edd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105ee0:	75 0d                	jne    c0105eef <page_insert+0x6f>
            page_ref_dec(page);
c0105ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ee5:	89 04 24             	mov    %eax,(%esp)
c0105ee8:	e8 84 f0 ff ff       	call   c0104f71 <page_ref_dec>
c0105eed:	eb 19                	jmp    c0105f08 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ef6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ef9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105efd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f00:	89 04 24             	mov    %eax,(%esp)
c0105f03:	e8 b5 fa ff ff       	call   c01059bd <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f0b:	89 04 24             	mov    %eax,(%esp)
c0105f0e:	e8 2b ef ff ff       	call   c0104e3e <page2pa>
c0105f13:	0b 45 14             	or     0x14(%ebp),%eax
c0105f16:	83 c8 01             	or     $0x1,%eax
c0105f19:	89 c2                	mov    %eax,%edx
c0105f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f1e:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105f20:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f23:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f27:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f2a:	89 04 24             	mov    %eax,(%esp)
c0105f2d:	e8 07 00 00 00       	call   c0105f39 <tlb_invalidate>
    return 0;
c0105f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f37:	c9                   	leave  
c0105f38:	c3                   	ret    

c0105f39 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105f39:	55                   	push   %ebp
c0105f3a:	89 e5                	mov    %esp,%ebp
c0105f3c:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105f3f:	0f 20 d8             	mov    %cr3,%eax
c0105f42:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105f45:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105f48:	89 c2                	mov    %eax,%edx
c0105f4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105f50:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105f57:	77 23                	ja     c0105f7c <tlb_invalidate+0x43>
c0105f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f5c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f60:	c7 44 24 08 a0 e6 10 	movl   $0xc010e6a0,0x8(%esp)
c0105f67:	c0 
c0105f68:	c7 44 24 04 43 02 00 	movl   $0x243,0x4(%esp)
c0105f6f:	00 
c0105f70:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0105f77:	e8 74 ae ff ff       	call   c0100df0 <__panic>
c0105f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f7f:	05 00 00 00 40       	add    $0x40000000,%eax
c0105f84:	39 c2                	cmp    %eax,%edx
c0105f86:	75 0c                	jne    c0105f94 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105f88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105f8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f91:	0f 01 38             	invlpg (%eax)
    }
}
c0105f94:	c9                   	leave  
c0105f95:	c3                   	ret    

c0105f96 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105f96:	55                   	push   %ebp
c0105f97:	89 e5                	mov    %esp,%ebp
c0105f99:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105f9c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105fa3:	e8 a0 f1 ff ff       	call   c0105148 <alloc_pages>
c0105fa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105fab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105faf:	0f 84 b0 00 00 00    	je     c0106065 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105fb5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fbf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fca:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fcd:	89 04 24             	mov    %eax,(%esp)
c0105fd0:	e8 ab fe ff ff       	call   c0105e80 <page_insert>
c0105fd5:	85 c0                	test   %eax,%eax
c0105fd7:	74 1a                	je     c0105ff3 <pgdir_alloc_page+0x5d>
            free_page(page);
c0105fd9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105fe0:	00 
c0105fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fe4:	89 04 24             	mov    %eax,(%esp)
c0105fe7:	e8 c7 f1 ff ff       	call   c01051b3 <free_pages>
            return NULL;
c0105fec:	b8 00 00 00 00       	mov    $0x0,%eax
c0105ff1:	eb 75                	jmp    c0106068 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0105ff3:	a1 2c 60 1c c0       	mov    0xc01c602c,%eax
c0105ff8:	85 c0                	test   %eax,%eax
c0105ffa:	74 69                	je     c0106065 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0105ffc:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c0106001:	85 c0                	test   %eax,%eax
c0106003:	74 60                	je     c0106065 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106005:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c010600a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106011:	00 
c0106012:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106015:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106019:	8b 55 0c             	mov    0xc(%ebp),%edx
c010601c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106020:	89 04 24             	mov    %eax,(%esp)
c0106023:	e8 51 0e 00 00       	call   c0106e79 <swap_map_swappable>
                page->pra_vaddr=la;
c0106028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010602b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010602e:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0106031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106034:	89 04 24             	mov    %eax,(%esp)
c0106037:	e8 07 ef ff ff       	call   c0104f43 <page_ref>
c010603c:	83 f8 01             	cmp    $0x1,%eax
c010603f:	74 24                	je     c0106065 <pgdir_alloc_page+0xcf>
c0106041:	c7 44 24 0c 85 e7 10 	movl   $0xc010e785,0xc(%esp)
c0106048:	c0 
c0106049:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106050:	c0 
c0106051:	c7 44 24 04 57 02 00 	movl   $0x257,0x4(%esp)
c0106058:	00 
c0106059:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106060:	e8 8b ad ff ff       	call   c0100df0 <__panic>
            }
        }

    }

    return page;
c0106065:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106068:	c9                   	leave  
c0106069:	c3                   	ret    

c010606a <check_alloc_page>:

static void
check_alloc_page(void) {
c010606a:	55                   	push   %ebp
c010606b:	89 e5                	mov    %esp,%ebp
c010606d:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0106070:	a1 e8 80 1c c0       	mov    0xc01c80e8,%eax
c0106075:	8b 40 18             	mov    0x18(%eax),%eax
c0106078:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c010607a:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c0106081:	e8 de a2 ff ff       	call   c0100364 <cprintf>
}
c0106086:	c9                   	leave  
c0106087:	c3                   	ret    

c0106088 <check_pgdir>:

static void
check_pgdir(void) {
c0106088:	55                   	push   %ebp
c0106089:	89 e5                	mov    %esp,%ebp
c010608b:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010608e:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0106093:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106098:	76 24                	jbe    c01060be <check_pgdir+0x36>
c010609a:	c7 44 24 0c bb e7 10 	movl   $0xc010e7bb,0xc(%esp)
c01060a1:	c0 
c01060a2:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01060a9:	c0 
c01060aa:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
c01060b1:	00 
c01060b2:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01060b9:	e8 32 ad ff ff       	call   c0100df0 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01060be:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01060c3:	85 c0                	test   %eax,%eax
c01060c5:	74 0e                	je     c01060d5 <check_pgdir+0x4d>
c01060c7:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01060cc:	25 ff 0f 00 00       	and    $0xfff,%eax
c01060d1:	85 c0                	test   %eax,%eax
c01060d3:	74 24                	je     c01060f9 <check_pgdir+0x71>
c01060d5:	c7 44 24 0c d8 e7 10 	movl   $0xc010e7d8,0xc(%esp)
c01060dc:	c0 
c01060dd:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01060e4:	c0 
c01060e5:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
c01060ec:	00 
c01060ed:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01060f4:	e8 f7 ac ff ff       	call   c0100df0 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01060f9:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01060fe:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106105:	00 
c0106106:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010610d:	00 
c010610e:	89 04 24             	mov    %eax,(%esp)
c0106111:	e8 4e f8 ff ff       	call   c0105964 <get_page>
c0106116:	85 c0                	test   %eax,%eax
c0106118:	74 24                	je     c010613e <check_pgdir+0xb6>
c010611a:	c7 44 24 0c 10 e8 10 	movl   $0xc010e810,0xc(%esp)
c0106121:	c0 
c0106122:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106129:	c0 
c010612a:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c0106131:	00 
c0106132:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106139:	e8 b2 ac ff ff       	call   c0100df0 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010613e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106145:	e8 fe ef ff ff       	call   c0105148 <alloc_pages>
c010614a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010614d:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106152:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106159:	00 
c010615a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106161:	00 
c0106162:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106165:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106169:	89 04 24             	mov    %eax,(%esp)
c010616c:	e8 0f fd ff ff       	call   c0105e80 <page_insert>
c0106171:	85 c0                	test   %eax,%eax
c0106173:	74 24                	je     c0106199 <check_pgdir+0x111>
c0106175:	c7 44 24 0c 38 e8 10 	movl   $0xc010e838,0xc(%esp)
c010617c:	c0 
c010617d:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106184:	c0 
c0106185:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c010618c:	00 
c010618d:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106194:	e8 57 ac ff ff       	call   c0100df0 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106199:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c010619e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061a5:	00 
c01061a6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061ad:	00 
c01061ae:	89 04 24             	mov    %eax,(%esp)
c01061b1:	e8 76 f6 ff ff       	call   c010582c <get_pte>
c01061b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01061b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01061bd:	75 24                	jne    c01061e3 <check_pgdir+0x15b>
c01061bf:	c7 44 24 0c 64 e8 10 	movl   $0xc010e864,0xc(%esp)
c01061c6:	c0 
c01061c7:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01061ce:	c0 
c01061cf:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c01061d6:	00 
c01061d7:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01061de:	e8 0d ac ff ff       	call   c0100df0 <__panic>
    assert(pte2page(*ptep) == p1);
c01061e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061e6:	8b 00                	mov    (%eax),%eax
c01061e8:	89 04 24             	mov    %eax,(%esp)
c01061eb:	e8 fd ec ff ff       	call   c0104eed <pte2page>
c01061f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061f3:	74 24                	je     c0106219 <check_pgdir+0x191>
c01061f5:	c7 44 24 0c 91 e8 10 	movl   $0xc010e891,0xc(%esp)
c01061fc:	c0 
c01061fd:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106204:	c0 
c0106205:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c010620c:	00 
c010620d:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106214:	e8 d7 ab ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p1) == 1);
c0106219:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010621c:	89 04 24             	mov    %eax,(%esp)
c010621f:	e8 1f ed ff ff       	call   c0104f43 <page_ref>
c0106224:	83 f8 01             	cmp    $0x1,%eax
c0106227:	74 24                	je     c010624d <check_pgdir+0x1c5>
c0106229:	c7 44 24 0c a7 e8 10 	movl   $0xc010e8a7,0xc(%esp)
c0106230:	c0 
c0106231:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106238:	c0 
c0106239:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c0106240:	00 
c0106241:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106248:	e8 a3 ab ff ff       	call   c0100df0 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010624d:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106252:	8b 00                	mov    (%eax),%eax
c0106254:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106259:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010625c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010625f:	c1 e8 0c             	shr    $0xc,%eax
c0106262:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106265:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c010626a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010626d:	72 23                	jb     c0106292 <check_pgdir+0x20a>
c010626f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106272:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106276:	c7 44 24 08 fc e5 10 	movl   $0xc010e5fc,0x8(%esp)
c010627d:	c0 
c010627e:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
c0106285:	00 
c0106286:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010628d:	e8 5e ab ff ff       	call   c0100df0 <__panic>
c0106292:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106295:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010629a:	83 c0 04             	add    $0x4,%eax
c010629d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01062a0:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01062a5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062ac:	00 
c01062ad:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01062b4:	00 
c01062b5:	89 04 24             	mov    %eax,(%esp)
c01062b8:	e8 6f f5 ff ff       	call   c010582c <get_pte>
c01062bd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01062c0:	74 24                	je     c01062e6 <check_pgdir+0x25e>
c01062c2:	c7 44 24 0c bc e8 10 	movl   $0xc010e8bc,0xc(%esp)
c01062c9:	c0 
c01062ca:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01062d1:	c0 
c01062d2:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c01062d9:	00 
c01062da:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01062e1:	e8 0a ab ff ff       	call   c0100df0 <__panic>

    p2 = alloc_page();
c01062e6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01062ed:	e8 56 ee ff ff       	call   c0105148 <alloc_pages>
c01062f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01062f5:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01062fa:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106301:	00 
c0106302:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106309:	00 
c010630a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010630d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106311:	89 04 24             	mov    %eax,(%esp)
c0106314:	e8 67 fb ff ff       	call   c0105e80 <page_insert>
c0106319:	85 c0                	test   %eax,%eax
c010631b:	74 24                	je     c0106341 <check_pgdir+0x2b9>
c010631d:	c7 44 24 0c e4 e8 10 	movl   $0xc010e8e4,0xc(%esp)
c0106324:	c0 
c0106325:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010632c:	c0 
c010632d:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c0106334:	00 
c0106335:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010633c:	e8 af aa ff ff       	call   c0100df0 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106341:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106346:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010634d:	00 
c010634e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106355:	00 
c0106356:	89 04 24             	mov    %eax,(%esp)
c0106359:	e8 ce f4 ff ff       	call   c010582c <get_pte>
c010635e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106361:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106365:	75 24                	jne    c010638b <check_pgdir+0x303>
c0106367:	c7 44 24 0c 1c e9 10 	movl   $0xc010e91c,0xc(%esp)
c010636e:	c0 
c010636f:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106376:	c0 
c0106377:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010637e:	00 
c010637f:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106386:	e8 65 aa ff ff       	call   c0100df0 <__panic>
    assert(*ptep & PTE_U);
c010638b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010638e:	8b 00                	mov    (%eax),%eax
c0106390:	83 e0 04             	and    $0x4,%eax
c0106393:	85 c0                	test   %eax,%eax
c0106395:	75 24                	jne    c01063bb <check_pgdir+0x333>
c0106397:	c7 44 24 0c 4c e9 10 	movl   $0xc010e94c,0xc(%esp)
c010639e:	c0 
c010639f:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01063a6:	c0 
c01063a7:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c01063ae:	00 
c01063af:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01063b6:	e8 35 aa ff ff       	call   c0100df0 <__panic>
    assert(*ptep & PTE_W);
c01063bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063be:	8b 00                	mov    (%eax),%eax
c01063c0:	83 e0 02             	and    $0x2,%eax
c01063c3:	85 c0                	test   %eax,%eax
c01063c5:	75 24                	jne    c01063eb <check_pgdir+0x363>
c01063c7:	c7 44 24 0c 5a e9 10 	movl   $0xc010e95a,0xc(%esp)
c01063ce:	c0 
c01063cf:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01063d6:	c0 
c01063d7:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c01063de:	00 
c01063df:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01063e6:	e8 05 aa ff ff       	call   c0100df0 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01063eb:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01063f0:	8b 00                	mov    (%eax),%eax
c01063f2:	83 e0 04             	and    $0x4,%eax
c01063f5:	85 c0                	test   %eax,%eax
c01063f7:	75 24                	jne    c010641d <check_pgdir+0x395>
c01063f9:	c7 44 24 0c 68 e9 10 	movl   $0xc010e968,0xc(%esp)
c0106400:	c0 
c0106401:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106408:	c0 
c0106409:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c0106410:	00 
c0106411:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106418:	e8 d3 a9 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 1);
c010641d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106420:	89 04 24             	mov    %eax,(%esp)
c0106423:	e8 1b eb ff ff       	call   c0104f43 <page_ref>
c0106428:	83 f8 01             	cmp    $0x1,%eax
c010642b:	74 24                	je     c0106451 <check_pgdir+0x3c9>
c010642d:	c7 44 24 0c 7e e9 10 	movl   $0xc010e97e,0xc(%esp)
c0106434:	c0 
c0106435:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010643c:	c0 
c010643d:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0106444:	00 
c0106445:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010644c:	e8 9f a9 ff ff       	call   c0100df0 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106451:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106456:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010645d:	00 
c010645e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106465:	00 
c0106466:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106469:	89 54 24 04          	mov    %edx,0x4(%esp)
c010646d:	89 04 24             	mov    %eax,(%esp)
c0106470:	e8 0b fa ff ff       	call   c0105e80 <page_insert>
c0106475:	85 c0                	test   %eax,%eax
c0106477:	74 24                	je     c010649d <check_pgdir+0x415>
c0106479:	c7 44 24 0c 90 e9 10 	movl   $0xc010e990,0xc(%esp)
c0106480:	c0 
c0106481:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106488:	c0 
c0106489:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c0106490:	00 
c0106491:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106498:	e8 53 a9 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p1) == 2);
c010649d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064a0:	89 04 24             	mov    %eax,(%esp)
c01064a3:	e8 9b ea ff ff       	call   c0104f43 <page_ref>
c01064a8:	83 f8 02             	cmp    $0x2,%eax
c01064ab:	74 24                	je     c01064d1 <check_pgdir+0x449>
c01064ad:	c7 44 24 0c bc e9 10 	movl   $0xc010e9bc,0xc(%esp)
c01064b4:	c0 
c01064b5:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01064bc:	c0 
c01064bd:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c01064c4:	00 
c01064c5:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01064cc:	e8 1f a9 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 0);
c01064d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064d4:	89 04 24             	mov    %eax,(%esp)
c01064d7:	e8 67 ea ff ff       	call   c0104f43 <page_ref>
c01064dc:	85 c0                	test   %eax,%eax
c01064de:	74 24                	je     c0106504 <check_pgdir+0x47c>
c01064e0:	c7 44 24 0c ce e9 10 	movl   $0xc010e9ce,0xc(%esp)
c01064e7:	c0 
c01064e8:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01064ef:	c0 
c01064f0:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c01064f7:	00 
c01064f8:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01064ff:	e8 ec a8 ff ff       	call   c0100df0 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106504:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106509:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106510:	00 
c0106511:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106518:	00 
c0106519:	89 04 24             	mov    %eax,(%esp)
c010651c:	e8 0b f3 ff ff       	call   c010582c <get_pte>
c0106521:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106524:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106528:	75 24                	jne    c010654e <check_pgdir+0x4c6>
c010652a:	c7 44 24 0c 1c e9 10 	movl   $0xc010e91c,0xc(%esp)
c0106531:	c0 
c0106532:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106539:	c0 
c010653a:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106541:	00 
c0106542:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106549:	e8 a2 a8 ff ff       	call   c0100df0 <__panic>
    assert(pte2page(*ptep) == p1);
c010654e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106551:	8b 00                	mov    (%eax),%eax
c0106553:	89 04 24             	mov    %eax,(%esp)
c0106556:	e8 92 e9 ff ff       	call   c0104eed <pte2page>
c010655b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010655e:	74 24                	je     c0106584 <check_pgdir+0x4fc>
c0106560:	c7 44 24 0c 91 e8 10 	movl   $0xc010e891,0xc(%esp)
c0106567:	c0 
c0106568:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010656f:	c0 
c0106570:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106577:	00 
c0106578:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010657f:	e8 6c a8 ff ff       	call   c0100df0 <__panic>
    assert((*ptep & PTE_U) == 0);
c0106584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106587:	8b 00                	mov    (%eax),%eax
c0106589:	83 e0 04             	and    $0x4,%eax
c010658c:	85 c0                	test   %eax,%eax
c010658e:	74 24                	je     c01065b4 <check_pgdir+0x52c>
c0106590:	c7 44 24 0c e0 e9 10 	movl   $0xc010e9e0,0xc(%esp)
c0106597:	c0 
c0106598:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010659f:	c0 
c01065a0:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c01065a7:	00 
c01065a8:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01065af:	e8 3c a8 ff ff       	call   c0100df0 <__panic>

    page_remove(boot_pgdir, 0x0);
c01065b4:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01065b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01065c0:	00 
c01065c1:	89 04 24             	mov    %eax,(%esp)
c01065c4:	e8 73 f8 ff ff       	call   c0105e3c <page_remove>
    assert(page_ref(p1) == 1);
c01065c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065cc:	89 04 24             	mov    %eax,(%esp)
c01065cf:	e8 6f e9 ff ff       	call   c0104f43 <page_ref>
c01065d4:	83 f8 01             	cmp    $0x1,%eax
c01065d7:	74 24                	je     c01065fd <check_pgdir+0x575>
c01065d9:	c7 44 24 0c a7 e8 10 	movl   $0xc010e8a7,0xc(%esp)
c01065e0:	c0 
c01065e1:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01065e8:	c0 
c01065e9:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01065f0:	00 
c01065f1:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01065f8:	e8 f3 a7 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 0);
c01065fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106600:	89 04 24             	mov    %eax,(%esp)
c0106603:	e8 3b e9 ff ff       	call   c0104f43 <page_ref>
c0106608:	85 c0                	test   %eax,%eax
c010660a:	74 24                	je     c0106630 <check_pgdir+0x5a8>
c010660c:	c7 44 24 0c ce e9 10 	movl   $0xc010e9ce,0xc(%esp)
c0106613:	c0 
c0106614:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010661b:	c0 
c010661c:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0106623:	00 
c0106624:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010662b:	e8 c0 a7 ff ff       	call   c0100df0 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0106630:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106635:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010663c:	00 
c010663d:	89 04 24             	mov    %eax,(%esp)
c0106640:	e8 f7 f7 ff ff       	call   c0105e3c <page_remove>
    assert(page_ref(p1) == 0);
c0106645:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106648:	89 04 24             	mov    %eax,(%esp)
c010664b:	e8 f3 e8 ff ff       	call   c0104f43 <page_ref>
c0106650:	85 c0                	test   %eax,%eax
c0106652:	74 24                	je     c0106678 <check_pgdir+0x5f0>
c0106654:	c7 44 24 0c f5 e9 10 	movl   $0xc010e9f5,0xc(%esp)
c010665b:	c0 
c010665c:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106663:	c0 
c0106664:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c010666b:	00 
c010666c:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106673:	e8 78 a7 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 0);
c0106678:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010667b:	89 04 24             	mov    %eax,(%esp)
c010667e:	e8 c0 e8 ff ff       	call   c0104f43 <page_ref>
c0106683:	85 c0                	test   %eax,%eax
c0106685:	74 24                	je     c01066ab <check_pgdir+0x623>
c0106687:	c7 44 24 0c ce e9 10 	movl   $0xc010e9ce,0xc(%esp)
c010668e:	c0 
c010668f:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106696:	c0 
c0106697:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c010669e:	00 
c010669f:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01066a6:	e8 45 a7 ff ff       	call   c0100df0 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01066ab:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01066b0:	8b 00                	mov    (%eax),%eax
c01066b2:	89 04 24             	mov    %eax,(%esp)
c01066b5:	e8 71 e8 ff ff       	call   c0104f2b <pde2page>
c01066ba:	89 04 24             	mov    %eax,(%esp)
c01066bd:	e8 81 e8 ff ff       	call   c0104f43 <page_ref>
c01066c2:	83 f8 01             	cmp    $0x1,%eax
c01066c5:	74 24                	je     c01066eb <check_pgdir+0x663>
c01066c7:	c7 44 24 0c 08 ea 10 	movl   $0xc010ea08,0xc(%esp)
c01066ce:	c0 
c01066cf:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01066d6:	c0 
c01066d7:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01066de:	00 
c01066df:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01066e6:	e8 05 a7 ff ff       	call   c0100df0 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01066eb:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01066f0:	8b 00                	mov    (%eax),%eax
c01066f2:	89 04 24             	mov    %eax,(%esp)
c01066f5:	e8 31 e8 ff ff       	call   c0104f2b <pde2page>
c01066fa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106701:	00 
c0106702:	89 04 24             	mov    %eax,(%esp)
c0106705:	e8 a9 ea ff ff       	call   c01051b3 <free_pages>
    boot_pgdir[0] = 0;
c010670a:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c010670f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106715:	c7 04 24 2f ea 10 c0 	movl   $0xc010ea2f,(%esp)
c010671c:	e8 43 9c ff ff       	call   c0100364 <cprintf>
}
c0106721:	c9                   	leave  
c0106722:	c3                   	ret    

c0106723 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106723:	55                   	push   %ebp
c0106724:	89 e5                	mov    %esp,%ebp
c0106726:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106730:	e9 ca 00 00 00       	jmp    c01067ff <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106738:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010673b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010673e:	c1 e8 0c             	shr    $0xc,%eax
c0106741:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106744:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0106749:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010674c:	72 23                	jb     c0106771 <check_boot_pgdir+0x4e>
c010674e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106751:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106755:	c7 44 24 08 fc e5 10 	movl   $0xc010e5fc,0x8(%esp)
c010675c:	c0 
c010675d:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0106764:	00 
c0106765:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010676c:	e8 7f a6 ff ff       	call   c0100df0 <__panic>
c0106771:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106774:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106779:	89 c2                	mov    %eax,%edx
c010677b:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106780:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106787:	00 
c0106788:	89 54 24 04          	mov    %edx,0x4(%esp)
c010678c:	89 04 24             	mov    %eax,(%esp)
c010678f:	e8 98 f0 ff ff       	call   c010582c <get_pte>
c0106794:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106797:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010679b:	75 24                	jne    c01067c1 <check_boot_pgdir+0x9e>
c010679d:	c7 44 24 0c 4c ea 10 	movl   $0xc010ea4c,0xc(%esp)
c01067a4:	c0 
c01067a5:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01067ac:	c0 
c01067ad:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c01067b4:	00 
c01067b5:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01067bc:	e8 2f a6 ff ff       	call   c0100df0 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01067c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01067c4:	8b 00                	mov    (%eax),%eax
c01067c6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01067cb:	89 c2                	mov    %eax,%edx
c01067cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067d0:	39 c2                	cmp    %eax,%edx
c01067d2:	74 24                	je     c01067f8 <check_boot_pgdir+0xd5>
c01067d4:	c7 44 24 0c 89 ea 10 	movl   $0xc010ea89,0xc(%esp)
c01067db:	c0 
c01067dc:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01067e3:	c0 
c01067e4:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01067eb:	00 
c01067ec:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01067f3:	e8 f8 a5 ff ff       	call   c0100df0 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067f8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01067ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106802:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0106807:	39 c2                	cmp    %eax,%edx
c0106809:	0f 82 26 ff ff ff    	jb     c0106735 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010680f:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106814:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106819:	8b 00                	mov    (%eax),%eax
c010681b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106820:	89 c2                	mov    %eax,%edx
c0106822:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106827:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010682a:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106831:	77 23                	ja     c0106856 <check_boot_pgdir+0x133>
c0106833:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106836:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010683a:	c7 44 24 08 a0 e6 10 	movl   $0xc010e6a0,0x8(%esp)
c0106841:	c0 
c0106842:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0106849:	00 
c010684a:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106851:	e8 9a a5 ff ff       	call   c0100df0 <__panic>
c0106856:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106859:	05 00 00 00 40       	add    $0x40000000,%eax
c010685e:	39 c2                	cmp    %eax,%edx
c0106860:	74 24                	je     c0106886 <check_boot_pgdir+0x163>
c0106862:	c7 44 24 0c a0 ea 10 	movl   $0xc010eaa0,0xc(%esp)
c0106869:	c0 
c010686a:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106871:	c0 
c0106872:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0106879:	00 
c010687a:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106881:	e8 6a a5 ff ff       	call   c0100df0 <__panic>

    assert(boot_pgdir[0] == 0);
c0106886:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c010688b:	8b 00                	mov    (%eax),%eax
c010688d:	85 c0                	test   %eax,%eax
c010688f:	74 24                	je     c01068b5 <check_boot_pgdir+0x192>
c0106891:	c7 44 24 0c d4 ea 10 	movl   $0xc010ead4,0xc(%esp)
c0106898:	c0 
c0106899:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01068a0:	c0 
c01068a1:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c01068a8:	00 
c01068a9:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01068b0:	e8 3b a5 ff ff       	call   c0100df0 <__panic>

    struct Page *p;
    p = alloc_page();
c01068b5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01068bc:	e8 87 e8 ff ff       	call   c0105148 <alloc_pages>
c01068c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01068c4:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c01068c9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01068d0:	00 
c01068d1:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c01068d8:	00 
c01068d9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01068dc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01068e0:	89 04 24             	mov    %eax,(%esp)
c01068e3:	e8 98 f5 ff ff       	call   c0105e80 <page_insert>
c01068e8:	85 c0                	test   %eax,%eax
c01068ea:	74 24                	je     c0106910 <check_boot_pgdir+0x1ed>
c01068ec:	c7 44 24 0c e8 ea 10 	movl   $0xc010eae8,0xc(%esp)
c01068f3:	c0 
c01068f4:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01068fb:	c0 
c01068fc:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c0106903:	00 
c0106904:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010690b:	e8 e0 a4 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p) == 1);
c0106910:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106913:	89 04 24             	mov    %eax,(%esp)
c0106916:	e8 28 e6 ff ff       	call   c0104f43 <page_ref>
c010691b:	83 f8 01             	cmp    $0x1,%eax
c010691e:	74 24                	je     c0106944 <check_boot_pgdir+0x221>
c0106920:	c7 44 24 0c 16 eb 10 	movl   $0xc010eb16,0xc(%esp)
c0106927:	c0 
c0106928:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010692f:	c0 
c0106930:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c0106937:	00 
c0106938:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010693f:	e8 ac a4 ff ff       	call   c0100df0 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106944:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106949:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106950:	00 
c0106951:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106958:	00 
c0106959:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010695c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106960:	89 04 24             	mov    %eax,(%esp)
c0106963:	e8 18 f5 ff ff       	call   c0105e80 <page_insert>
c0106968:	85 c0                	test   %eax,%eax
c010696a:	74 24                	je     c0106990 <check_boot_pgdir+0x26d>
c010696c:	c7 44 24 0c 28 eb 10 	movl   $0xc010eb28,0xc(%esp)
c0106973:	c0 
c0106974:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c010697b:	c0 
c010697c:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c0106983:	00 
c0106984:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c010698b:	e8 60 a4 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p) == 2);
c0106990:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106993:	89 04 24             	mov    %eax,(%esp)
c0106996:	e8 a8 e5 ff ff       	call   c0104f43 <page_ref>
c010699b:	83 f8 02             	cmp    $0x2,%eax
c010699e:	74 24                	je     c01069c4 <check_boot_pgdir+0x2a1>
c01069a0:	c7 44 24 0c 5f eb 10 	movl   $0xc010eb5f,0xc(%esp)
c01069a7:	c0 
c01069a8:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c01069af:	c0 
c01069b0:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c01069b7:	00 
c01069b8:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c01069bf:	e8 2c a4 ff ff       	call   c0100df0 <__panic>

    const char *str = "ucore: Hello world!!";
c01069c4:	c7 45 dc 70 eb 10 c0 	movl   $0xc010eb70,-0x24(%ebp)
    strcpy((void *)0x100, str);
c01069cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01069d2:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c01069d9:	e8 7c 69 00 00       	call   c010d35a <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c01069de:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c01069e5:	00 
c01069e6:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c01069ed:	e8 e1 69 00 00       	call   c010d3d3 <strcmp>
c01069f2:	85 c0                	test   %eax,%eax
c01069f4:	74 24                	je     c0106a1a <check_boot_pgdir+0x2f7>
c01069f6:	c7 44 24 0c 88 eb 10 	movl   $0xc010eb88,0xc(%esp)
c01069fd:	c0 
c01069fe:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106a05:	c0 
c0106a06:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c0106a0d:	00 
c0106a0e:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106a15:	e8 d6 a3 ff ff       	call   c0100df0 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106a1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a1d:	89 04 24             	mov    %eax,(%esp)
c0106a20:	e8 74 e4 ff ff       	call   c0104e99 <page2kva>
c0106a25:	05 00 01 00 00       	add    $0x100,%eax
c0106a2a:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106a2d:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a34:	e8 c9 68 00 00       	call   c010d302 <strlen>
c0106a39:	85 c0                	test   %eax,%eax
c0106a3b:	74 24                	je     c0106a61 <check_boot_pgdir+0x33e>
c0106a3d:	c7 44 24 0c c0 eb 10 	movl   $0xc010ebc0,0xc(%esp)
c0106a44:	c0 
c0106a45:	c7 44 24 08 e9 e6 10 	movl   $0xc010e6e9,0x8(%esp)
c0106a4c:	c0 
c0106a4d:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c0106a54:	00 
c0106a55:	c7 04 24 c4 e6 10 c0 	movl   $0xc010e6c4,(%esp)
c0106a5c:	e8 8f a3 ff ff       	call   c0100df0 <__panic>

    free_page(p);
c0106a61:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a68:	00 
c0106a69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a6c:	89 04 24             	mov    %eax,(%esp)
c0106a6f:	e8 3f e7 ff ff       	call   c01051b3 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106a74:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106a79:	8b 00                	mov    (%eax),%eax
c0106a7b:	89 04 24             	mov    %eax,(%esp)
c0106a7e:	e8 a8 e4 ff ff       	call   c0104f2b <pde2page>
c0106a83:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a8a:	00 
c0106a8b:	89 04 24             	mov    %eax,(%esp)
c0106a8e:	e8 20 e7 ff ff       	call   c01051b3 <free_pages>
    boot_pgdir[0] = 0;
c0106a93:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c0106a98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106a9e:	c7 04 24 e4 eb 10 c0 	movl   $0xc010ebe4,(%esp)
c0106aa5:	e8 ba 98 ff ff       	call   c0100364 <cprintf>
}
c0106aaa:	c9                   	leave  
c0106aab:	c3                   	ret    

c0106aac <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106aac:	55                   	push   %ebp
c0106aad:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106aaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ab2:	83 e0 04             	and    $0x4,%eax
c0106ab5:	85 c0                	test   %eax,%eax
c0106ab7:	74 07                	je     c0106ac0 <perm2str+0x14>
c0106ab9:	b8 75 00 00 00       	mov    $0x75,%eax
c0106abe:	eb 05                	jmp    c0106ac5 <perm2str+0x19>
c0106ac0:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106ac5:	a2 28 60 1c c0       	mov    %al,0xc01c6028
    str[1] = 'r';
c0106aca:	c6 05 29 60 1c c0 72 	movb   $0x72,0xc01c6029
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106ad1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ad4:	83 e0 02             	and    $0x2,%eax
c0106ad7:	85 c0                	test   %eax,%eax
c0106ad9:	74 07                	je     c0106ae2 <perm2str+0x36>
c0106adb:	b8 77 00 00 00       	mov    $0x77,%eax
c0106ae0:	eb 05                	jmp    c0106ae7 <perm2str+0x3b>
c0106ae2:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106ae7:	a2 2a 60 1c c0       	mov    %al,0xc01c602a
    str[3] = '\0';
c0106aec:	c6 05 2b 60 1c c0 00 	movb   $0x0,0xc01c602b
    return str;
c0106af3:	b8 28 60 1c c0       	mov    $0xc01c6028,%eax
}
c0106af8:	5d                   	pop    %ebp
c0106af9:	c3                   	ret    

c0106afa <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106afa:	55                   	push   %ebp
c0106afb:	89 e5                	mov    %esp,%ebp
c0106afd:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b00:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b03:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b06:	72 0a                	jb     c0106b12 <get_pgtable_items+0x18>
        return 0;
c0106b08:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b0d:	e9 9c 00 00 00       	jmp    c0106bae <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b12:	eb 04                	jmp    c0106b18 <get_pgtable_items+0x1e>
        start ++;
c0106b14:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b18:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b1b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b1e:	73 18                	jae    c0106b38 <get_pgtable_items+0x3e>
c0106b20:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b2a:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b2d:	01 d0                	add    %edx,%eax
c0106b2f:	8b 00                	mov    (%eax),%eax
c0106b31:	83 e0 01             	and    $0x1,%eax
c0106b34:	85 c0                	test   %eax,%eax
c0106b36:	74 dc                	je     c0106b14 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106b38:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b3b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b3e:	73 69                	jae    c0106ba9 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106b40:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106b44:	74 08                	je     c0106b4e <get_pgtable_items+0x54>
            *left_store = start;
c0106b46:	8b 45 18             	mov    0x18(%ebp),%eax
c0106b49:	8b 55 10             	mov    0x10(%ebp),%edx
c0106b4c:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106b4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b51:	8d 50 01             	lea    0x1(%eax),%edx
c0106b54:	89 55 10             	mov    %edx,0x10(%ebp)
c0106b57:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b5e:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b61:	01 d0                	add    %edx,%eax
c0106b63:	8b 00                	mov    (%eax),%eax
c0106b65:	83 e0 07             	and    $0x7,%eax
c0106b68:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106b6b:	eb 04                	jmp    c0106b71 <get_pgtable_items+0x77>
            start ++;
c0106b6d:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106b71:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b74:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b77:	73 1d                	jae    c0106b96 <get_pgtable_items+0x9c>
c0106b79:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b83:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b86:	01 d0                	add    %edx,%eax
c0106b88:	8b 00                	mov    (%eax),%eax
c0106b8a:	83 e0 07             	and    $0x7,%eax
c0106b8d:	89 c2                	mov    %eax,%edx
c0106b8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b92:	39 c2                	cmp    %eax,%edx
c0106b94:	74 d7                	je     c0106b6d <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106b96:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106b9a:	74 08                	je     c0106ba4 <get_pgtable_items+0xaa>
            *right_store = start;
c0106b9c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106b9f:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ba2:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106ba4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ba7:	eb 05                	jmp    c0106bae <get_pgtable_items+0xb4>
    }
    return 0;
c0106ba9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106bae:	c9                   	leave  
c0106baf:	c3                   	ret    

c0106bb0 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106bb0:	55                   	push   %ebp
c0106bb1:	89 e5                	mov    %esp,%ebp
c0106bb3:	57                   	push   %edi
c0106bb4:	56                   	push   %esi
c0106bb5:	53                   	push   %ebx
c0106bb6:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106bb9:	c7 04 24 04 ec 10 c0 	movl   $0xc010ec04,(%esp)
c0106bc0:	e8 9f 97 ff ff       	call   c0100364 <cprintf>
    size_t left, right = 0, perm;
c0106bc5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106bcc:	e9 fa 00 00 00       	jmp    c0106ccb <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bd4:	89 04 24             	mov    %eax,(%esp)
c0106bd7:	e8 d0 fe ff ff       	call   c0106aac <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106bdc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106bdf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106be2:	29 d1                	sub    %edx,%ecx
c0106be4:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106be6:	89 d6                	mov    %edx,%esi
c0106be8:	c1 e6 16             	shl    $0x16,%esi
c0106beb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106bee:	89 d3                	mov    %edx,%ebx
c0106bf0:	c1 e3 16             	shl    $0x16,%ebx
c0106bf3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106bf6:	89 d1                	mov    %edx,%ecx
c0106bf8:	c1 e1 16             	shl    $0x16,%ecx
c0106bfb:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106bfe:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c01:	29 d7                	sub    %edx,%edi
c0106c03:	89 fa                	mov    %edi,%edx
c0106c05:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c09:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c0d:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c11:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c15:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c19:	c7 04 24 35 ec 10 c0 	movl   $0xc010ec35,(%esp)
c0106c20:	e8 3f 97 ff ff       	call   c0100364 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c28:	c1 e0 0a             	shl    $0xa,%eax
c0106c2b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c2e:	eb 54                	jmp    c0106c84 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c33:	89 04 24             	mov    %eax,(%esp)
c0106c36:	e8 71 fe ff ff       	call   c0106aac <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106c3b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106c3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c41:	29 d1                	sub    %edx,%ecx
c0106c43:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c45:	89 d6                	mov    %edx,%esi
c0106c47:	c1 e6 0c             	shl    $0xc,%esi
c0106c4a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106c4d:	89 d3                	mov    %edx,%ebx
c0106c4f:	c1 e3 0c             	shl    $0xc,%ebx
c0106c52:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c55:	c1 e2 0c             	shl    $0xc,%edx
c0106c58:	89 d1                	mov    %edx,%ecx
c0106c5a:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106c5d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c60:	29 d7                	sub    %edx,%edi
c0106c62:	89 fa                	mov    %edi,%edx
c0106c64:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c68:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c6c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c70:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c74:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c78:	c7 04 24 54 ec 10 c0 	movl   $0xc010ec54,(%esp)
c0106c7f:	e8 e0 96 ff ff       	call   c0100364 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c84:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106c89:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106c8c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c8f:	89 ce                	mov    %ecx,%esi
c0106c91:	c1 e6 0a             	shl    $0xa,%esi
c0106c94:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106c97:	89 cb                	mov    %ecx,%ebx
c0106c99:	c1 e3 0a             	shl    $0xa,%ebx
c0106c9c:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106c9f:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106ca3:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106ca6:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106caa:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106cae:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106cb2:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106cb6:	89 1c 24             	mov    %ebx,(%esp)
c0106cb9:	e8 3c fe ff ff       	call   c0106afa <get_pgtable_items>
c0106cbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106cc1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106cc5:	0f 85 65 ff ff ff    	jne    c0106c30 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106ccb:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106cd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106cd3:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106cd6:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106cda:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106cdd:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106ce1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ce5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ce9:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106cf0:	00 
c0106cf1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106cf8:	e8 fd fd ff ff       	call   c0106afa <get_pgtable_items>
c0106cfd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d00:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d04:	0f 85 c7 fe ff ff    	jne    c0106bd1 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d0a:	c7 04 24 78 ec 10 c0 	movl   $0xc010ec78,(%esp)
c0106d11:	e8 4e 96 ff ff       	call   c0100364 <cprintf>
}
c0106d16:	83 c4 4c             	add    $0x4c,%esp
c0106d19:	5b                   	pop    %ebx
c0106d1a:	5e                   	pop    %esi
c0106d1b:	5f                   	pop    %edi
c0106d1c:	5d                   	pop    %ebp
c0106d1d:	c3                   	ret    

c0106d1e <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d1e:	55                   	push   %ebp
c0106d1f:	89 e5                	mov    %esp,%ebp
c0106d21:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106d24:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d27:	c1 e8 0c             	shr    $0xc,%eax
c0106d2a:	89 c2                	mov    %eax,%edx
c0106d2c:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0106d31:	39 c2                	cmp    %eax,%edx
c0106d33:	72 1c                	jb     c0106d51 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106d35:	c7 44 24 08 ac ec 10 	movl   $0xc010ecac,0x8(%esp)
c0106d3c:	c0 
c0106d3d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106d44:	00 
c0106d45:	c7 04 24 cb ec 10 c0 	movl   $0xc010eccb,(%esp)
c0106d4c:	e8 9f a0 ff ff       	call   c0100df0 <__panic>
    }
    return &pages[PPN(pa)];
c0106d51:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c0106d56:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d59:	c1 ea 0c             	shr    $0xc,%edx
c0106d5c:	c1 e2 05             	shl    $0x5,%edx
c0106d5f:	01 d0                	add    %edx,%eax
}
c0106d61:	c9                   	leave  
c0106d62:	c3                   	ret    

c0106d63 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106d63:	55                   	push   %ebp
c0106d64:	89 e5                	mov    %esp,%ebp
c0106d66:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106d69:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d6c:	83 e0 01             	and    $0x1,%eax
c0106d6f:	85 c0                	test   %eax,%eax
c0106d71:	75 1c                	jne    c0106d8f <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106d73:	c7 44 24 08 dc ec 10 	movl   $0xc010ecdc,0x8(%esp)
c0106d7a:	c0 
c0106d7b:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106d82:	00 
c0106d83:	c7 04 24 cb ec 10 c0 	movl   $0xc010eccb,(%esp)
c0106d8a:	e8 61 a0 ff ff       	call   c0100df0 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d97:	89 04 24             	mov    %eax,(%esp)
c0106d9a:	e8 7f ff ff ff       	call   c0106d1e <pa2page>
}
c0106d9f:	c9                   	leave  
c0106da0:	c3                   	ret    

c0106da1 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106da1:	55                   	push   %ebp
c0106da2:	89 e5                	mov    %esp,%ebp
c0106da4:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106daa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106daf:	89 04 24             	mov    %eax,(%esp)
c0106db2:	e8 67 ff ff ff       	call   c0106d1e <pa2page>
}
c0106db7:	c9                   	leave  
c0106db8:	c3                   	ret    

c0106db9 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106db9:	55                   	push   %ebp
c0106dba:	89 e5                	mov    %esp,%ebp
c0106dbc:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106dbf:	e8 b4 33 00 00       	call   c010a178 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106dc4:	a1 9c 81 1c c0       	mov    0xc01c819c,%eax
c0106dc9:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106dce:	76 0c                	jbe    c0106ddc <swap_init+0x23>
c0106dd0:	a1 9c 81 1c c0       	mov    0xc01c819c,%eax
c0106dd5:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106dda:	76 25                	jbe    c0106e01 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106ddc:	a1 9c 81 1c c0       	mov    0xc01c819c,%eax
c0106de1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106de5:	c7 44 24 08 fd ec 10 	movl   $0xc010ecfd,0x8(%esp)
c0106dec:	c0 
c0106ded:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106df4:	00 
c0106df5:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0106dfc:	e8 ef 9f ff ff       	call   c0100df0 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e01:	c7 05 34 60 1c c0 60 	movl   $0xc0131a60,0xc01c6034
c0106e08:	1a 13 c0 
     int r = sm->init();
c0106e0b:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106e10:	8b 40 04             	mov    0x4(%eax),%eax
c0106e13:	ff d0                	call   *%eax
c0106e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e1c:	75 26                	jne    c0106e44 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106e1e:	c7 05 2c 60 1c c0 01 	movl   $0x1,0xc01c602c
c0106e25:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106e28:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106e2d:	8b 00                	mov    (%eax),%eax
c0106e2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e33:	c7 04 24 27 ed 10 c0 	movl   $0xc010ed27,(%esp)
c0106e3a:	e8 25 95 ff ff       	call   c0100364 <cprintf>
          check_swap();
c0106e3f:	e8 a4 04 00 00       	call   c01072e8 <check_swap>
     }

     return r;
c0106e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106e47:	c9                   	leave  
c0106e48:	c3                   	ret    

c0106e49 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106e49:	55                   	push   %ebp
c0106e4a:	89 e5                	mov    %esp,%ebp
c0106e4c:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106e4f:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106e54:	8b 40 08             	mov    0x8(%eax),%eax
c0106e57:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e5a:	89 14 24             	mov    %edx,(%esp)
c0106e5d:	ff d0                	call   *%eax
}
c0106e5f:	c9                   	leave  
c0106e60:	c3                   	ret    

c0106e61 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106e61:	55                   	push   %ebp
c0106e62:	89 e5                	mov    %esp,%ebp
c0106e64:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106e67:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106e6c:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e6f:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e72:	89 14 24             	mov    %edx,(%esp)
c0106e75:	ff d0                	call   *%eax
}
c0106e77:	c9                   	leave  
c0106e78:	c3                   	ret    

c0106e79 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106e79:	55                   	push   %ebp
c0106e7a:	89 e5                	mov    %esp,%ebp
c0106e7c:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106e7f:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106e84:	8b 40 10             	mov    0x10(%eax),%eax
c0106e87:	8b 55 14             	mov    0x14(%ebp),%edx
c0106e8a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e8e:	8b 55 10             	mov    0x10(%ebp),%edx
c0106e91:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e95:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e98:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e9c:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e9f:	89 14 24             	mov    %edx,(%esp)
c0106ea2:	ff d0                	call   *%eax
}
c0106ea4:	c9                   	leave  
c0106ea5:	c3                   	ret    

c0106ea6 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106ea6:	55                   	push   %ebp
c0106ea7:	89 e5                	mov    %esp,%ebp
c0106ea9:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106eac:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106eb1:	8b 40 14             	mov    0x14(%eax),%eax
c0106eb4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106eb7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ebb:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ebe:	89 14 24             	mov    %edx,(%esp)
c0106ec1:	ff d0                	call   *%eax
}
c0106ec3:	c9                   	leave  
c0106ec4:	c3                   	ret    

c0106ec5 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106ec5:	55                   	push   %ebp
c0106ec6:	89 e5                	mov    %esp,%ebp
c0106ec8:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106ecb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106ed2:	e9 5a 01 00 00       	jmp    c0107031 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106ed7:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106edc:	8b 40 18             	mov    0x18(%eax),%eax
c0106edf:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ee2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106ee6:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106ee9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106eed:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ef0:	89 14 24             	mov    %edx,(%esp)
c0106ef3:	ff d0                	call   *%eax
c0106ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106ef8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106efc:	74 18                	je     c0106f16 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f05:	c7 04 24 3c ed 10 c0 	movl   $0xc010ed3c,(%esp)
c0106f0c:	e8 53 94 ff ff       	call   c0100364 <cprintf>
c0106f11:	e9 27 01 00 00       	jmp    c010703d <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f19:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f22:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f25:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106f2c:	00 
c0106f2d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f30:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f34:	89 04 24             	mov    %eax,(%esp)
c0106f37:	e8 f0 e8 ff ff       	call   c010582c <get_pte>
c0106f3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106f3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f42:	8b 00                	mov    (%eax),%eax
c0106f44:	83 e0 01             	and    $0x1,%eax
c0106f47:	85 c0                	test   %eax,%eax
c0106f49:	75 24                	jne    c0106f6f <swap_out+0xaa>
c0106f4b:	c7 44 24 0c 69 ed 10 	movl   $0xc010ed69,0xc(%esp)
c0106f52:	c0 
c0106f53:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0106f5a:	c0 
c0106f5b:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106f62:	00 
c0106f63:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0106f6a:	e8 81 9e ff ff       	call   c0100df0 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106f6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106f75:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106f78:	c1 ea 0c             	shr    $0xc,%edx
c0106f7b:	83 c2 01             	add    $0x1,%edx
c0106f7e:	c1 e2 08             	shl    $0x8,%edx
c0106f81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f85:	89 14 24             	mov    %edx,(%esp)
c0106f88:	e8 a5 32 00 00       	call   c010a232 <swapfs_write>
c0106f8d:	85 c0                	test   %eax,%eax
c0106f8f:	74 34                	je     c0106fc5 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106f91:	c7 04 24 93 ed 10 c0 	movl   $0xc010ed93,(%esp)
c0106f98:	e8 c7 93 ff ff       	call   c0100364 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106f9d:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c0106fa2:	8b 40 10             	mov    0x10(%eax),%eax
c0106fa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106fa8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106faf:	00 
c0106fb0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106fb4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fb7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fbb:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fbe:	89 14 24             	mov    %edx,(%esp)
c0106fc1:	ff d0                	call   *%eax
c0106fc3:	eb 68                	jmp    c010702d <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106fc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fc8:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106fcb:	c1 e8 0c             	shr    $0xc,%eax
c0106fce:	83 c0 01             	add    $0x1,%eax
c0106fd1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106fd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106fd8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fe3:	c7 04 24 ac ed 10 c0 	movl   $0xc010edac,(%esp)
c0106fea:	e8 75 93 ff ff       	call   c0100364 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0106fef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ff2:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106ff5:	c1 e8 0c             	shr    $0xc,%eax
c0106ff8:	83 c0 01             	add    $0x1,%eax
c0106ffb:	c1 e0 08             	shl    $0x8,%eax
c0106ffe:	89 c2                	mov    %eax,%edx
c0107000:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107003:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107008:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010700f:	00 
c0107010:	89 04 24             	mov    %eax,(%esp)
c0107013:	e8 9b e1 ff ff       	call   c01051b3 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107018:	8b 45 08             	mov    0x8(%ebp),%eax
c010701b:	8b 40 0c             	mov    0xc(%eax),%eax
c010701e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107021:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107025:	89 04 24             	mov    %eax,(%esp)
c0107028:	e8 0c ef ff ff       	call   c0105f39 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010702d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107034:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107037:	0f 85 9a fe ff ff    	jne    c0106ed7 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010703d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107040:	c9                   	leave  
c0107041:	c3                   	ret    

c0107042 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107042:	55                   	push   %ebp
c0107043:	89 e5                	mov    %esp,%ebp
c0107045:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0107048:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010704f:	e8 f4 e0 ff ff       	call   c0105148 <alloc_pages>
c0107054:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107057:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010705b:	75 24                	jne    c0107081 <swap_in+0x3f>
c010705d:	c7 44 24 0c ec ed 10 	movl   $0xc010edec,0xc(%esp)
c0107064:	c0 
c0107065:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c010706c:	c0 
c010706d:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107074:	00 
c0107075:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c010707c:	e8 6f 9d ff ff       	call   c0100df0 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107081:	8b 45 08             	mov    0x8(%ebp),%eax
c0107084:	8b 40 0c             	mov    0xc(%eax),%eax
c0107087:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010708e:	00 
c010708f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107092:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107096:	89 04 24             	mov    %eax,(%esp)
c0107099:	e8 8e e7 ff ff       	call   c010582c <get_pte>
c010709e:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01070a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070a4:	8b 00                	mov    (%eax),%eax
c01070a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070ad:	89 04 24             	mov    %eax,(%esp)
c01070b0:	e8 0b 31 00 00       	call   c010a1c0 <swapfs_read>
c01070b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01070b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01070bc:	74 2a                	je     c01070e8 <swap_in+0xa6>
     {
        assert(r!=0);
c01070be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01070c2:	75 24                	jne    c01070e8 <swap_in+0xa6>
c01070c4:	c7 44 24 0c f9 ed 10 	movl   $0xc010edf9,0xc(%esp)
c01070cb:	c0 
c01070cc:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01070d3:	c0 
c01070d4:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01070db:	00 
c01070dc:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01070e3:	e8 08 9d ff ff       	call   c0100df0 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01070e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070eb:	8b 00                	mov    (%eax),%eax
c01070ed:	c1 e8 08             	shr    $0x8,%eax
c01070f0:	89 c2                	mov    %eax,%edx
c01070f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01070f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070fd:	c7 04 24 00 ee 10 c0 	movl   $0xc010ee00,(%esp)
c0107104:	e8 5b 92 ff ff       	call   c0100364 <cprintf>
     *ptr_result=result;
c0107109:	8b 45 10             	mov    0x10(%ebp),%eax
c010710c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010710f:	89 10                	mov    %edx,(%eax)
     return 0;
c0107111:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107116:	c9                   	leave  
c0107117:	c3                   	ret    

c0107118 <check_content_set>:



static inline void
check_content_set(void)
{
c0107118:	55                   	push   %ebp
c0107119:	89 e5                	mov    %esp,%ebp
c010711b:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010711e:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107123:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107126:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c010712b:	83 f8 01             	cmp    $0x1,%eax
c010712e:	74 24                	je     c0107154 <check_content_set+0x3c>
c0107130:	c7 44 24 0c 3e ee 10 	movl   $0xc010ee3e,0xc(%esp)
c0107137:	c0 
c0107138:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c010713f:	c0 
c0107140:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107147:	00 
c0107148:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c010714f:	e8 9c 9c ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107154:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107159:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010715c:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107161:	83 f8 01             	cmp    $0x1,%eax
c0107164:	74 24                	je     c010718a <check_content_set+0x72>
c0107166:	c7 44 24 0c 3e ee 10 	movl   $0xc010ee3e,0xc(%esp)
c010716d:	c0 
c010716e:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107175:	c0 
c0107176:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010717d:	00 
c010717e:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107185:	e8 66 9c ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c010718a:	b8 00 20 00 00       	mov    $0x2000,%eax
c010718f:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107192:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107197:	83 f8 02             	cmp    $0x2,%eax
c010719a:	74 24                	je     c01071c0 <check_content_set+0xa8>
c010719c:	c7 44 24 0c 4d ee 10 	movl   $0xc010ee4d,0xc(%esp)
c01071a3:	c0 
c01071a4:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01071ab:	c0 
c01071ac:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01071b3:	00 
c01071b4:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01071bb:	e8 30 9c ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01071c0:	b8 10 20 00 00       	mov    $0x2010,%eax
c01071c5:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071c8:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c01071cd:	83 f8 02             	cmp    $0x2,%eax
c01071d0:	74 24                	je     c01071f6 <check_content_set+0xde>
c01071d2:	c7 44 24 0c 4d ee 10 	movl   $0xc010ee4d,0xc(%esp)
c01071d9:	c0 
c01071da:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01071e1:	c0 
c01071e2:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01071e9:	00 
c01071ea:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01071f1:	e8 fa 9b ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01071f6:	b8 00 30 00 00       	mov    $0x3000,%eax
c01071fb:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01071fe:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107203:	83 f8 03             	cmp    $0x3,%eax
c0107206:	74 24                	je     c010722c <check_content_set+0x114>
c0107208:	c7 44 24 0c 5c ee 10 	movl   $0xc010ee5c,0xc(%esp)
c010720f:	c0 
c0107210:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107217:	c0 
c0107218:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010721f:	00 
c0107220:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107227:	e8 c4 9b ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010722c:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107231:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107234:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107239:	83 f8 03             	cmp    $0x3,%eax
c010723c:	74 24                	je     c0107262 <check_content_set+0x14a>
c010723e:	c7 44 24 0c 5c ee 10 	movl   $0xc010ee5c,0xc(%esp)
c0107245:	c0 
c0107246:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c010724d:	c0 
c010724e:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0107255:	00 
c0107256:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c010725d:	e8 8e 9b ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107262:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107267:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010726a:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c010726f:	83 f8 04             	cmp    $0x4,%eax
c0107272:	74 24                	je     c0107298 <check_content_set+0x180>
c0107274:	c7 44 24 0c 6b ee 10 	movl   $0xc010ee6b,0xc(%esp)
c010727b:	c0 
c010727c:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107283:	c0 
c0107284:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c010728b:	00 
c010728c:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107293:	e8 58 9b ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107298:	b8 10 40 00 00       	mov    $0x4010,%eax
c010729d:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072a0:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c01072a5:	83 f8 04             	cmp    $0x4,%eax
c01072a8:	74 24                	je     c01072ce <check_content_set+0x1b6>
c01072aa:	c7 44 24 0c 6b ee 10 	movl   $0xc010ee6b,0xc(%esp)
c01072b1:	c0 
c01072b2:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01072b9:	c0 
c01072ba:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01072c1:	00 
c01072c2:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01072c9:	e8 22 9b ff ff       	call   c0100df0 <__panic>
}
c01072ce:	c9                   	leave  
c01072cf:	c3                   	ret    

c01072d0 <check_content_access>:

static inline int
check_content_access(void)
{
c01072d0:	55                   	push   %ebp
c01072d1:	89 e5                	mov    %esp,%ebp
c01072d3:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01072d6:	a1 34 60 1c c0       	mov    0xc01c6034,%eax
c01072db:	8b 40 1c             	mov    0x1c(%eax),%eax
c01072de:	ff d0                	call   *%eax
c01072e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01072e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01072e6:	c9                   	leave  
c01072e7:	c3                   	ret    

c01072e8 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01072e8:	55                   	push   %ebp
c01072e9:	89 e5                	mov    %esp,%ebp
c01072eb:	53                   	push   %ebx
c01072ec:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01072ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01072f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01072fd:	c7 45 e8 dc 80 1c c0 	movl   $0xc01c80dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107304:	eb 6b                	jmp    c0107371 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107306:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107309:	83 e8 0c             	sub    $0xc,%eax
c010730c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010730f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107312:	83 c0 04             	add    $0x4,%eax
c0107315:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010731c:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010731f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107322:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107325:	0f a3 10             	bt     %edx,(%eax)
c0107328:	19 c0                	sbb    %eax,%eax
c010732a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c010732d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107331:	0f 95 c0             	setne  %al
c0107334:	0f b6 c0             	movzbl %al,%eax
c0107337:	85 c0                	test   %eax,%eax
c0107339:	75 24                	jne    c010735f <check_swap+0x77>
c010733b:	c7 44 24 0c 7a ee 10 	movl   $0xc010ee7a,0xc(%esp)
c0107342:	c0 
c0107343:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c010734a:	c0 
c010734b:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107352:	00 
c0107353:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c010735a:	e8 91 9a ff ff       	call   c0100df0 <__panic>
        count ++, total += p->property;
c010735f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107363:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107366:	8b 50 08             	mov    0x8(%eax),%edx
c0107369:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010736c:	01 d0                	add    %edx,%eax
c010736e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107371:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107374:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107377:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010737a:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010737d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107380:	81 7d e8 dc 80 1c c0 	cmpl   $0xc01c80dc,-0x18(%ebp)
c0107387:	0f 85 79 ff ff ff    	jne    c0107306 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010738d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0107390:	e8 50 de ff ff       	call   c01051e5 <nr_free_pages>
c0107395:	39 c3                	cmp    %eax,%ebx
c0107397:	74 24                	je     c01073bd <check_swap+0xd5>
c0107399:	c7 44 24 0c 8a ee 10 	movl   $0xc010ee8a,0xc(%esp)
c01073a0:	c0 
c01073a1:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01073a8:	c0 
c01073a9:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01073b0:	00 
c01073b1:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01073b8:	e8 33 9a ff ff       	call   c0100df0 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01073bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01073c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01073cb:	c7 04 24 a4 ee 10 c0 	movl   $0xc010eea4,(%esp)
c01073d2:	e8 8d 8f ff ff       	call   c0100364 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01073d7:	e8 66 0b 00 00       	call   c0107f42 <mm_create>
c01073dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01073df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01073e3:	75 24                	jne    c0107409 <check_swap+0x121>
c01073e5:	c7 44 24 0c ca ee 10 	movl   $0xc010eeca,0xc(%esp)
c01073ec:	c0 
c01073ed:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01073f4:	c0 
c01073f5:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c01073fc:	00 
c01073fd:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107404:	e8 e7 99 ff ff       	call   c0100df0 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107409:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c010740e:	85 c0                	test   %eax,%eax
c0107410:	74 24                	je     c0107436 <check_swap+0x14e>
c0107412:	c7 44 24 0c d5 ee 10 	movl   $0xc010eed5,0xc(%esp)
c0107419:	c0 
c010741a:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107421:	c0 
c0107422:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107429:	00 
c010742a:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107431:	e8 ba 99 ff ff       	call   c0100df0 <__panic>

     check_mm_struct = mm;
c0107436:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107439:	a3 cc 81 1c c0       	mov    %eax,0xc01c81cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010743e:	8b 15 00 1a 13 c0    	mov    0xc0131a00,%edx
c0107444:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107447:	89 50 0c             	mov    %edx,0xc(%eax)
c010744a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010744d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107450:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0107453:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107456:	8b 00                	mov    (%eax),%eax
c0107458:	85 c0                	test   %eax,%eax
c010745a:	74 24                	je     c0107480 <check_swap+0x198>
c010745c:	c7 44 24 0c ed ee 10 	movl   $0xc010eeed,0xc(%esp)
c0107463:	c0 
c0107464:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c010746b:	c0 
c010746c:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107473:	00 
c0107474:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c010747b:	e8 70 99 ff ff       	call   c0100df0 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107480:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107487:	00 
c0107488:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010748f:	00 
c0107490:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107497:	e8 4b 0b 00 00       	call   c0107fe7 <vma_create>
c010749c:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010749f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01074a3:	75 24                	jne    c01074c9 <check_swap+0x1e1>
c01074a5:	c7 44 24 0c fb ee 10 	movl   $0xc010eefb,0xc(%esp)
c01074ac:	c0 
c01074ad:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01074b4:	c0 
c01074b5:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01074bc:	00 
c01074bd:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01074c4:	e8 27 99 ff ff       	call   c0100df0 <__panic>

     insert_vma_struct(mm, vma);
c01074c9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01074cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074d3:	89 04 24             	mov    %eax,(%esp)
c01074d6:	e8 9c 0c 00 00       	call   c0108177 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01074db:	c7 04 24 08 ef 10 c0 	movl   $0xc010ef08,(%esp)
c01074e2:	e8 7d 8e ff ff       	call   c0100364 <cprintf>
     pte_t *temp_ptep=NULL;
c01074e7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01074ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074f1:	8b 40 0c             	mov    0xc(%eax),%eax
c01074f4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01074fb:	00 
c01074fc:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107503:	00 
c0107504:	89 04 24             	mov    %eax,(%esp)
c0107507:	e8 20 e3 ff ff       	call   c010582c <get_pte>
c010750c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010750f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107513:	75 24                	jne    c0107539 <check_swap+0x251>
c0107515:	c7 44 24 0c 3c ef 10 	movl   $0xc010ef3c,0xc(%esp)
c010751c:	c0 
c010751d:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107524:	c0 
c0107525:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010752c:	00 
c010752d:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107534:	e8 b7 98 ff ff       	call   c0100df0 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107539:	c7 04 24 50 ef 10 c0 	movl   $0xc010ef50,(%esp)
c0107540:	e8 1f 8e ff ff       	call   c0100364 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107545:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010754c:	e9 a3 00 00 00       	jmp    c01075f4 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0107551:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107558:	e8 eb db ff ff       	call   c0105148 <alloc_pages>
c010755d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107560:	89 04 95 00 81 1c c0 	mov    %eax,-0x3fe37f00(,%edx,4)
          assert(check_rp[i] != NULL );
c0107567:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010756a:	8b 04 85 00 81 1c c0 	mov    -0x3fe37f00(,%eax,4),%eax
c0107571:	85 c0                	test   %eax,%eax
c0107573:	75 24                	jne    c0107599 <check_swap+0x2b1>
c0107575:	c7 44 24 0c 74 ef 10 	movl   $0xc010ef74,0xc(%esp)
c010757c:	c0 
c010757d:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107584:	c0 
c0107585:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010758c:	00 
c010758d:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107594:	e8 57 98 ff ff       	call   c0100df0 <__panic>
          assert(!PageProperty(check_rp[i]));
c0107599:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010759c:	8b 04 85 00 81 1c c0 	mov    -0x3fe37f00(,%eax,4),%eax
c01075a3:	83 c0 04             	add    $0x4,%eax
c01075a6:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01075ad:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01075b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01075b3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01075b6:	0f a3 10             	bt     %edx,(%eax)
c01075b9:	19 c0                	sbb    %eax,%eax
c01075bb:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01075be:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01075c2:	0f 95 c0             	setne  %al
c01075c5:	0f b6 c0             	movzbl %al,%eax
c01075c8:	85 c0                	test   %eax,%eax
c01075ca:	74 24                	je     c01075f0 <check_swap+0x308>
c01075cc:	c7 44 24 0c 88 ef 10 	movl   $0xc010ef88,0xc(%esp)
c01075d3:	c0 
c01075d4:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01075db:	c0 
c01075dc:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01075e3:	00 
c01075e4:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01075eb:	e8 00 98 ff ff       	call   c0100df0 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075f0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01075f4:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01075f8:	0f 8e 53 ff ff ff    	jle    c0107551 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c01075fe:	a1 dc 80 1c c0       	mov    0xc01c80dc,%eax
c0107603:	8b 15 e0 80 1c c0    	mov    0xc01c80e0,%edx
c0107609:	89 45 98             	mov    %eax,-0x68(%ebp)
c010760c:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010760f:	c7 45 a8 dc 80 1c c0 	movl   $0xc01c80dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107616:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107619:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010761c:	89 50 04             	mov    %edx,0x4(%eax)
c010761f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107622:	8b 50 04             	mov    0x4(%eax),%edx
c0107625:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107628:	89 10                	mov    %edx,(%eax)
c010762a:	c7 45 a4 dc 80 1c c0 	movl   $0xc01c80dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107631:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107634:	8b 40 04             	mov    0x4(%eax),%eax
c0107637:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c010763a:	0f 94 c0             	sete   %al
c010763d:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107640:	85 c0                	test   %eax,%eax
c0107642:	75 24                	jne    c0107668 <check_swap+0x380>
c0107644:	c7 44 24 0c a3 ef 10 	movl   $0xc010efa3,0xc(%esp)
c010764b:	c0 
c010764c:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107653:	c0 
c0107654:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010765b:	00 
c010765c:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107663:	e8 88 97 ff ff       	call   c0100df0 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107668:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c010766d:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0107670:	c7 05 e4 80 1c c0 00 	movl   $0x0,0xc01c80e4
c0107677:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010767a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107681:	eb 1e                	jmp    c01076a1 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107683:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107686:	8b 04 85 00 81 1c c0 	mov    -0x3fe37f00(,%eax,4),%eax
c010768d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107694:	00 
c0107695:	89 04 24             	mov    %eax,(%esp)
c0107698:	e8 16 db ff ff       	call   c01051b3 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010769d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076a1:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076a5:	7e dc                	jle    c0107683 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01076a7:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c01076ac:	83 f8 04             	cmp    $0x4,%eax
c01076af:	74 24                	je     c01076d5 <check_swap+0x3ed>
c01076b1:	c7 44 24 0c bc ef 10 	movl   $0xc010efbc,0xc(%esp)
c01076b8:	c0 
c01076b9:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01076c0:	c0 
c01076c1:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01076c8:	00 
c01076c9:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01076d0:	e8 1b 97 ff ff       	call   c0100df0 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01076d5:	c7 04 24 e0 ef 10 c0 	movl   $0xc010efe0,(%esp)
c01076dc:	e8 83 8c ff ff       	call   c0100364 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01076e1:	c7 05 38 60 1c c0 00 	movl   $0x0,0xc01c6038
c01076e8:	00 00 00 
     
     check_content_set();
c01076eb:	e8 28 fa ff ff       	call   c0107118 <check_content_set>
     assert( nr_free == 0);         
c01076f0:	a1 e4 80 1c c0       	mov    0xc01c80e4,%eax
c01076f5:	85 c0                	test   %eax,%eax
c01076f7:	74 24                	je     c010771d <check_swap+0x435>
c01076f9:	c7 44 24 0c 07 f0 10 	movl   $0xc010f007,0xc(%esp)
c0107700:	c0 
c0107701:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107708:	c0 
c0107709:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107710:	00 
c0107711:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107718:	e8 d3 96 ff ff       	call   c0100df0 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010771d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107724:	eb 26                	jmp    c010774c <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107726:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107729:	c7 04 85 20 81 1c c0 	movl   $0xffffffff,-0x3fe37ee0(,%eax,4)
c0107730:	ff ff ff ff 
c0107734:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107737:	8b 14 85 20 81 1c c0 	mov    -0x3fe37ee0(,%eax,4),%edx
c010773e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107741:	89 14 85 60 81 1c c0 	mov    %edx,-0x3fe37ea0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107748:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010774c:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107750:	7e d4                	jle    c0107726 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107752:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107759:	e9 eb 00 00 00       	jmp    c0107849 <check_swap+0x561>
         check_ptep[i]=0;
c010775e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107761:	c7 04 85 b4 81 1c c0 	movl   $0x0,-0x3fe37e4c(,%eax,4)
c0107768:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010776c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010776f:	83 c0 01             	add    $0x1,%eax
c0107772:	c1 e0 0c             	shl    $0xc,%eax
c0107775:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010777c:	00 
c010777d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107781:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107784:	89 04 24             	mov    %eax,(%esp)
c0107787:	e8 a0 e0 ff ff       	call   c010582c <get_pte>
c010778c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010778f:	89 04 95 b4 81 1c c0 	mov    %eax,-0x3fe37e4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107796:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107799:	8b 04 85 b4 81 1c c0 	mov    -0x3fe37e4c(,%eax,4),%eax
c01077a0:	85 c0                	test   %eax,%eax
c01077a2:	75 24                	jne    c01077c8 <check_swap+0x4e0>
c01077a4:	c7 44 24 0c 14 f0 10 	movl   $0xc010f014,0xc(%esp)
c01077ab:	c0 
c01077ac:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01077b3:	c0 
c01077b4:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01077bb:	00 
c01077bc:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c01077c3:	e8 28 96 ff ff       	call   c0100df0 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01077c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077cb:	8b 04 85 b4 81 1c c0 	mov    -0x3fe37e4c(,%eax,4),%eax
c01077d2:	8b 00                	mov    (%eax),%eax
c01077d4:	89 04 24             	mov    %eax,(%esp)
c01077d7:	e8 87 f5 ff ff       	call   c0106d63 <pte2page>
c01077dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01077df:	8b 14 95 00 81 1c c0 	mov    -0x3fe37f00(,%edx,4),%edx
c01077e6:	39 d0                	cmp    %edx,%eax
c01077e8:	74 24                	je     c010780e <check_swap+0x526>
c01077ea:	c7 44 24 0c 2c f0 10 	movl   $0xc010f02c,0xc(%esp)
c01077f1:	c0 
c01077f2:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c01077f9:	c0 
c01077fa:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0107801:	00 
c0107802:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107809:	e8 e2 95 ff ff       	call   c0100df0 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010780e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107811:	8b 04 85 b4 81 1c c0 	mov    -0x3fe37e4c(,%eax,4),%eax
c0107818:	8b 00                	mov    (%eax),%eax
c010781a:	83 e0 01             	and    $0x1,%eax
c010781d:	85 c0                	test   %eax,%eax
c010781f:	75 24                	jne    c0107845 <check_swap+0x55d>
c0107821:	c7 44 24 0c 54 f0 10 	movl   $0xc010f054,0xc(%esp)
c0107828:	c0 
c0107829:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c0107830:	c0 
c0107831:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107838:	00 
c0107839:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c0107840:	e8 ab 95 ff ff       	call   c0100df0 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107845:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107849:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010784d:	0f 8e 0b ff ff ff    	jle    c010775e <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107853:	c7 04 24 70 f0 10 c0 	movl   $0xc010f070,(%esp)
c010785a:	e8 05 8b ff ff       	call   c0100364 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010785f:	e8 6c fa ff ff       	call   c01072d0 <check_content_access>
c0107864:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107867:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010786b:	74 24                	je     c0107891 <check_swap+0x5a9>
c010786d:	c7 44 24 0c 96 f0 10 	movl   $0xc010f096,0xc(%esp)
c0107874:	c0 
c0107875:	c7 44 24 08 7e ed 10 	movl   $0xc010ed7e,0x8(%esp)
c010787c:	c0 
c010787d:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107884:	00 
c0107885:	c7 04 24 18 ed 10 c0 	movl   $0xc010ed18,(%esp)
c010788c:	e8 5f 95 ff ff       	call   c0100df0 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107891:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107898:	eb 1e                	jmp    c01078b8 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c010789a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010789d:	8b 04 85 00 81 1c c0 	mov    -0x3fe37f00(,%eax,4),%eax
c01078a4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01078ab:	00 
c01078ac:	89 04 24             	mov    %eax,(%esp)
c01078af:	e8 ff d8 ff ff       	call   c01051b3 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078b4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078b8:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078bc:	7e dc                	jle    c010789a <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c01078be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01078c1:	8b 00                	mov    (%eax),%eax
c01078c3:	89 04 24             	mov    %eax,(%esp)
c01078c6:	e8 d6 f4 ff ff       	call   c0106da1 <pde2page>
c01078cb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01078d2:	00 
c01078d3:	89 04 24             	mov    %eax,(%esp)
c01078d6:	e8 d8 d8 ff ff       	call   c01051b3 <free_pages>
     pgdir[0] = 0;
c01078db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01078de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01078e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01078e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01078ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01078f1:	89 04 24             	mov    %eax,(%esp)
c01078f4:	e8 ae 09 00 00       	call   c01082a7 <mm_destroy>
     check_mm_struct = NULL;
c01078f9:	c7 05 cc 81 1c c0 00 	movl   $0x0,0xc01c81cc
c0107900:	00 00 00 
     
     nr_free = nr_free_store;
c0107903:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107906:	a3 e4 80 1c c0       	mov    %eax,0xc01c80e4
     free_list = free_list_store;
c010790b:	8b 45 98             	mov    -0x68(%ebp),%eax
c010790e:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107911:	a3 dc 80 1c c0       	mov    %eax,0xc01c80dc
c0107916:	89 15 e0 80 1c c0    	mov    %edx,0xc01c80e0

     
     le = &free_list;
c010791c:	c7 45 e8 dc 80 1c c0 	movl   $0xc01c80dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107923:	eb 1d                	jmp    c0107942 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107925:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107928:	83 e8 0c             	sub    $0xc,%eax
c010792b:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c010792e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107932:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107935:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107938:	8b 40 08             	mov    0x8(%eax),%eax
c010793b:	29 c2                	sub    %eax,%edx
c010793d:	89 d0                	mov    %edx,%eax
c010793f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107942:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107945:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107948:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010794b:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010794e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107951:	81 7d e8 dc 80 1c c0 	cmpl   $0xc01c80dc,-0x18(%ebp)
c0107958:	75 cb                	jne    c0107925 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c010795a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010795d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107964:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107968:	c7 04 24 9d f0 10 c0 	movl   $0xc010f09d,(%esp)
c010796f:	e8 f0 89 ff ff       	call   c0100364 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107974:	c7 04 24 b7 f0 10 c0 	movl   $0xc010f0b7,(%esp)
c010797b:	e8 e4 89 ff ff       	call   c0100364 <cprintf>
}
c0107980:	83 c4 74             	add    $0x74,%esp
c0107983:	5b                   	pop    %ebx
c0107984:	5d                   	pop    %ebp
c0107985:	c3                   	ret    

c0107986 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107986:	55                   	push   %ebp
c0107987:	89 e5                	mov    %esp,%ebp
c0107989:	83 ec 10             	sub    $0x10,%esp
c010798c:	c7 45 fc c4 81 1c c0 	movl   $0xc01c81c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107993:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107996:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107999:	89 50 04             	mov    %edx,0x4(%eax)
c010799c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010799f:	8b 50 04             	mov    0x4(%eax),%edx
c01079a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079a5:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01079a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01079aa:	c7 40 14 c4 81 1c c0 	movl   $0xc01c81c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01079b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079b6:	c9                   	leave  
c01079b7:	c3                   	ret    

c01079b8 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01079b8:	55                   	push   %ebp
c01079b9:	89 e5                	mov    %esp,%ebp
c01079bb:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01079be:	8b 45 08             	mov    0x8(%ebp),%eax
c01079c1:	8b 40 14             	mov    0x14(%eax),%eax
c01079c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01079c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01079ca:	83 c0 14             	add    $0x14,%eax
c01079cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c01079d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01079d4:	74 06                	je     c01079dc <_fifo_map_swappable+0x24>
c01079d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01079da:	75 24                	jne    c0107a00 <_fifo_map_swappable+0x48>
c01079dc:	c7 44 24 0c d0 f0 10 	movl   $0xc010f0d0,0xc(%esp)
c01079e3:	c0 
c01079e4:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c01079eb:	c0 
c01079ec:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c01079f3:	00 
c01079f4:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c01079fb:	e8 f0 93 ff ff       	call   c0100df0 <__panic>
c0107a00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a03:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a09:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107a12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a15:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107a18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a1b:	8b 40 04             	mov    0x4(%eax),%eax
c0107a1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a21:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107a24:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a27:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107a2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107a2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a30:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a33:	89 10                	mov    %edx,(%eax)
c0107a35:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a38:	8b 10                	mov    (%eax),%edx
c0107a3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107a3d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107a40:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a43:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107a46:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107a49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a4c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107a4f:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
	list_add(head, entry);
    return 0;
c0107a51:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a56:	c9                   	leave  
c0107a57:	c3                   	ret    

c0107a58 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107a58:	55                   	push   %ebp
c0107a59:	89 e5                	mov    %esp,%ebp
c0107a5b:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a61:	8b 40 14             	mov    0x14(%eax),%eax
c0107a64:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107a67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a6b:	75 24                	jne    c0107a91 <_fifo_swap_out_victim+0x39>
c0107a6d:	c7 44 24 0c 17 f1 10 	movl   $0xc010f117,0xc(%esp)
c0107a74:	c0 
c0107a75:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107a7c:	c0 
c0107a7d:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107a84:	00 
c0107a85:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107a8c:	e8 5f 93 ff ff       	call   c0100df0 <__panic>
     assert(in_tick==0);
c0107a91:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107a95:	74 24                	je     c0107abb <_fifo_swap_out_victim+0x63>
c0107a97:	c7 44 24 0c 24 f1 10 	movl   $0xc010f124,0xc(%esp)
c0107a9e:	c0 
c0107a9f:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107aa6:	c0 
c0107aa7:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107aae:	00 
c0107aaf:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107ab6:	e8 35 93 ff ff       	call   c0100df0 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     list_entry_t *le = head->prev;
c0107abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107abe:	8b 00                	mov    (%eax),%eax
c0107ac0:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ac6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107ac9:	75 24                	jne    c0107aef <_fifo_swap_out_victim+0x97>
c0107acb:	c7 44 24 0c 2f f1 10 	movl   $0xc010f12f,0xc(%esp)
c0107ad2:	c0 
c0107ad3:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107ada:	c0 
c0107adb:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107ae2:	00 
c0107ae3:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107aea:	e8 01 93 ff ff       	call   c0100df0 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107aef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107af2:	83 e8 14             	sub    $0x14,%eax
c0107af5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107afb:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107afe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b01:	8b 40 04             	mov    0x4(%eax),%eax
c0107b04:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107b07:	8b 12                	mov    (%edx),%edx
c0107b09:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107b0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b12:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107b15:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107b1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b1e:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107b20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107b24:	75 24                	jne    c0107b4a <_fifo_swap_out_victim+0xf2>
c0107b26:	c7 44 24 0c 38 f1 10 	movl   $0xc010f138,0xc(%esp)
c0107b2d:	c0 
c0107b2e:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107b35:	c0 
c0107b36:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0107b3d:	00 
c0107b3e:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107b45:	e8 a6 92 ff ff       	call   c0100df0 <__panic>
     *ptr_page = p;
c0107b4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b4d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107b50:	89 10                	mov    %edx,(%eax)
     return 0;
c0107b52:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b57:	c9                   	leave  
c0107b58:	c3                   	ret    

c0107b59 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107b59:	55                   	push   %ebp
c0107b5a:	89 e5                	mov    %esp,%ebp
c0107b5c:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107b5f:	c7 04 24 44 f1 10 c0 	movl   $0xc010f144,(%esp)
c0107b66:	e8 f9 87 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107b6b:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b70:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107b73:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107b78:	83 f8 04             	cmp    $0x4,%eax
c0107b7b:	74 24                	je     c0107ba1 <_fifo_check_swap+0x48>
c0107b7d:	c7 44 24 0c 6a f1 10 	movl   $0xc010f16a,0xc(%esp)
c0107b84:	c0 
c0107b85:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107b8c:	c0 
c0107b8d:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107b94:	00 
c0107b95:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107b9c:	e8 4f 92 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107ba1:	c7 04 24 7c f1 10 c0 	movl   $0xc010f17c,(%esp)
c0107ba8:	e8 b7 87 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107bad:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107bb2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107bb5:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107bba:	83 f8 04             	cmp    $0x4,%eax
c0107bbd:	74 24                	je     c0107be3 <_fifo_check_swap+0x8a>
c0107bbf:	c7 44 24 0c 6a f1 10 	movl   $0xc010f16a,0xc(%esp)
c0107bc6:	c0 
c0107bc7:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107bce:	c0 
c0107bcf:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107bd6:	00 
c0107bd7:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107bde:	e8 0d 92 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107be3:	c7 04 24 a4 f1 10 c0 	movl   $0xc010f1a4,(%esp)
c0107bea:	e8 75 87 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107bef:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107bf4:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107bf7:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107bfc:	83 f8 04             	cmp    $0x4,%eax
c0107bff:	74 24                	je     c0107c25 <_fifo_check_swap+0xcc>
c0107c01:	c7 44 24 0c 6a f1 10 	movl   $0xc010f16a,0xc(%esp)
c0107c08:	c0 
c0107c09:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107c10:	c0 
c0107c11:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107c18:	00 
c0107c19:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107c20:	e8 cb 91 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c25:	c7 04 24 cc f1 10 c0 	movl   $0xc010f1cc,(%esp)
c0107c2c:	e8 33 87 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c31:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c36:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107c39:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107c3e:	83 f8 04             	cmp    $0x4,%eax
c0107c41:	74 24                	je     c0107c67 <_fifo_check_swap+0x10e>
c0107c43:	c7 44 24 0c 6a f1 10 	movl   $0xc010f16a,0xc(%esp)
c0107c4a:	c0 
c0107c4b:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107c52:	c0 
c0107c53:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107c5a:	00 
c0107c5b:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107c62:	e8 89 91 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107c67:	c7 04 24 f4 f1 10 c0 	movl   $0xc010f1f4,(%esp)
c0107c6e:	e8 f1 86 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107c73:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107c78:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107c7b:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107c80:	83 f8 05             	cmp    $0x5,%eax
c0107c83:	74 24                	je     c0107ca9 <_fifo_check_swap+0x150>
c0107c85:	c7 44 24 0c 1a f2 10 	movl   $0xc010f21a,0xc(%esp)
c0107c8c:	c0 
c0107c8d:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107c94:	c0 
c0107c95:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107c9c:	00 
c0107c9d:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107ca4:	e8 47 91 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ca9:	c7 04 24 cc f1 10 c0 	movl   $0xc010f1cc,(%esp)
c0107cb0:	e8 af 86 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cb5:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107cba:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107cbd:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107cc2:	83 f8 05             	cmp    $0x5,%eax
c0107cc5:	74 24                	je     c0107ceb <_fifo_check_swap+0x192>
c0107cc7:	c7 44 24 0c 1a f2 10 	movl   $0xc010f21a,0xc(%esp)
c0107cce:	c0 
c0107ccf:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107cd6:	c0 
c0107cd7:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107cde:	00 
c0107cdf:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107ce6:	e8 05 91 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107ceb:	c7 04 24 7c f1 10 c0 	movl   $0xc010f17c,(%esp)
c0107cf2:	e8 6d 86 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107cf7:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107cfc:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107cff:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107d04:	83 f8 06             	cmp    $0x6,%eax
c0107d07:	74 24                	je     c0107d2d <_fifo_check_swap+0x1d4>
c0107d09:	c7 44 24 0c 29 f2 10 	movl   $0xc010f229,0xc(%esp)
c0107d10:	c0 
c0107d11:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107d18:	c0 
c0107d19:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107d20:	00 
c0107d21:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107d28:	e8 c3 90 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d2d:	c7 04 24 cc f1 10 c0 	movl   $0xc010f1cc,(%esp)
c0107d34:	e8 2b 86 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d39:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d3e:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107d41:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107d46:	83 f8 07             	cmp    $0x7,%eax
c0107d49:	74 24                	je     c0107d6f <_fifo_check_swap+0x216>
c0107d4b:	c7 44 24 0c 38 f2 10 	movl   $0xc010f238,0xc(%esp)
c0107d52:	c0 
c0107d53:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107d5a:	c0 
c0107d5b:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107d62:	00 
c0107d63:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107d6a:	e8 81 90 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d6f:	c7 04 24 44 f1 10 c0 	movl   $0xc010f144,(%esp)
c0107d76:	e8 e9 85 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d7b:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d80:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107d83:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107d88:	83 f8 08             	cmp    $0x8,%eax
c0107d8b:	74 24                	je     c0107db1 <_fifo_check_swap+0x258>
c0107d8d:	c7 44 24 0c 47 f2 10 	movl   $0xc010f247,0xc(%esp)
c0107d94:	c0 
c0107d95:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107d9c:	c0 
c0107d9d:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107da4:	00 
c0107da5:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107dac:	e8 3f 90 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107db1:	c7 04 24 a4 f1 10 c0 	movl   $0xc010f1a4,(%esp)
c0107db8:	e8 a7 85 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107dbd:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107dc2:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107dc5:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107dca:	83 f8 09             	cmp    $0x9,%eax
c0107dcd:	74 24                	je     c0107df3 <_fifo_check_swap+0x29a>
c0107dcf:	c7 44 24 0c 56 f2 10 	movl   $0xc010f256,0xc(%esp)
c0107dd6:	c0 
c0107dd7:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107dde:	c0 
c0107ddf:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107de6:	00 
c0107de7:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107dee:	e8 fd 8f ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107df3:	c7 04 24 f4 f1 10 c0 	movl   $0xc010f1f4,(%esp)
c0107dfa:	e8 65 85 ff ff       	call   c0100364 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107dff:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107e04:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107e07:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107e0c:	83 f8 0a             	cmp    $0xa,%eax
c0107e0f:	74 24                	je     c0107e35 <_fifo_check_swap+0x2dc>
c0107e11:	c7 44 24 0c 65 f2 10 	movl   $0xc010f265,0xc(%esp)
c0107e18:	c0 
c0107e19:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107e20:	c0 
c0107e21:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c0107e28:	00 
c0107e29:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107e30:	e8 bb 8f ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107e35:	c7 04 24 7c f1 10 c0 	movl   $0xc010f17c,(%esp)
c0107e3c:	e8 23 85 ff ff       	call   c0100364 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0107e41:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107e46:	0f b6 00             	movzbl (%eax),%eax
c0107e49:	3c 0a                	cmp    $0xa,%al
c0107e4b:	74 24                	je     c0107e71 <_fifo_check_swap+0x318>
c0107e4d:	c7 44 24 0c 78 f2 10 	movl   $0xc010f278,0xc(%esp)
c0107e54:	c0 
c0107e55:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107e5c:	c0 
c0107e5d:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0107e64:	00 
c0107e65:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107e6c:	e8 7f 8f ff ff       	call   c0100df0 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0107e71:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107e76:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0107e79:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0107e7e:	83 f8 0b             	cmp    $0xb,%eax
c0107e81:	74 24                	je     c0107ea7 <_fifo_check_swap+0x34e>
c0107e83:	c7 44 24 0c 99 f2 10 	movl   $0xc010f299,0xc(%esp)
c0107e8a:	c0 
c0107e8b:	c7 44 24 08 ee f0 10 	movl   $0xc010f0ee,0x8(%esp)
c0107e92:	c0 
c0107e93:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c0107e9a:	00 
c0107e9b:	c7 04 24 03 f1 10 c0 	movl   $0xc010f103,(%esp)
c0107ea2:	e8 49 8f ff ff       	call   c0100df0 <__panic>
    return 0;
c0107ea7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107eac:	c9                   	leave  
c0107ead:	c3                   	ret    

c0107eae <_fifo_init>:


static int
_fifo_init(void)
{
c0107eae:	55                   	push   %ebp
c0107eaf:	89 e5                	mov    %esp,%ebp
    return 0;
c0107eb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107eb6:	5d                   	pop    %ebp
c0107eb7:	c3                   	ret    

c0107eb8 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107eb8:	55                   	push   %ebp
c0107eb9:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ebb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ec0:	5d                   	pop    %ebp
c0107ec1:	c3                   	ret    

c0107ec2 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107ec2:	55                   	push   %ebp
c0107ec3:	89 e5                	mov    %esp,%ebp
c0107ec5:	b8 00 00 00 00       	mov    $0x0,%eax
c0107eca:	5d                   	pop    %ebp
c0107ecb:	c3                   	ret    

c0107ecc <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107ecc:	55                   	push   %ebp
c0107ecd:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107ecf:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ed2:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107ed5:	5d                   	pop    %ebp
c0107ed6:	c3                   	ret    

c0107ed7 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107ed7:	55                   	push   %ebp
c0107ed8:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0107edd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ee0:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107ee3:	5d                   	pop    %ebp
c0107ee4:	c3                   	ret    

c0107ee5 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107ee5:	55                   	push   %ebp
c0107ee6:	89 e5                	mov    %esp,%ebp
c0107ee8:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0107eee:	c1 e8 0c             	shr    $0xc,%eax
c0107ef1:	89 c2                	mov    %eax,%edx
c0107ef3:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c0107ef8:	39 c2                	cmp    %eax,%edx
c0107efa:	72 1c                	jb     c0107f18 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107efc:	c7 44 24 08 bc f2 10 	movl   $0xc010f2bc,0x8(%esp)
c0107f03:	c0 
c0107f04:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107f0b:	00 
c0107f0c:	c7 04 24 db f2 10 c0 	movl   $0xc010f2db,(%esp)
c0107f13:	e8 d8 8e ff ff       	call   c0100df0 <__panic>
    }
    return &pages[PPN(pa)];
c0107f18:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c0107f1d:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f20:	c1 ea 0c             	shr    $0xc,%edx
c0107f23:	c1 e2 05             	shl    $0x5,%edx
c0107f26:	01 d0                	add    %edx,%eax
}
c0107f28:	c9                   	leave  
c0107f29:	c3                   	ret    

c0107f2a <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107f2a:	55                   	push   %ebp
c0107f2b:	89 e5                	mov    %esp,%ebp
c0107f2d:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f33:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f38:	89 04 24             	mov    %eax,(%esp)
c0107f3b:	e8 a5 ff ff ff       	call   c0107ee5 <pa2page>
}
c0107f40:	c9                   	leave  
c0107f41:	c3                   	ret    

c0107f42 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107f42:	55                   	push   %ebp
c0107f43:	89 e5                	mov    %esp,%ebp
c0107f45:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107f48:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107f4f:	e8 7f cd ff ff       	call   c0104cd3 <kmalloc>
c0107f54:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107f57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f5b:	0f 84 81 00 00 00    	je     c0107fe2 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f64:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107f67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f6a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107f6d:	89 50 04             	mov    %edx,0x4(%eax)
c0107f70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f73:	8b 50 04             	mov    0x4(%eax),%edx
c0107f76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f79:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f7e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f88:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f92:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107f99:	a1 2c 60 1c c0       	mov    0xc01c602c,%eax
c0107f9e:	85 c0                	test   %eax,%eax
c0107fa0:	74 0d                	je     c0107faf <mm_create+0x6d>
c0107fa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fa5:	89 04 24             	mov    %eax,(%esp)
c0107fa8:	e8 9c ee ff ff       	call   c0106e49 <swap_init_mm>
c0107fad:	eb 0a                	jmp    c0107fb9 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107fb9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107fc0:	00 
c0107fc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fc4:	89 04 24             	mov    %eax,(%esp)
c0107fc7:	e8 0b ff ff ff       	call   c0107ed7 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fcf:	83 c0 1c             	add    $0x1c,%eax
c0107fd2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107fd9:	00 
c0107fda:	89 04 24             	mov    %eax,(%esp)
c0107fdd:	e8 5e 1a 00 00       	call   c0109a40 <sem_init>
    }    
    return mm;
c0107fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107fe5:	c9                   	leave  
c0107fe6:	c3                   	ret    

c0107fe7 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107fe7:	55                   	push   %ebp
c0107fe8:	89 e5                	mov    %esp,%ebp
c0107fea:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107fed:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107ff4:	e8 da cc ff ff       	call   c0104cd3 <kmalloc>
c0107ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107ffc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108000:	74 1b                	je     c010801d <vma_create+0x36>
        vma->vm_start = vm_start;
c0108002:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108005:	8b 55 08             	mov    0x8(%ebp),%edx
c0108008:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c010800b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010800e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108011:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0108014:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108017:	8b 55 10             	mov    0x10(%ebp),%edx
c010801a:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c010801d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108020:	c9                   	leave  
c0108021:	c3                   	ret    

c0108022 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0108022:	55                   	push   %ebp
c0108023:	89 e5                	mov    %esp,%ebp
c0108025:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0108028:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010802f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108033:	0f 84 95 00 00 00    	je     c01080ce <find_vma+0xac>
        vma = mm->mmap_cache;
c0108039:	8b 45 08             	mov    0x8(%ebp),%eax
c010803c:	8b 40 08             	mov    0x8(%eax),%eax
c010803f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0108042:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108046:	74 16                	je     c010805e <find_vma+0x3c>
c0108048:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010804b:	8b 40 04             	mov    0x4(%eax),%eax
c010804e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108051:	77 0b                	ja     c010805e <find_vma+0x3c>
c0108053:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108056:	8b 40 08             	mov    0x8(%eax),%eax
c0108059:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010805c:	77 61                	ja     c01080bf <find_vma+0x9d>
                bool found = 0;
c010805e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0108065:	8b 45 08             	mov    0x8(%ebp),%eax
c0108068:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010806b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010806e:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0108071:	eb 28                	jmp    c010809b <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0108073:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108076:	83 e8 10             	sub    $0x10,%eax
c0108079:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c010807c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010807f:	8b 40 04             	mov    0x4(%eax),%eax
c0108082:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108085:	77 14                	ja     c010809b <find_vma+0x79>
c0108087:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010808a:	8b 40 08             	mov    0x8(%eax),%eax
c010808d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108090:	76 09                	jbe    c010809b <find_vma+0x79>
                        found = 1;
c0108092:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108099:	eb 17                	jmp    c01080b2 <find_vma+0x90>
c010809b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010809e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01080a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080a4:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01080a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01080aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01080b0:	75 c1                	jne    c0108073 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01080b2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01080b6:	75 07                	jne    c01080bf <find_vma+0x9d>
                    vma = NULL;
c01080b8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01080bf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080c3:	74 09                	je     c01080ce <find_vma+0xac>
            mm->mmap_cache = vma;
c01080c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01080c8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01080cb:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01080ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01080d1:	c9                   	leave  
c01080d2:	c3                   	ret    

c01080d3 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01080d3:	55                   	push   %ebp
c01080d4:	89 e5                	mov    %esp,%ebp
c01080d6:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c01080d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01080dc:	8b 50 04             	mov    0x4(%eax),%edx
c01080df:	8b 45 08             	mov    0x8(%ebp),%eax
c01080e2:	8b 40 08             	mov    0x8(%eax),%eax
c01080e5:	39 c2                	cmp    %eax,%edx
c01080e7:	72 24                	jb     c010810d <check_vma_overlap+0x3a>
c01080e9:	c7 44 24 0c e9 f2 10 	movl   $0xc010f2e9,0xc(%esp)
c01080f0:	c0 
c01080f1:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01080f8:	c0 
c01080f9:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108100:	00 
c0108101:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108108:	e8 e3 8c ff ff       	call   c0100df0 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010810d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108110:	8b 50 08             	mov    0x8(%eax),%edx
c0108113:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108116:	8b 40 04             	mov    0x4(%eax),%eax
c0108119:	39 c2                	cmp    %eax,%edx
c010811b:	76 24                	jbe    c0108141 <check_vma_overlap+0x6e>
c010811d:	c7 44 24 0c 2c f3 10 	movl   $0xc010f32c,0xc(%esp)
c0108124:	c0 
c0108125:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c010812c:	c0 
c010812d:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0108134:	00 
c0108135:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c010813c:	e8 af 8c ff ff       	call   c0100df0 <__panic>
    assert(next->vm_start < next->vm_end);
c0108141:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108144:	8b 50 04             	mov    0x4(%eax),%edx
c0108147:	8b 45 0c             	mov    0xc(%ebp),%eax
c010814a:	8b 40 08             	mov    0x8(%eax),%eax
c010814d:	39 c2                	cmp    %eax,%edx
c010814f:	72 24                	jb     c0108175 <check_vma_overlap+0xa2>
c0108151:	c7 44 24 0c 4b f3 10 	movl   $0xc010f34b,0xc(%esp)
c0108158:	c0 
c0108159:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108160:	c0 
c0108161:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108168:	00 
c0108169:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108170:	e8 7b 8c ff ff       	call   c0100df0 <__panic>
}
c0108175:	c9                   	leave  
c0108176:	c3                   	ret    

c0108177 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108177:	55                   	push   %ebp
c0108178:	89 e5                	mov    %esp,%ebp
c010817a:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c010817d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108180:	8b 50 04             	mov    0x4(%eax),%edx
c0108183:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108186:	8b 40 08             	mov    0x8(%eax),%eax
c0108189:	39 c2                	cmp    %eax,%edx
c010818b:	72 24                	jb     c01081b1 <insert_vma_struct+0x3a>
c010818d:	c7 44 24 0c 69 f3 10 	movl   $0xc010f369,0xc(%esp)
c0108194:	c0 
c0108195:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c010819c:	c0 
c010819d:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01081a4:	00 
c01081a5:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01081ac:	e8 3f 8c ff ff       	call   c0100df0 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01081b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01081b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01081b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081ba:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01081bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01081c3:	eb 21                	jmp    c01081e6 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01081c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081c8:	83 e8 10             	sub    $0x10,%eax
c01081cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01081ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081d1:	8b 50 04             	mov    0x4(%eax),%edx
c01081d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081d7:	8b 40 04             	mov    0x4(%eax),%eax
c01081da:	39 c2                	cmp    %eax,%edx
c01081dc:	76 02                	jbe    c01081e0 <insert_vma_struct+0x69>
                break;
c01081de:	eb 1d                	jmp    c01081fd <insert_vma_struct+0x86>
            }
            le_prev = le;
c01081e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01081e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01081ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01081ef:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01081f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01081f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081f8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081fb:	75 c8                	jne    c01081c5 <insert_vma_struct+0x4e>
c01081fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108200:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108203:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108206:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108209:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c010820c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010820f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108212:	74 15                	je     c0108229 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108214:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108217:	8d 50 f0             	lea    -0x10(%eax),%edx
c010821a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010821d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108221:	89 14 24             	mov    %edx,(%esp)
c0108224:	e8 aa fe ff ff       	call   c01080d3 <check_vma_overlap>
    }
    if (le_next != list) {
c0108229:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010822c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010822f:	74 15                	je     c0108246 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0108231:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108234:	83 e8 10             	sub    $0x10,%eax
c0108237:	89 44 24 04          	mov    %eax,0x4(%esp)
c010823b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010823e:	89 04 24             	mov    %eax,(%esp)
c0108241:	e8 8d fe ff ff       	call   c01080d3 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0108246:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108249:	8b 55 08             	mov    0x8(%ebp),%edx
c010824c:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010824e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108251:	8d 50 10             	lea    0x10(%eax),%edx
c0108254:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108257:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010825a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010825d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108260:	8b 40 04             	mov    0x4(%eax),%eax
c0108263:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108266:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108269:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010826c:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010826f:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108272:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108275:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108278:	89 10                	mov    %edx,(%eax)
c010827a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010827d:	8b 10                	mov    (%eax),%edx
c010827f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108282:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108285:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108288:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010828b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010828e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108291:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108294:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108296:	8b 45 08             	mov    0x8(%ebp),%eax
c0108299:	8b 40 10             	mov    0x10(%eax),%eax
c010829c:	8d 50 01             	lea    0x1(%eax),%edx
c010829f:	8b 45 08             	mov    0x8(%ebp),%eax
c01082a2:	89 50 10             	mov    %edx,0x10(%eax)
}
c01082a5:	c9                   	leave  
c01082a6:	c3                   	ret    

c01082a7 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01082a7:	55                   	push   %ebp
c01082a8:	89 e5                	mov    %esp,%ebp
c01082aa:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01082ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01082b0:	89 04 24             	mov    %eax,(%esp)
c01082b3:	e8 14 fc ff ff       	call   c0107ecc <mm_count>
c01082b8:	85 c0                	test   %eax,%eax
c01082ba:	74 24                	je     c01082e0 <mm_destroy+0x39>
c01082bc:	c7 44 24 0c 85 f3 10 	movl   $0xc010f385,0xc(%esp)
c01082c3:	c0 
c01082c4:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01082cb:	c0 
c01082cc:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01082d3:	00 
c01082d4:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01082db:	e8 10 8b ff ff       	call   c0100df0 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01082e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01082e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01082e6:	eb 36                	jmp    c010831e <mm_destroy+0x77>
c01082e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01082ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082f1:	8b 40 04             	mov    0x4(%eax),%eax
c01082f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01082f7:	8b 12                	mov    (%edx),%edx
c01082f9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01082fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01082ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108302:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108305:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108308:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010830b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010830e:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108310:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108313:	83 e8 10             	sub    $0x10,%eax
c0108316:	89 04 24             	mov    %eax,(%esp)
c0108319:	e8 d0 c9 ff ff       	call   c0104cee <kfree>
c010831e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108321:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108324:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108327:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c010832a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010832d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108330:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108333:	75 b3                	jne    c01082e8 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108335:	8b 45 08             	mov    0x8(%ebp),%eax
c0108338:	89 04 24             	mov    %eax,(%esp)
c010833b:	e8 ae c9 ff ff       	call   c0104cee <kfree>
    mm=NULL;
c0108340:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108347:	c9                   	leave  
c0108348:	c3                   	ret    

c0108349 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0108349:	55                   	push   %ebp
c010834a:	89 e5                	mov    %esp,%ebp
c010834c:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c010834f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108352:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108355:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108358:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010835d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108360:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108367:	8b 45 10             	mov    0x10(%ebp),%eax
c010836a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010836d:	01 c2                	add    %eax,%edx
c010836f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108372:	01 d0                	add    %edx,%eax
c0108374:	83 e8 01             	sub    $0x1,%eax
c0108377:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010837a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010837d:	ba 00 00 00 00       	mov    $0x0,%edx
c0108382:	f7 75 e8             	divl   -0x18(%ebp)
c0108385:	89 d0                	mov    %edx,%eax
c0108387:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010838a:	29 c2                	sub    %eax,%edx
c010838c:	89 d0                	mov    %edx,%eax
c010838e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108391:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108398:	76 11                	jbe    c01083ab <mm_map+0x62>
c010839a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010839d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01083a0:	73 09                	jae    c01083ab <mm_map+0x62>
c01083a2:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01083a9:	76 0a                	jbe    c01083b5 <mm_map+0x6c>
        return -E_INVAL;
c01083ab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01083b0:	e9 ae 00 00 00       	jmp    c0108463 <mm_map+0x11a>
    }

    assert(mm != NULL);
c01083b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01083b9:	75 24                	jne    c01083df <mm_map+0x96>
c01083bb:	c7 44 24 0c 97 f3 10 	movl   $0xc010f397,0xc(%esp)
c01083c2:	c0 
c01083c3:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01083ca:	c0 
c01083cb:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01083d2:	00 
c01083d3:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01083da:	e8 11 8a ff ff       	call   c0100df0 <__panic>

    int ret = -E_INVAL;
c01083df:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01083e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01083f0:	89 04 24             	mov    %eax,(%esp)
c01083f3:	e8 2a fc ff ff       	call   c0108022 <find_vma>
c01083f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01083fb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083ff:	74 0d                	je     c010840e <mm_map+0xc5>
c0108401:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108404:	8b 40 04             	mov    0x4(%eax),%eax
c0108407:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010840a:	73 02                	jae    c010840e <mm_map+0xc5>
        goto out;
c010840c:	eb 52                	jmp    c0108460 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c010840e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108415:	8b 45 14             	mov    0x14(%ebp),%eax
c0108418:	89 44 24 08          	mov    %eax,0x8(%esp)
c010841c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010841f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108423:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108426:	89 04 24             	mov    %eax,(%esp)
c0108429:	e8 b9 fb ff ff       	call   c0107fe7 <vma_create>
c010842e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108431:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108435:	75 02                	jne    c0108439 <mm_map+0xf0>
        goto out;
c0108437:	eb 27                	jmp    c0108460 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0108439:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010843c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108440:	8b 45 08             	mov    0x8(%ebp),%eax
c0108443:	89 04 24             	mov    %eax,(%esp)
c0108446:	e8 2c fd ff ff       	call   c0108177 <insert_vma_struct>
    if (vma_store != NULL) {
c010844b:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010844f:	74 08                	je     c0108459 <mm_map+0x110>
        *vma_store = vma;
c0108451:	8b 45 18             	mov    0x18(%ebp),%eax
c0108454:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108457:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108460:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108463:	c9                   	leave  
c0108464:	c3                   	ret    

c0108465 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108465:	55                   	push   %ebp
c0108466:	89 e5                	mov    %esp,%ebp
c0108468:	56                   	push   %esi
c0108469:	53                   	push   %ebx
c010846a:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010846d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108471:	74 06                	je     c0108479 <dup_mmap+0x14>
c0108473:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108477:	75 24                	jne    c010849d <dup_mmap+0x38>
c0108479:	c7 44 24 0c a2 f3 10 	movl   $0xc010f3a2,0xc(%esp)
c0108480:	c0 
c0108481:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108488:	c0 
c0108489:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108490:	00 
c0108491:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108498:	e8 53 89 ff ff       	call   c0100df0 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010849d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01084a9:	e9 92 00 00 00       	jmp    c0108540 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01084ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084b1:	83 e8 10             	sub    $0x10,%eax
c01084b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01084b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084ba:	8b 48 0c             	mov    0xc(%eax),%ecx
c01084bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084c0:	8b 50 08             	mov    0x8(%eax),%edx
c01084c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084c6:	8b 40 04             	mov    0x4(%eax),%eax
c01084c9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084cd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084d1:	89 04 24             	mov    %eax,(%esp)
c01084d4:	e8 0e fb ff ff       	call   c0107fe7 <vma_create>
c01084d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01084dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01084e0:	75 07                	jne    c01084e9 <dup_mmap+0x84>
            return -E_NO_MEM;
c01084e2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01084e7:	eb 76                	jmp    c010855f <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01084e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01084f3:	89 04 24             	mov    %eax,(%esp)
c01084f6:	e8 7c fc ff ff       	call   c0108177 <insert_vma_struct>

        bool share = 0;
c01084fb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108502:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108505:	8b 58 08             	mov    0x8(%eax),%ebx
c0108508:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010850b:	8b 48 04             	mov    0x4(%eax),%ecx
c010850e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108511:	8b 50 0c             	mov    0xc(%eax),%edx
c0108514:	8b 45 08             	mov    0x8(%ebp),%eax
c0108517:	8b 40 0c             	mov    0xc(%eax),%eax
c010851a:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010851d:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108521:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108525:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108529:	89 54 24 04          	mov    %edx,0x4(%esp)
c010852d:	89 04 24             	mov    %eax,(%esp)
c0108530:	e8 e4 d6 ff ff       	call   c0105c19 <copy_range>
c0108535:	85 c0                	test   %eax,%eax
c0108537:	74 07                	je     c0108540 <dup_mmap+0xdb>
            return -E_NO_MEM;
c0108539:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010853e:	eb 1f                	jmp    c010855f <dup_mmap+0xfa>
c0108540:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108543:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108546:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108549:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010854b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010854e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108551:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108554:	0f 85 54 ff ff ff    	jne    c01084ae <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c010855a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010855f:	83 c4 40             	add    $0x40,%esp
c0108562:	5b                   	pop    %ebx
c0108563:	5e                   	pop    %esi
c0108564:	5d                   	pop    %ebp
c0108565:	c3                   	ret    

c0108566 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108566:	55                   	push   %ebp
c0108567:	89 e5                	mov    %esp,%ebp
c0108569:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010856c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108570:	74 0f                	je     c0108581 <exit_mmap+0x1b>
c0108572:	8b 45 08             	mov    0x8(%ebp),%eax
c0108575:	89 04 24             	mov    %eax,(%esp)
c0108578:	e8 4f f9 ff ff       	call   c0107ecc <mm_count>
c010857d:	85 c0                	test   %eax,%eax
c010857f:	74 24                	je     c01085a5 <exit_mmap+0x3f>
c0108581:	c7 44 24 0c c0 f3 10 	movl   $0xc010f3c0,0xc(%esp)
c0108588:	c0 
c0108589:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108590:	c0 
c0108591:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108598:	00 
c0108599:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01085a0:	e8 4b 88 ff ff       	call   c0100df0 <__panic>
    pde_t *pgdir = mm->pgdir;
c01085a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01085a8:	8b 40 0c             	mov    0xc(%eax),%eax
c01085ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01085ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01085b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01085b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01085ba:	eb 28                	jmp    c01085e4 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01085bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085bf:	83 e8 10             	sub    $0x10,%eax
c01085c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01085c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085c8:	8b 50 08             	mov    0x8(%eax),%edx
c01085cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085ce:	8b 40 04             	mov    0x4(%eax),%eax
c01085d1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085dc:	89 04 24             	mov    %eax,(%esp)
c01085df:	e8 3a d4 ff ff       	call   c0105a1e <unmap_range>
c01085e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01085ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085ed:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01085f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01085f9:	75 c1                	jne    c01085bc <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01085fb:	eb 28                	jmp    c0108625 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01085fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108600:	83 e8 10             	sub    $0x10,%eax
c0108603:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108606:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108609:	8b 50 08             	mov    0x8(%eax),%edx
c010860c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010860f:	8b 40 04             	mov    0x4(%eax),%eax
c0108612:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108616:	89 44 24 04          	mov    %eax,0x4(%esp)
c010861a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010861d:	89 04 24             	mov    %eax,(%esp)
c0108620:	e8 ed d4 ff ff       	call   c0105b12 <exit_range>
c0108625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108628:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010862b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010862e:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108631:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108637:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010863a:	75 c1                	jne    c01085fd <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c010863c:	c9                   	leave  
c010863d:	c3                   	ret    

c010863e <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c010863e:	55                   	push   %ebp
c010863f:	89 e5                	mov    %esp,%ebp
c0108641:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108644:	8b 45 10             	mov    0x10(%ebp),%eax
c0108647:	8b 55 18             	mov    0x18(%ebp),%edx
c010864a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010864e:	8b 55 14             	mov    0x14(%ebp),%edx
c0108651:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108655:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108659:	8b 45 08             	mov    0x8(%ebp),%eax
c010865c:	89 04 24             	mov    %eax,(%esp)
c010865f:	e8 a6 09 00 00       	call   c010900a <user_mem_check>
c0108664:	85 c0                	test   %eax,%eax
c0108666:	75 07                	jne    c010866f <copy_from_user+0x31>
        return 0;
c0108668:	b8 00 00 00 00       	mov    $0x0,%eax
c010866d:	eb 1e                	jmp    c010868d <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c010866f:	8b 45 14             	mov    0x14(%ebp),%eax
c0108672:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108676:	8b 45 10             	mov    0x10(%ebp),%eax
c0108679:	89 44 24 04          	mov    %eax,0x4(%esp)
c010867d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108680:	89 04 24             	mov    %eax,(%esp)
c0108683:	e8 8b 50 00 00       	call   c010d713 <memcpy>
    return 1;
c0108688:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010868d:	c9                   	leave  
c010868e:	c3                   	ret    

c010868f <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c010868f:	55                   	push   %ebp
c0108690:	89 e5                	mov    %esp,%ebp
c0108692:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108695:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108698:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010869f:	00 
c01086a0:	8b 55 14             	mov    0x14(%ebp),%edx
c01086a3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01086ae:	89 04 24             	mov    %eax,(%esp)
c01086b1:	e8 54 09 00 00       	call   c010900a <user_mem_check>
c01086b6:	85 c0                	test   %eax,%eax
c01086b8:	75 07                	jne    c01086c1 <copy_to_user+0x32>
        return 0;
c01086ba:	b8 00 00 00 00       	mov    $0x0,%eax
c01086bf:	eb 1e                	jmp    c01086df <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01086c1:	8b 45 14             	mov    0x14(%ebp),%eax
c01086c4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01086cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086d2:	89 04 24             	mov    %eax,(%esp)
c01086d5:	e8 39 50 00 00       	call   c010d713 <memcpy>
    return 1;
c01086da:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01086df:	c9                   	leave  
c01086e0:	c3                   	ret    

c01086e1 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01086e1:	55                   	push   %ebp
c01086e2:	89 e5                	mov    %esp,%ebp
c01086e4:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01086e7:	e8 02 00 00 00       	call   c01086ee <check_vmm>
}
c01086ec:	c9                   	leave  
c01086ed:	c3                   	ret    

c01086ee <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01086ee:	55                   	push   %ebp
c01086ef:	89 e5                	mov    %esp,%ebp
c01086f1:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01086f4:	e8 ec ca ff ff       	call   c01051e5 <nr_free_pages>
c01086f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01086fc:	e8 13 00 00 00       	call   c0108714 <check_vma_struct>
    check_pgfault();
c0108701:	e8 a7 04 00 00       	call   c0108bad <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108706:	c7 04 24 e0 f3 10 c0 	movl   $0xc010f3e0,(%esp)
c010870d:	e8 52 7c ff ff       	call   c0100364 <cprintf>
}
c0108712:	c9                   	leave  
c0108713:	c3                   	ret    

c0108714 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108714:	55                   	push   %ebp
c0108715:	89 e5                	mov    %esp,%ebp
c0108717:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010871a:	e8 c6 ca ff ff       	call   c01051e5 <nr_free_pages>
c010871f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108722:	e8 1b f8 ff ff       	call   c0107f42 <mm_create>
c0108727:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c010872a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010872e:	75 24                	jne    c0108754 <check_vma_struct+0x40>
c0108730:	c7 44 24 0c 97 f3 10 	movl   $0xc010f397,0xc(%esp)
c0108737:	c0 
c0108738:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c010873f:	c0 
c0108740:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108747:	00 
c0108748:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c010874f:	e8 9c 86 ff ff       	call   c0100df0 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108754:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c010875b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010875e:	89 d0                	mov    %edx,%eax
c0108760:	c1 e0 02             	shl    $0x2,%eax
c0108763:	01 d0                	add    %edx,%eax
c0108765:	01 c0                	add    %eax,%eax
c0108767:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c010876a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010876d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108770:	eb 70                	jmp    c01087e2 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108772:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108775:	89 d0                	mov    %edx,%eax
c0108777:	c1 e0 02             	shl    $0x2,%eax
c010877a:	01 d0                	add    %edx,%eax
c010877c:	83 c0 02             	add    $0x2,%eax
c010877f:	89 c1                	mov    %eax,%ecx
c0108781:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108784:	89 d0                	mov    %edx,%eax
c0108786:	c1 e0 02             	shl    $0x2,%eax
c0108789:	01 d0                	add    %edx,%eax
c010878b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108792:	00 
c0108793:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108797:	89 04 24             	mov    %eax,(%esp)
c010879a:	e8 48 f8 ff ff       	call   c0107fe7 <vma_create>
c010879f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01087a2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01087a6:	75 24                	jne    c01087cc <check_vma_struct+0xb8>
c01087a8:	c7 44 24 0c f8 f3 10 	movl   $0xc010f3f8,0xc(%esp)
c01087af:	c0 
c01087b0:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01087b7:	c0 
c01087b8:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01087bf:	00 
c01087c0:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01087c7:	e8 24 86 ff ff       	call   c0100df0 <__panic>
        insert_vma_struct(mm, vma);
c01087cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01087cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087d6:	89 04 24             	mov    %eax,(%esp)
c01087d9:	e8 99 f9 ff ff       	call   c0108177 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01087de:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01087e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01087e6:	7f 8a                	jg     c0108772 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01087e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087eb:	83 c0 01             	add    $0x1,%eax
c01087ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087f1:	eb 70                	jmp    c0108863 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01087f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087f6:	89 d0                	mov    %edx,%eax
c01087f8:	c1 e0 02             	shl    $0x2,%eax
c01087fb:	01 d0                	add    %edx,%eax
c01087fd:	83 c0 02             	add    $0x2,%eax
c0108800:	89 c1                	mov    %eax,%ecx
c0108802:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108805:	89 d0                	mov    %edx,%eax
c0108807:	c1 e0 02             	shl    $0x2,%eax
c010880a:	01 d0                	add    %edx,%eax
c010880c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108813:	00 
c0108814:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108818:	89 04 24             	mov    %eax,(%esp)
c010881b:	e8 c7 f7 ff ff       	call   c0107fe7 <vma_create>
c0108820:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108823:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108827:	75 24                	jne    c010884d <check_vma_struct+0x139>
c0108829:	c7 44 24 0c f8 f3 10 	movl   $0xc010f3f8,0xc(%esp)
c0108830:	c0 
c0108831:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108838:	c0 
c0108839:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108840:	00 
c0108841:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108848:	e8 a3 85 ff ff       	call   c0100df0 <__panic>
        insert_vma_struct(mm, vma);
c010884d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108850:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108854:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108857:	89 04 24             	mov    %eax,(%esp)
c010885a:	e8 18 f9 ff ff       	call   c0108177 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010885f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108863:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108866:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108869:	7e 88                	jle    c01087f3 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c010886b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010886e:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108871:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108874:	8b 40 04             	mov    0x4(%eax),%eax
c0108877:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c010887a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108881:	e9 97 00 00 00       	jmp    c010891d <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108886:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108889:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010888c:	75 24                	jne    c01088b2 <check_vma_struct+0x19e>
c010888e:	c7 44 24 0c 04 f4 10 	movl   $0xc010f404,0xc(%esp)
c0108895:	c0 
c0108896:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c010889d:	c0 
c010889e:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01088a5:	00 
c01088a6:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01088ad:	e8 3e 85 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01088b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088b5:	83 e8 10             	sub    $0x10,%eax
c01088b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01088bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088be:	8b 48 04             	mov    0x4(%eax),%ecx
c01088c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088c4:	89 d0                	mov    %edx,%eax
c01088c6:	c1 e0 02             	shl    $0x2,%eax
c01088c9:	01 d0                	add    %edx,%eax
c01088cb:	39 c1                	cmp    %eax,%ecx
c01088cd:	75 17                	jne    c01088e6 <check_vma_struct+0x1d2>
c01088cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088d2:	8b 48 08             	mov    0x8(%eax),%ecx
c01088d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088d8:	89 d0                	mov    %edx,%eax
c01088da:	c1 e0 02             	shl    $0x2,%eax
c01088dd:	01 d0                	add    %edx,%eax
c01088df:	83 c0 02             	add    $0x2,%eax
c01088e2:	39 c1                	cmp    %eax,%ecx
c01088e4:	74 24                	je     c010890a <check_vma_struct+0x1f6>
c01088e6:	c7 44 24 0c 1c f4 10 	movl   $0xc010f41c,0xc(%esp)
c01088ed:	c0 
c01088ee:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01088f5:	c0 
c01088f6:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c01088fd:	00 
c01088fe:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108905:	e8 e6 84 ff ff       	call   c0100df0 <__panic>
c010890a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010890d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108910:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108913:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108916:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108919:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010891d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108920:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108923:	0f 8e 5d ff ff ff    	jle    c0108886 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108929:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108930:	e9 cd 01 00 00       	jmp    c0108b02 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108938:	89 44 24 04          	mov    %eax,0x4(%esp)
c010893c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010893f:	89 04 24             	mov    %eax,(%esp)
c0108942:	e8 db f6 ff ff       	call   c0108022 <find_vma>
c0108947:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c010894a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010894e:	75 24                	jne    c0108974 <check_vma_struct+0x260>
c0108950:	c7 44 24 0c 51 f4 10 	movl   $0xc010f451,0xc(%esp)
c0108957:	c0 
c0108958:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c010895f:	c0 
c0108960:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108967:	00 
c0108968:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c010896f:	e8 7c 84 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108977:	83 c0 01             	add    $0x1,%eax
c010897a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010897e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108981:	89 04 24             	mov    %eax,(%esp)
c0108984:	e8 99 f6 ff ff       	call   c0108022 <find_vma>
c0108989:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c010898c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108990:	75 24                	jne    c01089b6 <check_vma_struct+0x2a2>
c0108992:	c7 44 24 0c 5e f4 10 	movl   $0xc010f45e,0xc(%esp)
c0108999:	c0 
c010899a:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01089a1:	c0 
c01089a2:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01089a9:	00 
c01089aa:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01089b1:	e8 3a 84 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01089b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089b9:	83 c0 02             	add    $0x2,%eax
c01089bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089c3:	89 04 24             	mov    %eax,(%esp)
c01089c6:	e8 57 f6 ff ff       	call   c0108022 <find_vma>
c01089cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01089ce:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01089d2:	74 24                	je     c01089f8 <check_vma_struct+0x2e4>
c01089d4:	c7 44 24 0c 6b f4 10 	movl   $0xc010f46b,0xc(%esp)
c01089db:	c0 
c01089dc:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c01089e3:	c0 
c01089e4:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c01089eb:	00 
c01089ec:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c01089f3:	e8 f8 83 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01089f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089fb:	83 c0 03             	add    $0x3,%eax
c01089fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a05:	89 04 24             	mov    %eax,(%esp)
c0108a08:	e8 15 f6 ff ff       	call   c0108022 <find_vma>
c0108a0d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108a10:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108a14:	74 24                	je     c0108a3a <check_vma_struct+0x326>
c0108a16:	c7 44 24 0c 78 f4 10 	movl   $0xc010f478,0xc(%esp)
c0108a1d:	c0 
c0108a1e:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108a25:	c0 
c0108a26:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108a2d:	00 
c0108a2e:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108a35:	e8 b6 83 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a3d:	83 c0 04             	add    $0x4,%eax
c0108a40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a44:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a47:	89 04 24             	mov    %eax,(%esp)
c0108a4a:	e8 d3 f5 ff ff       	call   c0108022 <find_vma>
c0108a4f:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108a52:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108a56:	74 24                	je     c0108a7c <check_vma_struct+0x368>
c0108a58:	c7 44 24 0c 85 f4 10 	movl   $0xc010f485,0xc(%esp)
c0108a5f:	c0 
c0108a60:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108a67:	c0 
c0108a68:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108a6f:	00 
c0108a70:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108a77:	e8 74 83 ff ff       	call   c0100df0 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108a7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a7f:	8b 50 04             	mov    0x4(%eax),%edx
c0108a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a85:	39 c2                	cmp    %eax,%edx
c0108a87:	75 10                	jne    c0108a99 <check_vma_struct+0x385>
c0108a89:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a8c:	8b 50 08             	mov    0x8(%eax),%edx
c0108a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a92:	83 c0 02             	add    $0x2,%eax
c0108a95:	39 c2                	cmp    %eax,%edx
c0108a97:	74 24                	je     c0108abd <check_vma_struct+0x3a9>
c0108a99:	c7 44 24 0c 94 f4 10 	movl   $0xc010f494,0xc(%esp)
c0108aa0:	c0 
c0108aa1:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108aa8:	c0 
c0108aa9:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108ab0:	00 
c0108ab1:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108ab8:	e8 33 83 ff ff       	call   c0100df0 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108abd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108ac0:	8b 50 04             	mov    0x4(%eax),%edx
c0108ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ac6:	39 c2                	cmp    %eax,%edx
c0108ac8:	75 10                	jne    c0108ada <check_vma_struct+0x3c6>
c0108aca:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108acd:	8b 50 08             	mov    0x8(%eax),%edx
c0108ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ad3:	83 c0 02             	add    $0x2,%eax
c0108ad6:	39 c2                	cmp    %eax,%edx
c0108ad8:	74 24                	je     c0108afe <check_vma_struct+0x3ea>
c0108ada:	c7 44 24 0c c4 f4 10 	movl   $0xc010f4c4,0xc(%esp)
c0108ae1:	c0 
c0108ae2:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108ae9:	c0 
c0108aea:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108af1:	00 
c0108af2:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108af9:	e8 f2 82 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108afe:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108b02:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b05:	89 d0                	mov    %edx,%eax
c0108b07:	c1 e0 02             	shl    $0x2,%eax
c0108b0a:	01 d0                	add    %edx,%eax
c0108b0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b0f:	0f 8d 20 fe ff ff    	jge    c0108935 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b15:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108b1c:	eb 70                	jmp    c0108b8e <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108b1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b28:	89 04 24             	mov    %eax,(%esp)
c0108b2b:	e8 f2 f4 ff ff       	call   c0108022 <find_vma>
c0108b30:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108b33:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b37:	74 27                	je     c0108b60 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108b39:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b3c:	8b 50 08             	mov    0x8(%eax),%edx
c0108b3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b42:	8b 40 04             	mov    0x4(%eax),%eax
c0108b45:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108b49:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b54:	c7 04 24 f4 f4 10 c0 	movl   $0xc010f4f4,(%esp)
c0108b5b:	e8 04 78 ff ff       	call   c0100364 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108b60:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b64:	74 24                	je     c0108b8a <check_vma_struct+0x476>
c0108b66:	c7 44 24 0c 19 f5 10 	movl   $0xc010f519,0xc(%esp)
c0108b6d:	c0 
c0108b6e:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108b75:	c0 
c0108b76:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108b7d:	00 
c0108b7e:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108b85:	e8 66 82 ff ff       	call   c0100df0 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b8a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108b8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108b92:	79 8a                	jns    c0108b1e <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108b94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b97:	89 04 24             	mov    %eax,(%esp)
c0108b9a:	e8 08 f7 ff ff       	call   c01082a7 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108b9f:	c7 04 24 30 f5 10 c0 	movl   $0xc010f530,(%esp)
c0108ba6:	e8 b9 77 ff ff       	call   c0100364 <cprintf>
}
c0108bab:	c9                   	leave  
c0108bac:	c3                   	ret    

c0108bad <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108bad:	55                   	push   %ebp
c0108bae:	89 e5                	mov    %esp,%ebp
c0108bb0:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108bb3:	e8 2d c6 ff ff       	call   c01051e5 <nr_free_pages>
c0108bb8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108bbb:	e8 82 f3 ff ff       	call   c0107f42 <mm_create>
c0108bc0:	a3 cc 81 1c c0       	mov    %eax,0xc01c81cc
    assert(check_mm_struct != NULL);
c0108bc5:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c0108bca:	85 c0                	test   %eax,%eax
c0108bcc:	75 24                	jne    c0108bf2 <check_pgfault+0x45>
c0108bce:	c7 44 24 0c 4f f5 10 	movl   $0xc010f54f,0xc(%esp)
c0108bd5:	c0 
c0108bd6:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108bdd:	c0 
c0108bde:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108be5:	00 
c0108be6:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108bed:	e8 fe 81 ff ff       	call   c0100df0 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108bf2:	a1 cc 81 1c c0       	mov    0xc01c81cc,%eax
c0108bf7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108bfa:	8b 15 00 1a 13 c0    	mov    0xc0131a00,%edx
c0108c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c03:	89 50 0c             	mov    %edx,0xc(%eax)
c0108c06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c09:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c0c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108c0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c12:	8b 00                	mov    (%eax),%eax
c0108c14:	85 c0                	test   %eax,%eax
c0108c16:	74 24                	je     c0108c3c <check_pgfault+0x8f>
c0108c18:	c7 44 24 0c 67 f5 10 	movl   $0xc010f567,0xc(%esp)
c0108c1f:	c0 
c0108c20:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108c27:	c0 
c0108c28:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108c2f:	00 
c0108c30:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108c37:	e8 b4 81 ff ff       	call   c0100df0 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108c3c:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108c43:	00 
c0108c44:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108c4b:	00 
c0108c4c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108c53:	e8 8f f3 ff ff       	call   c0107fe7 <vma_create>
c0108c58:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108c5b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108c5f:	75 24                	jne    c0108c85 <check_pgfault+0xd8>
c0108c61:	c7 44 24 0c f8 f3 10 	movl   $0xc010f3f8,0xc(%esp)
c0108c68:	c0 
c0108c69:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108c70:	c0 
c0108c71:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108c78:	00 
c0108c79:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108c80:	e8 6b 81 ff ff       	call   c0100df0 <__panic>

    insert_vma_struct(mm, vma);
c0108c85:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108c88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c8f:	89 04 24             	mov    %eax,(%esp)
c0108c92:	e8 e0 f4 ff ff       	call   c0108177 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108c97:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108c9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ca1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ca5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ca8:	89 04 24             	mov    %eax,(%esp)
c0108cab:	e8 72 f3 ff ff       	call   c0108022 <find_vma>
c0108cb0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108cb3:	74 24                	je     c0108cd9 <check_pgfault+0x12c>
c0108cb5:	c7 44 24 0c 75 f5 10 	movl   $0xc010f575,0xc(%esp)
c0108cbc:	c0 
c0108cbd:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108cc4:	c0 
c0108cc5:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108ccc:	00 
c0108ccd:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108cd4:	e8 17 81 ff ff       	call   c0100df0 <__panic>

    int i, sum = 0;
c0108cd9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108ce0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108ce7:	eb 17                	jmp    c0108d00 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108ce9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108cec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cef:	01 d0                	add    %edx,%eax
c0108cf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108cf4:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108cf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cf9:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108cfc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d00:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d04:	7e e3                	jle    c0108ce9 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d0d:	eb 15                	jmp    c0108d24 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108d0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d12:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d15:	01 d0                	add    %edx,%eax
c0108d17:	0f b6 00             	movzbl (%eax),%eax
c0108d1a:	0f be c0             	movsbl %al,%eax
c0108d1d:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d20:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d24:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d28:	7e e5                	jle    c0108d0f <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108d2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108d2e:	74 24                	je     c0108d54 <check_pgfault+0x1a7>
c0108d30:	c7 44 24 0c 8f f5 10 	movl   $0xc010f58f,0xc(%esp)
c0108d37:	c0 
c0108d38:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108d3f:	c0 
c0108d40:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108d47:	00 
c0108d48:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108d4f:	e8 9c 80 ff ff       	call   c0100df0 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108d54:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d57:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108d5a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108d5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108d62:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d69:	89 04 24             	mov    %eax,(%esp)
c0108d6c:	e8 cb d0 ff ff       	call   c0105e3c <page_remove>
    free_page(pde2page(pgdir[0]));
c0108d71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d74:	8b 00                	mov    (%eax),%eax
c0108d76:	89 04 24             	mov    %eax,(%esp)
c0108d79:	e8 ac f1 ff ff       	call   c0107f2a <pde2page>
c0108d7e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d85:	00 
c0108d86:	89 04 24             	mov    %eax,(%esp)
c0108d89:	e8 25 c4 ff ff       	call   c01051b3 <free_pages>
    pgdir[0] = 0;
c0108d8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108d97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d9a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108da4:	89 04 24             	mov    %eax,(%esp)
c0108da7:	e8 fb f4 ff ff       	call   c01082a7 <mm_destroy>
    check_mm_struct = NULL;
c0108dac:	c7 05 cc 81 1c c0 00 	movl   $0x0,0xc01c81cc
c0108db3:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108db6:	e8 2a c4 ff ff       	call   c01051e5 <nr_free_pages>
c0108dbb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108dbe:	74 24                	je     c0108de4 <check_pgfault+0x237>
c0108dc0:	c7 44 24 0c 98 f5 10 	movl   $0xc010f598,0xc(%esp)
c0108dc7:	c0 
c0108dc8:	c7 44 24 08 07 f3 10 	movl   $0xc010f307,0x8(%esp)
c0108dcf:	c0 
c0108dd0:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108dd7:	00 
c0108dd8:	c7 04 24 1c f3 10 c0 	movl   $0xc010f31c,(%esp)
c0108ddf:	e8 0c 80 ff ff       	call   c0100df0 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108de4:	c7 04 24 bf f5 10 c0 	movl   $0xc010f5bf,(%esp)
c0108deb:	e8 74 75 ff ff       	call   c0100364 <cprintf>
}
c0108df0:	c9                   	leave  
c0108df1:	c3                   	ret    

c0108df2 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108df2:	55                   	push   %ebp
c0108df3:	89 e5                	mov    %esp,%ebp
c0108df5:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108df8:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108dff:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e02:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e06:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e09:	89 04 24             	mov    %eax,(%esp)
c0108e0c:	e8 11 f2 ff ff       	call   c0108022 <find_vma>
c0108e11:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108e14:	a1 38 60 1c c0       	mov    0xc01c6038,%eax
c0108e19:	83 c0 01             	add    $0x1,%eax
c0108e1c:	a3 38 60 1c c0       	mov    %eax,0xc01c6038
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108e21:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108e25:	74 0b                	je     c0108e32 <do_pgfault+0x40>
c0108e27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e2a:	8b 40 04             	mov    0x4(%eax),%eax
c0108e2d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108e30:	76 18                	jbe    c0108e4a <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108e32:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e35:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e39:	c7 04 24 dc f5 10 c0 	movl   $0xc010f5dc,(%esp)
c0108e40:	e8 1f 75 ff ff       	call   c0100364 <cprintf>
        goto failed;
c0108e45:	e9 bb 01 00 00       	jmp    c0109005 <do_pgfault+0x213>
    }
    //check the error_code
    switch (error_code & 3) {
c0108e4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e4d:	83 e0 03             	and    $0x3,%eax
c0108e50:	85 c0                	test   %eax,%eax
c0108e52:	74 36                	je     c0108e8a <do_pgfault+0x98>
c0108e54:	83 f8 01             	cmp    $0x1,%eax
c0108e57:	74 20                	je     c0108e79 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108e59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e5f:	83 e0 02             	and    $0x2,%eax
c0108e62:	85 c0                	test   %eax,%eax
c0108e64:	75 11                	jne    c0108e77 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108e66:	c7 04 24 0c f6 10 c0 	movl   $0xc010f60c,(%esp)
c0108e6d:	e8 f2 74 ff ff       	call   c0100364 <cprintf>
            goto failed;
c0108e72:	e9 8e 01 00 00       	jmp    c0109005 <do_pgfault+0x213>
        }
        break;
c0108e77:	eb 2f                	jmp    c0108ea8 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108e79:	c7 04 24 6c f6 10 c0 	movl   $0xc010f66c,(%esp)
c0108e80:	e8 df 74 ff ff       	call   c0100364 <cprintf>
        goto failed;
c0108e85:	e9 7b 01 00 00       	jmp    c0109005 <do_pgfault+0x213>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e8d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e90:	83 e0 05             	and    $0x5,%eax
c0108e93:	85 c0                	test   %eax,%eax
c0108e95:	75 11                	jne    c0108ea8 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108e97:	c7 04 24 a4 f6 10 c0 	movl   $0xc010f6a4,(%esp)
c0108e9e:	e8 c1 74 ff ff       	call   c0100364 <cprintf>
            goto failed;
c0108ea3:	e9 5d 01 00 00       	jmp    c0109005 <do_pgfault+0x213>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108ea8:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108eaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108eb2:	8b 40 0c             	mov    0xc(%eax),%eax
c0108eb5:	83 e0 02             	and    $0x2,%eax
c0108eb8:	85 c0                	test   %eax,%eax
c0108eba:	74 04                	je     c0108ec0 <do_pgfault+0xce>
        perm |= PTE_W;
c0108ebc:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108ec0:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ec3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108ec6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ec9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108ece:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108ed1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108ed8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
	if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108edf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ee2:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ee5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108eec:	00 
c0108eed:	8b 55 10             	mov    0x10(%ebp),%edx
c0108ef0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ef4:	89 04 24             	mov    %eax,(%esp)
c0108ef7:	e8 30 c9 ff ff       	call   c010582c <get_pte>
c0108efc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108eff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f03:	75 11                	jne    c0108f16 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108f05:	c7 04 24 07 f7 10 c0 	movl   $0xc010f707,(%esp)
c0108f0c:	e8 53 74 ff ff       	call   c0100364 <cprintf>
        goto failed;
c0108f11:	e9 ef 00 00 00       	jmp    c0109005 <do_pgfault+0x213>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0108f16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f19:	8b 00                	mov    (%eax),%eax
c0108f1b:	85 c0                	test   %eax,%eax
c0108f1d:	75 35                	jne    c0108f54 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f22:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f25:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f28:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108f2c:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f2f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f33:	89 04 24             	mov    %eax,(%esp)
c0108f36:	e8 5b d0 ff ff       	call   c0105f96 <pgdir_alloc_page>
c0108f3b:	85 c0                	test   %eax,%eax
c0108f3d:	0f 85 bb 00 00 00    	jne    c0108ffe <do_pgfault+0x20c>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108f43:	c7 04 24 28 f7 10 c0 	movl   $0xc010f728,(%esp)
c0108f4a:	e8 15 74 ff ff       	call   c0100364 <cprintf>
            goto failed;
c0108f4f:	e9 b1 00 00 00       	jmp    c0109005 <do_pgfault+0x213>
        }
    }
    else { // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
        if(swap_init_ok) {
c0108f54:	a1 2c 60 1c c0       	mov    0xc01c602c,%eax
c0108f59:	85 c0                	test   %eax,%eax
c0108f5b:	0f 84 86 00 00 00    	je     c0108fe7 <do_pgfault+0x1f5>
            struct Page *page=NULL;
c0108f61:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108f68:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108f6b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f6f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f72:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f79:	89 04 24             	mov    %eax,(%esp)
c0108f7c:	e8 c1 e0 ff ff       	call   c0107042 <swap_in>
c0108f81:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f88:	74 0e                	je     c0108f98 <do_pgfault+0x1a6>
                cprintf("swap_in in do_pgfault failed\n");
c0108f8a:	c7 04 24 4f f7 10 c0 	movl   $0xc010f74f,(%esp)
c0108f91:	e8 ce 73 ff ff       	call   c0100364 <cprintf>
c0108f96:	eb 6d                	jmp    c0109005 <do_pgfault+0x213>
                goto failed;
            }    
            page_insert(mm->pgdir, page, addr, perm);
c0108f98:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f9e:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fa1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108fa4:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108fa8:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108fab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108faf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fb3:	89 04 24             	mov    %eax,(%esp)
c0108fb6:	e8 c5 ce ff ff       	call   c0105e80 <page_insert>
            swap_map_swappable(mm, addr, page, 1);
c0108fbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fbe:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108fc5:	00 
c0108fc6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108fca:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fcd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fd4:	89 04 24             	mov    %eax,(%esp)
c0108fd7:	e8 9d de ff ff       	call   c0106e79 <swap_map_swappable>
            page->pra_vaddr = addr;
c0108fdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fdf:	8b 55 10             	mov    0x10(%ebp),%edx
c0108fe2:	89 50 1c             	mov    %edx,0x1c(%eax)
c0108fe5:	eb 17                	jmp    c0108ffe <do_pgfault+0x20c>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108fe7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fea:	8b 00                	mov    (%eax),%eax
c0108fec:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ff0:	c7 04 24 70 f7 10 c0 	movl   $0xc010f770,(%esp)
c0108ff7:	e8 68 73 ff ff       	call   c0100364 <cprintf>
            goto failed;
c0108ffc:	eb 07                	jmp    c0109005 <do_pgfault+0x213>
        }
   }
   ret = 0;
c0108ffe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109005:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109008:	c9                   	leave  
c0109009:	c3                   	ret    

c010900a <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010900a:	55                   	push   %ebp
c010900b:	89 e5                	mov    %esp,%ebp
c010900d:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109010:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109014:	0f 84 e0 00 00 00    	je     c01090fa <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010901a:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0109021:	76 1c                	jbe    c010903f <user_mem_check+0x35>
c0109023:	8b 45 10             	mov    0x10(%ebp),%eax
c0109026:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109029:	01 d0                	add    %edx,%eax
c010902b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010902e:	76 0f                	jbe    c010903f <user_mem_check+0x35>
c0109030:	8b 45 10             	mov    0x10(%ebp),%eax
c0109033:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109036:	01 d0                	add    %edx,%eax
c0109038:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010903d:	76 0a                	jbe    c0109049 <user_mem_check+0x3f>
            return 0;
c010903f:	b8 00 00 00 00       	mov    $0x0,%eax
c0109044:	e9 e2 00 00 00       	jmp    c010912b <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0109049:	8b 45 0c             	mov    0xc(%ebp),%eax
c010904c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010904f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109052:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109055:	01 d0                	add    %edx,%eax
c0109057:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010905a:	e9 88 00 00 00       	jmp    c01090e7 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c010905f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109062:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109066:	8b 45 08             	mov    0x8(%ebp),%eax
c0109069:	89 04 24             	mov    %eax,(%esp)
c010906c:	e8 b1 ef ff ff       	call   c0108022 <find_vma>
c0109071:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109074:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109078:	74 0b                	je     c0109085 <user_mem_check+0x7b>
c010907a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010907d:	8b 40 04             	mov    0x4(%eax),%eax
c0109080:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109083:	76 0a                	jbe    c010908f <user_mem_check+0x85>
                return 0;
c0109085:	b8 00 00 00 00       	mov    $0x0,%eax
c010908a:	e9 9c 00 00 00       	jmp    c010912b <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010908f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109092:	8b 50 0c             	mov    0xc(%eax),%edx
c0109095:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109099:	74 07                	je     c01090a2 <user_mem_check+0x98>
c010909b:	b8 02 00 00 00       	mov    $0x2,%eax
c01090a0:	eb 05                	jmp    c01090a7 <user_mem_check+0x9d>
c01090a2:	b8 01 00 00 00       	mov    $0x1,%eax
c01090a7:	21 d0                	and    %edx,%eax
c01090a9:	85 c0                	test   %eax,%eax
c01090ab:	75 07                	jne    c01090b4 <user_mem_check+0xaa>
                return 0;
c01090ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01090b2:	eb 77                	jmp    c010912b <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01090b4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01090b8:	74 24                	je     c01090de <user_mem_check+0xd4>
c01090ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090bd:	8b 40 0c             	mov    0xc(%eax),%eax
c01090c0:	83 e0 08             	and    $0x8,%eax
c01090c3:	85 c0                	test   %eax,%eax
c01090c5:	74 17                	je     c01090de <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c01090c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090ca:	8b 40 04             	mov    0x4(%eax),%eax
c01090cd:	05 00 10 00 00       	add    $0x1000,%eax
c01090d2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01090d5:	76 07                	jbe    c01090de <user_mem_check+0xd4>
                    return 0;
c01090d7:	b8 00 00 00 00       	mov    $0x0,%eax
c01090dc:	eb 4d                	jmp    c010912b <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c01090de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090e1:	8b 40 08             	mov    0x8(%eax),%eax
c01090e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c01090e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090ea:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01090ed:	0f 82 6c ff ff ff    	jb     c010905f <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c01090f3:	b8 01 00 00 00       	mov    $0x1,%eax
c01090f8:	eb 31                	jmp    c010912b <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c01090fa:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109101:	76 23                	jbe    c0109126 <user_mem_check+0x11c>
c0109103:	8b 45 10             	mov    0x10(%ebp),%eax
c0109106:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109109:	01 d0                	add    %edx,%eax
c010910b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010910e:	76 16                	jbe    c0109126 <user_mem_check+0x11c>
c0109110:	8b 45 10             	mov    0x10(%ebp),%eax
c0109113:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109116:	01 d0                	add    %edx,%eax
c0109118:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010911d:	77 07                	ja     c0109126 <user_mem_check+0x11c>
c010911f:	b8 01 00 00 00       	mov    $0x1,%eax
c0109124:	eb 05                	jmp    c010912b <user_mem_check+0x121>
c0109126:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010912b:	c9                   	leave  
c010912c:	c3                   	ret    

c010912d <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c010912d:	55                   	push   %ebp
c010912e:	89 e5                	mov    %esp,%ebp
c0109130:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0109133:	8b 45 08             	mov    0x8(%ebp),%eax
c0109136:	8b 04 85 e0 81 1c c0 	mov    -0x3fe37e20(,%eax,4),%eax
c010913d:	83 f8 01             	cmp    $0x1,%eax
c0109140:	0f 85 85 00 00 00    	jne    c01091cb <phi_test_sema+0x9e>
c0109146:	8b 45 08             	mov    0x8(%ebp),%eax
c0109149:	8d 48 04             	lea    0x4(%eax),%ecx
c010914c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109151:	89 c8                	mov    %ecx,%eax
c0109153:	f7 ea                	imul   %edx
c0109155:	d1 fa                	sar    %edx
c0109157:	89 c8                	mov    %ecx,%eax
c0109159:	c1 f8 1f             	sar    $0x1f,%eax
c010915c:	29 c2                	sub    %eax,%edx
c010915e:	89 d0                	mov    %edx,%eax
c0109160:	c1 e0 02             	shl    $0x2,%eax
c0109163:	01 d0                	add    %edx,%eax
c0109165:	29 c1                	sub    %eax,%ecx
c0109167:	89 ca                	mov    %ecx,%edx
c0109169:	8b 04 95 e0 81 1c c0 	mov    -0x3fe37e20(,%edx,4),%eax
c0109170:	83 f8 02             	cmp    $0x2,%eax
c0109173:	74 56                	je     c01091cb <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0109175:	8b 45 08             	mov    0x8(%ebp),%eax
c0109178:	8d 48 01             	lea    0x1(%eax),%ecx
c010917b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109180:	89 c8                	mov    %ecx,%eax
c0109182:	f7 ea                	imul   %edx
c0109184:	d1 fa                	sar    %edx
c0109186:	89 c8                	mov    %ecx,%eax
c0109188:	c1 f8 1f             	sar    $0x1f,%eax
c010918b:	29 c2                	sub    %eax,%edx
c010918d:	89 d0                	mov    %edx,%eax
c010918f:	c1 e0 02             	shl    $0x2,%eax
c0109192:	01 d0                	add    %edx,%eax
c0109194:	29 c1                	sub    %eax,%ecx
c0109196:	89 ca                	mov    %ecx,%edx
c0109198:	8b 04 95 e0 81 1c c0 	mov    -0x3fe37e20(,%edx,4),%eax
c010919f:	83 f8 02             	cmp    $0x2,%eax
c01091a2:	74 27                	je     c01091cb <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01091a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01091a7:	c7 04 85 e0 81 1c c0 	movl   $0x2,-0x3fe37e20(,%eax,4)
c01091ae:	02 00 00 00 
        up(&s[i]);
c01091b2:	8b 55 08             	mov    0x8(%ebp),%edx
c01091b5:	89 d0                	mov    %edx,%eax
c01091b7:	01 c0                	add    %eax,%eax
c01091b9:	01 d0                	add    %edx,%eax
c01091bb:	c1 e0 02             	shl    $0x2,%eax
c01091be:	05 80 82 1c c0       	add    $0xc01c8280,%eax
c01091c3:	89 04 24             	mov    %eax,(%esp)
c01091c6:	e8 e8 09 00 00       	call   c0109bb3 <up>
    }
}
c01091cb:	c9                   	leave  
c01091cc:	c3                   	ret    

c01091cd <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01091cd:	55                   	push   %ebp
c01091ce:	89 e5                	mov    %esp,%ebp
c01091d0:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01091d3:	c7 04 24 08 82 1c c0 	movl   $0xc01c8208,(%esp)
c01091da:	e8 ef 09 00 00       	call   c0109bce <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c01091df:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e2:	c7 04 85 e0 81 1c c0 	movl   $0x1,-0x3fe37e20(,%eax,4)
c01091e9:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c01091ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01091f0:	89 04 24             	mov    %eax,(%esp)
c01091f3:	e8 35 ff ff ff       	call   c010912d <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01091f8:	c7 04 24 08 82 1c c0 	movl   $0xc01c8208,(%esp)
c01091ff:	e8 af 09 00 00       	call   c0109bb3 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109204:	8b 55 08             	mov    0x8(%ebp),%edx
c0109207:	89 d0                	mov    %edx,%eax
c0109209:	01 c0                	add    %eax,%eax
c010920b:	01 d0                	add    %edx,%eax
c010920d:	c1 e0 02             	shl    $0x2,%eax
c0109210:	05 80 82 1c c0       	add    $0xc01c8280,%eax
c0109215:	89 04 24             	mov    %eax,(%esp)
c0109218:	e8 b1 09 00 00       	call   c0109bce <down>
}
c010921d:	c9                   	leave  
c010921e:	c3                   	ret    

c010921f <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010921f:	55                   	push   %ebp
c0109220:	89 e5                	mov    %esp,%ebp
c0109222:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109225:	c7 04 24 08 82 1c c0 	movl   $0xc01c8208,(%esp)
c010922c:	e8 9d 09 00 00       	call   c0109bce <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109231:	8b 45 08             	mov    0x8(%ebp),%eax
c0109234:	c7 04 85 e0 81 1c c0 	movl   $0x0,-0x3fe37e20(,%eax,4)
c010923b:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010923f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109242:	8d 48 04             	lea    0x4(%eax),%ecx
c0109245:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010924a:	89 c8                	mov    %ecx,%eax
c010924c:	f7 ea                	imul   %edx
c010924e:	d1 fa                	sar    %edx
c0109250:	89 c8                	mov    %ecx,%eax
c0109252:	c1 f8 1f             	sar    $0x1f,%eax
c0109255:	29 c2                	sub    %eax,%edx
c0109257:	89 d0                	mov    %edx,%eax
c0109259:	c1 e0 02             	shl    $0x2,%eax
c010925c:	01 d0                	add    %edx,%eax
c010925e:	29 c1                	sub    %eax,%ecx
c0109260:	89 ca                	mov    %ecx,%edx
c0109262:	89 14 24             	mov    %edx,(%esp)
c0109265:	e8 c3 fe ff ff       	call   c010912d <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c010926a:	8b 45 08             	mov    0x8(%ebp),%eax
c010926d:	8d 48 01             	lea    0x1(%eax),%ecx
c0109270:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109275:	89 c8                	mov    %ecx,%eax
c0109277:	f7 ea                	imul   %edx
c0109279:	d1 fa                	sar    %edx
c010927b:	89 c8                	mov    %ecx,%eax
c010927d:	c1 f8 1f             	sar    $0x1f,%eax
c0109280:	29 c2                	sub    %eax,%edx
c0109282:	89 d0                	mov    %edx,%eax
c0109284:	c1 e0 02             	shl    $0x2,%eax
c0109287:	01 d0                	add    %edx,%eax
c0109289:	29 c1                	sub    %eax,%ecx
c010928b:	89 ca                	mov    %ecx,%edx
c010928d:	89 14 24             	mov    %edx,(%esp)
c0109290:	e8 98 fe ff ff       	call   c010912d <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109295:	c7 04 24 08 82 1c c0 	movl   $0xc01c8208,(%esp)
c010929c:	e8 12 09 00 00       	call   c0109bb3 <up>
}
c01092a1:	c9                   	leave  
c01092a2:	c3                   	ret    

c01092a3 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01092a3:	55                   	push   %ebp
c01092a4:	89 e5                	mov    %esp,%ebp
c01092a6:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01092a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01092b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01092b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01092b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092bd:	c7 04 24 98 f7 10 c0 	movl   $0xc010f798,(%esp)
c01092c4:	e8 9b 70 ff ff       	call   c0100364 <cprintf>
    while(iter++<TIMES)
c01092c9:	eb 62                	jmp    c010932d <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01092cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092ce:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092d9:	c7 04 24 b8 f7 10 c0 	movl   $0xc010f7b8,(%esp)
c01092e0:	e8 7f 70 ff ff       	call   c0100364 <cprintf>
        do_sleep(SLEEP_TIME);
c01092e5:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01092ec:	e8 77 2c 00 00       	call   c010bf68 <do_sleep>
        phi_take_forks_sema(i); 
c01092f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092f4:	89 04 24             	mov    %eax,(%esp)
c01092f7:	e8 d1 fe ff ff       	call   c01091cd <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c01092fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092ff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109303:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109306:	89 44 24 04          	mov    %eax,0x4(%esp)
c010930a:	c7 04 24 e8 f7 10 c0 	movl   $0xc010f7e8,(%esp)
c0109311:	e8 4e 70 ff ff       	call   c0100364 <cprintf>
        do_sleep(SLEEP_TIME);
c0109316:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010931d:	e8 46 2c 00 00       	call   c010bf68 <do_sleep>
        phi_put_forks_sema(i); 
c0109322:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109325:	89 04 24             	mov    %eax,(%esp)
c0109328:	e8 f2 fe ff ff       	call   c010921f <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c010932d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109330:	8d 50 01             	lea    0x1(%eax),%edx
c0109333:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109336:	83 f8 03             	cmp    $0x3,%eax
c0109339:	7e 90                	jle    c01092cb <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c010933b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010933e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109342:	c7 04 24 13 f8 10 c0 	movl   $0xc010f813,(%esp)
c0109349:	e8 16 70 ff ff       	call   c0100364 <cprintf>
    return 0;    
c010934e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109353:	c9                   	leave  
c0109354:	c3                   	ret    

c0109355 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0109355:	55                   	push   %ebp
c0109356:	89 e5                	mov    %esp,%ebp
c0109358:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010935b:	8b 45 08             	mov    0x8(%ebp),%eax
c010935e:	8b 04 85 40 82 1c c0 	mov    -0x3fe37dc0(,%eax,4),%eax
c0109365:	83 f8 01             	cmp    $0x1,%eax
c0109368:	0f 85 b5 00 00 00    	jne    c0109423 <phi_test_condvar+0xce>
c010936e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109371:	8d 48 04             	lea    0x4(%eax),%ecx
c0109374:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109379:	89 c8                	mov    %ecx,%eax
c010937b:	f7 ea                	imul   %edx
c010937d:	d1 fa                	sar    %edx
c010937f:	89 c8                	mov    %ecx,%eax
c0109381:	c1 f8 1f             	sar    $0x1f,%eax
c0109384:	29 c2                	sub    %eax,%edx
c0109386:	89 d0                	mov    %edx,%eax
c0109388:	c1 e0 02             	shl    $0x2,%eax
c010938b:	01 d0                	add    %edx,%eax
c010938d:	29 c1                	sub    %eax,%ecx
c010938f:	89 ca                	mov    %ecx,%edx
c0109391:	8b 04 95 40 82 1c c0 	mov    -0x3fe37dc0(,%edx,4),%eax
c0109398:	83 f8 02             	cmp    $0x2,%eax
c010939b:	0f 84 82 00 00 00    	je     c0109423 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01093a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093a4:	8d 48 01             	lea    0x1(%eax),%ecx
c01093a7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093ac:	89 c8                	mov    %ecx,%eax
c01093ae:	f7 ea                	imul   %edx
c01093b0:	d1 fa                	sar    %edx
c01093b2:	89 c8                	mov    %ecx,%eax
c01093b4:	c1 f8 1f             	sar    $0x1f,%eax
c01093b7:	29 c2                	sub    %eax,%edx
c01093b9:	89 d0                	mov    %edx,%eax
c01093bb:	c1 e0 02             	shl    $0x2,%eax
c01093be:	01 d0                	add    %edx,%eax
c01093c0:	29 c1                	sub    %eax,%ecx
c01093c2:	89 ca                	mov    %ecx,%edx
c01093c4:	8b 04 95 40 82 1c c0 	mov    -0x3fe37dc0(,%edx,4),%eax
c01093cb:	83 f8 02             	cmp    $0x2,%eax
c01093ce:	74 53                	je     c0109423 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01093d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093d7:	c7 04 24 30 f8 10 c0 	movl   $0xc010f830,(%esp)
c01093de:	e8 81 6f ff ff       	call   c0100364 <cprintf>
        state_condvar[i] = EATING ;
c01093e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e6:	c7 04 85 40 82 1c c0 	movl   $0x2,-0x3fe37dc0(,%eax,4)
c01093ed:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01093f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093f8:	c7 04 24 64 f8 10 c0 	movl   $0xc010f864,(%esp)
c01093ff:	e8 60 6f ff ff       	call   c0100364 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109404:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109409:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010940c:	8b 55 08             	mov    0x8(%ebp),%edx
c010940f:	89 d0                	mov    %edx,%eax
c0109411:	c1 e0 02             	shl    $0x2,%eax
c0109414:	01 d0                	add    %edx,%eax
c0109416:	c1 e0 02             	shl    $0x2,%eax
c0109419:	01 c8                	add    %ecx,%eax
c010941b:	89 04 24             	mov    %eax,(%esp)
c010941e:	e8 8d 04 00 00       	call   c01098b0 <cond_signal>
    }
}
c0109423:	c9                   	leave  
c0109424:	c3                   	ret    

c0109425 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109425:	55                   	push   %ebp
c0109426:	89 e5                	mov    %esp,%ebp
c0109428:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010942b:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109430:	89 04 24             	mov    %eax,(%esp)
c0109433:	e8 96 07 00 00       	call   c0109bce <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c0109438:	8b 45 08             	mov    0x8(%ebp),%eax
c010943b:	c7 04 85 40 82 1c c0 	movl   $0x1,-0x3fe37dc0(,%eax,4)
c0109442:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c0109446:	8b 45 08             	mov    0x8(%ebp),%eax
c0109449:	89 04 24             	mov    %eax,(%esp)
c010944c:	e8 04 ff ff ff       	call   c0109355 <phi_test_condvar>
      if (state_condvar[i] != EATING) {
c0109451:	8b 45 08             	mov    0x8(%ebp),%eax
c0109454:	8b 04 85 40 82 1c c0 	mov    -0x3fe37dc0(,%eax,4),%eax
c010945b:	83 f8 02             	cmp    $0x2,%eax
c010945e:	74 32                	je     c0109492 <phi_take_forks_condvar+0x6d>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c0109460:	8b 45 08             	mov    0x8(%ebp),%eax
c0109463:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109467:	c7 04 24 8c f8 10 c0 	movl   $0xc010f88c,(%esp)
c010946e:	e8 f1 6e ff ff       	call   c0100364 <cprintf>
          cond_wait(&mtp->cv[i]);
c0109473:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109478:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010947b:	8b 55 08             	mov    0x8(%ebp),%edx
c010947e:	89 d0                	mov    %edx,%eax
c0109480:	c1 e0 02             	shl    $0x2,%eax
c0109483:	01 d0                	add    %edx,%eax
c0109485:	c1 e0 02             	shl    $0x2,%eax
c0109488:	01 c8                	add    %ecx,%eax
c010948a:	89 04 24             	mov    %eax,(%esp)
c010948d:	e8 be 04 00 00       	call   c0109950 <cond_wait>
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0109492:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109497:	8b 40 18             	mov    0x18(%eax),%eax
c010949a:	85 c0                	test   %eax,%eax
c010949c:	7e 12                	jle    c01094b0 <phi_take_forks_condvar+0x8b>
         up(&(mtp->next));
c010949e:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094a3:	83 c0 0c             	add    $0xc,%eax
c01094a6:	89 04 24             	mov    %eax,(%esp)
c01094a9:	e8 05 07 00 00       	call   c0109bb3 <up>
c01094ae:	eb 0d                	jmp    c01094bd <phi_take_forks_condvar+0x98>
      else
         up(&(mtp->mutex));
c01094b0:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094b5:	89 04 24             	mov    %eax,(%esp)
c01094b8:	e8 f6 06 00 00       	call   c0109bb3 <up>
}
c01094bd:	c9                   	leave  
c01094be:	c3                   	ret    

c01094bf <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01094bf:	55                   	push   %ebp
c01094c0:	89 e5                	mov    %esp,%ebp
c01094c2:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01094c5:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094ca:	89 04 24             	mov    %eax,(%esp)
c01094cd:	e8 fc 06 00 00       	call   c0109bce <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c01094d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d5:	c7 04 85 40 82 1c c0 	movl   $0x0,-0x3fe37dc0(,%eax,4)
c01094dc:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c01094e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e3:	8d 48 04             	lea    0x4(%eax),%ecx
c01094e6:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094eb:	89 c8                	mov    %ecx,%eax
c01094ed:	f7 ea                	imul   %edx
c01094ef:	d1 fa                	sar    %edx
c01094f1:	89 c8                	mov    %ecx,%eax
c01094f3:	c1 f8 1f             	sar    $0x1f,%eax
c01094f6:	29 c2                	sub    %eax,%edx
c01094f8:	89 d0                	mov    %edx,%eax
c01094fa:	c1 e0 02             	shl    $0x2,%eax
c01094fd:	01 d0                	add    %edx,%eax
c01094ff:	29 c1                	sub    %eax,%ecx
c0109501:	89 ca                	mov    %ecx,%edx
c0109503:	89 14 24             	mov    %edx,(%esp)
c0109506:	e8 4a fe ff ff       	call   c0109355 <phi_test_condvar>
      phi_test_condvar(RIGHT);
c010950b:	8b 45 08             	mov    0x8(%ebp),%eax
c010950e:	8d 48 01             	lea    0x1(%eax),%ecx
c0109511:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109516:	89 c8                	mov    %ecx,%eax
c0109518:	f7 ea                	imul   %edx
c010951a:	d1 fa                	sar    %edx
c010951c:	89 c8                	mov    %ecx,%eax
c010951e:	c1 f8 1f             	sar    $0x1f,%eax
c0109521:	29 c2                	sub    %eax,%edx
c0109523:	89 d0                	mov    %edx,%eax
c0109525:	c1 e0 02             	shl    $0x2,%eax
c0109528:	01 d0                	add    %edx,%eax
c010952a:	29 c1                	sub    %eax,%ecx
c010952c:	89 ca                	mov    %ecx,%edx
c010952e:	89 14 24             	mov    %edx,(%esp)
c0109531:	e8 1f fe ff ff       	call   c0109355 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0109536:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010953b:	8b 40 18             	mov    0x18(%eax),%eax
c010953e:	85 c0                	test   %eax,%eax
c0109540:	7e 12                	jle    c0109554 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0109542:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109547:	83 c0 0c             	add    $0xc,%eax
c010954a:	89 04 24             	mov    %eax,(%esp)
c010954d:	e8 61 06 00 00       	call   c0109bb3 <up>
c0109552:	eb 0d                	jmp    c0109561 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c0109554:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109559:	89 04 24             	mov    %eax,(%esp)
c010955c:	e8 52 06 00 00       	call   c0109bb3 <up>
}
c0109561:	c9                   	leave  
c0109562:	c3                   	ret    

c0109563 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109563:	55                   	push   %ebp
c0109564:	89 e5                	mov    %esp,%ebp
c0109566:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109569:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109570:	8b 45 08             	mov    0x8(%ebp),%eax
c0109573:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109576:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109579:	89 44 24 04          	mov    %eax,0x4(%esp)
c010957d:	c7 04 24 c8 f8 10 c0 	movl   $0xc010f8c8,(%esp)
c0109584:	e8 db 6d ff ff       	call   c0100364 <cprintf>
    while(iter++<TIMES)
c0109589:	eb 62                	jmp    c01095ed <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c010958b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010958e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109592:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109595:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109599:	c7 04 24 e8 f8 10 c0 	movl   $0xc010f8e8,(%esp)
c01095a0:	e8 bf 6d ff ff       	call   c0100364 <cprintf>
        do_sleep(SLEEP_TIME);
c01095a5:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01095ac:	e8 b7 29 00 00       	call   c010bf68 <do_sleep>
        phi_take_forks_condvar(i); 
c01095b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095b4:	89 04 24             	mov    %eax,(%esp)
c01095b7:	e8 69 fe ff ff       	call   c0109425 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01095bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01095c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095ca:	c7 04 24 18 f9 10 c0 	movl   $0xc010f918,(%esp)
c01095d1:	e8 8e 6d ff ff       	call   c0100364 <cprintf>
        do_sleep(SLEEP_TIME);
c01095d6:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01095dd:	e8 86 29 00 00       	call   c010bf68 <do_sleep>
        phi_put_forks_condvar(i); 
c01095e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095e5:	89 04 24             	mov    %eax,(%esp)
c01095e8:	e8 d2 fe ff ff       	call   c01094bf <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01095ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095f0:	8d 50 01             	lea    0x1(%eax),%edx
c01095f3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01095f6:	83 f8 03             	cmp    $0x3,%eax
c01095f9:	7e 90                	jle    c010958b <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c01095fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109602:	c7 04 24 48 f9 10 c0 	movl   $0xc010f948,(%esp)
c0109609:	e8 56 6d ff ff       	call   c0100364 <cprintf>
    return 0;    
c010960e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109613:	c9                   	leave  
c0109614:	c3                   	ret    

c0109615 <check_sync>:

void check_sync(void){
c0109615:	55                   	push   %ebp
c0109616:	89 e5                	mov    %esp,%ebp
c0109618:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010961b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109622:	00 
c0109623:	c7 04 24 08 82 1c c0 	movl   $0xc01c8208,(%esp)
c010962a:	e8 11 04 00 00       	call   c0109a40 <sem_init>
    for(i=0;i<N;i++){
c010962f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109636:	e9 94 00 00 00       	jmp    c01096cf <check_sync+0xba>
        sem_init(&s[i], 0);
c010963b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010963e:	89 d0                	mov    %edx,%eax
c0109640:	01 c0                	add    %eax,%eax
c0109642:	01 d0                	add    %edx,%eax
c0109644:	c1 e0 02             	shl    $0x2,%eax
c0109647:	05 80 82 1c c0       	add    $0xc01c8280,%eax
c010964c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109653:	00 
c0109654:	89 04 24             	mov    %eax,(%esp)
c0109657:	e8 e4 03 00 00       	call   c0109a40 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c010965c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010965f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109666:	00 
c0109667:	89 44 24 04          	mov    %eax,0x4(%esp)
c010966b:	c7 04 24 a3 92 10 c0 	movl   $0xc01092a3,(%esp)
c0109672:	e8 5a 14 00 00       	call   c010aad1 <kernel_thread>
c0109677:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c010967a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010967e:	7f 1c                	jg     c010969c <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109680:	c7 44 24 08 68 f9 10 	movl   $0xc010f968,0x8(%esp)
c0109687:	c0 
c0109688:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010968f:	00 
c0109690:	c7 04 24 9a f9 10 c0 	movl   $0xc010f99a,(%esp)
c0109697:	e8 54 77 ff ff       	call   c0100df0 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c010969c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010969f:	89 04 24             	mov    %eax,(%esp)
c01096a2:	e8 b6 13 00 00       	call   c010aa5d <find_proc>
c01096a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096aa:	89 04 95 54 82 1c c0 	mov    %eax,-0x3fe37dac(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01096b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096b4:	8b 04 85 54 82 1c c0 	mov    -0x3fe37dac(,%eax,4),%eax
c01096bb:	c7 44 24 04 b1 f9 10 	movl   $0xc010f9b1,0x4(%esp)
c01096c2:	c0 
c01096c3:	89 04 24             	mov    %eax,(%esp)
c01096c6:	e8 79 0f 00 00       	call   c010a644 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01096cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01096cf:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01096d3:	0f 8e 62 ff ff ff    	jle    c010963b <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01096d9:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01096e0:	00 
c01096e1:	c7 04 24 20 82 1c c0 	movl   $0xc01c8220,(%esp)
c01096e8:	e8 99 00 00 00       	call   c0109786 <monitor_init>
    for(i=0;i<N;i++){
c01096ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01096f4:	e9 81 00 00 00       	jmp    c010977a <check_sync+0x165>
        state_condvar[i]=THINKING;
c01096f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096fc:	c7 04 85 40 82 1c c0 	movl   $0x0,-0x3fe37dc0(,%eax,4)
c0109703:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010970a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109711:	00 
c0109712:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109716:	c7 04 24 63 95 10 c0 	movl   $0xc0109563,(%esp)
c010971d:	e8 af 13 00 00       	call   c010aad1 <kernel_thread>
c0109722:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109725:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109729:	7f 1c                	jg     c0109747 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c010972b:	c7 44 24 08 c8 f9 10 	movl   $0xc010f9c8,0x8(%esp)
c0109732:	c0 
c0109733:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010973a:	00 
c010973b:	c7 04 24 9a f9 10 c0 	movl   $0xc010f99a,(%esp)
c0109742:	e8 a9 76 ff ff       	call   c0100df0 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109747:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010974a:	89 04 24             	mov    %eax,(%esp)
c010974d:	e8 0b 13 00 00       	call   c010aa5d <find_proc>
c0109752:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109755:	89 04 95 f4 81 1c c0 	mov    %eax,-0x3fe37e0c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c010975c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010975f:	8b 04 85 f4 81 1c c0 	mov    -0x3fe37e0c(,%eax,4),%eax
c0109766:	c7 44 24 04 f8 f9 10 	movl   $0xc010f9f8,0x4(%esp)
c010976d:	c0 
c010976e:	89 04 24             	mov    %eax,(%esp)
c0109771:	e8 ce 0e 00 00       	call   c010a644 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109776:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010977a:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010977e:	0f 8e 75 ff ff ff    	jle    c01096f9 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109784:	c9                   	leave  
c0109785:	c3                   	ret    

c0109786 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109786:	55                   	push   %ebp
c0109787:	89 e5                	mov    %esp,%ebp
c0109789:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c010978c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109790:	75 24                	jne    c01097b6 <monitor_init+0x30>
c0109792:	c7 44 24 0c 14 fa 10 	movl   $0xc010fa14,0xc(%esp)
c0109799:	c0 
c010979a:	c7 44 24 08 1d fa 10 	movl   $0xc010fa1d,0x8(%esp)
c01097a1:	c0 
c01097a2:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01097a9:	00 
c01097aa:	c7 04 24 32 fa 10 c0 	movl   $0xc010fa32,(%esp)
c01097b1:	e8 3a 76 ff ff       	call   c0100df0 <__panic>
    mtp->next_count = 0;
c01097b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b9:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01097c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c3:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01097ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01097cd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01097d4:	00 
c01097d5:	89 04 24             	mov    %eax,(%esp)
c01097d8:	e8 63 02 00 00       	call   c0109a40 <sem_init>
    sem_init(&(mtp->next), 0);
c01097dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e0:	83 c0 0c             	add    $0xc,%eax
c01097e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01097ea:	00 
c01097eb:	89 04 24             	mov    %eax,(%esp)
c01097ee:	e8 4d 02 00 00       	call   c0109a40 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01097f3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01097f6:	89 d0                	mov    %edx,%eax
c01097f8:	c1 e0 02             	shl    $0x2,%eax
c01097fb:	01 d0                	add    %edx,%eax
c01097fd:	c1 e0 02             	shl    $0x2,%eax
c0109800:	89 04 24             	mov    %eax,(%esp)
c0109803:	e8 cb b4 ff ff       	call   c0104cd3 <kmalloc>
c0109808:	8b 55 08             	mov    0x8(%ebp),%edx
c010980b:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c010980e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109811:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109814:	85 c0                	test   %eax,%eax
c0109816:	75 24                	jne    c010983c <monitor_init+0xb6>
c0109818:	c7 44 24 0c 46 fa 10 	movl   $0xc010fa46,0xc(%esp)
c010981f:	c0 
c0109820:	c7 44 24 08 1d fa 10 	movl   $0xc010fa1d,0x8(%esp)
c0109827:	c0 
c0109828:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010982f:	00 
c0109830:	c7 04 24 32 fa 10 c0 	movl   $0xc010fa32,(%esp)
c0109837:	e8 b4 75 ff ff       	call   c0100df0 <__panic>
    for(i=0; i<num_cv; i++){
c010983c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109843:	eb 61                	jmp    c01098a6 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109845:	8b 45 08             	mov    0x8(%ebp),%eax
c0109848:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010984b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010984e:	89 d0                	mov    %edx,%eax
c0109850:	c1 e0 02             	shl    $0x2,%eax
c0109853:	01 d0                	add    %edx,%eax
c0109855:	c1 e0 02             	shl    $0x2,%eax
c0109858:	01 c8                	add    %ecx,%eax
c010985a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109861:	8b 45 08             	mov    0x8(%ebp),%eax
c0109864:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109867:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010986a:	89 d0                	mov    %edx,%eax
c010986c:	c1 e0 02             	shl    $0x2,%eax
c010986f:	01 d0                	add    %edx,%eax
c0109871:	c1 e0 02             	shl    $0x2,%eax
c0109874:	01 c8                	add    %ecx,%eax
c0109876:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010987d:	00 
c010987e:	89 04 24             	mov    %eax,(%esp)
c0109881:	e8 ba 01 00 00       	call   c0109a40 <sem_init>
        mtp->cv[i].owner=mtp;
c0109886:	8b 45 08             	mov    0x8(%ebp),%eax
c0109889:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010988c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010988f:	89 d0                	mov    %edx,%eax
c0109891:	c1 e0 02             	shl    $0x2,%eax
c0109894:	01 d0                	add    %edx,%eax
c0109896:	c1 e0 02             	shl    $0x2,%eax
c0109899:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010989c:	8b 45 08             	mov    0x8(%ebp),%eax
c010989f:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01098a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01098a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01098ac:	72 97                	jb     c0109845 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01098ae:	c9                   	leave  
c01098af:	c3                   	ret    

c01098b0 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01098b0:	55                   	push   %ebp
c01098b1:	89 e5                	mov    %esp,%ebp
c01098b3:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01098b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b9:	8b 40 10             	mov    0x10(%eax),%eax
c01098bc:	8b 50 18             	mov    0x18(%eax),%edx
c01098bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c2:	8b 40 0c             	mov    0xc(%eax),%eax
c01098c5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01098c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098d4:	c7 04 24 54 fa 10 c0 	movl   $0xc010fa54,(%esp)
c01098db:	e8 84 6a ff ff       	call   c0100364 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c01098e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e3:	8b 40 0c             	mov    0xc(%eax),%eax
c01098e6:	85 c0                	test   %eax,%eax
c01098e8:	7e 3a                	jle    c0109924 <cond_signal+0x74>
        cvp->owner->next_count ++;
c01098ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ed:	8b 40 10             	mov    0x10(%eax),%eax
c01098f0:	8b 50 18             	mov    0x18(%eax),%edx
c01098f3:	83 c2 01             	add    $0x1,%edx
c01098f6:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c01098f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098fc:	89 04 24             	mov    %eax,(%esp)
c01098ff:	e8 af 02 00 00       	call   c0109bb3 <up>
        down(&(cvp->owner->next));
c0109904:	8b 45 08             	mov    0x8(%ebp),%eax
c0109907:	8b 40 10             	mov    0x10(%eax),%eax
c010990a:	83 c0 0c             	add    $0xc,%eax
c010990d:	89 04 24             	mov    %eax,(%esp)
c0109910:	e8 b9 02 00 00       	call   c0109bce <down>
        cvp->owner->next_count --;
c0109915:	8b 45 08             	mov    0x8(%ebp),%eax
c0109918:	8b 40 10             	mov    0x10(%eax),%eax
c010991b:	8b 50 18             	mov    0x18(%eax),%edx
c010991e:	83 ea 01             	sub    $0x1,%edx
c0109921:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109924:	8b 45 08             	mov    0x8(%ebp),%eax
c0109927:	8b 40 10             	mov    0x10(%eax),%eax
c010992a:	8b 50 18             	mov    0x18(%eax),%edx
c010992d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109930:	8b 40 0c             	mov    0xc(%eax),%eax
c0109933:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109937:	89 44 24 08          	mov    %eax,0x8(%esp)
c010993b:	8b 45 08             	mov    0x8(%ebp),%eax
c010993e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109942:	c7 04 24 9c fa 10 c0 	movl   $0xc010fa9c,(%esp)
c0109949:	e8 16 6a ff ff       	call   c0100364 <cprintf>
}
c010994e:	c9                   	leave  
c010994f:	c3                   	ret    

c0109950 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109950:	55                   	push   %ebp
c0109951:	89 e5                	mov    %esp,%ebp
c0109953:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109956:	8b 45 08             	mov    0x8(%ebp),%eax
c0109959:	8b 40 10             	mov    0x10(%eax),%eax
c010995c:	8b 50 18             	mov    0x18(%eax),%edx
c010995f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109962:	8b 40 0c             	mov    0xc(%eax),%eax
c0109965:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109969:	89 44 24 08          	mov    %eax,0x8(%esp)
c010996d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109970:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109974:	c7 04 24 e0 fa 10 c0 	movl   $0xc010fae0,(%esp)
c010997b:	e8 e4 69 ff ff       	call   c0100364 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109980:	8b 45 08             	mov    0x8(%ebp),%eax
c0109983:	8b 40 0c             	mov    0xc(%eax),%eax
c0109986:	8d 50 01             	lea    0x1(%eax),%edx
c0109989:	8b 45 08             	mov    0x8(%ebp),%eax
c010998c:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c010998f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109992:	8b 40 10             	mov    0x10(%eax),%eax
c0109995:	8b 40 18             	mov    0x18(%eax),%eax
c0109998:	85 c0                	test   %eax,%eax
c010999a:	7e 13                	jle    c01099af <cond_wait+0x5f>
         up(&(cvp->owner->next));
c010999c:	8b 45 08             	mov    0x8(%ebp),%eax
c010999f:	8b 40 10             	mov    0x10(%eax),%eax
c01099a2:	83 c0 0c             	add    $0xc,%eax
c01099a5:	89 04 24             	mov    %eax,(%esp)
c01099a8:	e8 06 02 00 00       	call   c0109bb3 <up>
c01099ad:	eb 0e                	jmp    c01099bd <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c01099af:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b2:	8b 40 10             	mov    0x10(%eax),%eax
c01099b5:	89 04 24             	mov    %eax,(%esp)
c01099b8:	e8 f6 01 00 00       	call   c0109bb3 <up>
      down(&(cvp->sem));
c01099bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c0:	89 04 24             	mov    %eax,(%esp)
c01099c3:	e8 06 02 00 00       	call   c0109bce <down>
      cvp->count --;
c01099c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099cb:	8b 40 0c             	mov    0xc(%eax),%eax
c01099ce:	8d 50 ff             	lea    -0x1(%eax),%edx
c01099d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d4:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01099d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01099da:	8b 40 10             	mov    0x10(%eax),%eax
c01099dd:	8b 50 18             	mov    0x18(%eax),%edx
c01099e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e3:	8b 40 0c             	mov    0xc(%eax),%eax
c01099e6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01099ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099f5:	c7 04 24 24 fb 10 c0 	movl   $0xc010fb24,(%esp)
c01099fc:	e8 63 69 ff ff       	call   c0100364 <cprintf>
}
c0109a01:	c9                   	leave  
c0109a02:	c3                   	ret    

c0109a03 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109a03:	55                   	push   %ebp
c0109a04:	89 e5                	mov    %esp,%ebp
c0109a06:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109a09:	9c                   	pushf  
c0109a0a:	58                   	pop    %eax
c0109a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109a11:	25 00 02 00 00       	and    $0x200,%eax
c0109a16:	85 c0                	test   %eax,%eax
c0109a18:	74 0c                	je     c0109a26 <__intr_save+0x23>
        intr_disable();
c0109a1a:	e8 3a 86 ff ff       	call   c0102059 <intr_disable>
        return 1;
c0109a1f:	b8 01 00 00 00       	mov    $0x1,%eax
c0109a24:	eb 05                	jmp    c0109a2b <__intr_save+0x28>
    }
    return 0;
c0109a26:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a2b:	c9                   	leave  
c0109a2c:	c3                   	ret    

c0109a2d <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109a2d:	55                   	push   %ebp
c0109a2e:	89 e5                	mov    %esp,%ebp
c0109a30:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109a33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109a37:	74 05                	je     c0109a3e <__intr_restore+0x11>
        intr_enable();
c0109a39:	e8 15 86 ff ff       	call   c0102053 <intr_enable>
    }
}
c0109a3e:	c9                   	leave  
c0109a3f:	c3                   	ret    

c0109a40 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109a40:	55                   	push   %ebp
c0109a41:	89 e5                	mov    %esp,%ebp
c0109a43:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a49:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a4c:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109a4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a51:	83 c0 04             	add    $0x4,%eax
c0109a54:	89 04 24             	mov    %eax,(%esp)
c0109a57:	e8 33 02 00 00       	call   c0109c8f <wait_queue_init>
}
c0109a5c:	c9                   	leave  
c0109a5d:	c3                   	ret    

c0109a5e <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109a5e:	55                   	push   %ebp
c0109a5f:	89 e5                	mov    %esp,%ebp
c0109a61:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109a64:	e8 9a ff ff ff       	call   c0109a03 <__intr_save>
c0109a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a6f:	83 c0 04             	add    $0x4,%eax
c0109a72:	89 04 24             	mov    %eax,(%esp)
c0109a75:	e8 69 04 00 00       	call   c0109ee3 <wait_queue_first>
c0109a7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a7d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109a81:	75 0f                	jne    c0109a92 <__up+0x34>
            sem->value ++;
c0109a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a86:	8b 00                	mov    (%eax),%eax
c0109a88:	8d 50 01             	lea    0x1(%eax),%edx
c0109a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a8e:	89 10                	mov    %edx,(%eax)
c0109a90:	eb 58                	jmp    c0109aea <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109a92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a95:	8b 00                	mov    (%eax),%eax
c0109a97:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109a9d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109aa0:	74 24                	je     c0109ac6 <__up+0x68>
c0109aa2:	c7 44 24 0c 68 fb 10 	movl   $0xc010fb68,0xc(%esp)
c0109aa9:	c0 
c0109aaa:	c7 44 24 08 8d fb 10 	movl   $0xc010fb8d,0x8(%esp)
c0109ab1:	c0 
c0109ab2:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109ab9:	00 
c0109aba:	c7 04 24 a2 fb 10 c0 	movl   $0xc010fba2,(%esp)
c0109ac1:	e8 2a 73 ff ff       	call   c0100df0 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109ac6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac9:	8d 50 04             	lea    0x4(%eax),%edx
c0109acc:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109ad3:	00 
c0109ad4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ad7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ade:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ae2:	89 14 24             	mov    %edx,(%esp)
c0109ae5:	e8 95 04 00 00       	call   c0109f7f <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109aed:	89 04 24             	mov    %eax,(%esp)
c0109af0:	e8 38 ff ff ff       	call   c0109a2d <__intr_restore>
}
c0109af5:	c9                   	leave  
c0109af6:	c3                   	ret    

c0109af7 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109af7:	55                   	push   %ebp
c0109af8:	89 e5                	mov    %esp,%ebp
c0109afa:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109afd:	e8 01 ff ff ff       	call   c0109a03 <__intr_save>
c0109b02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109b05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b08:	8b 00                	mov    (%eax),%eax
c0109b0a:	85 c0                	test   %eax,%eax
c0109b0c:	7e 22                	jle    c0109b30 <__down+0x39>
        sem->value --;
c0109b0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b11:	8b 00                	mov    (%eax),%eax
c0109b13:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b16:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b19:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b1e:	89 04 24             	mov    %eax,(%esp)
c0109b21:	e8 07 ff ff ff       	call   c0109a2d <__intr_restore>
        return 0;
c0109b26:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b2b:	e9 81 00 00 00       	jmp    c0109bb1 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109b30:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109b33:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109b36:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b39:	8d 50 04             	lea    0x4(%eax),%edx
c0109b3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b3f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b4a:	89 14 24             	mov    %edx,(%esp)
c0109b4d:	e8 34 05 00 00       	call   c010a086 <wait_current_set>
    local_intr_restore(intr_flag);
c0109b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b55:	89 04 24             	mov    %eax,(%esp)
c0109b58:	e8 d0 fe ff ff       	call   c0109a2d <__intr_restore>

    schedule();
c0109b5d:	e8 16 2a 00 00       	call   c010c578 <schedule>

    local_intr_save(intr_flag);
c0109b62:	e8 9c fe ff ff       	call   c0109a03 <__intr_save>
c0109b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b6d:	89 04 24             	mov    %eax,(%esp)
c0109b70:	e8 e2 03 00 00       	call   c0109f57 <wait_in_queue>
c0109b75:	85 c0                	test   %eax,%eax
c0109b77:	74 15                	je     c0109b8e <__down+0x97>
c0109b79:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b7c:	8d 50 04             	lea    0x4(%eax),%edx
c0109b7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b86:	89 14 24             	mov    %edx,(%esp)
c0109b89:	e8 c4 01 00 00       	call   c0109d52 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b91:	89 04 24             	mov    %eax,(%esp)
c0109b94:	e8 94 fe ff ff       	call   c0109a2d <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b9c:	8b 40 04             	mov    0x4(%eax),%eax
c0109b9f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ba2:	74 08                	je     c0109bac <__down+0xb5>
        return wait->wakeup_flags;
c0109ba4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ba7:	8b 40 04             	mov    0x4(%eax),%eax
c0109baa:	eb 05                	jmp    c0109bb1 <__down+0xba>
    }
    return 0;
c0109bac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109bb1:	c9                   	leave  
c0109bb2:	c3                   	ret    

c0109bb3 <up>:

void
up(semaphore_t *sem) {
c0109bb3:	55                   	push   %ebp
c0109bb4:	89 e5                	mov    %esp,%ebp
c0109bb6:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109bb9:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109bc0:	00 
c0109bc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc4:	89 04 24             	mov    %eax,(%esp)
c0109bc7:	e8 92 fe ff ff       	call   c0109a5e <__up>
}
c0109bcc:	c9                   	leave  
c0109bcd:	c3                   	ret    

c0109bce <down>:

void
down(semaphore_t *sem) {
c0109bce:	55                   	push   %ebp
c0109bcf:	89 e5                	mov    %esp,%ebp
c0109bd1:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109bd4:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109bdb:	00 
c0109bdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bdf:	89 04 24             	mov    %eax,(%esp)
c0109be2:	e8 10 ff ff ff       	call   c0109af7 <__down>
c0109be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109bea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109bee:	74 24                	je     c0109c14 <down+0x46>
c0109bf0:	c7 44 24 0c b2 fb 10 	movl   $0xc010fbb2,0xc(%esp)
c0109bf7:	c0 
c0109bf8:	c7 44 24 08 8d fb 10 	movl   $0xc010fb8d,0x8(%esp)
c0109bff:	c0 
c0109c00:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109c07:	00 
c0109c08:	c7 04 24 a2 fb 10 c0 	movl   $0xc010fba2,(%esp)
c0109c0f:	e8 dc 71 ff ff       	call   c0100df0 <__panic>
}
c0109c14:	c9                   	leave  
c0109c15:	c3                   	ret    

c0109c16 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109c16:	55                   	push   %ebp
c0109c17:	89 e5                	mov    %esp,%ebp
c0109c19:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109c1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109c23:	e8 db fd ff ff       	call   c0109a03 <__intr_save>
c0109c28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109c2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c2e:	8b 00                	mov    (%eax),%eax
c0109c30:	85 c0                	test   %eax,%eax
c0109c32:	7e 14                	jle    c0109c48 <try_down+0x32>
        sem->value --, ret = 1;
c0109c34:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c37:	8b 00                	mov    (%eax),%eax
c0109c39:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3f:	89 10                	mov    %edx,(%eax)
c0109c41:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109c48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c4b:	89 04 24             	mov    %eax,(%esp)
c0109c4e:	e8 da fd ff ff       	call   c0109a2d <__intr_restore>
    return ret;
c0109c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109c56:	c9                   	leave  
c0109c57:	c3                   	ret    

c0109c58 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109c58:	55                   	push   %ebp
c0109c59:	89 e5                	mov    %esp,%ebp
c0109c5b:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c61:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109c64:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109c66:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c69:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109c70:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c73:	83 c0 0c             	add    $0xc,%eax
c0109c76:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109c79:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c7c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109c7f:	89 50 04             	mov    %edx,0x4(%eax)
c0109c82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c85:	8b 50 04             	mov    0x4(%eax),%edx
c0109c88:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c8b:	89 10                	mov    %edx,(%eax)
}
c0109c8d:	c9                   	leave  
c0109c8e:	c3                   	ret    

c0109c8f <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109c8f:	55                   	push   %ebp
c0109c90:	89 e5                	mov    %esp,%ebp
c0109c92:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c98:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109c9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c9e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109ca1:	89 50 04             	mov    %edx,0x4(%eax)
c0109ca4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ca7:	8b 50 04             	mov    0x4(%eax),%edx
c0109caa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cad:	89 10                	mov    %edx,(%eax)
}
c0109caf:	c9                   	leave  
c0109cb0:	c3                   	ret    

c0109cb1 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109cb1:	55                   	push   %ebp
c0109cb2:	89 e5                	mov    %esp,%ebp
c0109cb4:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cba:	83 c0 0c             	add    $0xc,%eax
c0109cbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cc3:	8b 40 04             	mov    0x4(%eax),%eax
c0109cc6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109cc9:	0f 94 c0             	sete   %al
c0109ccc:	0f b6 c0             	movzbl %al,%eax
c0109ccf:	85 c0                	test   %eax,%eax
c0109cd1:	74 09                	je     c0109cdc <wait_queue_add+0x2b>
c0109cd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cd6:	8b 00                	mov    (%eax),%eax
c0109cd8:	85 c0                	test   %eax,%eax
c0109cda:	75 24                	jne    c0109d00 <wait_queue_add+0x4f>
c0109cdc:	c7 44 24 0c c0 fb 10 	movl   $0xc010fbc0,0xc(%esp)
c0109ce3:	c0 
c0109ce4:	c7 44 24 08 f5 fb 10 	movl   $0xc010fbf5,0x8(%esp)
c0109ceb:	c0 
c0109cec:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109cf3:	00 
c0109cf4:	c7 04 24 0a fc 10 c0 	movl   $0xc010fc0a,(%esp)
c0109cfb:	e8 f0 70 ff ff       	call   c0100df0 <__panic>
    wait->wait_queue = queue;
c0109d00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d03:	8b 55 08             	mov    0x8(%ebp),%edx
c0109d06:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109d09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d0c:	8d 50 0c             	lea    0xc(%eax),%edx
c0109d0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d12:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d15:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d1b:	8b 00                	mov    (%eax),%eax
c0109d1d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109d20:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109d23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d29:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109d2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d2f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109d32:	89 10                	mov    %edx,(%eax)
c0109d34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d37:	8b 10                	mov    (%eax),%edx
c0109d39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d3c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109d3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d42:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109d45:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109d48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d4b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109d4e:	89 10                	mov    %edx,(%eax)
}
c0109d50:	c9                   	leave  
c0109d51:	c3                   	ret    

c0109d52 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109d52:	55                   	push   %ebp
c0109d53:	89 e5                	mov    %esp,%ebp
c0109d55:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109d58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d5b:	83 c0 0c             	add    $0xc,%eax
c0109d5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d64:	8b 40 04             	mov    0x4(%eax),%eax
c0109d67:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109d6a:	0f 94 c0             	sete   %al
c0109d6d:	0f b6 c0             	movzbl %al,%eax
c0109d70:	85 c0                	test   %eax,%eax
c0109d72:	75 0b                	jne    c0109d7f <wait_queue_del+0x2d>
c0109d74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d77:	8b 40 08             	mov    0x8(%eax),%eax
c0109d7a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109d7d:	74 24                	je     c0109da3 <wait_queue_del+0x51>
c0109d7f:	c7 44 24 0c 1c fc 10 	movl   $0xc010fc1c,0xc(%esp)
c0109d86:	c0 
c0109d87:	c7 44 24 08 f5 fb 10 	movl   $0xc010fbf5,0x8(%esp)
c0109d8e:	c0 
c0109d8f:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109d96:	00 
c0109d97:	c7 04 24 0a fc 10 c0 	movl   $0xc010fc0a,(%esp)
c0109d9e:	e8 4d 70 ff ff       	call   c0100df0 <__panic>
    list_del_init(&(wait->wait_link));
c0109da3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109da6:	83 c0 0c             	add    $0xc,%eax
c0109da9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109dac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109daf:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109db2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109db5:	8b 40 04             	mov    0x4(%eax),%eax
c0109db8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109dbb:	8b 12                	mov    (%edx),%edx
c0109dbd:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109dc0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109dc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dc6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109dc9:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109dcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109dcf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109dd2:	89 10                	mov    %edx,(%eax)
c0109dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dd7:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109dda:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ddd:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109de0:	89 50 04             	mov    %edx,0x4(%eax)
c0109de3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109de6:	8b 50 04             	mov    0x4(%eax),%edx
c0109de9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109dec:	89 10                	mov    %edx,(%eax)
}
c0109dee:	c9                   	leave  
c0109def:	c3                   	ret    

c0109df0 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109df0:	55                   	push   %ebp
c0109df1:	89 e5                	mov    %esp,%ebp
c0109df3:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109df6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109df9:	83 c0 0c             	add    $0xc,%eax
c0109dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109dff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e02:	8b 40 04             	mov    0x4(%eax),%eax
c0109e05:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e08:	0f 94 c0             	sete   %al
c0109e0b:	0f b6 c0             	movzbl %al,%eax
c0109e0e:	85 c0                	test   %eax,%eax
c0109e10:	75 0b                	jne    c0109e1d <wait_queue_next+0x2d>
c0109e12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e15:	8b 40 08             	mov    0x8(%eax),%eax
c0109e18:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e1b:	74 24                	je     c0109e41 <wait_queue_next+0x51>
c0109e1d:	c7 44 24 0c 1c fc 10 	movl   $0xc010fc1c,0xc(%esp)
c0109e24:	c0 
c0109e25:	c7 44 24 08 f5 fb 10 	movl   $0xc010fbf5,0x8(%esp)
c0109e2c:	c0 
c0109e2d:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109e34:	00 
c0109e35:	c7 04 24 0a fc 10 c0 	movl   $0xc010fc0a,(%esp)
c0109e3c:	e8 af 6f ff ff       	call   c0100df0 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109e41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e44:	83 c0 0c             	add    $0xc,%eax
c0109e47:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109e4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e4d:	8b 40 04             	mov    0x4(%eax),%eax
c0109e50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109e53:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e59:	74 08                	je     c0109e63 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e5e:	83 e8 0c             	sub    $0xc,%eax
c0109e61:	eb 05                	jmp    c0109e68 <wait_queue_next+0x78>
    }
    return NULL;
c0109e63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e68:	c9                   	leave  
c0109e69:	c3                   	ret    

c0109e6a <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109e6a:	55                   	push   %ebp
c0109e6b:	89 e5                	mov    %esp,%ebp
c0109e6d:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e70:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e73:	83 c0 0c             	add    $0xc,%eax
c0109e76:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e7c:	8b 40 04             	mov    0x4(%eax),%eax
c0109e7f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e82:	0f 94 c0             	sete   %al
c0109e85:	0f b6 c0             	movzbl %al,%eax
c0109e88:	85 c0                	test   %eax,%eax
c0109e8a:	75 0b                	jne    c0109e97 <wait_queue_prev+0x2d>
c0109e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e8f:	8b 40 08             	mov    0x8(%eax),%eax
c0109e92:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e95:	74 24                	je     c0109ebb <wait_queue_prev+0x51>
c0109e97:	c7 44 24 0c 1c fc 10 	movl   $0xc010fc1c,0xc(%esp)
c0109e9e:	c0 
c0109e9f:	c7 44 24 08 f5 fb 10 	movl   $0xc010fbf5,0x8(%esp)
c0109ea6:	c0 
c0109ea7:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109eae:	00 
c0109eaf:	c7 04 24 0a fc 10 c0 	movl   $0xc010fc0a,(%esp)
c0109eb6:	e8 35 6f ff ff       	call   c0100df0 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ebe:	83 c0 0c             	add    $0xc,%eax
c0109ec1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109ec4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ec7:	8b 00                	mov    (%eax),%eax
c0109ec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ecf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109ed2:	74 08                	je     c0109edc <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109ed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ed7:	83 e8 0c             	sub    $0xc,%eax
c0109eda:	eb 05                	jmp    c0109ee1 <wait_queue_prev+0x77>
    }
    return NULL;
c0109edc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ee1:	c9                   	leave  
c0109ee2:	c3                   	ret    

c0109ee3 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109ee3:	55                   	push   %ebp
c0109ee4:	89 e5                	mov    %esp,%ebp
c0109ee6:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109ee9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eec:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109eef:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109ef2:	8b 40 04             	mov    0x4(%eax),%eax
c0109ef5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109ef8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109efb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109efe:	74 08                	je     c0109f08 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109f00:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f03:	83 e8 0c             	sub    $0xc,%eax
c0109f06:	eb 05                	jmp    c0109f0d <wait_queue_first+0x2a>
    }
    return NULL;
c0109f08:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f0d:	c9                   	leave  
c0109f0e:	c3                   	ret    

c0109f0f <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109f0f:	55                   	push   %ebp
c0109f10:	89 e5                	mov    %esp,%ebp
c0109f12:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109f15:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f18:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109f1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f1e:	8b 00                	mov    (%eax),%eax
c0109f20:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f26:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109f29:	74 08                	je     c0109f33 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109f2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f2e:	83 e8 0c             	sub    $0xc,%eax
c0109f31:	eb 05                	jmp    c0109f38 <wait_queue_last+0x29>
    }
    return NULL;
c0109f33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f38:	c9                   	leave  
c0109f39:	c3                   	ret    

c0109f3a <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109f3a:	55                   	push   %ebp
c0109f3b:	89 e5                	mov    %esp,%ebp
c0109f3d:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109f40:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f43:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f46:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f49:	8b 40 04             	mov    0x4(%eax),%eax
c0109f4c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109f4f:	0f 94 c0             	sete   %al
c0109f52:	0f b6 c0             	movzbl %al,%eax
}
c0109f55:	c9                   	leave  
c0109f56:	c3                   	ret    

c0109f57 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109f57:	55                   	push   %ebp
c0109f58:	89 e5                	mov    %esp,%ebp
c0109f5a:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109f5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f60:	83 c0 0c             	add    $0xc,%eax
c0109f63:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109f66:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f69:	8b 40 04             	mov    0x4(%eax),%eax
c0109f6c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109f6f:	0f 94 c0             	sete   %al
c0109f72:	0f b6 c0             	movzbl %al,%eax
c0109f75:	85 c0                	test   %eax,%eax
c0109f77:	0f 94 c0             	sete   %al
c0109f7a:	0f b6 c0             	movzbl %al,%eax
}
c0109f7d:	c9                   	leave  
c0109f7e:	c3                   	ret    

c0109f7f <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109f7f:	55                   	push   %ebp
c0109f80:	89 e5                	mov    %esp,%ebp
c0109f82:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109f85:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109f89:	74 12                	je     c0109f9d <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109f8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f92:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f95:	89 04 24             	mov    %eax,(%esp)
c0109f98:	e8 b5 fd ff ff       	call   c0109d52 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109f9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fa0:	8b 55 10             	mov    0x10(%ebp),%edx
c0109fa3:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fa9:	8b 00                	mov    (%eax),%eax
c0109fab:	89 04 24             	mov    %eax,(%esp)
c0109fae:	e8 29 25 00 00       	call   c010c4dc <wakeup_proc>
}
c0109fb3:	c9                   	leave  
c0109fb4:	c3                   	ret    

c0109fb5 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109fb5:	55                   	push   %ebp
c0109fb6:	89 e5                	mov    %esp,%ebp
c0109fb8:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109fbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fbe:	89 04 24             	mov    %eax,(%esp)
c0109fc1:	e8 1d ff ff ff       	call   c0109ee3 <wait_queue_first>
c0109fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fcd:	74 20                	je     c0109fef <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109fcf:	8b 45 10             	mov    0x10(%ebp),%eax
c0109fd2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109fd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109fdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fe0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fe4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fe7:	89 04 24             	mov    %eax,(%esp)
c0109fea:	e8 90 ff ff ff       	call   c0109f7f <wakeup_wait>
    }
}
c0109fef:	c9                   	leave  
c0109ff0:	c3                   	ret    

c0109ff1 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109ff1:	55                   	push   %ebp
c0109ff2:	89 e5                	mov    %esp,%ebp
c0109ff4:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109ff7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ffa:	89 04 24             	mov    %eax,(%esp)
c0109ffd:	e8 e1 fe ff ff       	call   c0109ee3 <wait_queue_first>
c010a002:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a005:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a009:	74 79                	je     c010a084 <wakeup_queue+0x93>
        if (del) {
c010a00b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a00f:	74 37                	je     c010a048 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a011:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a018:	00 
c010a019:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a01c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a020:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a023:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a027:	8b 45 08             	mov    0x8(%ebp),%eax
c010a02a:	89 04 24             	mov    %eax,(%esp)
c010a02d:	e8 4d ff ff ff       	call   c0109f7f <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a032:	8b 45 08             	mov    0x8(%ebp),%eax
c010a035:	89 04 24             	mov    %eax,(%esp)
c010a038:	e8 a6 fe ff ff       	call   c0109ee3 <wait_queue_first>
c010a03d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a040:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a044:	75 cb                	jne    c010a011 <wakeup_queue+0x20>
c010a046:	eb 3c                	jmp    c010a084 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a048:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a04f:	00 
c010a050:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a053:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a05a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a05e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a061:	89 04 24             	mov    %eax,(%esp)
c010a064:	e8 16 ff ff ff       	call   c0109f7f <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a069:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a06c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a070:	8b 45 08             	mov    0x8(%ebp),%eax
c010a073:	89 04 24             	mov    %eax,(%esp)
c010a076:	e8 75 fd ff ff       	call   c0109df0 <wait_queue_next>
c010a07b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a07e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a082:	75 c4                	jne    c010a048 <wakeup_queue+0x57>
        }
    }
}
c010a084:	c9                   	leave  
c010a085:	c3                   	ret    

c010a086 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a086:	55                   	push   %ebp
c010a087:	89 e5                	mov    %esp,%ebp
c010a089:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a08c:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a091:	85 c0                	test   %eax,%eax
c010a093:	75 24                	jne    c010a0b9 <wait_current_set+0x33>
c010a095:	c7 44 24 0c 59 fc 10 	movl   $0xc010fc59,0xc(%esp)
c010a09c:	c0 
c010a09d:	c7 44 24 08 f5 fb 10 	movl   $0xc010fbf5,0x8(%esp)
c010a0a4:	c0 
c010a0a5:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a0ac:	00 
c010a0ad:	c7 04 24 0a fc 10 c0 	movl   $0xc010fc0a,(%esp)
c010a0b4:	e8 37 6d ff ff       	call   c0100df0 <__panic>
    wait_init(wait, current);
c010a0b9:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a0be:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0c5:	89 04 24             	mov    %eax,(%esp)
c010a0c8:	e8 8b fb ff ff       	call   c0109c58 <wait_init>
    current->state = PROC_SLEEPING;
c010a0cd:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a0d2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a0d8:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a0dd:	8b 55 10             	mov    0x10(%ebp),%edx
c010a0e0:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a0e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f0:	89 04 24             	mov    %eax,(%esp)
c010a0f3:	e8 b9 fb ff ff       	call   c0109cb1 <wait_queue_add>
}
c010a0f8:	c9                   	leave  
c010a0f9:	c3                   	ret    

c010a0fa <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a0fa:	55                   	push   %ebp
c010a0fb:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a0fd:	8b 55 08             	mov    0x8(%ebp),%edx
c010a100:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c010a105:	29 c2                	sub    %eax,%edx
c010a107:	89 d0                	mov    %edx,%eax
c010a109:	c1 f8 05             	sar    $0x5,%eax
}
c010a10c:	5d                   	pop    %ebp
c010a10d:	c3                   	ret    

c010a10e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a10e:	55                   	push   %ebp
c010a10f:	89 e5                	mov    %esp,%ebp
c010a111:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a114:	8b 45 08             	mov    0x8(%ebp),%eax
c010a117:	89 04 24             	mov    %eax,(%esp)
c010a11a:	e8 db ff ff ff       	call   c010a0fa <page2ppn>
c010a11f:	c1 e0 0c             	shl    $0xc,%eax
}
c010a122:	c9                   	leave  
c010a123:	c3                   	ret    

c010a124 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a124:	55                   	push   %ebp
c010a125:	89 e5                	mov    %esp,%ebp
c010a127:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a12a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a12d:	89 04 24             	mov    %eax,(%esp)
c010a130:	e8 d9 ff ff ff       	call   c010a10e <page2pa>
c010a135:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a138:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a13b:	c1 e8 0c             	shr    $0xc,%eax
c010a13e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a141:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c010a146:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a149:	72 23                	jb     c010a16e <page2kva+0x4a>
c010a14b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a14e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a152:	c7 44 24 08 6c fc 10 	movl   $0xc010fc6c,0x8(%esp)
c010a159:	c0 
c010a15a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a161:	00 
c010a162:	c7 04 24 8f fc 10 c0 	movl   $0xc010fc8f,(%esp)
c010a169:	e8 82 6c ff ff       	call   c0100df0 <__panic>
c010a16e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a171:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a176:	c9                   	leave  
c010a177:	c3                   	ret    

c010a178 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a178:	55                   	push   %ebp
c010a179:	89 e5                	mov    %esp,%ebp
c010a17b:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a17e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a185:	e8 c7 79 ff ff       	call   c0101b51 <ide_device_valid>
c010a18a:	85 c0                	test   %eax,%eax
c010a18c:	75 1c                	jne    c010a1aa <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a18e:	c7 44 24 08 9d fc 10 	movl   $0xc010fc9d,0x8(%esp)
c010a195:	c0 
c010a196:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a19d:	00 
c010a19e:	c7 04 24 b7 fc 10 c0 	movl   $0xc010fcb7,(%esp)
c010a1a5:	e8 46 6c ff ff       	call   c0100df0 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a1aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a1b1:	e8 da 79 ff ff       	call   c0101b90 <ide_device_size>
c010a1b6:	c1 e8 03             	shr    $0x3,%eax
c010a1b9:	a3 9c 81 1c c0       	mov    %eax,0xc01c819c
}
c010a1be:	c9                   	leave  
c010a1bf:	c3                   	ret    

c010a1c0 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a1c0:	55                   	push   %ebp
c010a1c1:	89 e5                	mov    %esp,%ebp
c010a1c3:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a1c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1c9:	89 04 24             	mov    %eax,(%esp)
c010a1cc:	e8 53 ff ff ff       	call   c010a124 <page2kva>
c010a1d1:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1d4:	c1 ea 08             	shr    $0x8,%edx
c010a1d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a1da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1de:	74 0b                	je     c010a1eb <swapfs_read+0x2b>
c010a1e0:	8b 15 9c 81 1c c0    	mov    0xc01c819c,%edx
c010a1e6:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a1e9:	72 23                	jb     c010a20e <swapfs_read+0x4e>
c010a1eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a1f2:	c7 44 24 08 c8 fc 10 	movl   $0xc010fcc8,0x8(%esp)
c010a1f9:	c0 
c010a1fa:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a201:	00 
c010a202:	c7 04 24 b7 fc 10 c0 	movl   $0xc010fcb7,(%esp)
c010a209:	e8 e2 6b ff ff       	call   c0100df0 <__panic>
c010a20e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a211:	c1 e2 03             	shl    $0x3,%edx
c010a214:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a21b:	00 
c010a21c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a220:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a224:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a22b:	e8 9f 79 ff ff       	call   c0101bcf <ide_read_secs>
}
c010a230:	c9                   	leave  
c010a231:	c3                   	ret    

c010a232 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a232:	55                   	push   %ebp
c010a233:	89 e5                	mov    %esp,%ebp
c010a235:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a238:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a23b:	89 04 24             	mov    %eax,(%esp)
c010a23e:	e8 e1 fe ff ff       	call   c010a124 <page2kva>
c010a243:	8b 55 08             	mov    0x8(%ebp),%edx
c010a246:	c1 ea 08             	shr    $0x8,%edx
c010a249:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a24c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a250:	74 0b                	je     c010a25d <swapfs_write+0x2b>
c010a252:	8b 15 9c 81 1c c0    	mov    0xc01c819c,%edx
c010a258:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a25b:	72 23                	jb     c010a280 <swapfs_write+0x4e>
c010a25d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a260:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a264:	c7 44 24 08 c8 fc 10 	movl   $0xc010fcc8,0x8(%esp)
c010a26b:	c0 
c010a26c:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a273:	00 
c010a274:	c7 04 24 b7 fc 10 c0 	movl   $0xc010fcb7,(%esp)
c010a27b:	e8 70 6b ff ff       	call   c0100df0 <__panic>
c010a280:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a283:	c1 e2 03             	shl    $0x3,%edx
c010a286:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a28d:	00 
c010a28e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a292:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a296:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a29d:	e8 6f 7b ff ff       	call   c0101e11 <ide_write_secs>
}
c010a2a2:	c9                   	leave  
c010a2a3:	c3                   	ret    

c010a2a4 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a2a4:	52                   	push   %edx
    call *%ebx              # call fn
c010a2a5:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a2a7:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a2a8:	e8 dd 0c 00 00       	call   c010af8a <do_exit>

c010a2ad <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a2ad:	55                   	push   %ebp
c010a2ae:	89 e5                	mov    %esp,%ebp
c010a2b0:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a2b3:	8b 55 10             	mov    0x10(%ebp),%edx
c010a2b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b9:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2be:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a2c1:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a2c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c7:	83 c0 08             	add    $0x8,%eax
c010a2ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a2cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2d0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a2d3:	89 50 04             	mov    %edx,0x4(%eax)
c010a2d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2d9:	8b 50 04             	mov    0x4(%eax),%edx
c010a2dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2df:	89 10                	mov    %edx,(%eax)
    return timer;
c010a2e1:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a2e4:	c9                   	leave  
c010a2e5:	c3                   	ret    

c010a2e6 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a2e6:	55                   	push   %ebp
c010a2e7:	89 e5                	mov    %esp,%ebp
c010a2e9:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a2ec:	9c                   	pushf  
c010a2ed:	58                   	pop    %eax
c010a2ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a2f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a2f4:	25 00 02 00 00       	and    $0x200,%eax
c010a2f9:	85 c0                	test   %eax,%eax
c010a2fb:	74 0c                	je     c010a309 <__intr_save+0x23>
        intr_disable();
c010a2fd:	e8 57 7d ff ff       	call   c0102059 <intr_disable>
        return 1;
c010a302:	b8 01 00 00 00       	mov    $0x1,%eax
c010a307:	eb 05                	jmp    c010a30e <__intr_save+0x28>
    }
    return 0;
c010a309:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a30e:	c9                   	leave  
c010a30f:	c3                   	ret    

c010a310 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a310:	55                   	push   %ebp
c010a311:	89 e5                	mov    %esp,%ebp
c010a313:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a316:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a31a:	74 05                	je     c010a321 <__intr_restore+0x11>
        intr_enable();
c010a31c:	e8 32 7d ff ff       	call   c0102053 <intr_enable>
    }
}
c010a321:	c9                   	leave  
c010a322:	c3                   	ret    

c010a323 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a323:	55                   	push   %ebp
c010a324:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a326:	8b 55 08             	mov    0x8(%ebp),%edx
c010a329:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c010a32e:	29 c2                	sub    %eax,%edx
c010a330:	89 d0                	mov    %edx,%eax
c010a332:	c1 f8 05             	sar    $0x5,%eax
}
c010a335:	5d                   	pop    %ebp
c010a336:	c3                   	ret    

c010a337 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a337:	55                   	push   %ebp
c010a338:	89 e5                	mov    %esp,%ebp
c010a33a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a33d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a340:	89 04 24             	mov    %eax,(%esp)
c010a343:	e8 db ff ff ff       	call   c010a323 <page2ppn>
c010a348:	c1 e0 0c             	shl    $0xc,%eax
}
c010a34b:	c9                   	leave  
c010a34c:	c3                   	ret    

c010a34d <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a34d:	55                   	push   %ebp
c010a34e:	89 e5                	mov    %esp,%ebp
c010a350:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a353:	8b 45 08             	mov    0x8(%ebp),%eax
c010a356:	c1 e8 0c             	shr    $0xc,%eax
c010a359:	89 c2                	mov    %eax,%edx
c010a35b:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c010a360:	39 c2                	cmp    %eax,%edx
c010a362:	72 1c                	jb     c010a380 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a364:	c7 44 24 08 e8 fc 10 	movl   $0xc010fce8,0x8(%esp)
c010a36b:	c0 
c010a36c:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a373:	00 
c010a374:	c7 04 24 07 fd 10 c0 	movl   $0xc010fd07,(%esp)
c010a37b:	e8 70 6a ff ff       	call   c0100df0 <__panic>
    }
    return &pages[PPN(pa)];
c010a380:	a1 f0 80 1c c0       	mov    0xc01c80f0,%eax
c010a385:	8b 55 08             	mov    0x8(%ebp),%edx
c010a388:	c1 ea 0c             	shr    $0xc,%edx
c010a38b:	c1 e2 05             	shl    $0x5,%edx
c010a38e:	01 d0                	add    %edx,%eax
}
c010a390:	c9                   	leave  
c010a391:	c3                   	ret    

c010a392 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a392:	55                   	push   %ebp
c010a393:	89 e5                	mov    %esp,%ebp
c010a395:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a398:	8b 45 08             	mov    0x8(%ebp),%eax
c010a39b:	89 04 24             	mov    %eax,(%esp)
c010a39e:	e8 94 ff ff ff       	call   c010a337 <page2pa>
c010a3a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a9:	c1 e8 0c             	shr    $0xc,%eax
c010a3ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a3af:	a1 a0 5f 1c c0       	mov    0xc01c5fa0,%eax
c010a3b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a3b7:	72 23                	jb     c010a3dc <page2kva+0x4a>
c010a3b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3bc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a3c0:	c7 44 24 08 18 fd 10 	movl   $0xc010fd18,0x8(%esp)
c010a3c7:	c0 
c010a3c8:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a3cf:	00 
c010a3d0:	c7 04 24 07 fd 10 c0 	movl   $0xc010fd07,(%esp)
c010a3d7:	e8 14 6a ff ff       	call   c0100df0 <__panic>
c010a3dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3df:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a3e4:	c9                   	leave  
c010a3e5:	c3                   	ret    

c010a3e6 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a3e6:	55                   	push   %ebp
c010a3e7:	89 e5                	mov    %esp,%ebp
c010a3e9:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a3ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3f2:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a3f9:	77 23                	ja     c010a41e <kva2page+0x38>
c010a3fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a402:	c7 44 24 08 3c fd 10 	movl   $0xc010fd3c,0x8(%esp)
c010a409:	c0 
c010a40a:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a411:	00 
c010a412:	c7 04 24 07 fd 10 c0 	movl   $0xc010fd07,(%esp)
c010a419:	e8 d2 69 ff ff       	call   c0100df0 <__panic>
c010a41e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a421:	05 00 00 00 40       	add    $0x40000000,%eax
c010a426:	89 04 24             	mov    %eax,(%esp)
c010a429:	e8 1f ff ff ff       	call   c010a34d <pa2page>
}
c010a42e:	c9                   	leave  
c010a42f:	c3                   	ret    

c010a430 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a430:	55                   	push   %ebp
c010a431:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a433:	8b 45 08             	mov    0x8(%ebp),%eax
c010a436:	8b 40 18             	mov    0x18(%eax),%eax
c010a439:	8d 50 01             	lea    0x1(%eax),%edx
c010a43c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a43f:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a442:	8b 45 08             	mov    0x8(%ebp),%eax
c010a445:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a448:	5d                   	pop    %ebp
c010a449:	c3                   	ret    

c010a44a <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a44a:	55                   	push   %ebp
c010a44b:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a44d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a450:	8b 40 18             	mov    0x18(%eax),%eax
c010a453:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a456:	8b 45 08             	mov    0x8(%ebp),%eax
c010a459:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a45c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a45f:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a462:	5d                   	pop    %ebp
c010a463:	c3                   	ret    

c010a464 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a464:	55                   	push   %ebp
c010a465:	89 e5                	mov    %esp,%ebp
c010a467:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a46a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a46e:	74 25                	je     c010a495 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a470:	8b 45 08             	mov    0x8(%ebp),%eax
c010a473:	83 c0 1c             	add    $0x1c,%eax
c010a476:	89 04 24             	mov    %eax,(%esp)
c010a479:	e8 50 f7 ff ff       	call   c0109bce <down>
        if (current != NULL) {
c010a47e:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a483:	85 c0                	test   %eax,%eax
c010a485:	74 0e                	je     c010a495 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a487:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a48c:	8b 50 04             	mov    0x4(%eax),%edx
c010a48f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a492:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a495:	c9                   	leave  
c010a496:	c3                   	ret    

c010a497 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a497:	55                   	push   %ebp
c010a498:	89 e5                	mov    %esp,%ebp
c010a49a:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a49d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a4a1:	74 18                	je     c010a4bb <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a4a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a6:	83 c0 1c             	add    $0x1c,%eax
c010a4a9:	89 04 24             	mov    %eax,(%esp)
c010a4ac:	e8 02 f7 ff ff       	call   c0109bb3 <up>
        mm->locked_by = 0;
c010a4b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4b4:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a4bb:	c9                   	leave  
c010a4bc:	c3                   	ret    

c010a4bd <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a4bd:	55                   	push   %ebp
c010a4be:	89 e5                	mov    %esp,%ebp
c010a4c0:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a4c3:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a4ca:	e8 04 a8 ff ff       	call   c0104cd3 <kmalloc>
c010a4cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a4d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a4d6:	0f 84 63 01 00 00    	je     c010a63f <alloc_proc+0x182>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010a4dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a4e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4e8:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010a4ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4f2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010a4f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4fc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010a503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a506:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010a50d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a510:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010a517:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a51a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010a521:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a524:	83 c0 1c             	add    $0x1c,%eax
c010a527:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a52e:	00 
c010a52f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a536:	00 
c010a537:	89 04 24             	mov    %eax,(%esp)
c010a53a:	e8 f2 30 00 00       	call   c010d631 <memset>
        proc->tf = NULL;
c010a53f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a542:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010a549:	8b 15 ec 80 1c c0    	mov    0xc01c80ec,%edx
c010a54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a552:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010a555:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a558:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010a55f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a562:	83 c0 48             	add    $0x48,%eax
c010a565:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a56c:	00 
c010a56d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a574:	00 
c010a575:	89 04 24             	mov    %eax,(%esp)
c010a578:	e8 b4 30 00 00       	call   c010d631 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
	proc->wait_state = 0;
c010a57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a580:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a587:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010a58a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a58d:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a594:	00 00 00 
c010a597:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a59a:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a5a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5a3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a5a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5ac:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010a5b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5b5:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->rq = NULL;
c010a5bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5be:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a5c5:	00 00 00 
        list_init(&(proc->run_link));
c010a5c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5cb:	05 a4 00 00 00       	add    $0xa4,%eax
c010a5d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a5d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a5d9:	89 50 04             	mov    %edx,0x4(%eax)
c010a5dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5df:	8b 50 04             	mov    0x4(%eax),%edx
c010a5e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5e5:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010a5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5ea:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a5f1:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010a5f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5f7:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010a5fe:	00 00 00 
c010a601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a604:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010a60a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a60d:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010a613:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a616:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010a61c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a61f:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010a625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a628:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010a62f:	00 00 00 
        proc->lab6_priority = 0;
c010a632:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a635:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010a63c:	00 00 00 
    }
    return proc;
c010a63f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a642:	c9                   	leave  
c010a643:	c3                   	ret    

c010a644 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a644:	55                   	push   %ebp
c010a645:	89 e5                	mov    %esp,%ebp
c010a647:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a64a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a64d:	83 c0 48             	add    $0x48,%eax
c010a650:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a657:	00 
c010a658:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a65f:	00 
c010a660:	89 04 24             	mov    %eax,(%esp)
c010a663:	e8 c9 2f 00 00       	call   c010d631 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a668:	8b 45 08             	mov    0x8(%ebp),%eax
c010a66b:	8d 50 48             	lea    0x48(%eax),%edx
c010a66e:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a675:	00 
c010a676:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a679:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a67d:	89 14 24             	mov    %edx,(%esp)
c010a680:	e8 8e 30 00 00       	call   c010d713 <memcpy>
}
c010a685:	c9                   	leave  
c010a686:	c3                   	ret    

c010a687 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a687:	55                   	push   %ebp
c010a688:	89 e5                	mov    %esp,%ebp
c010a68a:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a68d:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a694:	00 
c010a695:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a69c:	00 
c010a69d:	c7 04 24 80 80 1c c0 	movl   $0xc01c8080,(%esp)
c010a6a4:	e8 88 2f 00 00       	call   c010d631 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a6a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ac:	83 c0 48             	add    $0x48,%eax
c010a6af:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a6b6:	00 
c010a6b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6bb:	c7 04 24 80 80 1c c0 	movl   $0xc01c8080,(%esp)
c010a6c2:	e8 4c 30 00 00       	call   c010d713 <memcpy>
}
c010a6c7:	c9                   	leave  
c010a6c8:	c3                   	ret    

c010a6c9 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a6c9:	55                   	push   %ebp
c010a6ca:	89 e5                	mov    %esp,%ebp
c010a6cc:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a6cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d2:	83 c0 7c             	add    $0x7c,%eax
c010a6d5:	c7 45 fc bc 82 1c c0 	movl   $0xc01c82bc,-0x4(%ebp)
c010a6dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a6df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a6e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a6e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a6eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6ee:	8b 40 04             	mov    0x4(%eax),%eax
c010a6f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a6f4:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a6f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6fa:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a6fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a700:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a703:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a706:	89 10                	mov    %edx,(%eax)
c010a708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a70b:	8b 10                	mov    (%eax),%edx
c010a70d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a710:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a713:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a716:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a719:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a71c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a71f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a722:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a724:	8b 45 08             	mov    0x8(%ebp),%eax
c010a727:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a72e:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a731:	8b 45 08             	mov    0x8(%ebp),%eax
c010a734:	8b 40 14             	mov    0x14(%eax),%eax
c010a737:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a73d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a740:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a746:	8b 45 08             	mov    0x8(%ebp),%eax
c010a749:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a74f:	85 c0                	test   %eax,%eax
c010a751:	74 12                	je     c010a765 <set_links+0x9c>
        proc->optr->yptr = proc;
c010a753:	8b 45 08             	mov    0x8(%ebp),%eax
c010a756:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a75c:	8b 55 08             	mov    0x8(%ebp),%edx
c010a75f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a765:	8b 45 08             	mov    0x8(%ebp),%eax
c010a768:	8b 40 14             	mov    0x14(%eax),%eax
c010a76b:	8b 55 08             	mov    0x8(%ebp),%edx
c010a76e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010a774:	a1 60 80 1c c0       	mov    0xc01c8060,%eax
c010a779:	83 c0 01             	add    $0x1,%eax
c010a77c:	a3 60 80 1c c0       	mov    %eax,0xc01c8060
}
c010a781:	c9                   	leave  
c010a782:	c3                   	ret    

c010a783 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a783:	55                   	push   %ebp
c010a784:	89 e5                	mov    %esp,%ebp
c010a786:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a789:	8b 45 08             	mov    0x8(%ebp),%eax
c010a78c:	83 c0 7c             	add    $0x7c,%eax
c010a78f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a792:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a795:	8b 40 04             	mov    0x4(%eax),%eax
c010a798:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a79b:	8b 12                	mov    (%edx),%edx
c010a79d:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a7a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a7a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a7a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a7a9:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7af:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a7b2:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a7b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7b7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a7bd:	85 c0                	test   %eax,%eax
c010a7bf:	74 18                	je     c010a7d9 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010a7c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7c4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a7ca:	8b 55 08             	mov    0x8(%ebp),%edx
c010a7cd:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010a7d3:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010a7d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7dc:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a7e2:	85 c0                	test   %eax,%eax
c010a7e4:	74 1a                	je     c010a800 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010a7e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7e9:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a7ef:	8b 55 08             	mov    0x8(%ebp),%edx
c010a7f2:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a7f8:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a7fe:	eb 15                	jmp    c010a815 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a800:	8b 45 08             	mov    0x8(%ebp),%eax
c010a803:	8b 40 14             	mov    0x14(%eax),%eax
c010a806:	8b 55 08             	mov    0x8(%ebp),%edx
c010a809:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a80f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010a815:	a1 60 80 1c c0       	mov    0xc01c8060,%eax
c010a81a:	83 e8 01             	sub    $0x1,%eax
c010a81d:	a3 60 80 1c c0       	mov    %eax,0xc01c8060
}
c010a822:	c9                   	leave  
c010a823:	c3                   	ret    

c010a824 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a824:	55                   	push   %ebp
c010a825:	89 e5                	mov    %esp,%ebp
c010a827:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a82a:	c7 45 f8 bc 82 1c c0 	movl   $0xc01c82bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a831:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a836:	83 c0 01             	add    $0x1,%eax
c010a839:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a83e:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a843:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a848:	7e 0c                	jle    c010a856 <get_pid+0x32>
        last_pid = 1;
c010a84a:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a851:	00 00 00 
        goto inside;
c010a854:	eb 13                	jmp    c010a869 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a856:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a85c:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a861:	39 c2                	cmp    %eax,%edx
c010a863:	0f 8c ac 00 00 00    	jl     c010a915 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a869:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a870:	20 00 00 
    repeat:
        le = list;
c010a873:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a876:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a879:	eb 7f                	jmp    c010a8fa <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a87b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a87e:	83 e8 7c             	sub    $0x7c,%eax
c010a881:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a887:	8b 50 04             	mov    0x4(%eax),%edx
c010a88a:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a88f:	39 c2                	cmp    %eax,%edx
c010a891:	75 3e                	jne    c010a8d1 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a893:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a898:	83 c0 01             	add    $0x1,%eax
c010a89b:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a8a0:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a8a6:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a8ab:	39 c2                	cmp    %eax,%edx
c010a8ad:	7c 4b                	jl     c010a8fa <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a8af:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a8b4:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a8b9:	7e 0a                	jle    c010a8c5 <get_pid+0xa1>
                        last_pid = 1;
c010a8bb:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a8c2:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a8c5:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a8cc:	20 00 00 
                    goto repeat;
c010a8cf:	eb a2                	jmp    c010a873 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a8d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8d4:	8b 50 04             	mov    0x4(%eax),%edx
c010a8d7:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a8dc:	39 c2                	cmp    %eax,%edx
c010a8de:	7e 1a                	jle    c010a8fa <get_pid+0xd6>
c010a8e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e3:	8b 50 04             	mov    0x4(%eax),%edx
c010a8e6:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a8eb:	39 c2                	cmp    %eax,%edx
c010a8ed:	7d 0b                	jge    c010a8fa <get_pid+0xd6>
                next_safe = proc->pid;
c010a8ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f2:	8b 40 04             	mov    0x4(%eax),%eax
c010a8f5:	a3 88 1a 13 c0       	mov    %eax,0xc0131a88
c010a8fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a8fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a903:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a906:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a909:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a90c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a90f:	0f 85 66 ff ff ff    	jne    c010a87b <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a915:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
}
c010a91a:	c9                   	leave  
c010a91b:	c3                   	ret    

c010a91c <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a91c:	55                   	push   %ebp
c010a91d:	89 e5                	mov    %esp,%ebp
c010a91f:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010a922:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a927:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a92a:	74 63                	je     c010a98f <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a92c:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a931:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a934:	8b 45 08             	mov    0x8(%ebp),%eax
c010a937:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a93a:	e8 a7 f9 ff ff       	call   c010a2e6 <__intr_save>
c010a93f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a942:	8b 45 08             	mov    0x8(%ebp),%eax
c010a945:	a3 48 60 1c c0       	mov    %eax,0xc01c6048
            load_esp0(next->kstack + KSTACKSIZE);
c010a94a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a94d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a950:	05 00 20 00 00       	add    $0x2000,%eax
c010a955:	89 04 24             	mov    %eax,(%esp)
c010a958:	e8 9d a6 ff ff       	call   c0104ffa <load_esp0>
            lcr3(next->cr3);
c010a95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a960:	8b 40 40             	mov    0x40(%eax),%eax
c010a963:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a966:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a969:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010a96c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a96f:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a972:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a975:	83 c0 1c             	add    $0x1c,%eax
c010a978:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a97c:	89 04 24             	mov    %eax,(%esp)
c010a97f:	e8 64 16 00 00       	call   c010bfe8 <switch_to>
        }
        local_intr_restore(intr_flag);
c010a984:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a987:	89 04 24             	mov    %eax,(%esp)
c010a98a:	e8 81 f9 ff ff       	call   c010a310 <__intr_restore>
    }
}
c010a98f:	c9                   	leave  
c010a990:	c3                   	ret    

c010a991 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a991:	55                   	push   %ebp
c010a992:	89 e5                	mov    %esp,%ebp
c010a994:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010a997:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010a99c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a99f:	89 04 24             	mov    %eax,(%esp)
c010a9a2:	e8 df 80 ff ff       	call   c0102a86 <forkrets>
}
c010a9a7:	c9                   	leave  
c010a9a8:	c3                   	ret    

c010a9a9 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a9a9:	55                   	push   %ebp
c010a9aa:	89 e5                	mov    %esp,%ebp
c010a9ac:	53                   	push   %ebx
c010a9ad:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a9b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b3:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a9b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9bc:	8b 40 04             	mov    0x4(%eax),%eax
c010a9bf:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a9c6:	00 
c010a9c7:	89 04 24             	mov    %eax,(%esp)
c010a9ca:	e8 b5 21 00 00       	call   c010cb84 <hash32>
c010a9cf:	c1 e0 03             	shl    $0x3,%eax
c010a9d2:	05 60 60 1c c0       	add    $0xc01c6060,%eax
c010a9d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9da:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a9dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a9e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a9e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9ec:	8b 40 04             	mov    0x4(%eax),%eax
c010a9ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9f2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a9f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a9f8:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a9fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a9fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aa01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa04:	89 10                	mov    %edx,(%eax)
c010aa06:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aa09:	8b 10                	mov    (%eax),%edx
c010aa0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa0e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010aa11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa14:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010aa17:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010aa1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa1d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010aa20:	89 10                	mov    %edx,(%eax)
}
c010aa22:	83 c4 34             	add    $0x34,%esp
c010aa25:	5b                   	pop    %ebx
c010aa26:	5d                   	pop    %ebp
c010aa27:	c3                   	ret    

c010aa28 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010aa28:	55                   	push   %ebp
c010aa29:	89 e5                	mov    %esp,%ebp
c010aa2b:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010aa2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa31:	05 84 00 00 00       	add    $0x84,%eax
c010aa36:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010aa39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aa3c:	8b 40 04             	mov    0x4(%eax),%eax
c010aa3f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010aa42:	8b 12                	mov    (%edx),%edx
c010aa44:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010aa47:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010aa4a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aa4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa50:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010aa53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa56:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010aa59:	89 10                	mov    %edx,(%eax)
}
c010aa5b:	c9                   	leave  
c010aa5c:	c3                   	ret    

c010aa5d <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010aa5d:	55                   	push   %ebp
c010aa5e:	89 e5                	mov    %esp,%ebp
c010aa60:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010aa63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aa67:	7e 61                	jle    c010aaca <find_proc+0x6d>
c010aa69:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010aa70:	7f 58                	jg     c010aaca <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010aa72:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa75:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010aa7c:	00 
c010aa7d:	89 04 24             	mov    %eax,(%esp)
c010aa80:	e8 ff 20 00 00       	call   c010cb84 <hash32>
c010aa85:	c1 e0 03             	shl    $0x3,%eax
c010aa88:	05 60 60 1c c0       	add    $0xc01c6060,%eax
c010aa8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aa90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa93:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010aa96:	eb 1b                	jmp    c010aab3 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010aa98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa9b:	2d 84 00 00 00       	sub    $0x84,%eax
c010aaa0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010aaa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aaa6:	8b 40 04             	mov    0x4(%eax),%eax
c010aaa9:	3b 45 08             	cmp    0x8(%ebp),%eax
c010aaac:	75 05                	jne    c010aab3 <find_proc+0x56>
                return proc;
c010aaae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aab1:	eb 1c                	jmp    c010aacf <find_proc+0x72>
c010aab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab6:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010aab9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aabc:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010aabf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aac5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010aac8:	75 ce                	jne    c010aa98 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010aaca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aacf:	c9                   	leave  
c010aad0:	c3                   	ret    

c010aad1 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010aad1:	55                   	push   %ebp
c010aad2:	89 e5                	mov    %esp,%ebp
c010aad4:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010aad7:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010aade:	00 
c010aadf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aae6:	00 
c010aae7:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010aaea:	89 04 24             	mov    %eax,(%esp)
c010aaed:	e8 3f 2b 00 00       	call   c010d631 <memset>
    tf.tf_cs = KERNEL_CS;
c010aaf2:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010aaf8:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010aafe:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010ab02:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010ab06:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010ab0a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010ab0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab11:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010ab14:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab17:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010ab1a:	b8 a4 a2 10 c0       	mov    $0xc010a2a4,%eax
c010ab1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010ab22:	8b 45 10             	mov    0x10(%ebp),%eax
c010ab25:	80 cc 01             	or     $0x1,%ah
c010ab28:	89 c2                	mov    %eax,%edx
c010ab2a:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ab2d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ab31:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ab38:	00 
c010ab39:	89 14 24             	mov    %edx,(%esp)
c010ab3c:	e8 25 03 00 00       	call   c010ae66 <do_fork>
}
c010ab41:	c9                   	leave  
c010ab42:	c3                   	ret    

c010ab43 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010ab43:	55                   	push   %ebp
c010ab44:	89 e5                	mov    %esp,%ebp
c010ab46:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010ab49:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010ab50:	e8 f3 a5 ff ff       	call   c0105148 <alloc_pages>
c010ab55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010ab58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab5c:	74 1a                	je     c010ab78 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010ab5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab61:	89 04 24             	mov    %eax,(%esp)
c010ab64:	e8 29 f8 ff ff       	call   c010a392 <page2kva>
c010ab69:	89 c2                	mov    %eax,%edx
c010ab6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab6e:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010ab71:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab76:	eb 05                	jmp    c010ab7d <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010ab78:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010ab7d:	c9                   	leave  
c010ab7e:	c3                   	ret    

c010ab7f <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010ab7f:	55                   	push   %ebp
c010ab80:	89 e5                	mov    %esp,%ebp
c010ab82:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010ab85:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab88:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab8b:	89 04 24             	mov    %eax,(%esp)
c010ab8e:	e8 53 f8 ff ff       	call   c010a3e6 <kva2page>
c010ab93:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010ab9a:	00 
c010ab9b:	89 04 24             	mov    %eax,(%esp)
c010ab9e:	e8 10 a6 ff ff       	call   c01051b3 <free_pages>
}
c010aba3:	c9                   	leave  
c010aba4:	c3                   	ret    

c010aba5 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010aba5:	55                   	push   %ebp
c010aba6:	89 e5                	mov    %esp,%ebp
c010aba8:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010abab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010abb2:	e8 91 a5 ff ff       	call   c0105148 <alloc_pages>
c010abb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abbe:	75 0a                	jne    c010abca <setup_pgdir+0x25>
        return -E_NO_MEM;
c010abc0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010abc5:	e9 80 00 00 00       	jmp    c010ac4a <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010abca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abcd:	89 04 24             	mov    %eax,(%esp)
c010abd0:	e8 bd f7 ff ff       	call   c010a392 <page2kva>
c010abd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010abd8:	a1 00 1a 13 c0       	mov    0xc0131a00,%eax
c010abdd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010abe4:	00 
c010abe5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010abe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abec:	89 04 24             	mov    %eax,(%esp)
c010abef:	e8 1f 2b 00 00       	call   c010d713 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010abf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abf7:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010abfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac00:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac03:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010ac0a:	77 23                	ja     c010ac2f <setup_pgdir+0x8a>
c010ac0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ac13:	c7 44 24 08 3c fd 10 	movl   $0xc010fd3c,0x8(%esp)
c010ac1a:	c0 
c010ac1b:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010ac22:	00 
c010ac23:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010ac2a:	e8 c1 61 ff ff       	call   c0100df0 <__panic>
c010ac2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac32:	05 00 00 00 40       	add    $0x40000000,%eax
c010ac37:	83 c8 03             	or     $0x3,%eax
c010ac3a:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010ac3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ac42:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010ac45:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ac4a:	c9                   	leave  
c010ac4b:	c3                   	ret    

c010ac4c <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010ac4c:	55                   	push   %ebp
c010ac4d:	89 e5                	mov    %esp,%ebp
c010ac4f:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010ac52:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac55:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac58:	89 04 24             	mov    %eax,(%esp)
c010ac5b:	e8 86 f7 ff ff       	call   c010a3e6 <kva2page>
c010ac60:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ac67:	00 
c010ac68:	89 04 24             	mov    %eax,(%esp)
c010ac6b:	e8 43 a5 ff ff       	call   c01051b3 <free_pages>
}
c010ac70:	c9                   	leave  
c010ac71:	c3                   	ret    

c010ac72 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010ac72:	55                   	push   %ebp
c010ac73:	89 e5                	mov    %esp,%ebp
c010ac75:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010ac78:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010ac7d:	8b 40 18             	mov    0x18(%eax),%eax
c010ac80:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010ac83:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac87:	75 0a                	jne    c010ac93 <copy_mm+0x21>
        return 0;
c010ac89:	b8 00 00 00 00       	mov    $0x0,%eax
c010ac8e:	e9 f9 00 00 00       	jmp    c010ad8c <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010ac93:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac96:	25 00 01 00 00       	and    $0x100,%eax
c010ac9b:	85 c0                	test   %eax,%eax
c010ac9d:	74 08                	je     c010aca7 <copy_mm+0x35>
        mm = oldmm;
c010ac9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aca2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010aca5:	eb 78                	jmp    c010ad1f <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010aca7:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010acae:	e8 8f d2 ff ff       	call   c0107f42 <mm_create>
c010acb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acba:	75 05                	jne    c010acc1 <copy_mm+0x4f>
        goto bad_mm;
c010acbc:	e9 c8 00 00 00       	jmp    c010ad89 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010acc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acc4:	89 04 24             	mov    %eax,(%esp)
c010acc7:	e8 d9 fe ff ff       	call   c010aba5 <setup_pgdir>
c010accc:	85 c0                	test   %eax,%eax
c010acce:	74 05                	je     c010acd5 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010acd0:	e9 a9 00 00 00       	jmp    c010ad7e <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010acd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acd8:	89 04 24             	mov    %eax,(%esp)
c010acdb:	e8 84 f7 ff ff       	call   c010a464 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010ace0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ace3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ace7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acea:	89 04 24             	mov    %eax,(%esp)
c010aced:	e8 73 d7 ff ff       	call   c0108465 <dup_mmap>
c010acf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010acf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acf8:	89 04 24             	mov    %eax,(%esp)
c010acfb:	e8 97 f7 ff ff       	call   c010a497 <unlock_mm>

    if (ret != 0) {
c010ad00:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad04:	74 19                	je     c010ad1f <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010ad06:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010ad07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad0a:	89 04 24             	mov    %eax,(%esp)
c010ad0d:	e8 54 d8 ff ff       	call   c0108566 <exit_mmap>
    put_pgdir(mm);
c010ad12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad15:	89 04 24             	mov    %eax,(%esp)
c010ad18:	e8 2f ff ff ff       	call   c010ac4c <put_pgdir>
c010ad1d:	eb 5f                	jmp    c010ad7e <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010ad1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad22:	89 04 24             	mov    %eax,(%esp)
c010ad25:	e8 06 f7 ff ff       	call   c010a430 <mm_count_inc>
    proc->mm = mm;
c010ad2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad30:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010ad33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad36:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad39:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ad3c:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010ad43:	77 23                	ja     c010ad68 <copy_mm+0xf6>
c010ad45:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad48:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ad4c:	c7 44 24 08 3c fd 10 	movl   $0xc010fd3c,0x8(%esp)
c010ad53:	c0 
c010ad54:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c010ad5b:	00 
c010ad5c:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010ad63:	e8 88 60 ff ff       	call   c0100df0 <__panic>
c010ad68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad6b:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010ad71:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad74:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010ad77:	b8 00 00 00 00       	mov    $0x0,%eax
c010ad7c:	eb 0e                	jmp    c010ad8c <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ad7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad81:	89 04 24             	mov    %eax,(%esp)
c010ad84:	e8 1e d5 ff ff       	call   c01082a7 <mm_destroy>
bad_mm:
    return ret;
c010ad89:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ad8c:	c9                   	leave  
c010ad8d:	c3                   	ret    

c010ad8e <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010ad8e:	55                   	push   %ebp
c010ad8f:	89 e5                	mov    %esp,%ebp
c010ad91:	57                   	push   %edi
c010ad92:	56                   	push   %esi
c010ad93:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010ad94:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad97:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad9a:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010ad9f:	89 c2                	mov    %eax,%edx
c010ada1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada4:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010ada7:	8b 45 08             	mov    0x8(%ebp),%eax
c010adaa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adad:	8b 55 10             	mov    0x10(%ebp),%edx
c010adb0:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010adb5:	89 c1                	mov    %eax,%ecx
c010adb7:	83 e1 01             	and    $0x1,%ecx
c010adba:	85 c9                	test   %ecx,%ecx
c010adbc:	74 0e                	je     c010adcc <copy_thread+0x3e>
c010adbe:	0f b6 0a             	movzbl (%edx),%ecx
c010adc1:	88 08                	mov    %cl,(%eax)
c010adc3:	83 c0 01             	add    $0x1,%eax
c010adc6:	83 c2 01             	add    $0x1,%edx
c010adc9:	83 eb 01             	sub    $0x1,%ebx
c010adcc:	89 c1                	mov    %eax,%ecx
c010adce:	83 e1 02             	and    $0x2,%ecx
c010add1:	85 c9                	test   %ecx,%ecx
c010add3:	74 0f                	je     c010ade4 <copy_thread+0x56>
c010add5:	0f b7 0a             	movzwl (%edx),%ecx
c010add8:	66 89 08             	mov    %cx,(%eax)
c010addb:	83 c0 02             	add    $0x2,%eax
c010adde:	83 c2 02             	add    $0x2,%edx
c010ade1:	83 eb 02             	sub    $0x2,%ebx
c010ade4:	89 d9                	mov    %ebx,%ecx
c010ade6:	c1 e9 02             	shr    $0x2,%ecx
c010ade9:	89 c7                	mov    %eax,%edi
c010adeb:	89 d6                	mov    %edx,%esi
c010aded:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010adef:	89 f2                	mov    %esi,%edx
c010adf1:	89 f8                	mov    %edi,%eax
c010adf3:	b9 00 00 00 00       	mov    $0x0,%ecx
c010adf8:	89 de                	mov    %ebx,%esi
c010adfa:	83 e6 02             	and    $0x2,%esi
c010adfd:	85 f6                	test   %esi,%esi
c010adff:	74 0b                	je     c010ae0c <copy_thread+0x7e>
c010ae01:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010ae05:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010ae09:	83 c1 02             	add    $0x2,%ecx
c010ae0c:	83 e3 01             	and    $0x1,%ebx
c010ae0f:	85 db                	test   %ebx,%ebx
c010ae11:	74 07                	je     c010ae1a <copy_thread+0x8c>
c010ae13:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010ae17:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010ae1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae1d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae20:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010ae27:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae2a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae2d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae30:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010ae33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae36:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae39:	8b 55 08             	mov    0x8(%ebp),%edx
c010ae3c:	8b 52 3c             	mov    0x3c(%edx),%edx
c010ae3f:	8b 52 40             	mov    0x40(%edx),%edx
c010ae42:	80 ce 02             	or     $0x2,%dh
c010ae45:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010ae48:	ba 91 a9 10 c0       	mov    $0xc010a991,%edx
c010ae4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae50:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010ae53:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae56:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae59:	89 c2                	mov    %eax,%edx
c010ae5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae5e:	89 50 20             	mov    %edx,0x20(%eax)
}
c010ae61:	5b                   	pop    %ebx
c010ae62:	5e                   	pop    %esi
c010ae63:	5f                   	pop    %edi
c010ae64:	5d                   	pop    %ebp
c010ae65:	c3                   	ret    

c010ae66 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ae66:	55                   	push   %ebp
c010ae67:	89 e5                	mov    %esp,%ebp
c010ae69:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010ae6c:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ae73:	a1 60 80 1c c0       	mov    0xc01c8060,%eax
c010ae78:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ae7d:	7e 05                	jle    c010ae84 <do_fork+0x1e>
        goto fork_out;
c010ae7f:	e9 f2 00 00 00       	jmp    c010af76 <do_fork+0x110>
    }
    ret = -E_NO_MEM;
c010ae84:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	if((proc=alloc_proc())==NULL){
c010ae8b:	e8 2d f6 ff ff       	call   c010a4bd <alloc_proc>
c010ae90:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae97:	75 05                	jne    c010ae9e <do_fork+0x38>
		goto fork_out;
c010ae99:	e9 d8 00 00 00       	jmp    c010af76 <do_fork+0x110>
	}
	proc->parent = current;
c010ae9e:	8b 15 48 60 1c c0    	mov    0xc01c6048,%edx
c010aea4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aea7:	89 50 14             	mov    %edx,0x14(%eax)
	assert(current->wait_state == 0);
c010aeaa:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010aeaf:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010aeb5:	85 c0                	test   %eax,%eax
c010aeb7:	74 24                	je     c010aedd <do_fork+0x77>
c010aeb9:	c7 44 24 0c 74 fd 10 	movl   $0xc010fd74,0xc(%esp)
c010aec0:	c0 
c010aec1:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010aec8:	c0 
c010aec9:	c7 44 24 04 b8 01 00 	movl   $0x1b8,0x4(%esp)
c010aed0:	00 
c010aed1:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010aed8:	e8 13 5f ff ff       	call   c0100df0 <__panic>

    if (setup_kstack(proc) != 0) {
c010aedd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aee0:	89 04 24             	mov    %eax,(%esp)
c010aee3:	e8 5b fc ff ff       	call   c010ab43 <setup_kstack>
c010aee8:	85 c0                	test   %eax,%eax
c010aeea:	74 05                	je     c010aef1 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010aeec:	e9 8a 00 00 00       	jmp    c010af7b <do_fork+0x115>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010aef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aef4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
c010aefb:	89 04 24             	mov    %eax,(%esp)
c010aefe:	e8 6f fd ff ff       	call   c010ac72 <copy_mm>
c010af03:	85 c0                	test   %eax,%eax
c010af05:	74 0e                	je     c010af15 <do_fork+0xaf>
        goto bad_fork_cleanup_kstack;
c010af07:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010af08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af0b:	89 04 24             	mov    %eax,(%esp)
c010af0e:	e8 6c fc ff ff       	call   c010ab7f <put_kstack>
c010af13:	eb 66                	jmp    c010af7b <do_fork+0x115>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c010af15:	8b 45 10             	mov    0x10(%ebp),%eax
c010af18:	89 44 24 08          	mov    %eax,0x8(%esp)
c010af1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af26:	89 04 24             	mov    %eax,(%esp)
c010af29:	e8 60 fe ff ff       	call   c010ad8e <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010af2e:	e8 b3 f3 ff ff       	call   c010a2e6 <__intr_save>
c010af33:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010af36:	e8 e9 f8 ff ff       	call   c010a824 <get_pid>
c010af3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af3e:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010af41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af44:	89 04 24             	mov    %eax,(%esp)
c010af47:	e8 5d fa ff ff       	call   c010a9a9 <hash_proc>
        //list_add(&proc_list, &(proc->list_link));
        //nr_process ++;
		set_links(proc);
c010af4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af4f:	89 04 24             	mov    %eax,(%esp)
c010af52:	e8 72 f7 ff ff       	call   c010a6c9 <set_links>
    }
    local_intr_restore(intr_flag);
c010af57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af5a:	89 04 24             	mov    %eax,(%esp)
c010af5d:	e8 ae f3 ff ff       	call   c010a310 <__intr_restore>

    wakeup_proc(proc);
c010af62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af65:	89 04 24             	mov    %eax,(%esp)
c010af68:	e8 6f 15 00 00       	call   c010c4dc <wakeup_proc>

    ret = proc->pid;
c010af6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af70:	8b 40 04             	mov    0x4(%eax),%eax
c010af73:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010af76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af79:	eb 0d                	jmp    c010af88 <do_fork+0x122>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010af7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af7e:	89 04 24             	mov    %eax,(%esp)
c010af81:	e8 68 9d ff ff       	call   c0104cee <kfree>
    goto fork_out;
c010af86:	eb ee                	jmp    c010af76 <do_fork+0x110>
}
c010af88:	c9                   	leave  
c010af89:	c3                   	ret    

c010af8a <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010af8a:	55                   	push   %ebp
c010af8b:	89 e5                	mov    %esp,%ebp
c010af8d:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010af90:	8b 15 48 60 1c c0    	mov    0xc01c6048,%edx
c010af96:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010af9b:	39 c2                	cmp    %eax,%edx
c010af9d:	75 1c                	jne    c010afbb <do_exit+0x31>
        panic("idleproc exit.\n");
c010af9f:	c7 44 24 08 a2 fd 10 	movl   $0xc010fda2,0x8(%esp)
c010afa6:	c0 
c010afa7:	c7 44 24 04 e1 01 00 	movl   $0x1e1,0x4(%esp)
c010afae:	00 
c010afaf:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010afb6:	e8 35 5e ff ff       	call   c0100df0 <__panic>
    }
    if (current == initproc) {
c010afbb:	8b 15 48 60 1c c0    	mov    0xc01c6048,%edx
c010afc1:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010afc6:	39 c2                	cmp    %eax,%edx
c010afc8:	75 1c                	jne    c010afe6 <do_exit+0x5c>
        panic("initproc exit.\n");
c010afca:	c7 44 24 08 b2 fd 10 	movl   $0xc010fdb2,0x8(%esp)
c010afd1:	c0 
c010afd2:	c7 44 24 04 e4 01 00 	movl   $0x1e4,0x4(%esp)
c010afd9:	00 
c010afda:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010afe1:	e8 0a 5e ff ff       	call   c0100df0 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010afe6:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010afeb:	8b 40 18             	mov    0x18(%eax),%eax
c010afee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010aff1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aff5:	74 4a                	je     c010b041 <do_exit+0xb7>
        lcr3(boot_cr3);
c010aff7:	a1 ec 80 1c c0       	mov    0xc01c80ec,%eax
c010affc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010afff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b002:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b005:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b008:	89 04 24             	mov    %eax,(%esp)
c010b00b:	e8 3a f4 ff ff       	call   c010a44a <mm_count_dec>
c010b010:	85 c0                	test   %eax,%eax
c010b012:	75 21                	jne    c010b035 <do_exit+0xab>
            exit_mmap(mm);
c010b014:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b017:	89 04 24             	mov    %eax,(%esp)
c010b01a:	e8 47 d5 ff ff       	call   c0108566 <exit_mmap>
            put_pgdir(mm);
c010b01f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b022:	89 04 24             	mov    %eax,(%esp)
c010b025:	e8 22 fc ff ff       	call   c010ac4c <put_pgdir>
            mm_destroy(mm);
c010b02a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b02d:	89 04 24             	mov    %eax,(%esp)
c010b030:	e8 72 d2 ff ff       	call   c01082a7 <mm_destroy>
        }
        current->mm = NULL;
c010b035:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b03a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b041:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b046:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b04c:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b051:	8b 55 08             	mov    0x8(%ebp),%edx
c010b054:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b05a:	e8 87 f2 ff ff       	call   c010a2e6 <__intr_save>
c010b05f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b062:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b067:	8b 40 14             	mov    0x14(%eax),%eax
c010b06a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b06d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b070:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b076:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b07b:	75 10                	jne    c010b08d <do_exit+0x103>
            wakeup_proc(proc);
c010b07d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b080:	89 04 24             	mov    %eax,(%esp)
c010b083:	e8 54 14 00 00       	call   c010c4dc <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b088:	e9 ac 00 00 00       	jmp    c010b139 <do_exit+0x1af>
c010b08d:	e9 a7 00 00 00       	jmp    c010b139 <do_exit+0x1af>
            proc = current->cptr;
c010b092:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b097:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b09d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b0a0:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b0a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b0a8:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b0ae:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010b0b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0b7:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b0be:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b0c1:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010b0c6:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b0cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0cf:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b0d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0d8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b0de:	85 c0                	test   %eax,%eax
c010b0e0:	74 14                	je     c010b0f6 <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010b0e2:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010b0e7:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b0ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b0f0:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b0f6:	8b 15 44 60 1c c0    	mov    0xc01c6044,%edx
c010b0fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0ff:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b102:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010b107:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b10a:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b110:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b113:	8b 00                	mov    (%eax),%eax
c010b115:	83 f8 03             	cmp    $0x3,%eax
c010b118:	75 1f                	jne    c010b139 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010b11a:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010b11f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b125:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b12a:	75 0d                	jne    c010b139 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010b12c:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010b131:	89 04 24             	mov    %eax,(%esp)
c010b134:	e8 a3 13 00 00       	call   c010c4dc <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b139:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b13e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b144:	85 c0                	test   %eax,%eax
c010b146:	0f 85 46 ff ff ff    	jne    c010b092 <do_exit+0x108>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b14c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b14f:	89 04 24             	mov    %eax,(%esp)
c010b152:	e8 b9 f1 ff ff       	call   c010a310 <__intr_restore>
    
    schedule();
c010b157:	e8 1c 14 00 00       	call   c010c578 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b15c:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b161:	8b 40 04             	mov    0x4(%eax),%eax
c010b164:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b168:	c7 44 24 08 c4 fd 10 	movl   $0xc010fdc4,0x8(%esp)
c010b16f:	c0 
c010b170:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c010b177:	00 
c010b178:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b17f:	e8 6c 5c ff ff       	call   c0100df0 <__panic>

c010b184 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b184:	55                   	push   %ebp
c010b185:	89 e5                	mov    %esp,%ebp
c010b187:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b18a:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b18f:	8b 40 18             	mov    0x18(%eax),%eax
c010b192:	85 c0                	test   %eax,%eax
c010b194:	74 1c                	je     c010b1b2 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b196:	c7 44 24 08 e4 fd 10 	movl   $0xc010fde4,0x8(%esp)
c010b19d:	c0 
c010b19e:	c7 44 24 04 1a 02 00 	movl   $0x21a,0x4(%esp)
c010b1a5:	00 
c010b1a6:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b1ad:	e8 3e 5c ff ff       	call   c0100df0 <__panic>
    }

    int ret = -E_NO_MEM;
c010b1b2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b1b9:	e8 84 cd ff ff       	call   c0107f42 <mm_create>
c010b1be:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b1c1:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b1c5:	75 06                	jne    c010b1cd <load_icode+0x49>
        goto bad_mm;
c010b1c7:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b1c8:	e9 ef 05 00 00       	jmp    c010b7bc <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b1cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b1d0:	89 04 24             	mov    %eax,(%esp)
c010b1d3:	e8 cd f9 ff ff       	call   c010aba5 <setup_pgdir>
c010b1d8:	85 c0                	test   %eax,%eax
c010b1da:	74 05                	je     c010b1e1 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b1dc:	e9 f6 05 00 00       	jmp    c010b7d7 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b1e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b1ea:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b1ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1f0:	01 d0                	add    %edx,%eax
c010b1f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b1f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b1f8:	8b 00                	mov    (%eax),%eax
c010b1fa:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b1ff:	74 0c                	je     c010b20d <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b201:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b208:	e9 bf 05 00 00       	jmp    c010b7cc <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b20d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b210:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b214:	0f b7 c0             	movzwl %ax,%eax
c010b217:	c1 e0 05             	shl    $0x5,%eax
c010b21a:	89 c2                	mov    %eax,%edx
c010b21c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b21f:	01 d0                	add    %edx,%eax
c010b221:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b224:	e9 13 03 00 00       	jmp    c010b53c <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b229:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b22c:	8b 00                	mov    (%eax),%eax
c010b22e:	83 f8 01             	cmp    $0x1,%eax
c010b231:	74 05                	je     c010b238 <load_icode+0xb4>
            continue ;
c010b233:	e9 00 03 00 00       	jmp    c010b538 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b238:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b23b:	8b 50 10             	mov    0x10(%eax),%edx
c010b23e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b241:	8b 40 14             	mov    0x14(%eax),%eax
c010b244:	39 c2                	cmp    %eax,%edx
c010b246:	76 0c                	jbe    c010b254 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b248:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b24f:	e9 6d 05 00 00       	jmp    c010b7c1 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b254:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b257:	8b 40 10             	mov    0x10(%eax),%eax
c010b25a:	85 c0                	test   %eax,%eax
c010b25c:	75 05                	jne    c010b263 <load_icode+0xdf>
            continue ;
c010b25e:	e9 d5 02 00 00       	jmp    c010b538 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b263:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b26a:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b271:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b274:	8b 40 18             	mov    0x18(%eax),%eax
c010b277:	83 e0 01             	and    $0x1,%eax
c010b27a:	85 c0                	test   %eax,%eax
c010b27c:	74 04                	je     c010b282 <load_icode+0xfe>
c010b27e:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b282:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b285:	8b 40 18             	mov    0x18(%eax),%eax
c010b288:	83 e0 02             	and    $0x2,%eax
c010b28b:	85 c0                	test   %eax,%eax
c010b28d:	74 04                	je     c010b293 <load_icode+0x10f>
c010b28f:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b293:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b296:	8b 40 18             	mov    0x18(%eax),%eax
c010b299:	83 e0 04             	and    $0x4,%eax
c010b29c:	85 c0                	test   %eax,%eax
c010b29e:	74 04                	je     c010b2a4 <load_icode+0x120>
c010b2a0:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b2a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2a7:	83 e0 02             	and    $0x2,%eax
c010b2aa:	85 c0                	test   %eax,%eax
c010b2ac:	74 04                	je     c010b2b2 <load_icode+0x12e>
c010b2ae:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b2b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2b5:	8b 50 14             	mov    0x14(%eax),%edx
c010b2b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2bb:	8b 40 08             	mov    0x8(%eax),%eax
c010b2be:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b2c5:	00 
c010b2c6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b2c9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b2cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b2d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2d8:	89 04 24             	mov    %eax,(%esp)
c010b2db:	e8 69 d0 ff ff       	call   c0108349 <mm_map>
c010b2e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b2e7:	74 05                	je     c010b2ee <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b2e9:	e9 d3 04 00 00       	jmp    c010b7c1 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010b2ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2f1:	8b 50 04             	mov    0x4(%eax),%edx
c010b2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2f7:	01 d0                	add    %edx,%eax
c010b2f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b2fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2ff:	8b 40 08             	mov    0x8(%eax),%eax
c010b302:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b305:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b308:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b30b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b30e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b313:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b316:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b31d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b320:	8b 50 08             	mov    0x8(%eax),%edx
c010b323:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b326:	8b 40 10             	mov    0x10(%eax),%eax
c010b329:	01 d0                	add    %edx,%eax
c010b32b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b32e:	e9 90 00 00 00       	jmp    c010b3c3 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b333:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b336:	8b 40 0c             	mov    0xc(%eax),%eax
c010b339:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b33c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b340:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b343:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b347:	89 04 24             	mov    %eax,(%esp)
c010b34a:	e8 47 ac ff ff       	call   c0105f96 <pgdir_alloc_page>
c010b34f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b352:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b356:	75 05                	jne    c010b35d <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b358:	e9 64 04 00 00       	jmp    c010b7c1 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b35d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b360:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b363:	29 c2                	sub    %eax,%edx
c010b365:	89 d0                	mov    %edx,%eax
c010b367:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b36a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b36f:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b372:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b375:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b37c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b37f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b382:	73 0d                	jae    c010b391 <load_icode+0x20d>
                size -= la - end;
c010b384:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b387:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b38a:	29 c2                	sub    %eax,%edx
c010b38c:	89 d0                	mov    %edx,%eax
c010b38e:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b391:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b394:	89 04 24             	mov    %eax,(%esp)
c010b397:	e8 f6 ef ff ff       	call   c010a392 <page2kva>
c010b39c:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b39f:	01 c2                	add    %eax,%edx
c010b3a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3a4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b3a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b3ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3af:	89 14 24             	mov    %edx,(%esp)
c010b3b2:	e8 5c 23 00 00       	call   c010d713 <memcpy>
            start += size, from += size;
c010b3b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3ba:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b3bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3c0:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b3c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b3c6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b3c9:	0f 82 64 ff ff ff    	jb     c010b333 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b3cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3d2:	8b 50 08             	mov    0x8(%eax),%edx
c010b3d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3d8:	8b 40 14             	mov    0x14(%eax),%eax
c010b3db:	01 d0                	add    %edx,%eax
c010b3dd:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b3e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b3e3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b3e6:	0f 83 b0 00 00 00    	jae    c010b49c <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b3ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b3ef:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b3f2:	75 05                	jne    c010b3f9 <load_icode+0x275>
                continue ;
c010b3f4:	e9 3f 01 00 00       	jmp    c010b538 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b3f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b3fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b3ff:	29 c2                	sub    %eax,%edx
c010b401:	89 d0                	mov    %edx,%eax
c010b403:	05 00 10 00 00       	add    $0x1000,%eax
c010b408:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b40b:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b410:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b413:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b416:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b419:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b41c:	73 0d                	jae    c010b42b <load_icode+0x2a7>
                size -= la - end;
c010b41e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b421:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b424:	29 c2                	sub    %eax,%edx
c010b426:	89 d0                	mov    %edx,%eax
c010b428:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b42b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b42e:	89 04 24             	mov    %eax,(%esp)
c010b431:	e8 5c ef ff ff       	call   c010a392 <page2kva>
c010b436:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b439:	01 c2                	add    %eax,%edx
c010b43b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b43e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b442:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b449:	00 
c010b44a:	89 14 24             	mov    %edx,(%esp)
c010b44d:	e8 df 21 00 00       	call   c010d631 <memset>
            start += size;
c010b452:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b455:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b458:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b45b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b45e:	73 08                	jae    c010b468 <load_icode+0x2e4>
c010b460:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b463:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b466:	74 34                	je     c010b49c <load_icode+0x318>
c010b468:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b46b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b46e:	72 08                	jb     c010b478 <load_icode+0x2f4>
c010b470:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b473:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b476:	74 24                	je     c010b49c <load_icode+0x318>
c010b478:	c7 44 24 0c 0c fe 10 	movl   $0xc010fe0c,0xc(%esp)
c010b47f:	c0 
c010b480:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010b487:	c0 
c010b488:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c010b48f:	00 
c010b490:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b497:	e8 54 59 ff ff       	call   c0100df0 <__panic>
        }
        while (start < end) {
c010b49c:	e9 8b 00 00 00       	jmp    c010b52c <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b4a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4a4:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b4aa:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b4b1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4b5:	89 04 24             	mov    %eax,(%esp)
c010b4b8:	e8 d9 aa ff ff       	call   c0105f96 <pgdir_alloc_page>
c010b4bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b4c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b4c4:	75 05                	jne    c010b4cb <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b4c6:	e9 f6 02 00 00       	jmp    c010b7c1 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b4cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b4ce:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b4d1:	29 c2                	sub    %eax,%edx
c010b4d3:	89 d0                	mov    %edx,%eax
c010b4d5:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b4d8:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b4dd:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b4e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b4e3:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b4ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b4ed:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b4f0:	73 0d                	jae    c010b4ff <load_icode+0x37b>
                size -= la - end;
c010b4f2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b4f5:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b4f8:	29 c2                	sub    %eax,%edx
c010b4fa:	89 d0                	mov    %edx,%eax
c010b4fc:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b4ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b502:	89 04 24             	mov    %eax,(%esp)
c010b505:	e8 88 ee ff ff       	call   c010a392 <page2kva>
c010b50a:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b50d:	01 c2                	add    %eax,%edx
c010b50f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b512:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b516:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b51d:	00 
c010b51e:	89 14 24             	mov    %edx,(%esp)
c010b521:	e8 0b 21 00 00       	call   c010d631 <memset>
            start += size;
c010b526:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b529:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b52c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b52f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b532:	0f 82 69 ff ff ff    	jb     c010b4a1 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b538:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b53c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b53f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b542:	0f 82 e1 fc ff ff    	jb     c010b229 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b548:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b54f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b556:	00 
c010b557:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b55a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b55e:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b565:	00 
c010b566:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b56d:	af 
c010b56e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b571:	89 04 24             	mov    %eax,(%esp)
c010b574:	e8 d0 cd ff ff       	call   c0108349 <mm_map>
c010b579:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b57c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b580:	74 05                	je     c010b587 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b582:	e9 3a 02 00 00       	jmp    c010b7c1 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b587:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b58a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b58d:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b594:	00 
c010b595:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b59c:	af 
c010b59d:	89 04 24             	mov    %eax,(%esp)
c010b5a0:	e8 f1 a9 ff ff       	call   c0105f96 <pgdir_alloc_page>
c010b5a5:	85 c0                	test   %eax,%eax
c010b5a7:	75 24                	jne    c010b5cd <load_icode+0x449>
c010b5a9:	c7 44 24 0c 48 fe 10 	movl   $0xc010fe48,0xc(%esp)
c010b5b0:	c0 
c010b5b1:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010b5b8:	c0 
c010b5b9:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010b5c0:	00 
c010b5c1:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b5c8:	e8 23 58 ff ff       	call   c0100df0 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b5cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b5d0:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5d3:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b5da:	00 
c010b5db:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b5e2:	af 
c010b5e3:	89 04 24             	mov    %eax,(%esp)
c010b5e6:	e8 ab a9 ff ff       	call   c0105f96 <pgdir_alloc_page>
c010b5eb:	85 c0                	test   %eax,%eax
c010b5ed:	75 24                	jne    c010b613 <load_icode+0x48f>
c010b5ef:	c7 44 24 0c 8c fe 10 	movl   $0xc010fe8c,0xc(%esp)
c010b5f6:	c0 
c010b5f7:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010b5fe:	c0 
c010b5ff:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010b606:	00 
c010b607:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b60e:	e8 dd 57 ff ff       	call   c0100df0 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b613:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b616:	8b 40 0c             	mov    0xc(%eax),%eax
c010b619:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b620:	00 
c010b621:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b628:	af 
c010b629:	89 04 24             	mov    %eax,(%esp)
c010b62c:	e8 65 a9 ff ff       	call   c0105f96 <pgdir_alloc_page>
c010b631:	85 c0                	test   %eax,%eax
c010b633:	75 24                	jne    c010b659 <load_icode+0x4d5>
c010b635:	c7 44 24 0c d0 fe 10 	movl   $0xc010fed0,0xc(%esp)
c010b63c:	c0 
c010b63d:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010b644:	c0 
c010b645:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010b64c:	00 
c010b64d:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b654:	e8 97 57 ff ff       	call   c0100df0 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b659:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b65c:	8b 40 0c             	mov    0xc(%eax),%eax
c010b65f:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b666:	00 
c010b667:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b66e:	af 
c010b66f:	89 04 24             	mov    %eax,(%esp)
c010b672:	e8 1f a9 ff ff       	call   c0105f96 <pgdir_alloc_page>
c010b677:	85 c0                	test   %eax,%eax
c010b679:	75 24                	jne    c010b69f <load_icode+0x51b>
c010b67b:	c7 44 24 0c 14 ff 10 	movl   $0xc010ff14,0xc(%esp)
c010b682:	c0 
c010b683:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010b68a:	c0 
c010b68b:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010b692:	00 
c010b693:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b69a:	e8 51 57 ff ff       	call   c0100df0 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b69f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6a2:	89 04 24             	mov    %eax,(%esp)
c010b6a5:	e8 86 ed ff ff       	call   c010a430 <mm_count_inc>
    current->mm = mm;
c010b6aa:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b6af:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b6b2:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b6b5:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b6ba:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b6bd:	8b 52 0c             	mov    0xc(%edx),%edx
c010b6c0:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b6c3:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b6ca:	77 23                	ja     c010b6ef <load_icode+0x56b>
c010b6cc:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b6cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b6d3:	c7 44 24 08 3c fd 10 	movl   $0xc010fd3c,0x8(%esp)
c010b6da:	c0 
c010b6db:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c010b6e2:	00 
c010b6e3:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b6ea:	e8 01 57 ff ff       	call   c0100df0 <__panic>
c010b6ef:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b6f2:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b6f8:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b6fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6fe:	8b 40 0c             	mov    0xc(%eax),%eax
c010b701:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b704:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b70b:	77 23                	ja     c010b730 <load_icode+0x5ac>
c010b70d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b710:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b714:	c7 44 24 08 3c fd 10 	movl   $0xc010fd3c,0x8(%esp)
c010b71b:	c0 
c010b71c:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010b723:	00 
c010b724:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b72b:	e8 c0 56 ff ff       	call   c0100df0 <__panic>
c010b730:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b733:	05 00 00 00 40       	add    $0x40000000,%eax
c010b738:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b73b:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b73e:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b741:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b746:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b749:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b74c:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b753:	00 
c010b754:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b75b:	00 
c010b75c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b75f:	89 04 24             	mov    %eax,(%esp)
c010b762:	e8 ca 1e 00 00       	call   c010d631 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b767:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b76a:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b770:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b773:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b779:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b77c:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b780:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b783:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b787:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b78a:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b78e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b791:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b795:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b798:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b79f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7a2:	8b 50 18             	mov    0x18(%eax),%edx
c010b7a5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b7a8:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b7ab:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b7ae:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b7b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b7bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7bf:	eb 23                	jmp    c010b7e4 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010b7c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7c4:	89 04 24             	mov    %eax,(%esp)
c010b7c7:	e8 9a cd ff ff       	call   c0108566 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b7cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7cf:	89 04 24             	mov    %eax,(%esp)
c010b7d2:	e8 75 f4 ff ff       	call   c010ac4c <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b7d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7da:	89 04 24             	mov    %eax,(%esp)
c010b7dd:	e8 c5 ca ff ff       	call   c01082a7 <mm_destroy>
bad_mm:
    goto out;
c010b7e2:	eb d8                	jmp    c010b7bc <load_icode+0x638>
}
c010b7e4:	c9                   	leave  
c010b7e5:	c3                   	ret    

c010b7e6 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b7e6:	55                   	push   %ebp
c010b7e7:	89 e5                	mov    %esp,%ebp
c010b7e9:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010b7ec:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b7f1:	8b 40 18             	mov    0x18(%eax),%eax
c010b7f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b7f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7fa:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b801:	00 
c010b802:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b805:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b809:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b810:	89 04 24             	mov    %eax,(%esp)
c010b813:	e8 f2 d7 ff ff       	call   c010900a <user_mem_check>
c010b818:	85 c0                	test   %eax,%eax
c010b81a:	75 0a                	jne    c010b826 <do_execve+0x40>
        return -E_INVAL;
c010b81c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b821:	e9 f4 00 00 00       	jmp    c010b91a <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010b826:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010b82a:	76 07                	jbe    c010b833 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010b82c:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b833:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010b83a:	00 
c010b83b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b842:	00 
c010b843:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b846:	89 04 24             	mov    %eax,(%esp)
c010b849:	e8 e3 1d 00 00       	call   c010d631 <memset>
    memcpy(local_name, name, len);
c010b84e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b851:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b855:	8b 45 08             	mov    0x8(%ebp),%eax
c010b858:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b85c:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b85f:	89 04 24             	mov    %eax,(%esp)
c010b862:	e8 ac 1e 00 00       	call   c010d713 <memcpy>

    if (mm != NULL) {
c010b867:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b86b:	74 4a                	je     c010b8b7 <do_execve+0xd1>
        lcr3(boot_cr3);
c010b86d:	a1 ec 80 1c c0       	mov    0xc01c80ec,%eax
c010b872:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b875:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b878:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b87b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b87e:	89 04 24             	mov    %eax,(%esp)
c010b881:	e8 c4 eb ff ff       	call   c010a44a <mm_count_dec>
c010b886:	85 c0                	test   %eax,%eax
c010b888:	75 21                	jne    c010b8ab <do_execve+0xc5>
            exit_mmap(mm);
c010b88a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b88d:	89 04 24             	mov    %eax,(%esp)
c010b890:	e8 d1 cc ff ff       	call   c0108566 <exit_mmap>
            put_pgdir(mm);
c010b895:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b898:	89 04 24             	mov    %eax,(%esp)
c010b89b:	e8 ac f3 ff ff       	call   c010ac4c <put_pgdir>
            mm_destroy(mm);
c010b8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8a3:	89 04 24             	mov    %eax,(%esp)
c010b8a6:	e8 fc c9 ff ff       	call   c01082a7 <mm_destroy>
        }
        current->mm = NULL;
c010b8ab:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b8b0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b8b7:	8b 45 14             	mov    0x14(%ebp),%eax
c010b8ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8be:	8b 45 10             	mov    0x10(%ebp),%eax
c010b8c1:	89 04 24             	mov    %eax,(%esp)
c010b8c4:	e8 bb f8 ff ff       	call   c010b184 <load_icode>
c010b8c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b8cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8d0:	74 2f                	je     c010b901 <do_execve+0x11b>
        goto execve_exit;
c010b8d2:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8d6:	89 04 24             	mov    %eax,(%esp)
c010b8d9:	e8 ac f6 ff ff       	call   c010af8a <do_exit>
    panic("already exit: %e.\n", ret);
c010b8de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b8e5:	c7 44 24 08 57 ff 10 	movl   $0xc010ff57,0x8(%esp)
c010b8ec:	c0 
c010b8ed:	c7 44 24 04 ca 02 00 	movl   $0x2ca,0x4(%esp)
c010b8f4:	00 
c010b8f5:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010b8fc:	e8 ef 54 ff ff       	call   c0100df0 <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b901:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b906:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010b909:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b90d:	89 04 24             	mov    %eax,(%esp)
c010b910:	e8 2f ed ff ff       	call   c010a644 <set_proc_name>
    return 0;
c010b915:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010b91a:	c9                   	leave  
c010b91b:	c3                   	ret    

c010b91c <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b91c:	55                   	push   %ebp
c010b91d:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b91f:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b924:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b92b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b930:	5d                   	pop    %ebp
c010b931:	c3                   	ret    

c010b932 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b932:	55                   	push   %ebp
c010b933:	89 e5                	mov    %esp,%ebp
c010b935:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b938:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b93d:	8b 40 18             	mov    0x18(%eax),%eax
c010b940:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b943:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b947:	74 30                	je     c010b979 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b949:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b94c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b953:	00 
c010b954:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010b95b:	00 
c010b95c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b960:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b963:	89 04 24             	mov    %eax,(%esp)
c010b966:	e8 9f d6 ff ff       	call   c010900a <user_mem_check>
c010b96b:	85 c0                	test   %eax,%eax
c010b96d:	75 0a                	jne    c010b979 <do_wait+0x47>
            return -E_INVAL;
c010b96f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b974:	e9 57 01 00 00       	jmp    c010bad0 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b979:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b980:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b984:	74 39                	je     c010b9bf <do_wait+0x8d>
        proc = find_proc(pid);
c010b986:	8b 45 08             	mov    0x8(%ebp),%eax
c010b989:	89 04 24             	mov    %eax,(%esp)
c010b98c:	e8 cc f0 ff ff       	call   c010aa5d <find_proc>
c010b991:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b994:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b998:	74 5a                	je     c010b9f4 <do_wait+0xc2>
c010b99a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b99d:	8b 50 14             	mov    0x14(%eax),%edx
c010b9a0:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b9a5:	39 c2                	cmp    %eax,%edx
c010b9a7:	75 4b                	jne    c010b9f4 <do_wait+0xc2>
            haskid = 1;
c010b9a9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b9b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9b3:	8b 00                	mov    (%eax),%eax
c010b9b5:	83 f8 03             	cmp    $0x3,%eax
c010b9b8:	75 3a                	jne    c010b9f4 <do_wait+0xc2>
                goto found;
c010b9ba:	e9 89 00 00 00       	jmp    c010ba48 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010b9bf:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b9c4:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b9ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b9cd:	eb 1f                	jmp    c010b9ee <do_wait+0xbc>
            haskid = 1;
c010b9cf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b9d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9d9:	8b 00                	mov    (%eax),%eax
c010b9db:	83 f8 03             	cmp    $0x3,%eax
c010b9de:	75 02                	jne    c010b9e2 <do_wait+0xb0>
                goto found;
c010b9e0:	eb 66                	jmp    c010ba48 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010b9e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9e5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b9eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9f2:	75 db                	jne    c010b9cf <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010b9f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b9f8:	74 44                	je     c010ba3e <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010b9fa:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010b9ff:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010ba05:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010ba0a:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010ba11:	00 00 80 
        schedule();
c010ba14:	e8 5f 0b 00 00       	call   c010c578 <schedule>
        if (current->flags & PF_EXITING) {
c010ba19:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010ba1e:	8b 40 44             	mov    0x44(%eax),%eax
c010ba21:	83 e0 01             	and    $0x1,%eax
c010ba24:	85 c0                	test   %eax,%eax
c010ba26:	74 11                	je     c010ba39 <do_wait+0x107>
            do_exit(-E_KILLED);
c010ba28:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010ba2f:	e8 56 f5 ff ff       	call   c010af8a <do_exit>
        }
        goto repeat;
c010ba34:	e9 40 ff ff ff       	jmp    c010b979 <do_wait+0x47>
c010ba39:	e9 3b ff ff ff       	jmp    c010b979 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010ba3e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010ba43:	e9 88 00 00 00       	jmp    c010bad0 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010ba48:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010ba4d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010ba50:	74 0a                	je     c010ba5c <do_wait+0x12a>
c010ba52:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010ba57:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010ba5a:	75 1c                	jne    c010ba78 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010ba5c:	c7 44 24 08 6a ff 10 	movl   $0xc010ff6a,0x8(%esp)
c010ba63:	c0 
c010ba64:	c7 44 24 04 03 03 00 	movl   $0x303,0x4(%esp)
c010ba6b:	00 
c010ba6c:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010ba73:	e8 78 53 ff ff       	call   c0100df0 <__panic>
    }
    if (code_store != NULL) {
c010ba78:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ba7c:	74 0e                	je     c010ba8c <do_wait+0x15a>
        *code_store = proc->exit_code;
c010ba7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba81:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010ba87:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba8a:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010ba8c:	e8 55 e8 ff ff       	call   c010a2e6 <__intr_save>
c010ba91:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010ba94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba97:	89 04 24             	mov    %eax,(%esp)
c010ba9a:	e8 89 ef ff ff       	call   c010aa28 <unhash_proc>
        remove_links(proc);
c010ba9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baa2:	89 04 24             	mov    %eax,(%esp)
c010baa5:	e8 d9 ec ff ff       	call   c010a783 <remove_links>
    }
    local_intr_restore(intr_flag);
c010baaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010baad:	89 04 24             	mov    %eax,(%esp)
c010bab0:	e8 5b e8 ff ff       	call   c010a310 <__intr_restore>
    put_kstack(proc);
c010bab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bab8:	89 04 24             	mov    %eax,(%esp)
c010babb:	e8 bf f0 ff ff       	call   c010ab7f <put_kstack>
    kfree(proc);
c010bac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bac3:	89 04 24             	mov    %eax,(%esp)
c010bac6:	e8 23 92 ff ff       	call   c0104cee <kfree>
    return 0;
c010bacb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bad0:	c9                   	leave  
c010bad1:	c3                   	ret    

c010bad2 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bad2:	55                   	push   %ebp
c010bad3:	89 e5                	mov    %esp,%ebp
c010bad5:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010bad8:	8b 45 08             	mov    0x8(%ebp),%eax
c010badb:	89 04 24             	mov    %eax,(%esp)
c010bade:	e8 7a ef ff ff       	call   c010aa5d <find_proc>
c010bae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bae6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010baea:	74 44                	je     c010bb30 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010baec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baef:	8b 40 44             	mov    0x44(%eax),%eax
c010baf2:	83 e0 01             	and    $0x1,%eax
c010baf5:	85 c0                	test   %eax,%eax
c010baf7:	75 30                	jne    c010bb29 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010baf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bafc:	8b 40 44             	mov    0x44(%eax),%eax
c010baff:	83 c8 01             	or     $0x1,%eax
c010bb02:	89 c2                	mov    %eax,%edx
c010bb04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb07:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010bb0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb0d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010bb13:	85 c0                	test   %eax,%eax
c010bb15:	79 0b                	jns    c010bb22 <do_kill+0x50>
                wakeup_proc(proc);
c010bb17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb1a:	89 04 24             	mov    %eax,(%esp)
c010bb1d:	e8 ba 09 00 00       	call   c010c4dc <wakeup_proc>
            }
            return 0;
c010bb22:	b8 00 00 00 00       	mov    $0x0,%eax
c010bb27:	eb 0c                	jmp    c010bb35 <do_kill+0x63>
        }
        return -E_KILLED;
c010bb29:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bb2e:	eb 05                	jmp    c010bb35 <do_kill+0x63>
    }
    return -E_INVAL;
c010bb30:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bb35:	c9                   	leave  
c010bb36:	c3                   	ret    

c010bb37 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010bb37:	55                   	push   %ebp
c010bb38:	89 e5                	mov    %esp,%ebp
c010bb3a:	57                   	push   %edi
c010bb3b:	56                   	push   %esi
c010bb3c:	53                   	push   %ebx
c010bb3d:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bb40:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb43:	89 04 24             	mov    %eax,(%esp)
c010bb46:	e8 b7 17 00 00       	call   c010d302 <strlen>
c010bb4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bb4e:	b8 04 00 00 00       	mov    $0x4,%eax
c010bb53:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb56:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010bb59:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bb5c:	8b 75 10             	mov    0x10(%ebp),%esi
c010bb5f:	89 f7                	mov    %esi,%edi
c010bb61:	cd 80                	int    $0x80
c010bb63:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010bb66:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010bb69:	83 c4 2c             	add    $0x2c,%esp
c010bb6c:	5b                   	pop    %ebx
c010bb6d:	5e                   	pop    %esi
c010bb6e:	5f                   	pop    %edi
c010bb6f:	5d                   	pop    %ebp
c010bb70:	c3                   	ret    

c010bb71 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010bb71:	55                   	push   %ebp
c010bb72:	89 e5                	mov    %esp,%ebp
c010bb74:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010bb77:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bb7c:	8b 40 04             	mov    0x4(%eax),%eax
c010bb7f:	c7 44 24 08 86 ff 10 	movl   $0xc010ff86,0x8(%esp)
c010bb86:	c0 
c010bb87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb8b:	c7 04 24 90 ff 10 c0 	movl   $0xc010ff90,(%esp)
c010bb92:	e8 cd 47 ff ff       	call   c0100364 <cprintf>
c010bb97:	b8 04 7a 00 00       	mov    $0x7a04,%eax
c010bb9c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bba0:	c7 44 24 04 e0 63 17 	movl   $0xc01763e0,0x4(%esp)
c010bba7:	c0 
c010bba8:	c7 04 24 86 ff 10 c0 	movl   $0xc010ff86,(%esp)
c010bbaf:	e8 83 ff ff ff       	call   c010bb37 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010bbb4:	c7 44 24 08 b7 ff 10 	movl   $0xc010ffb7,0x8(%esp)
c010bbbb:	c0 
c010bbbc:	c7 44 24 04 4c 03 00 	movl   $0x34c,0x4(%esp)
c010bbc3:	00 
c010bbc4:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bbcb:	e8 20 52 ff ff       	call   c0100df0 <__panic>

c010bbd0 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010bbd0:	55                   	push   %ebp
c010bbd1:	89 e5                	mov    %esp,%ebp
c010bbd3:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bbd6:	e8 0a 96 ff ff       	call   c01051e5 <nr_free_pages>
c010bbdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bbde:	e8 d3 8f ff ff       	call   c0104bb6 <kallocated>
c010bbe3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bbe6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bbed:	00 
c010bbee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bbf5:	00 
c010bbf6:	c7 04 24 71 bb 10 c0 	movl   $0xc010bb71,(%esp)
c010bbfd:	e8 cf ee ff ff       	call   c010aad1 <kernel_thread>
c010bc02:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bc05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bc09:	7f 1c                	jg     c010bc27 <init_main+0x57>
        panic("create user_main failed.\n");
c010bc0b:	c7 44 24 08 d1 ff 10 	movl   $0xc010ffd1,0x8(%esp)
c010bc12:	c0 
c010bc13:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
c010bc1a:	00 
c010bc1b:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bc22:	e8 c9 51 ff ff       	call   c0100df0 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bc27:	e8 e9 d9 ff ff       	call   c0109615 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bc2c:	eb 05                	jmp    c010bc33 <init_main+0x63>
        schedule();
c010bc2e:	e8 45 09 00 00       	call   c010c578 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010bc33:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bc3a:	00 
c010bc3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bc42:	e8 eb fc ff ff       	call   c010b932 <do_wait>
c010bc47:	85 c0                	test   %eax,%eax
c010bc49:	74 e3                	je     c010bc2e <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010bc4b:	c7 04 24 ec ff 10 c0 	movl   $0xc010ffec,(%esp)
c010bc52:	e8 0d 47 ff ff       	call   c0100364 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bc57:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010bc5c:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bc62:	85 c0                	test   %eax,%eax
c010bc64:	75 1e                	jne    c010bc84 <init_main+0xb4>
c010bc66:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010bc6b:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bc71:	85 c0                	test   %eax,%eax
c010bc73:	75 0f                	jne    c010bc84 <init_main+0xb4>
c010bc75:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010bc7a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bc80:	85 c0                	test   %eax,%eax
c010bc82:	74 24                	je     c010bca8 <init_main+0xd8>
c010bc84:	c7 44 24 0c 10 00 11 	movl   $0xc0110010,0xc(%esp)
c010bc8b:	c0 
c010bc8c:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010bc93:	c0 
c010bc94:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010bc9b:	00 
c010bc9c:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bca3:	e8 48 51 ff ff       	call   c0100df0 <__panic>
    assert(nr_process == 2);
c010bca8:	a1 60 80 1c c0       	mov    0xc01c8060,%eax
c010bcad:	83 f8 02             	cmp    $0x2,%eax
c010bcb0:	74 24                	je     c010bcd6 <init_main+0x106>
c010bcb2:	c7 44 24 0c 5b 00 11 	movl   $0xc011005b,0xc(%esp)
c010bcb9:	c0 
c010bcba:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010bcc1:	c0 
c010bcc2:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c010bcc9:	00 
c010bcca:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bcd1:	e8 1a 51 ff ff       	call   c0100df0 <__panic>
c010bcd6:	c7 45 e8 bc 82 1c c0 	movl   $0xc01c82bc,-0x18(%ebp)
c010bcdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bce0:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bce3:	8b 15 44 60 1c c0    	mov    0xc01c6044,%edx
c010bce9:	83 c2 7c             	add    $0x7c,%edx
c010bcec:	39 d0                	cmp    %edx,%eax
c010bcee:	74 24                	je     c010bd14 <init_main+0x144>
c010bcf0:	c7 44 24 0c 6c 00 11 	movl   $0xc011006c,0xc(%esp)
c010bcf7:	c0 
c010bcf8:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010bcff:	c0 
c010bd00:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
c010bd07:	00 
c010bd08:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bd0f:	e8 dc 50 ff ff       	call   c0100df0 <__panic>
c010bd14:	c7 45 e4 bc 82 1c c0 	movl   $0xc01c82bc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010bd1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd1e:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010bd20:	8b 15 44 60 1c c0    	mov    0xc01c6044,%edx
c010bd26:	83 c2 7c             	add    $0x7c,%edx
c010bd29:	39 d0                	cmp    %edx,%eax
c010bd2b:	74 24                	je     c010bd51 <init_main+0x181>
c010bd2d:	c7 44 24 0c 9c 00 11 	movl   $0xc011009c,0xc(%esp)
c010bd34:	c0 
c010bd35:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010bd3c:	c0 
c010bd3d:	c7 44 24 04 64 03 00 	movl   $0x364,0x4(%esp)
c010bd44:	00 
c010bd45:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bd4c:	e8 9f 50 ff ff       	call   c0100df0 <__panic>

    cprintf("init check memory pass.\n");
c010bd51:	c7 04 24 cc 00 11 c0 	movl   $0xc01100cc,(%esp)
c010bd58:	e8 07 46 ff ff       	call   c0100364 <cprintf>
    return 0;
c010bd5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd62:	c9                   	leave  
c010bd63:	c3                   	ret    

c010bd64 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010bd64:	55                   	push   %ebp
c010bd65:	89 e5                	mov    %esp,%ebp
c010bd67:	83 ec 28             	sub    $0x28,%esp
c010bd6a:	c7 45 ec bc 82 1c c0 	movl   $0xc01c82bc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bd71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd74:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bd77:	89 50 04             	mov    %edx,0x4(%eax)
c010bd7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd7d:	8b 50 04             	mov    0x4(%eax),%edx
c010bd80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd83:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bd85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bd8c:	eb 26                	jmp    c010bdb4 <proc_init+0x50>
        list_init(hash_list + i);
c010bd8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd91:	c1 e0 03             	shl    $0x3,%eax
c010bd94:	05 60 60 1c c0       	add    $0xc01c6060,%eax
c010bd99:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bd9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bda2:	89 50 04             	mov    %edx,0x4(%eax)
c010bda5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bda8:	8b 50 04             	mov    0x4(%eax),%edx
c010bdab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bdae:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bdb0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bdb4:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010bdbb:	7e d1                	jle    c010bd8e <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010bdbd:	e8 fb e6 ff ff       	call   c010a4bd <alloc_proc>
c010bdc2:	a3 40 60 1c c0       	mov    %eax,0xc01c6040
c010bdc7:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010bdcc:	85 c0                	test   %eax,%eax
c010bdce:	75 1c                	jne    c010bdec <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010bdd0:	c7 44 24 08 e5 00 11 	movl   $0xc01100e5,0x8(%esp)
c010bdd7:	c0 
c010bdd8:	c7 44 24 04 76 03 00 	movl   $0x376,0x4(%esp)
c010bddf:	00 
c010bde0:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bde7:	e8 04 50 ff ff       	call   c0100df0 <__panic>
    }

    idleproc->pid = 0;
c010bdec:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010bdf1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010bdf8:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010bdfd:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010be03:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010be08:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010be0d:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010be10:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010be15:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010be1c:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010be21:	c7 44 24 04 fd 00 11 	movl   $0xc01100fd,0x4(%esp)
c010be28:	c0 
c010be29:	89 04 24             	mov    %eax,(%esp)
c010be2c:	e8 13 e8 ff ff       	call   c010a644 <set_proc_name>
    nr_process ++;
c010be31:	a1 60 80 1c c0       	mov    0xc01c8060,%eax
c010be36:	83 c0 01             	add    $0x1,%eax
c010be39:	a3 60 80 1c c0       	mov    %eax,0xc01c8060

    current = idleproc;
c010be3e:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010be43:	a3 48 60 1c c0       	mov    %eax,0xc01c6048

    int pid = kernel_thread(init_main, NULL, 0);
c010be48:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010be4f:	00 
c010be50:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010be57:	00 
c010be58:	c7 04 24 d0 bb 10 c0 	movl   $0xc010bbd0,(%esp)
c010be5f:	e8 6d ec ff ff       	call   c010aad1 <kernel_thread>
c010be64:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010be67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010be6b:	7f 1c                	jg     c010be89 <proc_init+0x125>
        panic("create init_main failed.\n");
c010be6d:	c7 44 24 08 02 01 11 	movl   $0xc0110102,0x8(%esp)
c010be74:	c0 
c010be75:	c7 44 24 04 84 03 00 	movl   $0x384,0x4(%esp)
c010be7c:	00 
c010be7d:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010be84:	e8 67 4f ff ff       	call   c0100df0 <__panic>
    }

    initproc = find_proc(pid);
c010be89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be8c:	89 04 24             	mov    %eax,(%esp)
c010be8f:	e8 c9 eb ff ff       	call   c010aa5d <find_proc>
c010be94:	a3 44 60 1c c0       	mov    %eax,0xc01c6044
    set_proc_name(initproc, "init");
c010be99:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010be9e:	c7 44 24 04 1c 01 11 	movl   $0xc011011c,0x4(%esp)
c010bea5:	c0 
c010bea6:	89 04 24             	mov    %eax,(%esp)
c010bea9:	e8 96 e7 ff ff       	call   c010a644 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010beae:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010beb3:	85 c0                	test   %eax,%eax
c010beb5:	74 0c                	je     c010bec3 <proc_init+0x15f>
c010beb7:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010bebc:	8b 40 04             	mov    0x4(%eax),%eax
c010bebf:	85 c0                	test   %eax,%eax
c010bec1:	74 24                	je     c010bee7 <proc_init+0x183>
c010bec3:	c7 44 24 0c 24 01 11 	movl   $0xc0110124,0xc(%esp)
c010beca:	c0 
c010becb:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010bed2:	c0 
c010bed3:	c7 44 24 04 8a 03 00 	movl   $0x38a,0x4(%esp)
c010beda:	00 
c010bedb:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bee2:	e8 09 4f ff ff       	call   c0100df0 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010bee7:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010beec:	85 c0                	test   %eax,%eax
c010beee:	74 0d                	je     c010befd <proc_init+0x199>
c010bef0:	a1 44 60 1c c0       	mov    0xc01c6044,%eax
c010bef5:	8b 40 04             	mov    0x4(%eax),%eax
c010bef8:	83 f8 01             	cmp    $0x1,%eax
c010befb:	74 24                	je     c010bf21 <proc_init+0x1bd>
c010befd:	c7 44 24 0c 4c 01 11 	movl   $0xc011014c,0xc(%esp)
c010bf04:	c0 
c010bf05:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010bf0c:	c0 
c010bf0d:	c7 44 24 04 8b 03 00 	movl   $0x38b,0x4(%esp)
c010bf14:	00 
c010bf15:	c7 04 24 60 fd 10 c0 	movl   $0xc010fd60,(%esp)
c010bf1c:	e8 cf 4e ff ff       	call   c0100df0 <__panic>
}
c010bf21:	c9                   	leave  
c010bf22:	c3                   	ret    

c010bf23 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010bf23:	55                   	push   %ebp
c010bf24:	89 e5                	mov    %esp,%ebp
c010bf26:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010bf29:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bf2e:	8b 40 10             	mov    0x10(%eax),%eax
c010bf31:	85 c0                	test   %eax,%eax
c010bf33:	74 07                	je     c010bf3c <cpu_idle+0x19>
            schedule();
c010bf35:	e8 3e 06 00 00       	call   c010c578 <schedule>
        }
    }
c010bf3a:	eb ed                	jmp    c010bf29 <cpu_idle+0x6>
c010bf3c:	eb eb                	jmp    c010bf29 <cpu_idle+0x6>

c010bf3e <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010bf3e:	55                   	push   %ebp
c010bf3f:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010bf41:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf45:	75 11                	jne    c010bf58 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010bf47:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bf4c:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010bf53:	00 00 00 
c010bf56:	eb 0e                	jmp    c010bf66 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010bf58:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bf5d:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf60:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010bf66:	5d                   	pop    %ebp
c010bf67:	c3                   	ret    

c010bf68 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010bf68:	55                   	push   %ebp
c010bf69:	89 e5                	mov    %esp,%ebp
c010bf6b:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010bf6e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf72:	75 07                	jne    c010bf7b <do_sleep+0x13>
        return 0;
c010bf74:	b8 00 00 00 00       	mov    $0x0,%eax
c010bf79:	eb 6b                	jmp    c010bfe6 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010bf7b:	e8 66 e3 ff ff       	call   c010a2e6 <__intr_save>
c010bf80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010bf83:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf86:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bf8b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bf8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf93:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010bf96:	89 04 24             	mov    %eax,(%esp)
c010bf99:	e8 0f e3 ff ff       	call   c010a2ad <timer_init>
c010bf9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010bfa1:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bfa6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010bfac:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010bfb1:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010bfb8:	00 00 80 
    add_timer(timer);
c010bfbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfbe:	89 04 24             	mov    %eax,(%esp)
c010bfc1:	e8 3d 06 00 00       	call   c010c603 <add_timer>
    local_intr_restore(intr_flag);
c010bfc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfc9:	89 04 24             	mov    %eax,(%esp)
c010bfcc:	e8 3f e3 ff ff       	call   c010a310 <__intr_restore>

    schedule();
c010bfd1:	e8 a2 05 00 00       	call   c010c578 <schedule>

    del_timer(timer);
c010bfd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfd9:	89 04 24             	mov    %eax,(%esp)
c010bfdc:	e8 60 07 00 00       	call   c010c741 <del_timer>
    return 0;
c010bfe1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bfe6:	c9                   	leave  
c010bfe7:	c3                   	ret    

c010bfe8 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010bfe8:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010bfec:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010bfee:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010bff1:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010bff4:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010bff7:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010bffa:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010bffd:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c000:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c003:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c007:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c00a:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c00d:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c010:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c013:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c016:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c019:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c01c:	ff 30                	pushl  (%eax)

    ret
c010c01e:	c3                   	ret    

c010c01f <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010c01f:	55                   	push   %ebp
c010c020:	89 e5                	mov    %esp,%ebp
c010c022:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010c025:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c029:	75 08                	jne    c010c033 <skew_heap_merge+0x14>
c010c02b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c02e:	e9 bd 00 00 00       	jmp    c010c0f0 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010c033:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c037:	75 08                	jne    c010c041 <skew_heap_merge+0x22>
c010c039:	8b 45 08             	mov    0x8(%ebp),%eax
c010c03c:	e9 af 00 00 00       	jmp    c010c0f0 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010c041:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c044:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c048:	8b 45 08             	mov    0x8(%ebp),%eax
c010c04b:	89 04 24             	mov    %eax,(%esp)
c010c04e:	8b 45 10             	mov    0x10(%ebp),%eax
c010c051:	ff d0                	call   *%eax
c010c053:	83 f8 ff             	cmp    $0xffffffff,%eax
c010c056:	75 4d                	jne    c010c0a5 <skew_heap_merge+0x86>
     {
          r = a->left;
c010c058:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05b:	8b 40 04             	mov    0x4(%eax),%eax
c010c05e:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010c061:	8b 45 08             	mov    0x8(%ebp),%eax
c010c064:	8b 40 08             	mov    0x8(%eax),%eax
c010c067:	8b 55 10             	mov    0x10(%ebp),%edx
c010c06a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c06e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c071:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c075:	89 04 24             	mov    %eax,(%esp)
c010c078:	e8 a2 ff ff ff       	call   c010c01f <skew_heap_merge>
c010c07d:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010c080:	8b 45 08             	mov    0x8(%ebp),%eax
c010c083:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c086:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010c089:	8b 45 08             	mov    0x8(%ebp),%eax
c010c08c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c08f:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010c092:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c096:	74 08                	je     c010c0a0 <skew_heap_merge+0x81>
c010c098:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c09b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c09e:	89 10                	mov    %edx,(%eax)

          return a;
c010c0a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0a3:	eb 4b                	jmp    c010c0f0 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010c0a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0a8:	8b 40 04             	mov    0x4(%eax),%eax
c010c0ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010c0ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0b1:	8b 40 08             	mov    0x8(%eax),%eax
c010c0b4:	8b 55 10             	mov    0x10(%ebp),%edx
c010c0b7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c0bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c0bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c2:	89 04 24             	mov    %eax,(%esp)
c010c0c5:	e8 55 ff ff ff       	call   c010c01f <skew_heap_merge>
c010c0ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010c0cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c0d3:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010c0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c0dc:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010c0df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c0e3:	74 08                	je     c010c0ed <skew_heap_merge+0xce>
c010c0e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c0eb:	89 10                	mov    %edx,(%eax)

          return b;
c010c0ed:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010c0f0:	c9                   	leave  
c010c0f1:	c3                   	ret    

c010c0f2 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c0f2:	55                   	push   %ebp
c010c0f3:	89 e5                	mov    %esp,%ebp
c010c0f5:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c0f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0fb:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c100:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c103:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c106:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c10b:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c10e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c111:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c117:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c11a:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c120:	29 c2                	sub    %eax,%edx
c010c122:	89 d0                	mov    %edx,%eax
c010c124:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c127:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c12b:	7e 07                	jle    c010c134 <proc_stride_comp_f+0x42>
c010c12d:	b8 01 00 00 00       	mov    $0x1,%eax
c010c132:	eb 12                	jmp    c010c146 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010c134:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c138:	75 07                	jne    c010c141 <proc_stride_comp_f+0x4f>
c010c13a:	b8 00 00 00 00       	mov    $0x0,%eax
c010c13f:	eb 05                	jmp    c010c146 <proc_stride_comp_f+0x54>
     else return -1;
c010c141:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c146:	c9                   	leave  
c010c147:	c3                   	ret    

c010c148 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c148:	55                   	push   %ebp
c010c149:	89 e5                	mov    %esp,%ebp
c010c14b:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list));
c010c14e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c151:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c154:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c157:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c15a:	89 50 04             	mov    %edx,0x4(%eax)
c010c15d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c160:	8b 50 04             	mov    0x4(%eax),%edx
c010c163:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c166:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010c168:	8b 45 08             	mov    0x8(%ebp),%eax
c010c16b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010c172:	8b 45 08             	mov    0x8(%ebp),%eax
c010c175:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c17c:	c9                   	leave  
c010c17d:	c3                   	ret    

c010c17e <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c17e:	55                   	push   %ebp
c010c17f:	89 e5                	mov    %esp,%ebp
c010c181:	83 ec 28             	sub    $0x28,%esp
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c184:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c187:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c18d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c190:	8b 40 10             	mov    0x10(%eax),%eax
c010c193:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c196:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c199:	c7 45 ec f2 c0 10 c0 	movl   $0xc010c0f2,-0x14(%ebp)
c010c1a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010c1a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1a9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c1af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1b2:	8b 10                	mov    (%eax),%edx
c010c1b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1b7:	89 50 08             	mov    %edx,0x8(%eax)
c010c1ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1bd:	8b 50 08             	mov    0x8(%eax),%edx
c010c1c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1c3:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c1c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c1cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1d7:	89 04 24             	mov    %eax,(%esp)
c010c1da:	e8 40 fe ff ff       	call   c010c01f <skew_heap_merge>
c010c1df:	89 c2                	mov    %eax,%edx
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010c1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1e4:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c1e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1ea:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c1f0:	85 c0                	test   %eax,%eax
c010c1f2:	74 13                	je     c010c207 <stride_enqueue+0x89>
c010c1f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1f7:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c1fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c200:	8b 40 0c             	mov    0xc(%eax),%eax
c010c203:	39 c2                	cmp    %eax,%edx
c010c205:	7e 0f                	jle    c010c216 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010c207:	8b 45 08             	mov    0x8(%ebp),%eax
c010c20a:	8b 50 0c             	mov    0xc(%eax),%edx
c010c20d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c210:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010c216:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c219:	8b 55 08             	mov    0x8(%ebp),%edx
c010c21c:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010c222:	8b 45 08             	mov    0x8(%ebp),%eax
c010c225:	8b 40 08             	mov    0x8(%eax),%eax
c010c228:	8d 50 01             	lea    0x1(%eax),%edx
c010c22b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c22e:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c231:	c9                   	leave  
c010c232:	c3                   	ret    

c010c233 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c233:	55                   	push   %ebp
c010c234:	89 e5                	mov    %esp,%ebp
c010c236:	83 ec 38             	sub    $0x38,%esp
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c239:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c23c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c242:	8b 45 08             	mov    0x8(%ebp),%eax
c010c245:	8b 40 10             	mov    0x10(%eax),%eax
c010c248:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c24b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c24e:	c7 45 ec f2 c0 10 c0 	movl   $0xc010c0f2,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c255:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c258:	8b 00                	mov    (%eax),%eax
c010c25a:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c25d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c260:	8b 50 08             	mov    0x8(%eax),%edx
c010c263:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c266:	8b 40 04             	mov    0x4(%eax),%eax
c010c269:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c26c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c270:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c274:	89 04 24             	mov    %eax,(%esp)
c010c277:	e8 a3 fd ff ff       	call   c010c01f <skew_heap_merge>
c010c27c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c27f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c283:	74 08                	je     c010c28d <stride_dequeue+0x5a>
c010c285:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c288:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c28b:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c28d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c291:	74 24                	je     c010c2b7 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c293:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c296:	8b 40 04             	mov    0x4(%eax),%eax
c010c299:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c29c:	75 0b                	jne    c010c2a9 <stride_dequeue+0x76>
               p->left = rep;
c010c29e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c2a4:	89 50 04             	mov    %edx,0x4(%eax)
c010c2a7:	eb 09                	jmp    c010c2b2 <stride_dequeue+0x7f>
          else p->right = rep;
c010c2a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c2af:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c2b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2b5:	eb 03                	jmp    c010c2ba <stride_dequeue+0x87>
     }
     else return rep;
c010c2b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c2ba:	89 c2                	mov    %eax,%edx
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010c2bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2bf:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010c2c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2c5:	8b 40 08             	mov    0x8(%eax),%eax
c010c2c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c2cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ce:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c2d1:	c9                   	leave  
c010c2d2:	c3                   	ret    

c010c2d3 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c2d3:	55                   	push   %ebp
c010c2d4:	89 e5                	mov    %esp,%ebp
c010c2d6:	53                   	push   %ebx
c010c2d7:	83 ec 10             	sub    $0x10,%esp
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010c2da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2dd:	8b 40 10             	mov    0x10(%eax),%eax
c010c2e0:	85 c0                	test   %eax,%eax
c010c2e2:	75 07                	jne    c010c2eb <stride_pick_next+0x18>
c010c2e4:	b8 00 00 00 00       	mov    $0x0,%eax
c010c2e9:	eb 62                	jmp    c010c34d <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010c2eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ee:	8b 40 10             	mov    0x10(%eax),%eax
c010c2f1:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c2f6:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010c2f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c2fc:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c302:	85 c0                	test   %eax,%eax
c010c304:	75 1a                	jne    c010c320 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010c306:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c309:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c30f:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010c315:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c318:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010c31e:	eb 2a                	jmp    c010c34a <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010c320:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c323:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c329:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c32c:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010c332:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010c337:	ba 00 00 00 00       	mov    $0x0,%edx
c010c33c:	f7 f3                	div    %ebx
c010c33e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c341:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c344:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010c34a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c34d:	83 c4 10             	add    $0x10,%esp
c010c350:	5b                   	pop    %ebx
c010c351:	5d                   	pop    %ebp
c010c352:	c3                   	ret    

c010c353 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c353:	55                   	push   %ebp
c010c354:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010c356:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c359:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c35f:	85 c0                	test   %eax,%eax
c010c361:	7e 15                	jle    c010c378 <stride_proc_tick+0x25>
          proc->time_slice --;
c010c363:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c366:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c36c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c36f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c372:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010c378:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c37b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c381:	85 c0                	test   %eax,%eax
c010c383:	75 0a                	jne    c010c38f <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010c385:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c388:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010c38f:	5d                   	pop    %ebp
c010c390:	c3                   	ret    

c010c391 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c391:	55                   	push   %ebp
c010c392:	89 e5                	mov    %esp,%ebp
c010c394:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c397:	9c                   	pushf  
c010c398:	58                   	pop    %eax
c010c399:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c39c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c39f:	25 00 02 00 00       	and    $0x200,%eax
c010c3a4:	85 c0                	test   %eax,%eax
c010c3a6:	74 0c                	je     c010c3b4 <__intr_save+0x23>
        intr_disable();
c010c3a8:	e8 ac 5c ff ff       	call   c0102059 <intr_disable>
        return 1;
c010c3ad:	b8 01 00 00 00       	mov    $0x1,%eax
c010c3b2:	eb 05                	jmp    c010c3b9 <__intr_save+0x28>
    }
    return 0;
c010c3b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c3b9:	c9                   	leave  
c010c3ba:	c3                   	ret    

c010c3bb <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c3bb:	55                   	push   %ebp
c010c3bc:	89 e5                	mov    %esp,%ebp
c010c3be:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c3c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c3c5:	74 05                	je     c010c3cc <__intr_restore+0x11>
        intr_enable();
c010c3c7:	e8 87 5c ff ff       	call   c0102053 <intr_enable>
    }
}
c010c3cc:	c9                   	leave  
c010c3cd:	c3                   	ret    

c010c3ce <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c3ce:	55                   	push   %ebp
c010c3cf:	89 e5                	mov    %esp,%ebp
c010c3d1:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c3d4:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010c3d9:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c3dc:	74 1a                	je     c010c3f8 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c3de:	a1 bc 80 1c c0       	mov    0xc01c80bc,%eax
c010c3e3:	8b 40 08             	mov    0x8(%eax),%eax
c010c3e6:	8b 15 c0 80 1c c0    	mov    0xc01c80c0,%edx
c010c3ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c3ef:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c3f3:	89 14 24             	mov    %edx,(%esp)
c010c3f6:	ff d0                	call   *%eax
    }
}
c010c3f8:	c9                   	leave  
c010c3f9:	c3                   	ret    

c010c3fa <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c3fa:	55                   	push   %ebp
c010c3fb:	89 e5                	mov    %esp,%ebp
c010c3fd:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c400:	a1 bc 80 1c c0       	mov    0xc01c80bc,%eax
c010c405:	8b 40 0c             	mov    0xc(%eax),%eax
c010c408:	8b 15 c0 80 1c c0    	mov    0xc01c80c0,%edx
c010c40e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c411:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c415:	89 14 24             	mov    %edx,(%esp)
c010c418:	ff d0                	call   *%eax
}
c010c41a:	c9                   	leave  
c010c41b:	c3                   	ret    

c010c41c <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c41c:	55                   	push   %ebp
c010c41d:	89 e5                	mov    %esp,%ebp
c010c41f:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c422:	a1 bc 80 1c c0       	mov    0xc01c80bc,%eax
c010c427:	8b 40 10             	mov    0x10(%eax),%eax
c010c42a:	8b 15 c0 80 1c c0    	mov    0xc01c80c0,%edx
c010c430:	89 14 24             	mov    %edx,(%esp)
c010c433:	ff d0                	call   *%eax
}
c010c435:	c9                   	leave  
c010c436:	c3                   	ret    

c010c437 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c437:	55                   	push   %ebp
c010c438:	89 e5                	mov    %esp,%ebp
c010c43a:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c43d:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010c442:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c445:	74 1c                	je     c010c463 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010c447:	a1 bc 80 1c c0       	mov    0xc01c80bc,%eax
c010c44c:	8b 40 14             	mov    0x14(%eax),%eax
c010c44f:	8b 15 c0 80 1c c0    	mov    0xc01c80c0,%edx
c010c455:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c458:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c45c:	89 14 24             	mov    %edx,(%esp)
c010c45f:	ff d0                	call   *%eax
c010c461:	eb 0a                	jmp    c010c46d <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010c463:	8b 45 08             	mov    0x8(%ebp),%eax
c010c466:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c46d:	c9                   	leave  
c010c46e:	c3                   	ret    

c010c46f <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c46f:	55                   	push   %ebp
c010c470:	89 e5                	mov    %esp,%ebp
c010c472:	83 ec 28             	sub    $0x28,%esp
c010c475:	c7 45 f4 b4 80 1c c0 	movl   $0xc01c80b4,-0xc(%ebp)
c010c47c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c47f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c482:	89 50 04             	mov    %edx,0x4(%eax)
c010c485:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c488:	8b 50 04             	mov    0x4(%eax),%edx
c010c48b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c48e:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c490:	c7 05 bc 80 1c c0 8c 	movl   $0xc0131a8c,0xc01c80bc
c010c497:	1a 13 c0 

    rq = &__rq;
c010c49a:	c7 05 c0 80 1c c0 c4 	movl   $0xc01c80c4,0xc01c80c0
c010c4a1:	80 1c c0 
    rq->max_time_slice = 5;
c010c4a4:	a1 c0 80 1c c0       	mov    0xc01c80c0,%eax
c010c4a9:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010c4b0:	a1 bc 80 1c c0       	mov    0xc01c80bc,%eax
c010c4b5:	8b 40 04             	mov    0x4(%eax),%eax
c010c4b8:	8b 15 c0 80 1c c0    	mov    0xc01c80c0,%edx
c010c4be:	89 14 24             	mov    %edx,(%esp)
c010c4c1:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010c4c3:	a1 bc 80 1c c0       	mov    0xc01c80bc,%eax
c010c4c8:	8b 00                	mov    (%eax),%eax
c010c4ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c4ce:	c7 04 24 84 01 11 c0 	movl   $0xc0110184,(%esp)
c010c4d5:	e8 8a 3e ff ff       	call   c0100364 <cprintf>
}
c010c4da:	c9                   	leave  
c010c4db:	c3                   	ret    

c010c4dc <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c4dc:	55                   	push   %ebp
c010c4dd:	89 e5                	mov    %esp,%ebp
c010c4df:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c4e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e5:	8b 00                	mov    (%eax),%eax
c010c4e7:	83 f8 03             	cmp    $0x3,%eax
c010c4ea:	75 24                	jne    c010c510 <wakeup_proc+0x34>
c010c4ec:	c7 44 24 0c 95 01 11 	movl   $0xc0110195,0xc(%esp)
c010c4f3:	c0 
c010c4f4:	c7 44 24 08 b0 01 11 	movl   $0xc01101b0,0x8(%esp)
c010c4fb:	c0 
c010c4fc:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c503:	00 
c010c504:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c50b:	e8 e0 48 ff ff       	call   c0100df0 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c510:	e8 7c fe ff ff       	call   c010c391 <__intr_save>
c010c515:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c518:	8b 45 08             	mov    0x8(%ebp),%eax
c010c51b:	8b 00                	mov    (%eax),%eax
c010c51d:	83 f8 02             	cmp    $0x2,%eax
c010c520:	74 2d                	je     c010c54f <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c522:	8b 45 08             	mov    0x8(%ebp),%eax
c010c525:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c52b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c52e:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c535:	00 00 00 
            if (proc != current) {
c010c538:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c53d:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c540:	74 29                	je     c010c56b <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c542:	8b 45 08             	mov    0x8(%ebp),%eax
c010c545:	89 04 24             	mov    %eax,(%esp)
c010c548:	e8 81 fe ff ff       	call   c010c3ce <sched_class_enqueue>
c010c54d:	eb 1c                	jmp    c010c56b <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c54f:	c7 44 24 08 db 01 11 	movl   $0xc01101db,0x8(%esp)
c010c556:	c0 
c010c557:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c55e:	00 
c010c55f:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c566:	e8 02 49 ff ff       	call   c0100e6d <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c56b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c56e:	89 04 24             	mov    %eax,(%esp)
c010c571:	e8 45 fe ff ff       	call   c010c3bb <__intr_restore>
}
c010c576:	c9                   	leave  
c010c577:	c3                   	ret    

c010c578 <schedule>:

void
schedule(void) {
c010c578:	55                   	push   %ebp
c010c579:	89 e5                	mov    %esp,%ebp
c010c57b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c57e:	e8 0e fe ff ff       	call   c010c391 <__intr_save>
c010c583:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c586:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c58b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c592:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c597:	8b 00                	mov    (%eax),%eax
c010c599:	83 f8 02             	cmp    $0x2,%eax
c010c59c:	75 0d                	jne    c010c5ab <schedule+0x33>
            sched_class_enqueue(current);
c010c59e:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c5a3:	89 04 24             	mov    %eax,(%esp)
c010c5a6:	e8 23 fe ff ff       	call   c010c3ce <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c5ab:	e8 6c fe ff ff       	call   c010c41c <sched_class_pick_next>
c010c5b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c5b7:	74 0b                	je     c010c5c4 <schedule+0x4c>
            sched_class_dequeue(next);
c010c5b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5bc:	89 04 24             	mov    %eax,(%esp)
c010c5bf:	e8 36 fe ff ff       	call   c010c3fa <sched_class_dequeue>
        }
        if (next == NULL) {
c010c5c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c5c8:	75 08                	jne    c010c5d2 <schedule+0x5a>
            next = idleproc;
c010c5ca:	a1 40 60 1c c0       	mov    0xc01c6040,%eax
c010c5cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c5d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5d5:	8b 40 08             	mov    0x8(%eax),%eax
c010c5d8:	8d 50 01             	lea    0x1(%eax),%edx
c010c5db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5de:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c5e1:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c5e6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c5e9:	74 0b                	je     c010c5f6 <schedule+0x7e>
            proc_run(next);
c010c5eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5ee:	89 04 24             	mov    %eax,(%esp)
c010c5f1:	e8 26 e3 ff ff       	call   c010a91c <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c5f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5f9:	89 04 24             	mov    %eax,(%esp)
c010c5fc:	e8 ba fd ff ff       	call   c010c3bb <__intr_restore>
}
c010c601:	c9                   	leave  
c010c602:	c3                   	ret    

c010c603 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c603:	55                   	push   %ebp
c010c604:	89 e5                	mov    %esp,%ebp
c010c606:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c609:	e8 83 fd ff ff       	call   c010c391 <__intr_save>
c010c60e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c611:	8b 45 08             	mov    0x8(%ebp),%eax
c010c614:	8b 00                	mov    (%eax),%eax
c010c616:	85 c0                	test   %eax,%eax
c010c618:	74 0a                	je     c010c624 <add_timer+0x21>
c010c61a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c61d:	8b 40 04             	mov    0x4(%eax),%eax
c010c620:	85 c0                	test   %eax,%eax
c010c622:	75 24                	jne    c010c648 <add_timer+0x45>
c010c624:	c7 44 24 0c f8 01 11 	movl   $0xc01101f8,0xc(%esp)
c010c62b:	c0 
c010c62c:	c7 44 24 08 b0 01 11 	movl   $0xc01101b0,0x8(%esp)
c010c633:	c0 
c010c634:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c63b:	00 
c010c63c:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c643:	e8 a8 47 ff ff       	call   c0100df0 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c648:	8b 45 08             	mov    0x8(%ebp),%eax
c010c64b:	83 c0 08             	add    $0x8,%eax
c010c64e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c651:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c654:	8b 40 04             	mov    0x4(%eax),%eax
c010c657:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c65a:	0f 94 c0             	sete   %al
c010c65d:	0f b6 c0             	movzbl %al,%eax
c010c660:	85 c0                	test   %eax,%eax
c010c662:	75 24                	jne    c010c688 <add_timer+0x85>
c010c664:	c7 44 24 0c 24 02 11 	movl   $0xc0110224,0xc(%esp)
c010c66b:	c0 
c010c66c:	c7 44 24 08 b0 01 11 	movl   $0xc01101b0,0x8(%esp)
c010c673:	c0 
c010c674:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c67b:	00 
c010c67c:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c683:	e8 68 47 ff ff       	call   c0100df0 <__panic>
c010c688:	c7 45 e4 b4 80 1c c0 	movl   $0xc01c80b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c68f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c692:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c695:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c698:	eb 4a                	jmp    c010c6e4 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c69a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c69d:	83 e8 08             	sub    $0x8,%eax
c010c6a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c6a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6a6:	8b 10                	mov    (%eax),%edx
c010c6a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6ab:	8b 00                	mov    (%eax),%eax
c010c6ad:	39 c2                	cmp    %eax,%edx
c010c6af:	73 13                	jae    c010c6c4 <add_timer+0xc1>
                next->expires -= timer->expires;
c010c6b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6b4:	8b 10                	mov    (%eax),%edx
c010c6b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6b9:	8b 00                	mov    (%eax),%eax
c010c6bb:	29 c2                	sub    %eax,%edx
c010c6bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6c0:	89 10                	mov    %edx,(%eax)
                break;
c010c6c2:	eb 29                	jmp    c010c6ed <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c6c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6c7:	8b 10                	mov    (%eax),%edx
c010c6c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6cc:	8b 00                	mov    (%eax),%eax
c010c6ce:	29 c2                	sub    %eax,%edx
c010c6d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d3:	89 10                	mov    %edx,(%eax)
c010c6d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c6db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6de:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c6e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c6e4:	81 7d f4 b4 80 1c c0 	cmpl   $0xc01c80b4,-0xc(%ebp)
c010c6eb:	75 ad                	jne    c010c69a <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c6ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6f0:	8d 50 08             	lea    0x8(%eax),%edx
c010c6f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c6f9:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c6fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6ff:	8b 00                	mov    (%eax),%eax
c010c701:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c704:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c707:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c70a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c70d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c710:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c713:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c716:	89 10                	mov    %edx,(%eax)
c010c718:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c71b:	8b 10                	mov    (%eax),%edx
c010c71d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c720:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c723:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c726:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c729:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c72c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c72f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c732:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c734:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c737:	89 04 24             	mov    %eax,(%esp)
c010c73a:	e8 7c fc ff ff       	call   c010c3bb <__intr_restore>
}
c010c73f:	c9                   	leave  
c010c740:	c3                   	ret    

c010c741 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c741:	55                   	push   %ebp
c010c742:	89 e5                	mov    %esp,%ebp
c010c744:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c747:	e8 45 fc ff ff       	call   c010c391 <__intr_save>
c010c74c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c74f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c752:	83 c0 08             	add    $0x8,%eax
c010c755:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c758:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c75b:	8b 40 04             	mov    0x4(%eax),%eax
c010c75e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c761:	0f 94 c0             	sete   %al
c010c764:	0f b6 c0             	movzbl %al,%eax
c010c767:	85 c0                	test   %eax,%eax
c010c769:	0f 85 89 00 00 00    	jne    c010c7f8 <del_timer+0xb7>
            if (timer->expires != 0) {
c010c76f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c772:	8b 00                	mov    (%eax),%eax
c010c774:	85 c0                	test   %eax,%eax
c010c776:	74 35                	je     c010c7ad <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c778:	8b 45 08             	mov    0x8(%ebp),%eax
c010c77b:	83 c0 08             	add    $0x8,%eax
c010c77e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c784:	8b 40 04             	mov    0x4(%eax),%eax
c010c787:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c78a:	81 7d f0 b4 80 1c c0 	cmpl   $0xc01c80b4,-0x10(%ebp)
c010c791:	74 1a                	je     c010c7ad <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c793:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c796:	83 e8 08             	sub    $0x8,%eax
c010c799:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c79c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c79f:	8b 10                	mov    (%eax),%edx
c010c7a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7a4:	8b 00                	mov    (%eax),%eax
c010c7a6:	01 c2                	add    %eax,%edx
c010c7a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7ab:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c7ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7b0:	83 c0 08             	add    $0x8,%eax
c010c7b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c7b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c7b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c7bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c7bf:	8b 40 04             	mov    0x4(%eax),%eax
c010c7c2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c7c5:	8b 12                	mov    (%edx),%edx
c010c7c7:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c7ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c7cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7d0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c7d3:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c7d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c7d9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c7dc:	89 10                	mov    %edx,(%eax)
c010c7de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c7e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c7e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c7e7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c7ea:	89 50 04             	mov    %edx,0x4(%eax)
c010c7ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c7f0:	8b 50 04             	mov    0x4(%eax),%edx
c010c7f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c7f6:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c7f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7fb:	89 04 24             	mov    %eax,(%esp)
c010c7fe:	e8 b8 fb ff ff       	call   c010c3bb <__intr_restore>
}
c010c803:	c9                   	leave  
c010c804:	c3                   	ret    

c010c805 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c805:	55                   	push   %ebp
c010c806:	89 e5                	mov    %esp,%ebp
c010c808:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c80b:	e8 81 fb ff ff       	call   c010c391 <__intr_save>
c010c810:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c813:	c7 45 e4 b4 80 1c c0 	movl   $0xc01c80b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c81a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c81d:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c820:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c823:	81 7d f4 b4 80 1c c0 	cmpl   $0xc01c80b4,-0xc(%ebp)
c010c82a:	0f 84 fb 00 00 00    	je     c010c92b <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010c830:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c833:	83 e8 08             	sub    $0x8,%eax
c010c836:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c839:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c83c:	8b 00                	mov    (%eax),%eax
c010c83e:	85 c0                	test   %eax,%eax
c010c840:	75 24                	jne    c010c866 <run_timer_list+0x61>
c010c842:	c7 44 24 0c 45 02 11 	movl   $0xc0110245,0xc(%esp)
c010c849:	c0 
c010c84a:	c7 44 24 08 b0 01 11 	movl   $0xc01101b0,0x8(%esp)
c010c851:	c0 
c010c852:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010c859:	00 
c010c85a:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c861:	e8 8a 45 ff ff       	call   c0100df0 <__panic>
            timer->expires --;
c010c866:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c869:	8b 00                	mov    (%eax),%eax
c010c86b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c86e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c871:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c873:	e9 a6 00 00 00       	jmp    c010c91e <run_timer_list+0x119>
c010c878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c87b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c87e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c881:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c884:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c887:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c88a:	8b 40 04             	mov    0x4(%eax),%eax
c010c88d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010c890:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c893:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c899:	85 c0                	test   %eax,%eax
c010c89b:	74 31                	je     c010c8ce <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c89d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8a0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c8a6:	85 c0                	test   %eax,%eax
c010c8a8:	78 4a                	js     c010c8f4 <run_timer_list+0xef>
c010c8aa:	c7 44 24 0c 5c 02 11 	movl   $0xc011025c,0xc(%esp)
c010c8b1:	c0 
c010c8b2:	c7 44 24 08 b0 01 11 	movl   $0xc01101b0,0x8(%esp)
c010c8b9:	c0 
c010c8ba:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010c8c1:	00 
c010c8c2:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c8c9:	e8 22 45 ff ff       	call   c0100df0 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c8ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8d1:	8b 40 04             	mov    0x4(%eax),%eax
c010c8d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c8d8:	c7 44 24 08 80 02 11 	movl   $0xc0110280,0x8(%esp)
c010c8df:	c0 
c010c8e0:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010c8e7:	00 
c010c8e8:	c7 04 24 c5 01 11 c0 	movl   $0xc01101c5,(%esp)
c010c8ef:	e8 79 45 ff ff       	call   c0100e6d <__warn>
                }
                wakeup_proc(proc);
c010c8f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8f7:	89 04 24             	mov    %eax,(%esp)
c010c8fa:	e8 dd fb ff ff       	call   c010c4dc <wakeup_proc>
                del_timer(timer);
c010c8ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c902:	89 04 24             	mov    %eax,(%esp)
c010c905:	e8 37 fe ff ff       	call   c010c741 <del_timer>
                if (le == &timer_list) {
c010c90a:	81 7d f4 b4 80 1c c0 	cmpl   $0xc01c80b4,-0xc(%ebp)
c010c911:	75 02                	jne    c010c915 <run_timer_list+0x110>
                    break;
c010c913:	eb 16                	jmp    c010c92b <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010c915:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c918:	83 e8 08             	sub    $0x8,%eax
c010c91b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010c91e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c921:	8b 00                	mov    (%eax),%eax
c010c923:	85 c0                	test   %eax,%eax
c010c925:	0f 84 4d ff ff ff    	je     c010c878 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010c92b:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c930:	89 04 24             	mov    %eax,(%esp)
c010c933:	e8 ff fa ff ff       	call   c010c437 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010c938:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c93b:	89 04 24             	mov    %eax,(%esp)
c010c93e:	e8 78 fa ff ff       	call   c010c3bb <__intr_restore>
}
c010c943:	c9                   	leave  
c010c944:	c3                   	ret    

c010c945 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010c945:	55                   	push   %ebp
c010c946:	89 e5                	mov    %esp,%ebp
c010c948:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c94b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c94e:	8b 00                	mov    (%eax),%eax
c010c950:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c953:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c956:	89 04 24             	mov    %eax,(%esp)
c010c959:	e8 2c e6 ff ff       	call   c010af8a <do_exit>
}
c010c95e:	c9                   	leave  
c010c95f:	c3                   	ret    

c010c960 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c960:	55                   	push   %ebp
c010c961:	89 e5                	mov    %esp,%ebp
c010c963:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c966:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010c96b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c96e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c971:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c974:	8b 40 44             	mov    0x44(%eax),%eax
c010c977:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c97a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c97d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c981:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c984:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c988:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c98f:	e8 d2 e4 ff ff       	call   c010ae66 <do_fork>
}
c010c994:	c9                   	leave  
c010c995:	c3                   	ret    

c010c996 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c996:	55                   	push   %ebp
c010c997:	89 e5                	mov    %esp,%ebp
c010c999:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c99c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c99f:	8b 00                	mov    (%eax),%eax
c010c9a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c9a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9a7:	83 c0 04             	add    $0x4,%eax
c010c9aa:	8b 00                	mov    (%eax),%eax
c010c9ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c9af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9b9:	89 04 24             	mov    %eax,(%esp)
c010c9bc:	e8 71 ef ff ff       	call   c010b932 <do_wait>
}
c010c9c1:	c9                   	leave  
c010c9c2:	c3                   	ret    

c010c9c3 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c9c3:	55                   	push   %ebp
c010c9c4:	89 e5                	mov    %esp,%ebp
c010c9c6:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c9c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9cc:	8b 00                	mov    (%eax),%eax
c010c9ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c9d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9d4:	8b 40 04             	mov    0x4(%eax),%eax
c010c9d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c9da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9dd:	83 c0 08             	add    $0x8,%eax
c010c9e0:	8b 00                	mov    (%eax),%eax
c010c9e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c9e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9e8:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c9ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c9f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c9fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca06:	89 04 24             	mov    %eax,(%esp)
c010ca09:	e8 d8 ed ff ff       	call   c010b7e6 <do_execve>
}
c010ca0e:	c9                   	leave  
c010ca0f:	c3                   	ret    

c010ca10 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ca10:	55                   	push   %ebp
c010ca11:	89 e5                	mov    %esp,%ebp
c010ca13:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ca16:	e8 01 ef ff ff       	call   c010b91c <do_yield>
}
c010ca1b:	c9                   	leave  
c010ca1c:	c3                   	ret    

c010ca1d <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ca1d:	55                   	push   %ebp
c010ca1e:	89 e5                	mov    %esp,%ebp
c010ca20:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ca23:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca26:	8b 00                	mov    (%eax),%eax
c010ca28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ca2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca2e:	89 04 24             	mov    %eax,(%esp)
c010ca31:	e8 9c f0 ff ff       	call   c010bad2 <do_kill>
}
c010ca36:	c9                   	leave  
c010ca37:	c3                   	ret    

c010ca38 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ca38:	55                   	push   %ebp
c010ca39:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ca3b:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010ca40:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ca43:	5d                   	pop    %ebp
c010ca44:	c3                   	ret    

c010ca45 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ca45:	55                   	push   %ebp
c010ca46:	89 e5                	mov    %esp,%ebp
c010ca48:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ca4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca4e:	8b 00                	mov    (%eax),%eax
c010ca50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ca53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca56:	89 04 24             	mov    %eax,(%esp)
c010ca59:	e8 2c 39 ff ff       	call   c010038a <cputchar>
    return 0;
c010ca5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ca63:	c9                   	leave  
c010ca64:	c3                   	ret    

c010ca65 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ca65:	55                   	push   %ebp
c010ca66:	89 e5                	mov    %esp,%ebp
c010ca68:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ca6b:	e8 40 a1 ff ff       	call   c0106bb0 <print_pgdir>
    return 0;
c010ca70:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ca75:	c9                   	leave  
c010ca76:	c3                   	ret    

c010ca77 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ca77:	55                   	push   %ebp
c010ca78:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ca7a:	a1 d8 80 1c c0       	mov    0xc01c80d8,%eax
}
c010ca7f:	5d                   	pop    %ebp
c010ca80:	c3                   	ret    

c010ca81 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ca81:	55                   	push   %ebp
c010ca82:	89 e5                	mov    %esp,%ebp
c010ca84:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ca87:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca8a:	8b 00                	mov    (%eax),%eax
c010ca8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ca8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca92:	89 04 24             	mov    %eax,(%esp)
c010ca95:	e8 a4 f4 ff ff       	call   c010bf3e <lab6_set_priority>
    return 0;
c010ca9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ca9f:	c9                   	leave  
c010caa0:	c3                   	ret    

c010caa1 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010caa1:	55                   	push   %ebp
c010caa2:	89 e5                	mov    %esp,%ebp
c010caa4:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010caa7:	8b 45 08             	mov    0x8(%ebp),%eax
c010caaa:	8b 00                	mov    (%eax),%eax
c010caac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010caaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cab2:	89 04 24             	mov    %eax,(%esp)
c010cab5:	e8 ae f4 ff ff       	call   c010bf68 <do_sleep>
}
c010caba:	c9                   	leave  
c010cabb:	c3                   	ret    

c010cabc <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010cabc:	55                   	push   %ebp
c010cabd:	89 e5                	mov    %esp,%ebp
c010cabf:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010cac2:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010cac7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010caca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010cacd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cad0:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cad3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010cad6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cada:	78 60                	js     c010cb3c <syscall+0x80>
c010cadc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cadf:	3d ff 00 00 00       	cmp    $0xff,%eax
c010cae4:	77 56                	ja     c010cb3c <syscall+0x80>
        if (syscalls[num] != NULL) {
c010cae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cae9:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010caf0:	85 c0                	test   %eax,%eax
c010caf2:	74 48                	je     c010cb3c <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010caf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caf7:	8b 40 14             	mov    0x14(%eax),%eax
c010cafa:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010cafd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb00:	8b 40 18             	mov    0x18(%eax),%eax
c010cb03:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010cb06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb09:	8b 40 10             	mov    0x10(%eax),%eax
c010cb0c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010cb0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb12:	8b 00                	mov    (%eax),%eax
c010cb14:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010cb17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb1a:	8b 40 04             	mov    0x4(%eax),%eax
c010cb1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010cb20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb23:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010cb2a:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010cb2d:	89 14 24             	mov    %edx,(%esp)
c010cb30:	ff d0                	call   *%eax
c010cb32:	89 c2                	mov    %eax,%edx
c010cb34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb37:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010cb3a:	eb 46                	jmp    c010cb82 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010cb3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb3f:	89 04 24             	mov    %eax,(%esp)
c010cb42:	e8 d0 58 ff ff       	call   c0102417 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010cb47:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010cb4c:	8d 50 48             	lea    0x48(%eax),%edx
c010cb4f:	a1 48 60 1c c0       	mov    0xc01c6048,%eax
c010cb54:	8b 40 04             	mov    0x4(%eax),%eax
c010cb57:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cb5b:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cb5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb62:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cb66:	c7 44 24 08 a0 02 11 	movl   $0xc01102a0,0x8(%esp)
c010cb6d:	c0 
c010cb6e:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010cb75:	00 
c010cb76:	c7 04 24 cc 02 11 c0 	movl   $0xc01102cc,(%esp)
c010cb7d:	e8 6e 42 ff ff       	call   c0100df0 <__panic>
            num, current->pid, current->name);
}
c010cb82:	c9                   	leave  
c010cb83:	c3                   	ret    

c010cb84 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010cb84:	55                   	push   %ebp
c010cb85:	89 e5                	mov    %esp,%ebp
c010cb87:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cb8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb8d:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cb93:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010cb96:	b8 20 00 00 00       	mov    $0x20,%eax
c010cb9b:	2b 45 0c             	sub    0xc(%ebp),%eax
c010cb9e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010cba1:	89 c1                	mov    %eax,%ecx
c010cba3:	d3 ea                	shr    %cl,%edx
c010cba5:	89 d0                	mov    %edx,%eax
}
c010cba7:	c9                   	leave  
c010cba8:	c3                   	ret    

c010cba9 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010cba9:	55                   	push   %ebp
c010cbaa:	89 e5                	mov    %esp,%ebp
c010cbac:	83 ec 58             	sub    $0x58,%esp
c010cbaf:	8b 45 10             	mov    0x10(%ebp),%eax
c010cbb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010cbb5:	8b 45 14             	mov    0x14(%ebp),%eax
c010cbb8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010cbbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cbbe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cbc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cbc4:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010cbc7:	8b 45 18             	mov    0x18(%ebp),%eax
c010cbca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cbcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbd0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cbd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cbd6:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010cbd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cbdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cbe3:	74 1c                	je     c010cc01 <printnum+0x58>
c010cbe5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbe8:	ba 00 00 00 00       	mov    $0x0,%edx
c010cbed:	f7 75 e4             	divl   -0x1c(%ebp)
c010cbf0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010cbf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbf6:	ba 00 00 00 00       	mov    $0x0,%edx
c010cbfb:	f7 75 e4             	divl   -0x1c(%ebp)
c010cbfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cc01:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cc04:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cc07:	f7 75 e4             	divl   -0x1c(%ebp)
c010cc0a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cc0d:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010cc10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cc13:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cc16:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cc19:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cc1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cc1f:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010cc22:	8b 45 18             	mov    0x18(%ebp),%eax
c010cc25:	ba 00 00 00 00       	mov    $0x0,%edx
c010cc2a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cc2d:	77 56                	ja     c010cc85 <printnum+0xdc>
c010cc2f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cc32:	72 05                	jb     c010cc39 <printnum+0x90>
c010cc34:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010cc37:	77 4c                	ja     c010cc85 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010cc39:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010cc3c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cc3f:	8b 45 20             	mov    0x20(%ebp),%eax
c010cc42:	89 44 24 18          	mov    %eax,0x18(%esp)
c010cc46:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cc4a:	8b 45 18             	mov    0x18(%ebp),%eax
c010cc4d:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cc51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc54:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc57:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc5b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cc5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc62:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc66:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc69:	89 04 24             	mov    %eax,(%esp)
c010cc6c:	e8 38 ff ff ff       	call   c010cba9 <printnum>
c010cc71:	eb 1c                	jmp    c010cc8f <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010cc73:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc76:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc7a:	8b 45 20             	mov    0x20(%ebp),%eax
c010cc7d:	89 04 24             	mov    %eax,(%esp)
c010cc80:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc83:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010cc85:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cc89:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cc8d:	7f e4                	jg     c010cc73 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cc8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cc92:	05 04 04 11 c0       	add    $0xc0110404,%eax
c010cc97:	0f b6 00             	movzbl (%eax),%eax
c010cc9a:	0f be c0             	movsbl %al,%eax
c010cc9d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cca0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cca4:	89 04 24             	mov    %eax,(%esp)
c010cca7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccaa:	ff d0                	call   *%eax
}
c010ccac:	c9                   	leave  
c010ccad:	c3                   	ret    

c010ccae <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010ccae:	55                   	push   %ebp
c010ccaf:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010ccb1:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010ccb5:	7e 14                	jle    c010cccb <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010ccb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccba:	8b 00                	mov    (%eax),%eax
c010ccbc:	8d 48 08             	lea    0x8(%eax),%ecx
c010ccbf:	8b 55 08             	mov    0x8(%ebp),%edx
c010ccc2:	89 0a                	mov    %ecx,(%edx)
c010ccc4:	8b 50 04             	mov    0x4(%eax),%edx
c010ccc7:	8b 00                	mov    (%eax),%eax
c010ccc9:	eb 30                	jmp    c010ccfb <getuint+0x4d>
    }
    else if (lflag) {
c010cccb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cccf:	74 16                	je     c010cce7 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010ccd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccd4:	8b 00                	mov    (%eax),%eax
c010ccd6:	8d 48 04             	lea    0x4(%eax),%ecx
c010ccd9:	8b 55 08             	mov    0x8(%ebp),%edx
c010ccdc:	89 0a                	mov    %ecx,(%edx)
c010ccde:	8b 00                	mov    (%eax),%eax
c010cce0:	ba 00 00 00 00       	mov    $0x0,%edx
c010cce5:	eb 14                	jmp    c010ccfb <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010cce7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccea:	8b 00                	mov    (%eax),%eax
c010ccec:	8d 48 04             	lea    0x4(%eax),%ecx
c010ccef:	8b 55 08             	mov    0x8(%ebp),%edx
c010ccf2:	89 0a                	mov    %ecx,(%edx)
c010ccf4:	8b 00                	mov    (%eax),%eax
c010ccf6:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010ccfb:	5d                   	pop    %ebp
c010ccfc:	c3                   	ret    

c010ccfd <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010ccfd:	55                   	push   %ebp
c010ccfe:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cd00:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cd04:	7e 14                	jle    c010cd1a <getint+0x1d>
        return va_arg(*ap, long long);
c010cd06:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd09:	8b 00                	mov    (%eax),%eax
c010cd0b:	8d 48 08             	lea    0x8(%eax),%ecx
c010cd0e:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd11:	89 0a                	mov    %ecx,(%edx)
c010cd13:	8b 50 04             	mov    0x4(%eax),%edx
c010cd16:	8b 00                	mov    (%eax),%eax
c010cd18:	eb 28                	jmp    c010cd42 <getint+0x45>
    }
    else if (lflag) {
c010cd1a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cd1e:	74 12                	je     c010cd32 <getint+0x35>
        return va_arg(*ap, long);
c010cd20:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd23:	8b 00                	mov    (%eax),%eax
c010cd25:	8d 48 04             	lea    0x4(%eax),%ecx
c010cd28:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd2b:	89 0a                	mov    %ecx,(%edx)
c010cd2d:	8b 00                	mov    (%eax),%eax
c010cd2f:	99                   	cltd   
c010cd30:	eb 10                	jmp    c010cd42 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010cd32:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd35:	8b 00                	mov    (%eax),%eax
c010cd37:	8d 48 04             	lea    0x4(%eax),%ecx
c010cd3a:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd3d:	89 0a                	mov    %ecx,(%edx)
c010cd3f:	8b 00                	mov    (%eax),%eax
c010cd41:	99                   	cltd   
    }
}
c010cd42:	5d                   	pop    %ebp
c010cd43:	c3                   	ret    

c010cd44 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010cd44:	55                   	push   %ebp
c010cd45:	89 e5                	mov    %esp,%ebp
c010cd47:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010cd4a:	8d 45 14             	lea    0x14(%ebp),%eax
c010cd4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010cd50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd53:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd57:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd5a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd61:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd65:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd68:	89 04 24             	mov    %eax,(%esp)
c010cd6b:	e8 02 00 00 00       	call   c010cd72 <vprintfmt>
    va_end(ap);
}
c010cd70:	c9                   	leave  
c010cd71:	c3                   	ret    

c010cd72 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010cd72:	55                   	push   %ebp
c010cd73:	89 e5                	mov    %esp,%ebp
c010cd75:	56                   	push   %esi
c010cd76:	53                   	push   %ebx
c010cd77:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cd7a:	eb 18                	jmp    c010cd94 <vprintfmt+0x22>
            if (ch == '\0') {
c010cd7c:	85 db                	test   %ebx,%ebx
c010cd7e:	75 05                	jne    c010cd85 <vprintfmt+0x13>
                return;
c010cd80:	e9 d1 03 00 00       	jmp    c010d156 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010cd85:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd88:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd8c:	89 1c 24             	mov    %ebx,(%esp)
c010cd8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd92:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cd94:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd97:	8d 50 01             	lea    0x1(%eax),%edx
c010cd9a:	89 55 10             	mov    %edx,0x10(%ebp)
c010cd9d:	0f b6 00             	movzbl (%eax),%eax
c010cda0:	0f b6 d8             	movzbl %al,%ebx
c010cda3:	83 fb 25             	cmp    $0x25,%ebx
c010cda6:	75 d4                	jne    c010cd7c <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010cda8:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010cdac:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010cdb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cdb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010cdb9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010cdc0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cdc3:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010cdc6:	8b 45 10             	mov    0x10(%ebp),%eax
c010cdc9:	8d 50 01             	lea    0x1(%eax),%edx
c010cdcc:	89 55 10             	mov    %edx,0x10(%ebp)
c010cdcf:	0f b6 00             	movzbl (%eax),%eax
c010cdd2:	0f b6 d8             	movzbl %al,%ebx
c010cdd5:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010cdd8:	83 f8 55             	cmp    $0x55,%eax
c010cddb:	0f 87 44 03 00 00    	ja     c010d125 <vprintfmt+0x3b3>
c010cde1:	8b 04 85 28 04 11 c0 	mov    -0x3feefbd8(,%eax,4),%eax
c010cde8:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010cdea:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010cdee:	eb d6                	jmp    c010cdc6 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010cdf0:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010cdf4:	eb d0                	jmp    c010cdc6 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cdf6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010cdfd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ce00:	89 d0                	mov    %edx,%eax
c010ce02:	c1 e0 02             	shl    $0x2,%eax
c010ce05:	01 d0                	add    %edx,%eax
c010ce07:	01 c0                	add    %eax,%eax
c010ce09:	01 d8                	add    %ebx,%eax
c010ce0b:	83 e8 30             	sub    $0x30,%eax
c010ce0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010ce11:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce14:	0f b6 00             	movzbl (%eax),%eax
c010ce17:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010ce1a:	83 fb 2f             	cmp    $0x2f,%ebx
c010ce1d:	7e 0b                	jle    c010ce2a <vprintfmt+0xb8>
c010ce1f:	83 fb 39             	cmp    $0x39,%ebx
c010ce22:	7f 06                	jg     c010ce2a <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010ce24:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010ce28:	eb d3                	jmp    c010cdfd <vprintfmt+0x8b>
            goto process_precision;
c010ce2a:	eb 33                	jmp    c010ce5f <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010ce2c:	8b 45 14             	mov    0x14(%ebp),%eax
c010ce2f:	8d 50 04             	lea    0x4(%eax),%edx
c010ce32:	89 55 14             	mov    %edx,0x14(%ebp)
c010ce35:	8b 00                	mov    (%eax),%eax
c010ce37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010ce3a:	eb 23                	jmp    c010ce5f <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010ce3c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ce40:	79 0c                	jns    c010ce4e <vprintfmt+0xdc>
                width = 0;
c010ce42:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010ce49:	e9 78 ff ff ff       	jmp    c010cdc6 <vprintfmt+0x54>
c010ce4e:	e9 73 ff ff ff       	jmp    c010cdc6 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010ce53:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010ce5a:	e9 67 ff ff ff       	jmp    c010cdc6 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010ce5f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ce63:	79 12                	jns    c010ce77 <vprintfmt+0x105>
                width = precision, precision = -1;
c010ce65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ce68:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ce6b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010ce72:	e9 4f ff ff ff       	jmp    c010cdc6 <vprintfmt+0x54>
c010ce77:	e9 4a ff ff ff       	jmp    c010cdc6 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010ce7c:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010ce80:	e9 41 ff ff ff       	jmp    c010cdc6 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010ce85:	8b 45 14             	mov    0x14(%ebp),%eax
c010ce88:	8d 50 04             	lea    0x4(%eax),%edx
c010ce8b:	89 55 14             	mov    %edx,0x14(%ebp)
c010ce8e:	8b 00                	mov    (%eax),%eax
c010ce90:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ce93:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ce97:	89 04 24             	mov    %eax,(%esp)
c010ce9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce9d:	ff d0                	call   *%eax
            break;
c010ce9f:	e9 ac 02 00 00       	jmp    c010d150 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010cea4:	8b 45 14             	mov    0x14(%ebp),%eax
c010cea7:	8d 50 04             	lea    0x4(%eax),%edx
c010ceaa:	89 55 14             	mov    %edx,0x14(%ebp)
c010cead:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010ceaf:	85 db                	test   %ebx,%ebx
c010ceb1:	79 02                	jns    c010ceb5 <vprintfmt+0x143>
                err = -err;
c010ceb3:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010ceb5:	83 fb 18             	cmp    $0x18,%ebx
c010ceb8:	7f 0b                	jg     c010cec5 <vprintfmt+0x153>
c010ceba:	8b 34 9d a0 03 11 c0 	mov    -0x3feefc60(,%ebx,4),%esi
c010cec1:	85 f6                	test   %esi,%esi
c010cec3:	75 23                	jne    c010cee8 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010cec5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010cec9:	c7 44 24 08 15 04 11 	movl   $0xc0110415,0x8(%esp)
c010ced0:	c0 
c010ced1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ced4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ced8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cedb:	89 04 24             	mov    %eax,(%esp)
c010cede:	e8 61 fe ff ff       	call   c010cd44 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010cee3:	e9 68 02 00 00       	jmp    c010d150 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010cee8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010ceec:	c7 44 24 08 1e 04 11 	movl   $0xc011041e,0x8(%esp)
c010cef3:	c0 
c010cef4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cef7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cefb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cefe:	89 04 24             	mov    %eax,(%esp)
c010cf01:	e8 3e fe ff ff       	call   c010cd44 <printfmt>
            }
            break;
c010cf06:	e9 45 02 00 00       	jmp    c010d150 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010cf0b:	8b 45 14             	mov    0x14(%ebp),%eax
c010cf0e:	8d 50 04             	lea    0x4(%eax),%edx
c010cf11:	89 55 14             	mov    %edx,0x14(%ebp)
c010cf14:	8b 30                	mov    (%eax),%esi
c010cf16:	85 f6                	test   %esi,%esi
c010cf18:	75 05                	jne    c010cf1f <vprintfmt+0x1ad>
                p = "(null)";
c010cf1a:	be 21 04 11 c0       	mov    $0xc0110421,%esi
            }
            if (width > 0 && padc != '-') {
c010cf1f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cf23:	7e 3e                	jle    c010cf63 <vprintfmt+0x1f1>
c010cf25:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010cf29:	74 38                	je     c010cf63 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010cf2b:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010cf2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cf31:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf35:	89 34 24             	mov    %esi,(%esp)
c010cf38:	e8 ed 03 00 00       	call   c010d32a <strnlen>
c010cf3d:	29 c3                	sub    %eax,%ebx
c010cf3f:	89 d8                	mov    %ebx,%eax
c010cf41:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cf44:	eb 17                	jmp    c010cf5d <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010cf46:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010cf4a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cf4d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf51:	89 04 24             	mov    %eax,(%esp)
c010cf54:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf57:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010cf59:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cf5d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cf61:	7f e3                	jg     c010cf46 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cf63:	eb 38                	jmp    c010cf9d <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010cf65:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010cf69:	74 1f                	je     c010cf8a <vprintfmt+0x218>
c010cf6b:	83 fb 1f             	cmp    $0x1f,%ebx
c010cf6e:	7e 05                	jle    c010cf75 <vprintfmt+0x203>
c010cf70:	83 fb 7e             	cmp    $0x7e,%ebx
c010cf73:	7e 15                	jle    c010cf8a <vprintfmt+0x218>
                    putch('?', putdat);
c010cf75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf78:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf7c:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010cf83:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf86:	ff d0                	call   *%eax
c010cf88:	eb 0f                	jmp    c010cf99 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010cf8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf91:	89 1c 24             	mov    %ebx,(%esp)
c010cf94:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf97:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cf99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cf9d:	89 f0                	mov    %esi,%eax
c010cf9f:	8d 70 01             	lea    0x1(%eax),%esi
c010cfa2:	0f b6 00             	movzbl (%eax),%eax
c010cfa5:	0f be d8             	movsbl %al,%ebx
c010cfa8:	85 db                	test   %ebx,%ebx
c010cfaa:	74 10                	je     c010cfbc <vprintfmt+0x24a>
c010cfac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cfb0:	78 b3                	js     c010cf65 <vprintfmt+0x1f3>
c010cfb2:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010cfb6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cfba:	79 a9                	jns    c010cf65 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cfbc:	eb 17                	jmp    c010cfd5 <vprintfmt+0x263>
                putch(' ', putdat);
c010cfbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfc1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfc5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010cfcc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfcf:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cfd1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cfd5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cfd9:	7f e3                	jg     c010cfbe <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010cfdb:	e9 70 01 00 00       	jmp    c010d150 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010cfe0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cfe3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfe7:	8d 45 14             	lea    0x14(%ebp),%eax
c010cfea:	89 04 24             	mov    %eax,(%esp)
c010cfed:	e8 0b fd ff ff       	call   c010ccfd <getint>
c010cff2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cff5:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010cff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cffe:	85 d2                	test   %edx,%edx
c010d000:	79 26                	jns    c010d028 <vprintfmt+0x2b6>
                putch('-', putdat);
c010d002:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d005:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d009:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010d010:	8b 45 08             	mov    0x8(%ebp),%eax
c010d013:	ff d0                	call   *%eax
                num = -(long long)num;
c010d015:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d018:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d01b:	f7 d8                	neg    %eax
c010d01d:	83 d2 00             	adc    $0x0,%edx
c010d020:	f7 da                	neg    %edx
c010d022:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d025:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010d028:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d02f:	e9 a8 00 00 00       	jmp    c010d0dc <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010d034:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d037:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d03b:	8d 45 14             	lea    0x14(%ebp),%eax
c010d03e:	89 04 24             	mov    %eax,(%esp)
c010d041:	e8 68 fc ff ff       	call   c010ccae <getuint>
c010d046:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d049:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010d04c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d053:	e9 84 00 00 00       	jmp    c010d0dc <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010d058:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d05b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d05f:	8d 45 14             	lea    0x14(%ebp),%eax
c010d062:	89 04 24             	mov    %eax,(%esp)
c010d065:	e8 44 fc ff ff       	call   c010ccae <getuint>
c010d06a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d06d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010d070:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010d077:	eb 63                	jmp    c010d0dc <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010d079:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d07c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d080:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010d087:	8b 45 08             	mov    0x8(%ebp),%eax
c010d08a:	ff d0                	call   *%eax
            putch('x', putdat);
c010d08c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d08f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d093:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010d09a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d09d:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010d09f:	8b 45 14             	mov    0x14(%ebp),%eax
c010d0a2:	8d 50 04             	lea    0x4(%eax),%edx
c010d0a5:	89 55 14             	mov    %edx,0x14(%ebp)
c010d0a8:	8b 00                	mov    (%eax),%eax
c010d0aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d0ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010d0b4:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010d0bb:	eb 1f                	jmp    c010d0dc <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010d0bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d0c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0c4:	8d 45 14             	lea    0x14(%ebp),%eax
c010d0c7:	89 04 24             	mov    %eax,(%esp)
c010d0ca:	e8 df fb ff ff       	call   c010ccae <getuint>
c010d0cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d0d2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010d0d5:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010d0dc:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010d0e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d0e3:	89 54 24 18          	mov    %edx,0x18(%esp)
c010d0e7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d0ea:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d0ee:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d0f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d0f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d0fc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d100:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d103:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d107:	8b 45 08             	mov    0x8(%ebp),%eax
c010d10a:	89 04 24             	mov    %eax,(%esp)
c010d10d:	e8 97 fa ff ff       	call   c010cba9 <printnum>
            break;
c010d112:	eb 3c                	jmp    c010d150 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d114:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d117:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d11b:	89 1c 24             	mov    %ebx,(%esp)
c010d11e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d121:	ff d0                	call   *%eax
            break;
c010d123:	eb 2b                	jmp    c010d150 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d125:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d128:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d12c:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d133:	8b 45 08             	mov    0x8(%ebp),%eax
c010d136:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d138:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d13c:	eb 04                	jmp    c010d142 <vprintfmt+0x3d0>
c010d13e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d142:	8b 45 10             	mov    0x10(%ebp),%eax
c010d145:	83 e8 01             	sub    $0x1,%eax
c010d148:	0f b6 00             	movzbl (%eax),%eax
c010d14b:	3c 25                	cmp    $0x25,%al
c010d14d:	75 ef                	jne    c010d13e <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010d14f:	90                   	nop
        }
    }
c010d150:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d151:	e9 3e fc ff ff       	jmp    c010cd94 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010d156:	83 c4 40             	add    $0x40,%esp
c010d159:	5b                   	pop    %ebx
c010d15a:	5e                   	pop    %esi
c010d15b:	5d                   	pop    %ebp
c010d15c:	c3                   	ret    

c010d15d <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d15d:	55                   	push   %ebp
c010d15e:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d160:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d163:	8b 40 08             	mov    0x8(%eax),%eax
c010d166:	8d 50 01             	lea    0x1(%eax),%edx
c010d169:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d16c:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d16f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d172:	8b 10                	mov    (%eax),%edx
c010d174:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d177:	8b 40 04             	mov    0x4(%eax),%eax
c010d17a:	39 c2                	cmp    %eax,%edx
c010d17c:	73 12                	jae    c010d190 <sprintputch+0x33>
        *b->buf ++ = ch;
c010d17e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d181:	8b 00                	mov    (%eax),%eax
c010d183:	8d 48 01             	lea    0x1(%eax),%ecx
c010d186:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d189:	89 0a                	mov    %ecx,(%edx)
c010d18b:	8b 55 08             	mov    0x8(%ebp),%edx
c010d18e:	88 10                	mov    %dl,(%eax)
    }
}
c010d190:	5d                   	pop    %ebp
c010d191:	c3                   	ret    

c010d192 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d192:	55                   	push   %ebp
c010d193:	89 e5                	mov    %esp,%ebp
c010d195:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d198:	8d 45 14             	lea    0x14(%ebp),%eax
c010d19b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010d19e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d1a5:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d1ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1b6:	89 04 24             	mov    %eax,(%esp)
c010d1b9:	e8 08 00 00 00       	call   c010d1c6 <vsnprintf>
c010d1be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d1c4:	c9                   	leave  
c010d1c5:	c3                   	ret    

c010d1c6 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d1c6:	55                   	push   %ebp
c010d1c7:	89 e5                	mov    %esp,%ebp
c010d1c9:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d1cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d1d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1d5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d1d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1db:	01 d0                	add    %edx,%eax
c010d1dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d1e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d1eb:	74 0a                	je     c010d1f7 <vsnprintf+0x31>
c010d1ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d1f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1f3:	39 c2                	cmp    %eax,%edx
c010d1f5:	76 07                	jbe    c010d1fe <vsnprintf+0x38>
        return -E_INVAL;
c010d1f7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d1fc:	eb 2a                	jmp    c010d228 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d1fe:	8b 45 14             	mov    0x14(%ebp),%eax
c010d201:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d205:	8b 45 10             	mov    0x10(%ebp),%eax
c010d208:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d20c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d20f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d213:	c7 04 24 5d d1 10 c0 	movl   $0xc010d15d,(%esp)
c010d21a:	e8 53 fb ff ff       	call   c010cd72 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d21f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d222:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d225:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d228:	c9                   	leave  
c010d229:	c3                   	ret    

c010d22a <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d22a:	55                   	push   %ebp
c010d22b:	89 e5                	mov    %esp,%ebp
c010d22d:	57                   	push   %edi
c010d22e:	56                   	push   %esi
c010d22f:	53                   	push   %ebx
c010d230:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d233:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d238:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d23e:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d244:	6b f0 05             	imul   $0x5,%eax,%esi
c010d247:	01 f7                	add    %esi,%edi
c010d249:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010d24e:	f7 e6                	mul    %esi
c010d250:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010d253:	89 f2                	mov    %esi,%edx
c010d255:	83 c0 0b             	add    $0xb,%eax
c010d258:	83 d2 00             	adc    $0x0,%edx
c010d25b:	89 c7                	mov    %eax,%edi
c010d25d:	83 e7 ff             	and    $0xffffffff,%edi
c010d260:	89 f9                	mov    %edi,%ecx
c010d262:	0f b7 da             	movzwl %dx,%ebx
c010d265:	89 0d c0 1e 13 c0    	mov    %ecx,0xc0131ec0
c010d26b:	89 1d c4 1e 13 c0    	mov    %ebx,0xc0131ec4
    unsigned long long result = (next >> 12);
c010d271:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d276:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d27c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d280:	c1 ea 0c             	shr    $0xc,%edx
c010d283:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d286:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d289:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d290:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d293:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d296:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d299:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d29c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d29f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d2a2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d2a6:	74 1c                	je     c010d2c4 <rand+0x9a>
c010d2a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d2ab:	ba 00 00 00 00       	mov    $0x0,%edx
c010d2b0:	f7 75 dc             	divl   -0x24(%ebp)
c010d2b3:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d2b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d2b9:	ba 00 00 00 00       	mov    $0x0,%edx
c010d2be:	f7 75 dc             	divl   -0x24(%ebp)
c010d2c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d2c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d2c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d2ca:	f7 75 dc             	divl   -0x24(%ebp)
c010d2cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d2d0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d2d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d2d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d2d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d2dc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d2df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d2e2:	83 c4 24             	add    $0x24,%esp
c010d2e5:	5b                   	pop    %ebx
c010d2e6:	5e                   	pop    %esi
c010d2e7:	5f                   	pop    %edi
c010d2e8:	5d                   	pop    %ebp
c010d2e9:	c3                   	ret    

c010d2ea <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d2ea:	55                   	push   %ebp
c010d2eb:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d2ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2f0:	ba 00 00 00 00       	mov    $0x0,%edx
c010d2f5:	a3 c0 1e 13 c0       	mov    %eax,0xc0131ec0
c010d2fa:	89 15 c4 1e 13 c0    	mov    %edx,0xc0131ec4
}
c010d300:	5d                   	pop    %ebp
c010d301:	c3                   	ret    

c010d302 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d302:	55                   	push   %ebp
c010d303:	89 e5                	mov    %esp,%ebp
c010d305:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d308:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d30f:	eb 04                	jmp    c010d315 <strlen+0x13>
        cnt ++;
c010d311:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d315:	8b 45 08             	mov    0x8(%ebp),%eax
c010d318:	8d 50 01             	lea    0x1(%eax),%edx
c010d31b:	89 55 08             	mov    %edx,0x8(%ebp)
c010d31e:	0f b6 00             	movzbl (%eax),%eax
c010d321:	84 c0                	test   %al,%al
c010d323:	75 ec                	jne    c010d311 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d325:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d328:	c9                   	leave  
c010d329:	c3                   	ret    

c010d32a <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d32a:	55                   	push   %ebp
c010d32b:	89 e5                	mov    %esp,%ebp
c010d32d:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d330:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d337:	eb 04                	jmp    c010d33d <strnlen+0x13>
        cnt ++;
c010d339:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d33d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d340:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d343:	73 10                	jae    c010d355 <strnlen+0x2b>
c010d345:	8b 45 08             	mov    0x8(%ebp),%eax
c010d348:	8d 50 01             	lea    0x1(%eax),%edx
c010d34b:	89 55 08             	mov    %edx,0x8(%ebp)
c010d34e:	0f b6 00             	movzbl (%eax),%eax
c010d351:	84 c0                	test   %al,%al
c010d353:	75 e4                	jne    c010d339 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d355:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d358:	c9                   	leave  
c010d359:	c3                   	ret    

c010d35a <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d35a:	55                   	push   %ebp
c010d35b:	89 e5                	mov    %esp,%ebp
c010d35d:	57                   	push   %edi
c010d35e:	56                   	push   %esi
c010d35f:	83 ec 20             	sub    $0x20,%esp
c010d362:	8b 45 08             	mov    0x8(%ebp),%eax
c010d365:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d368:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d36b:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d36e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d371:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d374:	89 d1                	mov    %edx,%ecx
c010d376:	89 c2                	mov    %eax,%edx
c010d378:	89 ce                	mov    %ecx,%esi
c010d37a:	89 d7                	mov    %edx,%edi
c010d37c:	ac                   	lods   %ds:(%esi),%al
c010d37d:	aa                   	stos   %al,%es:(%edi)
c010d37e:	84 c0                	test   %al,%al
c010d380:	75 fa                	jne    c010d37c <strcpy+0x22>
c010d382:	89 fa                	mov    %edi,%edx
c010d384:	89 f1                	mov    %esi,%ecx
c010d386:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d389:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d38c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d38f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d392:	83 c4 20             	add    $0x20,%esp
c010d395:	5e                   	pop    %esi
c010d396:	5f                   	pop    %edi
c010d397:	5d                   	pop    %ebp
c010d398:	c3                   	ret    

c010d399 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d399:	55                   	push   %ebp
c010d39a:	89 e5                	mov    %esp,%ebp
c010d39c:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d39f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d3a5:	eb 21                	jmp    c010d3c8 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d3a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3aa:	0f b6 10             	movzbl (%eax),%edx
c010d3ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d3b0:	88 10                	mov    %dl,(%eax)
c010d3b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d3b5:	0f b6 00             	movzbl (%eax),%eax
c010d3b8:	84 c0                	test   %al,%al
c010d3ba:	74 04                	je     c010d3c0 <strncpy+0x27>
            src ++;
c010d3bc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d3c0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d3c4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d3c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d3cc:	75 d9                	jne    c010d3a7 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d3ce:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d3d1:	c9                   	leave  
c010d3d2:	c3                   	ret    

c010d3d3 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d3d3:	55                   	push   %ebp
c010d3d4:	89 e5                	mov    %esp,%ebp
c010d3d6:	57                   	push   %edi
c010d3d7:	56                   	push   %esi
c010d3d8:	83 ec 20             	sub    $0x20,%esp
c010d3db:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d3e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d3e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d3ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3ed:	89 d1                	mov    %edx,%ecx
c010d3ef:	89 c2                	mov    %eax,%edx
c010d3f1:	89 ce                	mov    %ecx,%esi
c010d3f3:	89 d7                	mov    %edx,%edi
c010d3f5:	ac                   	lods   %ds:(%esi),%al
c010d3f6:	ae                   	scas   %es:(%edi),%al
c010d3f7:	75 08                	jne    c010d401 <strcmp+0x2e>
c010d3f9:	84 c0                	test   %al,%al
c010d3fb:	75 f8                	jne    c010d3f5 <strcmp+0x22>
c010d3fd:	31 c0                	xor    %eax,%eax
c010d3ff:	eb 04                	jmp    c010d405 <strcmp+0x32>
c010d401:	19 c0                	sbb    %eax,%eax
c010d403:	0c 01                	or     $0x1,%al
c010d405:	89 fa                	mov    %edi,%edx
c010d407:	89 f1                	mov    %esi,%ecx
c010d409:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d40c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d40f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d412:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d415:	83 c4 20             	add    $0x20,%esp
c010d418:	5e                   	pop    %esi
c010d419:	5f                   	pop    %edi
c010d41a:	5d                   	pop    %ebp
c010d41b:	c3                   	ret    

c010d41c <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d41c:	55                   	push   %ebp
c010d41d:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d41f:	eb 0c                	jmp    c010d42d <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d421:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d425:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d429:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d42d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d431:	74 1a                	je     c010d44d <strncmp+0x31>
c010d433:	8b 45 08             	mov    0x8(%ebp),%eax
c010d436:	0f b6 00             	movzbl (%eax),%eax
c010d439:	84 c0                	test   %al,%al
c010d43b:	74 10                	je     c010d44d <strncmp+0x31>
c010d43d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d440:	0f b6 10             	movzbl (%eax),%edx
c010d443:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d446:	0f b6 00             	movzbl (%eax),%eax
c010d449:	38 c2                	cmp    %al,%dl
c010d44b:	74 d4                	je     c010d421 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d44d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d451:	74 18                	je     c010d46b <strncmp+0x4f>
c010d453:	8b 45 08             	mov    0x8(%ebp),%eax
c010d456:	0f b6 00             	movzbl (%eax),%eax
c010d459:	0f b6 d0             	movzbl %al,%edx
c010d45c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d45f:	0f b6 00             	movzbl (%eax),%eax
c010d462:	0f b6 c0             	movzbl %al,%eax
c010d465:	29 c2                	sub    %eax,%edx
c010d467:	89 d0                	mov    %edx,%eax
c010d469:	eb 05                	jmp    c010d470 <strncmp+0x54>
c010d46b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d470:	5d                   	pop    %ebp
c010d471:	c3                   	ret    

c010d472 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d472:	55                   	push   %ebp
c010d473:	89 e5                	mov    %esp,%ebp
c010d475:	83 ec 04             	sub    $0x4,%esp
c010d478:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d47b:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d47e:	eb 14                	jmp    c010d494 <strchr+0x22>
        if (*s == c) {
c010d480:	8b 45 08             	mov    0x8(%ebp),%eax
c010d483:	0f b6 00             	movzbl (%eax),%eax
c010d486:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d489:	75 05                	jne    c010d490 <strchr+0x1e>
            return (char *)s;
c010d48b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d48e:	eb 13                	jmp    c010d4a3 <strchr+0x31>
        }
        s ++;
c010d490:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d494:	8b 45 08             	mov    0x8(%ebp),%eax
c010d497:	0f b6 00             	movzbl (%eax),%eax
c010d49a:	84 c0                	test   %al,%al
c010d49c:	75 e2                	jne    c010d480 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d49e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d4a3:	c9                   	leave  
c010d4a4:	c3                   	ret    

c010d4a5 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d4a5:	55                   	push   %ebp
c010d4a6:	89 e5                	mov    %esp,%ebp
c010d4a8:	83 ec 04             	sub    $0x4,%esp
c010d4ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4ae:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d4b1:	eb 11                	jmp    c010d4c4 <strfind+0x1f>
        if (*s == c) {
c010d4b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4b6:	0f b6 00             	movzbl (%eax),%eax
c010d4b9:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d4bc:	75 02                	jne    c010d4c0 <strfind+0x1b>
            break;
c010d4be:	eb 0e                	jmp    c010d4ce <strfind+0x29>
        }
        s ++;
c010d4c0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d4c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4c7:	0f b6 00             	movzbl (%eax),%eax
c010d4ca:	84 c0                	test   %al,%al
c010d4cc:	75 e5                	jne    c010d4b3 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010d4ce:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d4d1:	c9                   	leave  
c010d4d2:	c3                   	ret    

c010d4d3 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d4d3:	55                   	push   %ebp
c010d4d4:	89 e5                	mov    %esp,%ebp
c010d4d6:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d4d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d4e0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d4e7:	eb 04                	jmp    c010d4ed <strtol+0x1a>
        s ++;
c010d4e9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d4ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4f0:	0f b6 00             	movzbl (%eax),%eax
c010d4f3:	3c 20                	cmp    $0x20,%al
c010d4f5:	74 f2                	je     c010d4e9 <strtol+0x16>
c010d4f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4fa:	0f b6 00             	movzbl (%eax),%eax
c010d4fd:	3c 09                	cmp    $0x9,%al
c010d4ff:	74 e8                	je     c010d4e9 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d501:	8b 45 08             	mov    0x8(%ebp),%eax
c010d504:	0f b6 00             	movzbl (%eax),%eax
c010d507:	3c 2b                	cmp    $0x2b,%al
c010d509:	75 06                	jne    c010d511 <strtol+0x3e>
        s ++;
c010d50b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d50f:	eb 15                	jmp    c010d526 <strtol+0x53>
    }
    else if (*s == '-') {
c010d511:	8b 45 08             	mov    0x8(%ebp),%eax
c010d514:	0f b6 00             	movzbl (%eax),%eax
c010d517:	3c 2d                	cmp    $0x2d,%al
c010d519:	75 0b                	jne    c010d526 <strtol+0x53>
        s ++, neg = 1;
c010d51b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d51f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d526:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d52a:	74 06                	je     c010d532 <strtol+0x5f>
c010d52c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d530:	75 24                	jne    c010d556 <strtol+0x83>
c010d532:	8b 45 08             	mov    0x8(%ebp),%eax
c010d535:	0f b6 00             	movzbl (%eax),%eax
c010d538:	3c 30                	cmp    $0x30,%al
c010d53a:	75 1a                	jne    c010d556 <strtol+0x83>
c010d53c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d53f:	83 c0 01             	add    $0x1,%eax
c010d542:	0f b6 00             	movzbl (%eax),%eax
c010d545:	3c 78                	cmp    $0x78,%al
c010d547:	75 0d                	jne    c010d556 <strtol+0x83>
        s += 2, base = 16;
c010d549:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d54d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d554:	eb 2a                	jmp    c010d580 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d556:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d55a:	75 17                	jne    c010d573 <strtol+0xa0>
c010d55c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d55f:	0f b6 00             	movzbl (%eax),%eax
c010d562:	3c 30                	cmp    $0x30,%al
c010d564:	75 0d                	jne    c010d573 <strtol+0xa0>
        s ++, base = 8;
c010d566:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d56a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d571:	eb 0d                	jmp    c010d580 <strtol+0xad>
    }
    else if (base == 0) {
c010d573:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d577:	75 07                	jne    c010d580 <strtol+0xad>
        base = 10;
c010d579:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d580:	8b 45 08             	mov    0x8(%ebp),%eax
c010d583:	0f b6 00             	movzbl (%eax),%eax
c010d586:	3c 2f                	cmp    $0x2f,%al
c010d588:	7e 1b                	jle    c010d5a5 <strtol+0xd2>
c010d58a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d58d:	0f b6 00             	movzbl (%eax),%eax
c010d590:	3c 39                	cmp    $0x39,%al
c010d592:	7f 11                	jg     c010d5a5 <strtol+0xd2>
            dig = *s - '0';
c010d594:	8b 45 08             	mov    0x8(%ebp),%eax
c010d597:	0f b6 00             	movzbl (%eax),%eax
c010d59a:	0f be c0             	movsbl %al,%eax
c010d59d:	83 e8 30             	sub    $0x30,%eax
c010d5a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d5a3:	eb 48                	jmp    c010d5ed <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d5a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5a8:	0f b6 00             	movzbl (%eax),%eax
c010d5ab:	3c 60                	cmp    $0x60,%al
c010d5ad:	7e 1b                	jle    c010d5ca <strtol+0xf7>
c010d5af:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5b2:	0f b6 00             	movzbl (%eax),%eax
c010d5b5:	3c 7a                	cmp    $0x7a,%al
c010d5b7:	7f 11                	jg     c010d5ca <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d5b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5bc:	0f b6 00             	movzbl (%eax),%eax
c010d5bf:	0f be c0             	movsbl %al,%eax
c010d5c2:	83 e8 57             	sub    $0x57,%eax
c010d5c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d5c8:	eb 23                	jmp    c010d5ed <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d5ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5cd:	0f b6 00             	movzbl (%eax),%eax
c010d5d0:	3c 40                	cmp    $0x40,%al
c010d5d2:	7e 3d                	jle    c010d611 <strtol+0x13e>
c010d5d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5d7:	0f b6 00             	movzbl (%eax),%eax
c010d5da:	3c 5a                	cmp    $0x5a,%al
c010d5dc:	7f 33                	jg     c010d611 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d5de:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5e1:	0f b6 00             	movzbl (%eax),%eax
c010d5e4:	0f be c0             	movsbl %al,%eax
c010d5e7:	83 e8 37             	sub    $0x37,%eax
c010d5ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d5ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5f0:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d5f3:	7c 02                	jl     c010d5f7 <strtol+0x124>
            break;
c010d5f5:	eb 1a                	jmp    c010d611 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d5f7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d5fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d5fe:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d602:	89 c2                	mov    %eax,%edx
c010d604:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d607:	01 d0                	add    %edx,%eax
c010d609:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d60c:	e9 6f ff ff ff       	jmp    c010d580 <strtol+0xad>

    if (endptr) {
c010d611:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d615:	74 08                	je     c010d61f <strtol+0x14c>
        *endptr = (char *) s;
c010d617:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d61a:	8b 55 08             	mov    0x8(%ebp),%edx
c010d61d:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d61f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d623:	74 07                	je     c010d62c <strtol+0x159>
c010d625:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d628:	f7 d8                	neg    %eax
c010d62a:	eb 03                	jmp    c010d62f <strtol+0x15c>
c010d62c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d62f:	c9                   	leave  
c010d630:	c3                   	ret    

c010d631 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d631:	55                   	push   %ebp
c010d632:	89 e5                	mov    %esp,%ebp
c010d634:	57                   	push   %edi
c010d635:	83 ec 24             	sub    $0x24,%esp
c010d638:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d63b:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d63e:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d642:	8b 55 08             	mov    0x8(%ebp),%edx
c010d645:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d648:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d64b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d64e:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d651:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d654:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d658:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d65b:	89 d7                	mov    %edx,%edi
c010d65d:	f3 aa                	rep stos %al,%es:(%edi)
c010d65f:	89 fa                	mov    %edi,%edx
c010d661:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d664:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d667:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d66a:	83 c4 24             	add    $0x24,%esp
c010d66d:	5f                   	pop    %edi
c010d66e:	5d                   	pop    %ebp
c010d66f:	c3                   	ret    

c010d670 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d670:	55                   	push   %ebp
c010d671:	89 e5                	mov    %esp,%ebp
c010d673:	57                   	push   %edi
c010d674:	56                   	push   %esi
c010d675:	53                   	push   %ebx
c010d676:	83 ec 30             	sub    $0x30,%esp
c010d679:	8b 45 08             	mov    0x8(%ebp),%eax
c010d67c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d67f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d682:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d685:	8b 45 10             	mov    0x10(%ebp),%eax
c010d688:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d68b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d68e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d691:	73 42                	jae    c010d6d5 <memmove+0x65>
c010d693:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d696:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d699:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d69c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d69f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d6a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d6a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d6a8:	c1 e8 02             	shr    $0x2,%eax
c010d6ab:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d6ad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d6b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d6b3:	89 d7                	mov    %edx,%edi
c010d6b5:	89 c6                	mov    %eax,%esi
c010d6b7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d6b9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d6bc:	83 e1 03             	and    $0x3,%ecx
c010d6bf:	74 02                	je     c010d6c3 <memmove+0x53>
c010d6c1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d6c3:	89 f0                	mov    %esi,%eax
c010d6c5:	89 fa                	mov    %edi,%edx
c010d6c7:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d6ca:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d6cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d6d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d6d3:	eb 36                	jmp    c010d70b <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d6d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d6d8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d6db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6de:	01 c2                	add    %eax,%edx
c010d6e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d6e3:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010d6e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6e9:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d6ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d6ef:	89 c1                	mov    %eax,%ecx
c010d6f1:	89 d8                	mov    %ebx,%eax
c010d6f3:	89 d6                	mov    %edx,%esi
c010d6f5:	89 c7                	mov    %eax,%edi
c010d6f7:	fd                   	std    
c010d6f8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d6fa:	fc                   	cld    
c010d6fb:	89 f8                	mov    %edi,%eax
c010d6fd:	89 f2                	mov    %esi,%edx
c010d6ff:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d702:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010d705:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d708:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d70b:	83 c4 30             	add    $0x30,%esp
c010d70e:	5b                   	pop    %ebx
c010d70f:	5e                   	pop    %esi
c010d710:	5f                   	pop    %edi
c010d711:	5d                   	pop    %ebp
c010d712:	c3                   	ret    

c010d713 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d713:	55                   	push   %ebp
c010d714:	89 e5                	mov    %esp,%ebp
c010d716:	57                   	push   %edi
c010d717:	56                   	push   %esi
c010d718:	83 ec 20             	sub    $0x20,%esp
c010d71b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d71e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d721:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d724:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d727:	8b 45 10             	mov    0x10(%ebp),%eax
c010d72a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d72d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d730:	c1 e8 02             	shr    $0x2,%eax
c010d733:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d735:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d738:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d73b:	89 d7                	mov    %edx,%edi
c010d73d:	89 c6                	mov    %eax,%esi
c010d73f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d741:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d744:	83 e1 03             	and    $0x3,%ecx
c010d747:	74 02                	je     c010d74b <memcpy+0x38>
c010d749:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d74b:	89 f0                	mov    %esi,%eax
c010d74d:	89 fa                	mov    %edi,%edx
c010d74f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d752:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d755:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d758:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d75b:	83 c4 20             	add    $0x20,%esp
c010d75e:	5e                   	pop    %esi
c010d75f:	5f                   	pop    %edi
c010d760:	5d                   	pop    %ebp
c010d761:	c3                   	ret    

c010d762 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d762:	55                   	push   %ebp
c010d763:	89 e5                	mov    %esp,%ebp
c010d765:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d768:	8b 45 08             	mov    0x8(%ebp),%eax
c010d76b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d76e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d771:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d774:	eb 30                	jmp    c010d7a6 <memcmp+0x44>
        if (*s1 != *s2) {
c010d776:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d779:	0f b6 10             	movzbl (%eax),%edx
c010d77c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d77f:	0f b6 00             	movzbl (%eax),%eax
c010d782:	38 c2                	cmp    %al,%dl
c010d784:	74 18                	je     c010d79e <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d786:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d789:	0f b6 00             	movzbl (%eax),%eax
c010d78c:	0f b6 d0             	movzbl %al,%edx
c010d78f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d792:	0f b6 00             	movzbl (%eax),%eax
c010d795:	0f b6 c0             	movzbl %al,%eax
c010d798:	29 c2                	sub    %eax,%edx
c010d79a:	89 d0                	mov    %edx,%eax
c010d79c:	eb 1a                	jmp    c010d7b8 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010d79e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d7a2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d7a6:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7a9:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d7ac:	89 55 10             	mov    %edx,0x10(%ebp)
c010d7af:	85 c0                	test   %eax,%eax
c010d7b1:	75 c3                	jne    c010d776 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d7b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d7b8:	c9                   	leave  
c010d7b9:	c3                   	ret    

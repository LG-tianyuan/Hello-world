#include <defs.h>
#include <list.h>
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

#define USE_SKEW_HEAP 1

/* You should define the BigStride constant here*/
/* LAB6: YOUR CODE */

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int proc_fair_comp_f(void *a, void *b)
{
     struct proc_struct *p = le2proc(a, fair_run_pool);
     struct proc_struct *q = le2proc(b, fair_run_pool);
     int c = p->fair_run_time - q->fair_run_time;
     if (c > 0) return 1;
     else if (c == 0) return 0;
     else return -1;
}


static void fair_init(struct run_queue *rq) {
    rq->fair_run_pool = NULL;//进程池为空
    rq->proc_num = 0;//进程数初始化为0
}


static void fair_enqueue(struct run_queue *rq, struct proc_struct *proc) {
#if USE_SKEW_HEAP
    //将proc->fair_run_pool插入以rq->fair_run_pool为堆顶元素的堆中，返回插入后的队列
    rq->fair_run_pool = skew_heap_insert(rq->fair_run_pool, &(proc->fair_run_pool), proc_fair_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice)
        proc->time_slice = rq->max_time_slice;
    proc->rq = rq;		//更新进程的就绪队列
    rq->proc_num ++;	//维护就绪队列中进程的数量加一
}

static void fair_dequeue(struct run_queue *rq, struct proc_struct *proc) {
#if USE_SKEW_HEAP
     rq->fair_run_pool = skew_heap_remove(rq->fair_run_pool, &(proc->fair_run_pool), proc_fair_comp_f);
    //删除斜堆中的指定进程
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;//就绪队列中的进程总数减一
}

static struct proc_struct *fair_pick_next(struct run_queue *rq) {
#if USE_SKEW_HEAP
     if (rq->fair_run_pool == NULL) return NULL;
     struct proc_struct *p = le2proc(rq->fair_run_pool, fair_run_pool);//选择 fair_run_time 值最小的进程
#else
     list_entry_t *le = list_next(&(rq->run_list));

     if (le == &rq->run_list)
          return NULL;
     
     struct proc_struct *p = le2proc(le, run_link);
     le = list_next(le);
     while (le != &rq->run_list)
     {
          struct proc_struct *q = le2proc(le, run_link);
          if ((int32_t)(p->fair_run_time - q->fair_run_time) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     return p;
}

static void
fair_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
    if (proc->time_slice > 0) {			//到达时间片
        proc->time_slice --;			//执行进程的时间片 time_slice 减一
        proc->fair_run_time += proc->fair_priority;	//优先级系数：fair_priority，从 1 开始，数值越大，时间过得越快
    }
    if (proc->time_slice == 0) {		//时间片为 0，设置此进程成员变量 need_resched 标识为 1，进程需要调度
        proc->need_resched = 1;
    }
}

struct sched_class default_sched_class = {
     .name = "fair_scheduler",
     .init = fair_init,
     .enqueue = fair_enqueue,
     .dequeue = fair_dequeue,
     .pick_next = fair_pick_next,
     .proc_tick = fair_proc_tick,
};
